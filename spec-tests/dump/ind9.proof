=FunctionName: make_list
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph make_list.A2.B1.C1.D1.E2
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.make_list:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%10%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%10%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%10%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlheap.src.spec.make_list : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_sum)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%7%d => L3%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%10%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_prod)*((((ctor_sum*letin_def)*ctor_bv)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.make_list
=Loc 1 in src.spec.make_list.
REGMEM
spec-%var-arr-1
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=Loc 20 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 21 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 22 in src.spec.make_list.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
=Loc 23 in src.spec.make_list.
REGMEM
spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 24 in src.spec.make_list.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 25 in src.spec.make_list.
REGMEM
spec-%tmpvar-11.E0%0%d
1 : input.spec-%tmpvar-11.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 26 in src.spec.make_list.
REGMEM
spec-%tmpvar-12.E0%0%d
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 27 in src.spec.make_list.
REGMEM
spec-%tmpvar-7.E0%0%d
1 : input.spec-%tmpvar-7.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 28 in src.spec.make_list.
REGMEM
spec-%tmpvar-8.E0%0%d
1 : input.spec-%tmpvar-8.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 29 in src.spec.make_list.
REGMEM
spec-%var-l-0.L3%6%bbentry
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 30 in src.spec.make_list.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 31 in src.spec.make_list.
REGMEM
spec-%tmpvar-10.L3%6%bbentry
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 32 in src.spec.make_list.
REGMEM
spec-%tmpvar-9.L3%6%bbentry
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=Loc 33 in src.spec.make_list.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 34 in src.spec.make_list.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 35 in src.spec.make_list.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 36 in src.spec.make_list.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=Loc 37 in src.spec.make_list.
REGMEM
spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%tmpvar-4.L3%6%bbentry : BV:32
=Loc 38 in src.spec.make_list.
REGMEM
spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%var-arr_i-0.L3%6%bbentry : BV:32
=Loc 39 in src.spec.make_list.
REGMEM
spec-%var-new_l-0.L3%6%bbentry
1 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Locs end
=Liveness in src.spec.make_list
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
23, 24, 29, 
=live locs at L3%7%d
22, 23, 24, 29, 
=live locs at L3%8%bbentry
29, 
=live locs at L3%10%bbentry
22, 23, 24, 29, 
=live locs at E0%0%d
26, 

=Definedness in src.spec.make_list
=loc definedness at L0%0%d
1, 20, 21
=loc definedness at L3%6%bbentry
1, 20, 21, 23, 24, 29, 31, 32, 33
=loc definedness at L3%7%d
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at L3%8%bbentry
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at L3%10%bbentry
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at E0%0%d
1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33

=Branch affecting variable locs in src.spec.make_list
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
23, 24
=branch affecting variable locs at L3%7%d
22, 23, 24
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%10%bbentry
23, 24
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.make_list
=relevant memlabels
=function: make_list
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 23 {input.spec-%var-arr-0.L3%6%bbentry }
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 24 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 29 {input.spec-%var-l-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 31 {input.spec-%tmpvar-10.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 32 {input.spec-%tmpvar-9.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 33 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 22 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-11.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-12.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 27 {input.spec-%tmpvar-7.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 28 {input.spec-%tmpvar-8.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 30 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 24 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 29 {input.spec-%var-l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 33 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 34 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 35 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 36 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 37 {input.spec-%tmpvar-4.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 38 {input.spec-%var-arr_i-0.L3%6%bbentry }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 39 {input.spec-%var-new_l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%10%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%10%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.make_list
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 23
=loc_expr
140368 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 31
=loc_expr
140400 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 32
=loc_expr
140401 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 36
=loc_expr
140404 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.make_list
=loc 31 expr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 31 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140279 : unit : UNIT
140408 : Indxform7 : BV:32
140411 : Lambda14 : BV:32
140412 : lambda(140411, 140411) : FUNCTION[BV:32 -> BV:32]
140413 : Lambda15 : BV:32
140409 : sum(140276, 140279, 140408) : SUM[UNIT,BV:32]
140410 : prod(140276, 140409) : PROD[BV:32,SUM[UNIT,BV:32]]
140414 : lambda(140413, 140410) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140417 : ind(140276, 140408, 140412, 140414) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140418 : sum(140276, 140279, 140417) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140419 : sym_const(140418) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 32 expr
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=loc 32 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 36 expr
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=loc 36 spreled-expr
140298 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 1 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 20 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 22 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 26 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 27 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 30 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 31 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 35 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 36 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 37 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 39 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 31 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%10%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%10%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%10%bbentry=>L3%6%bbentry
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.make_list
=suffixpath_at_L0%0%d for src.spec.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.make_list
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.make_list
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.make_list
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%10%bbentry for src.spec.make_list
=suffixpath_at_L3%10%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%10%bbentry)))
=suffixpath_at_E0%0%d for src.spec.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.make_list:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal1 Lfor.body%1%fcallStart Lfor.body%1%fcallEnd Lfor.body%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%fcallStart
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
Lfor.body%1%intermediateVal1 => Lfor.body%2%d
Lfor.body%2%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-%arr
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal1
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%arr : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 26 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%arr : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlcall.dst.llvm.make_list.3 : memlabel-mem-
=memlabel_map.1 for call-context {*;make_list}
mlcall.dst.llvm.make_list.4 : memlabel-mem-
=memlabel_map.2 for call-context {*;make_list}
mlheap.dst.llvm.make_list : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;make_list}
mlvar.dst.llvm.make_list.0 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0
=memlabel_map.4 for call-context {*;make_list}
mlvar.dst.llvm.make_list.1 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=memlabel_map.5 for call-context {*;make_list}
mlvar.dst.llvm.make_list.2 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%arr : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !28)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !22)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !27*  br label %for.cond, !dbg !28))*  br label %for.cond, !dbg !28)*(  br label %for.cond, !dbg !28*  br label %for.cond, !dbg !28))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !29)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%fcallStart
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !31*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)*(  br i1 %cmp, label %for.body, label %for.end, !dbg !31*fcall_edge_start))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !31*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret %struct.list* %l.0, !dbg !46
tfg_edge_comment end

=Edge: Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.make_list.3 : MEMLABEL
3 : mlcall.dst.llvm.make_list.4 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.make_list.3 : MEMLABEL
3 : mlcall.dst.llvm.make_list.4 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i8* @malloc(i32 8), !dbg !32)
tfg_edge_comment end

=Edge: Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*  %call = call i8* @malloc(i32 8), !dbg !32)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal1 => Lfor.body%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(1, 4) : BV:32
6 : ite(3, 2, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 1, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 1, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 1, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : eq(4, 2) : BOOL
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc_ptr(1, 6) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : bvadd(7, 9) : BV:32
11 : bvule(7, 10) : BOOL
12 : or(5, 11) : BOOL
13 : or(3, 12) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : mlheap.dst.llvm.make_list : MEMLABEL
7 : region_agrees_with_memlabel(4, 1, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %call = call i8* @malloc(i32 8), !dbg !32
tfg_edge_comment end

=Edge: Lfor.body%2%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_list.1 : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : mlvar.dst.llvm.make_list.0 : MEMLABEL
12 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
13 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(13, 14) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(12, 16) : BV:32
18 : 4 { 0x4 +1.0e1025 } : INT
19 : 0 { 0x0 } : BOOL
20 : select(1, 2, 11, 17, 18, 19) : BV:32
21 : store(1, 2, 3, 10, 20, 18, 19) : ARRAY[BV:32 -> BV:8]
22 : mlvar.dst.llvm.make_list.2 : MEMLABEL
23 : bvadd(8, 14) : BV:32
24 : bvadd(4, 23) : BV:32
25 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
26 : store(21, 2, 22, 24, 25, 18, 19) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_list.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : and(22, 23) : BOOL
25 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
26 : 8 { 0x8 +1.95e129 } : BV:32
27 : bvmul(2, 26) : BV:32
28 : bvadd(2, 27) : BV:32
29 : bvadd(25, 28) : BV:32
30 : isgepoffset(29, 27) : BOOL
31 : bvslt(2, 2) : BOOL
32 : bvsign_ext(2, 4) : BV:64
33 : bvzero_ext(26, 4) : BV:64
34 : bvmul(32, 33) : BV:64
35 : bvextract(34, 9, 4) : BV:32
36 : eq(35, 11) : BOOL
37 : eq(35, 2) : BOOL
38 : ite(31, 36, 37) : BOOL
39 : 8 { 0x8 +1.0e1025 } : INT
40 : isindexforsize(38, 39) : BOOL
41 : and(30, 40) : BOOL
42 : bvadd(28, 2) : BV:32
43 : bvadd(25, 42) : BV:32
44 : isgepoffset(43, 2) : BOOL
45 : and(41, 44) : BOOL
46 : and(24, 45) : BOOL
47 : islangaligned(43, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvadd(28, 6) : BV:32
50 : bvadd(25, 49) : BV:32
51 : isgepoffset(50, 6) : BOOL
52 : and(41, 51) : BOOL
53 : and(48, 52) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((((  %0 = bitcast i8* %call to %struct.list*, !dbg !32*  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36)*(  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36*  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36))*(  %1 = load i32, i32* %arrayidx, align 4, !dbg !36*  %1 = load i32, i32* %arrayidx, align 4, !dbg !36))*((  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37)*(  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37)))*  store i32 %1, i32* %val, align 4, !dbg !38)*((  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39)*(  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39)))*(((((  store %struct.list* %l.0, %struct.list** %next, align 4, !dbg !40*  br label %for.inc, !dbg !41)*  br label %for.inc, !dbg !41)*  br label %for.inc, !dbg !41)*(((((  %inc = add i32 %i.0, 1, !dbg !42*  br label %for.cond, !dbg !43, !llvm.loop !44)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !22)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !27*  br label %for.cond, !dbg !43, !llvm.loop !44))*  br label %for.cond, !dbg !43, !llvm.loop !44)*(  br label %for.cond, !dbg !43, !llvm.loop !44*  br label %for.cond, !dbg !43, !llvm.loop !44)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%arr : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.make_list
=Loc 100006 in dst.llvm.make_list.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100008 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr
1 : input.dst.llvm-%arr : BV:32
=Loc 100031 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100040 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100041 in dst.llvm.make_list.
REGMEM
dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=Loc 100042 in dst.llvm.make_list.
REGMEM
dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=Loc 100044 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100045 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100046 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100047 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100048 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100049 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100050 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100051 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=Loc 100052 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%1%fcallEnd
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=Loc 100054 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=Loc 100055 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=Loc 100056 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100057 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100058 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100059 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=Loc 100060 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Loc 100061 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100062 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=Loc 100064 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=Loc 100066 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=Loc 100067 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100068 in dst.llvm.make_list.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100069 in dst.llvm.make_list.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100070 in dst.llvm.make_list.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100071 in dst.llvm.make_list.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100072 in dst.llvm.make_list.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100073 in dst.llvm.make_list.
REGMEM
dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100075 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100076 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100077 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.make_list.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100084 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100085 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100086 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100087 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100088 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100089 in dst.llvm.make_list.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100090 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100091 in dst.llvm.make_list.
REGMEM
dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=Loc 100092 in dst.llvm.make_list.
REGMEM
dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=Loc 100093 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=Loc 100094 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100095 in dst.llvm.make_list.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Loc 100096 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100097 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100098 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100099 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100100 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100101 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100102 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100103 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100104 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100105 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100106 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100107 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100108 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100109 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100110 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100111 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100112 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100113 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100114 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100115 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100116 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Locs end
=Liveness in dst.llvm.make_list
=live locs at L0%0%d
100006, 100008, 100040, 100045, 100046, 100047, 100048, 100049, 
=live locs at Lfor.body%1%intermediateVal1
100052, 100053, 100056, 100060, 100064, 100094, 100097, 100098, 100099, 100100, 100101, 
=live locs at Lfor.body%1%fcallStart
100052, 100056, 100060, 100064, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.body%1%fcallEnd
100052, 100053, 100056, 100060, 100064, 100094, 100097, 100098, 100099, 100100, 100101, 
=live locs at Lfor.body%2%d
100051, 100054, 100055, 100059, 100063, 100093, 100111, 100112, 100113, 100114, 100115, 
=live locs at Lfor.cond%1%bbentry
100052, 100056, 100060[f], 100064, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.cond%2%d
100052, 100056, 100060[f], 100064, 100070, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.end%1%d
100060[f], 100104, 
=live locs at E0%0%d
100060[f], 100104, 

=Definedness in dst.llvm.make_list
=loc definedness at L0%0%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050
=loc definedness at Lfor.body%1%intermediateVal1
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100053, 100056, 100058, 100060, 100062, 100064, 100065, 100070, 100071, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%1%fcallStart
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%1%fcallEnd
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100053, 100056, 100058, 100060, 100062, 100064, 100065, 100070, 100071, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%2%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066, 100070, 100071, 100093, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109, 100110, 100111, 100112, 100113, 100114, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.cond%2%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.end%1%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at E0%0%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100067, 100068, 100069, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109

=Branch affecting variable locs in dst.llvm.make_list
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%intermediateVal1
100056, 100064
=branch affecting variable locs at Lfor.body%1%fcallStart
100056, 100064
=branch affecting variable locs at Lfor.body%1%fcallEnd
100056, 100064
=branch affecting variable locs at Lfor.body%2%d
100055, 100063
=branch affecting variable locs at Lfor.cond%1%bbentry
100056, 100064
=branch affecting variable locs at Lfor.cond%2%d
100056, 100064, 100070
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.make_list
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%arr.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100071 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100094 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100095 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100103 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100104 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100105 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100106 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100107 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100108 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100109 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100051 {input.dst.llvm-%arr.Lfor.body%2%d }
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100054 {input.dst.llvm-%call.Lfor.body%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100055 {input.dst.llvm-%i.0.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100057 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100059 {input.dst.llvm-%l.0.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100061 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100063 {input.dst.llvm-%n.Lfor.body%2%d }
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100066 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100093 {input.dst.local_alloc_count.Lfor.body%2%d }
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100110 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--arg.0) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100111 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100112 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100113 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100114 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100115 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100116 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--arg.1) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.1 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100053 {input.dst.llvm-%call.Lfor.body%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100065 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100096 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100097 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100098 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100099 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100100 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100101 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100102 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%arr.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100071 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100072 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%1.Lfor.cond%1%bbentry }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100074 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100075 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100076 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100083 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100084 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100085 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100086 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100087 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100088 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100089 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100090 {input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100091 {input.dst.llvm-%next.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100092 {input.dst.llvm-%val.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100094 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100103 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100104 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100105 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 5, 10, 11, 12) : BV:32
14 : store(1, 2, 3, 4, 13, 11, 12) : ARRAY[BV:32 -> BV:8]
15 : bvadd(7, 4) : BV:32
16 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
17 : store(14, 2, 3, 15, 16, 11, 12) : ARRAY[BV:32 -> BV:8]
18 : memmask(17, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100106 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100107 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100108 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100109 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100070 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100067 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100068 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100069 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal1:
vacuous mls at Lfor.body%1%fcallStart:
vacuous mls at Lfor.body%1%fcallEnd:
vacuous mls at Lfor.body%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal1:
non-vacuous mls at Lfor.body%1%fcallStart:
non-vacuous mls at Lfor.body%1%fcallEnd:
non-vacuous mls at Lfor.body%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.make_list
=avail_exprs begin
=loc 100006
=loc_expr
140456 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140457 : input.dst.llvm-%arr : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140574 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140575 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140577 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140579 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140581 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100040
=loc_expr
140465 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100041
=loc_expr
140460 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100042
=loc_expr
140461 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140760 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=avail_exprs_val.end
=loc 100063
=loc_expr
140771 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140736 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140806 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=avail_exprs_val.end
=loc 100067
=loc_expr
140807 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140808 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100069
=loc_expr
140809 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140810 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100073
=loc_expr
140811 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140812 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=avail_exprs_val.end
=loc 100075
=loc_expr
140813 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100076
=loc_expr
140814 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140815 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140816 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100079
=loc_expr
140817 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100080
=loc_expr
140818 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100081
=loc_expr
140819 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140820 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100083
=loc_expr
140821 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140822 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100085
=loc_expr
140823 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100086
=loc_expr
140824 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100087
=loc_expr
140825 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100088
=loc_expr
140826 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140827 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100090
=loc_expr
140828 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100091
=loc_expr
140829 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100092
=loc_expr
140830 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100095
=loc_expr
140831 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.make_list
=loc 100065 expr
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=loc 100065 spreled-expr
140474 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100069 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100069 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140427 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100080 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100080 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100081 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100081 spreled-expr
140427 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100083 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100083 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100086 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100086 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100087 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100087 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100095 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100095 spreled-expr
140466 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 100006 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100008 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100040 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100041 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100044 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100067 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100073 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100076 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100086 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100090 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100091 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100092 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100093 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100094 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100095 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100098 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100099 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100101 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100106 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100108 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100109 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100111 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100116 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100083 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100095 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%2%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%fcallStart
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%call.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 2, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%2%d=>Lfor.cond%1%bbentry
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 5, 10, 11, 12) : BV:32
14 : store(1, 2, 3, 4, 13, 11, 12) : ARRAY[BV:32 -> BV:8]
15 : bvadd(7, 4) : BV:32
16 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
17 : store(14, 2, 3, 15, 16, 11, 12) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%arr : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
7 : region_agrees_with_memlabel(4, 2, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(7, 6) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume# 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : 4 { 0x4 +1.0e1025 } : BV:64
7 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
8 : 32 { 0x20 +1.0e1025 } : INT
9 : bvsign_ext(7, 8) : BV:64
10 : bvmul(6, 9) : BV:64
11 : 63 { 0x3f +1.0e1025 } : INT
12 : bvextract(10, 11, 8) : BV:32
13 : bvslt(7, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : ite(13, 14, 3) : BV:32
16 : eq(12, 15) : BOOL
17 : 4 { 0x4 +1.0e1025 } : INT
18 : isindexforsize(16, 17) : BOOL
19 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 7) : BV:32
22 : bvadd(19, 21) : BV:32
23 : isgepoffset(22, 21) : BOOL
24 : and(18, 23) : BOOL
25 : islangaligned(22, 17) : BOOL
26 : and(24, 25, 4, 5) : BOOL
27 : islangaligned(2, 17) : BOOL
28 : bvadd(20, 2) : BV:32
29 : isgepoffset(28, 20) : BOOL
30 : and(5, 26, 27, 29) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 1
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
5
=String-contents:
=Nextpc-map:
C_NEXTPC1 : malloc
=Nextpc-map done
=suffixpaths for dst.llvm.make_list
=suffixpath_at_L0%0%d for dst.llvm.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal1 for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%intermediateVal1.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*(Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)))))
=suffixpath_at_Lfor.body%1%fcallStart for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallStart.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%fcallStart)))
=suffixpath_at_Lfor.body%1%fcallEnd for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*(Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd))))
=suffixpath_at_Lfor.body%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.body%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*((Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)*(Lfor.body%1%intermediateVal1=>Lfor.body%2%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.make_list
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.make_list
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140457 : input.dst.llvm-%arr : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140467 : islangaligned(140457, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141130 : isgepoffset(140757, 140276) : BOOL
141141 : and(140275, 141130) : BOOL
140652 : 4 { 0x4 +1.0e1025 } : BV:64
140761 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
140519 : 32 { 0x20 +1.0e1025 } : INT
140781 : bvsign_ext(140761, 140519) : BV:64
141102 : bvmul(140652, 140781) : BV:64
140523 : 63 { 0x3f +1.0e1025 } : INT
141103 : bvextract(141102, 140523, 140519) : BV:32
140780 : bvslt(140761, 140276) : BOOL
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141116 : ite(140780, 140505, 140276) : BV:32
141118 : eq(141103, 141116) : BOOL
140430 : 4 { 0x4 +1.0e1025 } : INT
141120 : isindexforsize(141118, 140430) : BOOL
140760 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
140427 : 4 { 0x4 +1.47e129 } : BV:32
141073 : bvmul(140427, 140761) : BV:32
141077 : bvadd(140760, 141073) : BV:32
141122 : isgepoffset(141077, 141073) : BOOL
141124 : and(141120, 141122) : BOOL
141126 : islangaligned(141077, 140430) : BOOL
141147 : and(141124, 141126, 141130, 141141) : BOOL
141149 : islangaligned(140757, 140430) : BOOL
141080 : bvadd(140427, 140757) : BV:32
141155 : isgepoffset(141080, 140427) : BOOL
141163 : and(141141, 141147, 141149, 141155) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140427 : 4 { 0x4 +1.47e129 } : BV:32
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
141080 : bvadd(140427, 140757) : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
141094 : islangaligned(141080, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 8
=pc
Lfor.body%1%d
=linename
line 9
=pc
Lfor.body%2%d
=linename
line 9
=pc
Lfor.body%3%d
=linename
line 10
=pc
Lfor.body%4%d
=linename
line 10
=pc
Lfor.body%5%d
=linename
line 10
=pc
Lfor.body%6%d
=linename
line 10
=pc
Lfor.body%7%d
=linename
line 11
=pc
Lfor.body%8%d
=linename
line 11
=pc
Lfor.body%9%d
=linename
line 13
=pc
Lfor.cond%1%d
=linename
line 8
=pc
Lfor.cond%2%d
=linename
line 8
=pc
Lfor.end%1%d
=linename
line 14
=pc
Lfor.inc%1%d
=linename
line 8
=pc
Lfor.inc%2%d
=linename
line 8
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 18
=pc
Lfor.body%2%d
=column_name
 at column 18
=pc
Lfor.body%3%d
=column_name
 at column 17
=pc
Lfor.body%4%d
=column_name
 at column 17
=pc
Lfor.body%5%d
=column_name
 at column 11
=pc
Lfor.body%6%d
=column_name
 at column 15
=pc
Lfor.body%7%d
=column_name
 at column 11
=pc
Lfor.body%8%d
=column_name
 at column 16
=pc
Lfor.body%9%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 8 at column 8)
=pc
Lfor.body%1%d
=line_and_column
line 9
=pc
Lfor.body%2%d
=line_and_column
line 9
=pc
Lfor.body%3%d
=line_and_column
(line 10 at column 17)
=pc
Lfor.body%4%d
=line_and_column
(line 10 at column 17)
=pc
Lfor.body%5%d
=line_and_column
(line 10 at column 11)
=pc
Lfor.body%6%d
=line_and_column
(line 10 at column 15)
=pc
Lfor.body%7%d
=line_and_column
(line 11 at column 11)
=pc
Lfor.body%8%d
=line_and_column
(line 11 at column 16)
=pc
Lfor.body%9%d
=line_and_column
line 13
=pc
Lfor.cond%1%d
=line_and_column
(line 8 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 8 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 14
=pc
Lfor.inc%1%d
=line_and_column
(line 8 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 8 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%arr : L0%0%d : arr'
input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
input.dst.llvm-%l.0 : Lfor.cond%1%bbentry : l'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset : L0%0%d : (arr' + input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset : L0%0%d : (4 + input.dst.llvm-%0)
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%0 : Lfor.body%3%bbentry : node'
input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset
input.dst.llvm-%l.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%i.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%inc
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%l.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : L0%0%d : 8
input.dst.llvm-%n.Lfor.body%2%d : L0%0%d : malloc_side_effect(input.dst.llvm-%n.Lfor.cond%1%bbentry, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%arr.Lfor.body%2%d : L0%0%d : malloc_side_effect(input.dst.llvm-%arr.Lfor.cond%1%bbentry, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%call.Lfor.body%2%d : L0%0%d : ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, 0, heap_alloc_ptr(input.dst.llvm-%call.Lfor.body%1%fcallEnd, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/))
input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : bvmul(4, input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%l.0.Lfor.cond%1%bbentry
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : L0%0%d : malloc_side_effect(8, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : L0%0%d : (input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%0.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%1.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-mem.Lfor.body%2%d[(input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)]_4
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : bvmul(4, input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : (input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%next.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%val.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%l.0
=dst.llvm-%l.0 loop pc: Lfor.cond%1%d
=dst.llvm-%l.0 val_scevb
=dst.llvm-%l.0 val_scevb scev
=dst.llvm-%l.0 val_scevb scev loop: L0%0%d
=dst.llvm-%l.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 val_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 val_scevb scev scev_expr done
=dst.llvm-%l.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb
=dst.llvm-%l.0 atuse_scevb scev
=dst.llvm-%l.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%l.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atuse_scevb scev scev_expr done
=dst.llvm-%l.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atexit_scev
=dst.llvm-%l.0 atexit_scev loop: L0%0%d
=dst.llvm-%l.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%l.0 atexit_scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atexit_scev scev_expr done
=dst.llvm-%call
=dst.llvm-%call loop pc: Lfor.cond%1%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev
=dst.llvm-%call atexit_scev loop: L0%0%d
=dst.llvm-%call atexit_scev scev_overflow_flag: 
=dst.llvm-%call atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
7 : input.dst.llvm-%arr : BV32
8 : 00000000000000000000000000000100b
9 : scev_op_addrec(7, 8) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
7 : input.dst.llvm-%arr : BV32
8 : 00000000000000000000000000000100b
9 : scev_op_addrec(7, 8) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
8 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
10 : scev_op_mul(8, 4) : loop L0%0%d : 
7 : input.dst.llvm-%arr : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%val
=dst.llvm-%val loop pc: Lfor.cond%1%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev
=dst.llvm-%val atexit_scev loop: L0%0%d
=dst.llvm-%val atexit_scev scev_overflow_flag: 
=dst.llvm-%val atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atexit_scev scev_expr done
=dst.llvm-%next
=dst.llvm-%next loop pc: Lfor.cond%1%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev
=dst.llvm-%next atexit_scev loop: L0%0%d
=dst.llvm-%next atexit_scev scev_overflow_flag: nsw
=dst.llvm-%next atexit_scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
14 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
14 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
15 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal1
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 27 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 28 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 29 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%arr.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%arr
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%n.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%call.Lfor.body%1%fcallEnd
lr_status_bottom(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%n.Lfor.body%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%arr.Lfor.body%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%val.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind9.proof
=function_name make_list
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: make_list
=EntryPreconds
=pred 0
=Comment
pointer-implements-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : $llvm-ret : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : $llvm-md : ARRAY[BV:32 -> BV:8]
6 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(14, 15) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.body%1%fcallStart L3%6%bbentry_Lfor.body%1%fcallEnd L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%arr : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 26 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%arr : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.body%1%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*(Lfor.cond%2%d#{0,0}=>Lfor.body%1%fcallStart#{0,0}))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallStart to Lfor.body%1%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lfor.body%1%fcallStart#{0,0}=>Lfor.body%1%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%10%bbentry#{0,0})*(L3%10%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallEnd to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.body%1%fcallEnd#{0,0}=>Lfor.body%1%intermediateVal1#{0,0})*((Lfor.body%1%intermediateVal1#{0,0}=>Lfor.body%2%d#{0,0})*(Lfor.body%2%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
pointer-implements-map
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%arr : BV:32
=predicate done
=graph_with_precondition_done

=Locs in make_list.A2.B1.C1.D1.E2
=Locs end
=Liveness in make_list.A2.B1.C1.D1.E2
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.body%1%fcallStart

=live locs at L3%6%bbentry_Lfor.body%1%fcallEnd

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in make_list.A2.B1.C1.D1.E2

=Branch affecting variable locs in make_list.A2.B1.C1.D1.E2

=Relevant Memlabels in make_list.A2.B1.C1.D1.E2
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in make_list.A2.B1.C1.D1.E2
=avail_exprs begin
=avail_exprs end
=sprel_map in make_list.A2.B1.C1.D1.E2
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce7.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce7 5624b1ee4a5c53c814d37c7fcb1db4ab
=input.spec-%var-arr-1
1 : Lambda140 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda141 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda143 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda144 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda120 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform17 : BV:32
3 : Lambda145 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda146 : BV:32
6 : unit : UNIT
7 : 1758393872 { 0x68cef610 +1.61688423e82 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda121 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 682954987 ] -> 251, [ 682954988; 682954988 ] -> 198, [ 682954989; 682954989 ] -> 239, [ 682954990; 682954990 ] -> 119, [ 682954991; 1278990523 ] -> 251, [ 1278990524; 1278990527 ] -> 0, [ 1278990528; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 682954987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 682954988; 682954991 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 682954992; 1278990523 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1278990524; 1278990527 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1278990528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 682954991 { 0x28b510ef +1.41457927e210 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
350272784
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce8.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce8 755637371f1ebdd56c20f373b790cf68
=input.spec-%var-arr-1
1 : Lambda154 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda155 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : bvule(2, 22) : BOOL
24 : 1427 { 0x593 +1.17011e129 } : BV:32
25 : bvule(22, 24) : BOOL
26 : and(23, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1428 { 0x594 +1.17023e129 } : BV:32
29 : bvule(28, 22) : BOOL
30 : 1431 { 0x597 +1.17058e129 } : BV:32
31 : bvule(22, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 1432 { 0x598 +1.17070e129 } : BV:32
35 : bvule(34, 22) : BOOL
36 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
37 : bvule(22, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
41 : bvule(40, 22) : BOOL
42 : bvule(22, 10) : BOOL
43 : and(41, 42) : BOOL
44 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
45 : bvule(44, 22) : BOOL
46 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
47 : bvule(22, 46) : BOOL
48 : and(45, 47) : BOOL
49 : 5 { 0x5 } : BV:8
50 : ite(48, 49, 49) : BV:8
51 : ite(43, 39, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(26, 27, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 24) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(28, 56) : BOOL
61 : bvule(56, 30) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(34, 56) : BOOL
64 : bvule(56, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(40, 56) : BOOL
67 : bvule(56, 10) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(44, 56) : BOOL
70 : bvule(56, 46) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 49, 49) : BV:8
73 : ite(68, 39, 72) : BV:8
74 : ite(65, 39, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(59, 27, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 20, 21) : BV:32
79 : bvule(2, 78) : BOOL
80 : bvule(78, 24) : BOOL
81 : and(79, 80) : BOOL
82 : bvule(28, 78) : BOOL
83 : bvule(78, 30) : BOOL
84 : and(82, 83) : BOOL
85 : bvule(34, 78) : BOOL
86 : bvule(78, 36) : BOOL
87 : and(85, 86) : BOOL
88 : bvule(40, 78) : BOOL
89 : bvule(78, 10) : BOOL
90 : and(88, 89) : BOOL
91 : bvule(44, 78) : BOOL
92 : bvule(78, 46) : BOOL
93 : and(91, 92) : BOOL
94 : ite(93, 49, 49) : BV:8
95 : ite(90, 39, 94) : BV:8
96 : ite(87, 39, 95) : BV:8
97 : ite(84, 33, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(20, 21) : BV:32
100 : bvule(2, 99) : BOOL
101 : bvule(99, 24) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(28, 99) : BOOL
104 : bvule(99, 30) : BOOL
105 : and(103, 104) : BOOL
106 : bvule(34, 99) : BOOL
107 : bvule(99, 36) : BOOL
108 : and(106, 107) : BOOL
109 : bvule(40, 99) : BOOL
110 : bvule(99, 10) : BOOL
111 : and(109, 110) : BOOL
112 : bvule(44, 99) : BOOL
113 : bvule(99, 46) : BOOL
114 : and(112, 113) : BOOL
115 : ite(114, 49, 49) : BV:8
116 : ite(111, 39, 115) : BV:8
117 : ite(108, 39, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(102, 27, 118) : BV:8
120 : bvconcat(54, 76, 98, 119) : BV:32
121 : lambda(17, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(16, 121) : MAP[BV:32 -> BV:32]
123 : sym_const(122) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda157 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda158 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : bvule(2, 22) : BOOL
24 : 1427 { 0x593 +1.17011e129 } : BV:32
25 : bvule(22, 24) : BOOL
26 : and(23, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1428 { 0x594 +1.17023e129 } : BV:32
29 : bvule(28, 22) : BOOL
30 : 1431 { 0x597 +1.17058e129 } : BV:32
31 : bvule(22, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 1432 { 0x598 +1.17070e129 } : BV:32
35 : bvule(34, 22) : BOOL
36 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
37 : bvule(22, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
41 : bvule(40, 22) : BOOL
42 : bvule(22, 10) : BOOL
43 : and(41, 42) : BOOL
44 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
45 : bvule(44, 22) : BOOL
46 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
47 : bvule(22, 46) : BOOL
48 : and(45, 47) : BOOL
49 : 5 { 0x5 } : BV:8
50 : ite(48, 49, 49) : BV:8
51 : ite(43, 39, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(26, 27, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 24) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(28, 56) : BOOL
61 : bvule(56, 30) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(34, 56) : BOOL
64 : bvule(56, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(40, 56) : BOOL
67 : bvule(56, 10) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(44, 56) : BOOL
70 : bvule(56, 46) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 49, 49) : BV:8
73 : ite(68, 39, 72) : BV:8
74 : ite(65, 39, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(59, 27, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 20, 21) : BV:32
79 : bvule(2, 78) : BOOL
80 : bvule(78, 24) : BOOL
81 : and(79, 80) : BOOL
82 : bvule(28, 78) : BOOL
83 : bvule(78, 30) : BOOL
84 : and(82, 83) : BOOL
85 : bvule(34, 78) : BOOL
86 : bvule(78, 36) : BOOL
87 : and(85, 86) : BOOL
88 : bvule(40, 78) : BOOL
89 : bvule(78, 10) : BOOL
90 : and(88, 89) : BOOL
91 : bvule(44, 78) : BOOL
92 : bvule(78, 46) : BOOL
93 : and(91, 92) : BOOL
94 : ite(93, 49, 49) : BV:8
95 : ite(90, 39, 94) : BV:8
96 : ite(87, 39, 95) : BV:8
97 : ite(84, 33, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(20, 21) : BV:32
100 : bvule(2, 99) : BOOL
101 : bvule(99, 24) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(28, 99) : BOOL
104 : bvule(99, 30) : BOOL
105 : and(103, 104) : BOOL
106 : bvule(34, 99) : BOOL
107 : bvule(99, 36) : BOOL
108 : and(106, 107) : BOOL
109 : bvule(40, 99) : BOOL
110 : bvule(99, 10) : BOOL
111 : and(109, 110) : BOOL
112 : bvule(44, 99) : BOOL
113 : bvule(99, 46) : BOOL
114 : and(112, 113) : BOOL
115 : ite(114, 49, 49) : BV:8
116 : ite(111, 39, 115) : BV:8
117 : ite(108, 39, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(102, 27, 118) : BV:8
120 : bvconcat(54, 76, 98, 119) : BV:32
121 : lambda(17, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(16, 121) : MAP[BV:32 -> BV:32]
123 : sym_const(122) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda131 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
7 : bvadd(3, 5, 6) : BV:32
8 : bvule(2, 7) : BOOL
9 : 1427 { 0x593 +1.17011e129 } : BV:32
10 : bvule(7, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1428 { 0x594 +1.17023e129 } : BV:32
14 : bvule(13, 7) : BOOL
15 : 1431 { 0x597 +1.17058e129 } : BV:32
16 : bvule(7, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 1432 { 0x598 +1.17070e129 } : BV:32
20 : bvule(19, 7) : BOOL
21 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
22 : bvule(7, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
26 : bvule(25, 7) : BOOL
27 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
28 : bvule(7, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
31 : bvule(30, 7) : BOOL
32 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
33 : bvule(7, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : ite(34, 35, 35) : BV:8
37 : ite(29, 24, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 5, 6) : BV:32
43 : bvule(2, 42) : BOOL
44 : bvule(42, 9) : BOOL
45 : and(43, 44) : BOOL
46 : bvule(13, 42) : BOOL
47 : bvule(42, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(19, 42) : BOOL
50 : bvule(42, 21) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 27) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(30, 42) : BOOL
56 : bvule(42, 32) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 35, 35) : BV:8
59 : ite(54, 24, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(45, 12, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 5, 6) : BV:32
65 : bvule(2, 64) : BOOL
66 : bvule(64, 9) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(13, 64) : BOOL
69 : bvule(64, 15) : BOOL
70 : and(68, 69) : BOOL
71 : bvule(19, 64) : BOOL
72 : bvule(64, 21) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(25, 64) : BOOL
75 : bvule(64, 27) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(30, 64) : BOOL
78 : bvule(64, 32) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 35, 35) : BV:8
81 : ite(76, 24, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(70, 18, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(5, 6) : BV:32
86 : bvule(2, 85) : BOOL
87 : bvule(85, 9) : BOOL
88 : and(86, 87) : BOOL
89 : bvule(13, 85) : BOOL
90 : bvule(85, 15) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(19, 85) : BOOL
93 : bvule(85, 21) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(25, 85) : BOOL
96 : bvule(85, 27) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 85) : BOOL
99 : bvule(85, 32) : BOOL
100 : and(98, 99) : BOOL
101 : ite(100, 35, 35) : BV:8
102 : ite(97, 24, 101) : BV:8
103 : ite(94, 24, 102) : BV:8
104 : ite(91, 18, 103) : BV:8
105 : ite(88, 12, 104) : BV:8
106 : bvconcat(40, 62, 84, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform19 : BV:32
3 : Lambda159 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda160 : BV:32
6 : unit : UNIT
7 : 723208484 { 0x2b1b4924 +1.21316957e215 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda132 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
7 : bvadd(3, 5, 6) : BV:32
8 : bvule(2, 7) : BOOL
9 : 1427 { 0x593 +1.17011e129 } : BV:32
10 : bvule(7, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1428 { 0x594 +1.17023e129 } : BV:32
14 : bvule(13, 7) : BOOL
15 : 1431 { 0x597 +1.17058e129 } : BV:32
16 : bvule(7, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 1432 { 0x598 +1.17070e129 } : BV:32
20 : bvule(19, 7) : BOOL
21 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
22 : bvule(7, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
26 : bvule(25, 7) : BOOL
27 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
28 : bvule(7, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
31 : bvule(30, 7) : BOOL
32 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
33 : bvule(7, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : ite(34, 35, 35) : BV:8
37 : ite(29, 24, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 5, 6) : BV:32
43 : bvule(2, 42) : BOOL
44 : bvule(42, 9) : BOOL
45 : and(43, 44) : BOOL
46 : bvule(13, 42) : BOOL
47 : bvule(42, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(19, 42) : BOOL
50 : bvule(42, 21) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 27) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(30, 42) : BOOL
56 : bvule(42, 32) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 35, 35) : BV:8
59 : ite(54, 24, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(45, 12, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 5, 6) : BV:32
65 : bvule(2, 64) : BOOL
66 : bvule(64, 9) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(13, 64) : BOOL
69 : bvule(64, 15) : BOOL
70 : and(68, 69) : BOOL
71 : bvule(19, 64) : BOOL
72 : bvule(64, 21) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(25, 64) : BOOL
75 : bvule(64, 27) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(30, 64) : BOOL
78 : bvule(64, 32) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 35, 35) : BV:8
81 : ite(76, 24, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(70, 18, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(5, 6) : BV:32
86 : bvule(2, 85) : BOOL
87 : bvule(85, 9) : BOOL
88 : and(86, 87) : BOOL
89 : bvule(13, 85) : BOOL
90 : bvule(85, 15) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(19, 85) : BOOL
93 : bvule(85, 21) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(25, 85) : BOOL
96 : bvule(85, 27) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 85) : BOOL
99 : bvule(85, 32) : BOOL
100 : and(98, 99) : BOOL
101 : ite(100, 35, 35) : BV:8
102 : ite(97, 24, 101) : BV:8
103 : ite(94, 24, 102) : BV:8
104 : ite(91, 18, 103) : BV:8
105 : ite(88, 12, 104) : BV:8
106 : bvconcat(40, 62, 84, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1427 ] -> 1, [ 1428; 1431 ] -> 4, [ 1432; 1409482759 ] -> 0, [ 1409482760; 1409482763 ] -> 5, [ 1409482764; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1427 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1428; 1431 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1432; 1409482759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1409482760; 1409482763 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1409482764; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1428 { 0x594 +1.17023e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1428 { 0x594 +1.17023e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1431 { 0x597 +1.17058e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2603085373
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce15.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce15 d8af5c47679e933794474f1f8b18f240
=input.spec-%var-arr-1
1 : Lambda298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda299 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda299 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda278 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.dst.llvm-%arr
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1425295597 { 0x54f448ed +1.90847551e42 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1425295597 { 0x54f448ed +1.90847551e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1424842033
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce16.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce16 567b33c9aba6c0d4c73291bdd45f493
=input.spec-%var-arr-1
1 : Lambda313 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda313 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda314 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1444; 1447 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1448; 2348892167 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2348892168; 2348892171 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2348892172; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2348892168 { 0x8c014008 -1946075128 -1.976657e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1444 { 0x5a4 +1.17213e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1171818900 { 0x45d88994 +1.69169855e12 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1171818900 { 0x45d88994 +1.69169855e12 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1444; 1447 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1448; 2348892167 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2348892168; 2348892171 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2348892172; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1444 { 0x5a4 +1.17213e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1447 { 0x5a7 +1.17249e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2348892168 { 0x8c014008 -1946075128 -1.976657e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2348892171 { 0x8c01400b -1946075125 -1.976693e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2442456063
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce39.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce39 8a802866601a6b13e97aa3d84dc1bf0
=input.spec-%var-arr-1
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda438 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.dst.llvm-%arr
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 822414643 { 0x31050d33 +1.3946530e227 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 822414643 { 0x31050d33 +1.3946530e227 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
758325269
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce40.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce40 67853dde2edb7c3a5a81d657d586a3f
=input.spec-%var-arr-1
1 : Lambda472 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda473 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 256 { 0x100 +1.3051e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 524289 { 0x80001 +1.6250011e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda472 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda473 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 256 { 0x100 +1.3051e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 524289 { 0x80001 +1.6250011e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda446 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 256 { 0x100 +1.3051e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 524289 { 0x80001 +1.6250011e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 524288 ] -> 0, [ 524289; 524289 ] -> 1, [ 524290; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda447 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 256 { 0x100 +1.3051e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 524289 { 0x80001 +1.6250011e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 524288 ] -> 0, [ 524289; 524289 ] -> 1, [ 524290; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 131076; 524287 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 524288; 524291 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 524292; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1919470271 { 0x7268cabf +1.81868731e101 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1919470271 { 0x7268cabf +1.81868731e101 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 131076; 524287 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 524288; 524291 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 524292; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 524291 { 0x80003 +1.6250035e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3267307116
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce63.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce63 e336715af33ffdbe6e5725a8c8ac2ade
=input.spec-%var-arr-1
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.dst.llvm-%arr
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1420111171 { 0x54a52d43 +1.29044377e42 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1420111171 { 0x54a52d43 +1.29044377e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3936709643 { 0xeaa56c0b -358257653 -1.29235970e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3860458283 { 0xe619eb2b -434509013 -1.20248925e77 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
155419542
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce64.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce64 63934f351455926de1b921d52860f6
=input.spec-%var-arr-1
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-%arr
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1458056982 { 0x56e82f16 +1.81393694e46 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1458056982 { 0x56e82f16 +1.81393694e46 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 887 { 0x377 +1.10573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2266038851 { 0x87110243 -2028928445 -1.13288152e143 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1729516611
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce87.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce87 94ed303444ffb72e3e4fe4a5936db7
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1563690513 { 0x5d340611 +1.40643513e59 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1563690513 { 0x5d340611 +1.40643513e59 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2853268058
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce111.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce111 1e9924f93f133e7b7be46d41c3ae9dc
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 807147041 { 0x301c1621 +1.21942532e225 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 807147041 { 0x301c1621 +1.21942532e225 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2652988023
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce135.num_edges_traversed1
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce135 dd27a7e72c7d01283444a111e1481c5
=input.spec-%var-arr-1
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda1069 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda1070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 628532001 { 0x2576a321 +1.92685329e203 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 628532001 { 0x2576a321 +1.92685329e203 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2199990060
=counter_example_end
=global nodece 10 num_edges_traversed 1
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce850.num_edges_traversed0
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce850 62994883b445565da4e3f8a4520ecb5
=input.spec-%var-arr-1
1 : Lambda6476 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6477 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 7, 7) : BOOL
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 10) : BV:32
18 : bvadd(15, 17) : BV:32
19 : bvule(2, 18) : BOOL
20 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
21 : bvule(18, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
25 : bvule(24, 18) : BOOL
26 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
27 : bvule(18, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
31 : bvule(30, 18) : BOOL
32 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
33 : bvule(18, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
37 : bvule(36, 18) : BOOL
38 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
39 : bvule(18, 38) : BOOL
40 : and(37, 39) : BOOL
41 : 0 { 0x0 } : BV:8
42 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 4) : BOOL
45 : and(43, 44) : BOOL
46 : ite(45, 41, 41) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(28, 29, 48) : BV:8
50 : ite(22, 23, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 17) : BV:32
53 : bvule(2, 52) : BOOL
54 : bvule(52, 20) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(24, 52) : BOOL
57 : bvule(52, 26) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(30, 52) : BOOL
60 : bvule(52, 32) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(36, 52) : BOOL
63 : bvule(52, 38) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(42, 52) : BOOL
66 : bvule(52, 4) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(55, 23, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 17) : BV:32
75 : bvule(2, 74) : BOOL
76 : bvule(74, 20) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(24, 74) : BOOL
79 : bvule(74, 26) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(30, 74) : BOOL
82 : bvule(74, 32) : BOOL
83 : and(81, 82) : BOOL
84 : bvule(36, 74) : BOOL
85 : bvule(74, 38) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(42, 74) : BOOL
88 : bvule(74, 4) : BOOL
89 : and(87, 88) : BOOL
90 : ite(89, 41, 41) : BV:8
91 : ite(86, 41, 90) : BV:8
92 : ite(83, 35, 91) : BV:8
93 : ite(80, 29, 92) : BV:8
94 : ite(77, 23, 93) : BV:8
95 : bvule(2, 17) : BOOL
96 : bvule(17, 20) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(24, 17) : BOOL
99 : bvule(17, 26) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(30, 17) : BOOL
102 : bvule(17, 32) : BOOL
103 : and(101, 102) : BOOL
104 : bvule(36, 17) : BOOL
105 : bvule(17, 38) : BOOL
106 : and(104, 105) : BOOL
107 : bvule(42, 17) : BOOL
108 : bvule(17, 4) : BOOL
109 : and(107, 108) : BOOL
110 : ite(109, 41, 41) : BV:8
111 : ite(106, 41, 110) : BV:8
112 : ite(103, 35, 111) : BV:8
113 : ite(100, 29, 112) : BV:8
114 : ite(97, 23, 113) : BV:8
115 : bvconcat(50, 72, 94, 114) : BV:32
116 : ite(14, 115, 115) : BV:32
117 : lambda(10, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(9, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6479 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6480 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : bvadd(11, 13) : BV:32
15 : bvule(2, 14) : BOOL
16 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
17 : bvule(14, 16) : BOOL
18 : and(15, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
21 : bvule(20, 14) : BOOL
22 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
23 : bvule(14, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
27 : bvule(26, 14) : BOOL
28 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
29 : bvule(14, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
33 : bvule(32, 14) : BOOL
34 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
35 : bvule(14, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
39 : bvule(38, 14) : BOOL
40 : bvule(14, 4) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 37, 37) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(24, 25, 44) : BV:8
46 : ite(18, 19, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 13) : BV:32
49 : bvule(2, 48) : BOOL
50 : bvule(48, 16) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(20, 48) : BOOL
53 : bvule(48, 22) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(26, 48) : BOOL
56 : bvule(48, 28) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(32, 48) : BOOL
59 : bvule(48, 34) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(38, 48) : BOOL
62 : bvule(48, 4) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 37, 37) : BV:8
65 : ite(60, 37, 64) : BV:8
66 : ite(57, 31, 65) : BV:8
67 : ite(54, 25, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 13) : BV:32
71 : bvule(2, 70) : BOOL
72 : bvule(70, 16) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(20, 70) : BOOL
75 : bvule(70, 22) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(26, 70) : BOOL
78 : bvule(70, 28) : BOOL
79 : and(77, 78) : BOOL
80 : bvule(32, 70) : BOOL
81 : bvule(70, 34) : BOOL
82 : and(80, 81) : BOOL
83 : bvule(38, 70) : BOOL
84 : bvule(70, 4) : BOOL
85 : and(83, 84) : BOOL
86 : ite(85, 37, 37) : BV:8
87 : ite(82, 37, 86) : BV:8
88 : ite(79, 31, 87) : BV:8
89 : ite(76, 25, 88) : BV:8
90 : ite(73, 19, 89) : BV:8
91 : bvule(2, 13) : BOOL
92 : bvule(13, 16) : BOOL
93 : and(91, 92) : BOOL
94 : bvule(20, 13) : BOOL
95 : bvule(13, 22) : BOOL
96 : and(94, 95) : BOOL
97 : bvule(26, 13) : BOOL
98 : bvule(13, 28) : BOOL
99 : and(97, 98) : BOOL
100 : bvule(32, 13) : BOOL
101 : bvule(13, 34) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(38, 13) : BOOL
104 : bvule(13, 4) : BOOL
105 : and(103, 104) : BOOL
106 : ite(105, 37, 37) : BV:8
107 : ite(102, 37, 106) : BV:8
108 : ite(99, 31, 107) : BV:8
109 : ite(96, 25, 108) : BV:8
110 : ite(93, 19, 109) : BV:8
111 : bvconcat(46, 68, 90, 110) : BV:32
112 : lambda(10, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(9, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6454 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : bvadd(3, 5) : BV:32
7 : bvule(2, 6) : BOOL
8 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
9 : bvule(6, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
13 : bvule(12, 6) : BOOL
14 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
15 : bvule(6, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
19 : bvule(18, 6) : BOOL
20 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
21 : bvule(6, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 5 { 0x5 } : BV:8
24 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
25 : bvule(24, 6) : BOOL
26 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
27 : bvule(6, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 0 { 0x0 } : BV:8
30 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
31 : bvule(30, 6) : BOOL
32 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
33 : bvule(6, 32) : BOOL
34 : and(31, 33) : BOOL
35 : ite(34, 29, 29) : BV:8
36 : ite(28, 29, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 5) : BV:32
42 : bvule(2, 41) : BOOL
43 : bvule(41, 8) : BOOL
44 : and(42, 43) : BOOL
45 : bvule(12, 41) : BOOL
46 : bvule(41, 14) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(18, 41) : BOOL
49 : bvule(41, 20) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 26) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(30, 41) : BOOL
55 : bvule(41, 32) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 29, 29) : BV:8
58 : ite(53, 29, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(44, 11, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 5) : BV:32
64 : bvule(2, 63) : BOOL
65 : bvule(63, 8) : BOOL
66 : and(64, 65) : BOOL
67 : bvule(12, 63) : BOOL
68 : bvule(63, 14) : BOOL
69 : and(67, 68) : BOOL
70 : bvule(18, 63) : BOOL
71 : bvule(63, 20) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(24, 63) : BOOL
74 : bvule(63, 26) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(30, 63) : BOOL
77 : bvule(63, 32) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 29, 29) : BV:8
80 : ite(75, 29, 79) : BV:8
81 : ite(72, 23, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(66, 11, 82) : BV:8
84 : bvule(2, 5) : BOOL
85 : bvule(5, 8) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(12, 5) : BOOL
88 : bvule(5, 14) : BOOL
89 : and(87, 88) : BOOL
90 : bvule(18, 5) : BOOL
91 : bvule(5, 20) : BOOL
92 : and(90, 91) : BOOL
93 : bvule(24, 5) : BOOL
94 : bvule(5, 26) : BOOL
95 : and(93, 94) : BOOL
96 : bvule(30, 5) : BOOL
97 : bvule(5, 32) : BOOL
98 : and(96, 97) : BOOL
99 : ite(98, 29, 29) : BV:8
100 : ite(95, 29, 99) : BV:8
101 : ite(92, 23, 100) : BV:8
102 : ite(89, 17, 101) : BV:8
103 : ite(86, 11, 102) : BV:8
104 : bvconcat(39, 61, 83, 103) : BV:32
105 : lambda(1, 104) : FUNCTION[BV:32 -> BV:32]
106 : sym_const(105) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform627 : BV:32
3 : Lambda6483 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6484 : BV:32
6 : unit : UNIT
7 : 404013659 { 0x1814c25b +1.16218125e177 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 794838607 ] -> 1, [ 794838608; 794838611 ] -> 4, [ 794838612; 3105033587 ] -> 0, [ 3105033588; 3105033591 ] -> 5, [ 3105033592; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6459 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : bvadd(9, 11) : BV:32
13 : bvule(2, 12) : BOOL
14 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
15 : bvule(12, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
19 : bvule(18, 12) : BOOL
20 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
21 : bvule(12, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 } : BV:8
24 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
25 : bvule(24, 12) : BOOL
26 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
27 : bvule(12, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
31 : bvule(30, 12) : BOOL
32 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
33 : bvule(12, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 0 { 0x0 } : BV:8
36 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
37 : bvule(36, 12) : BOOL
38 : bvule(12, 4) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 35, 35) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : bvule(2, 46) : BOOL
48 : bvule(46, 14) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 46) : BOOL
51 : bvule(46, 20) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(24, 46) : BOOL
54 : bvule(46, 26) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(30, 46) : BOOL
57 : bvule(46, 32) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(36, 46) : BOOL
60 : bvule(46, 4) : BOOL
61 : and(59, 60) : BOOL
62 : ite(61, 35, 35) : BV:8
63 : ite(58, 35, 62) : BV:8
64 : ite(55, 29, 63) : BV:8
65 : ite(52, 23, 64) : BV:8
66 : ite(49, 17, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 11) : BV:32
69 : bvule(2, 68) : BOOL
70 : bvule(68, 14) : BOOL
71 : and(69, 70) : BOOL
72 : bvule(18, 68) : BOOL
73 : bvule(68, 20) : BOOL
74 : and(72, 73) : BOOL
75 : bvule(24, 68) : BOOL
76 : bvule(68, 26) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(30, 68) : BOOL
79 : bvule(68, 32) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(36, 68) : BOOL
82 : bvule(68, 4) : BOOL
83 : and(81, 82) : BOOL
84 : ite(83, 35, 35) : BV:8
85 : ite(80, 35, 84) : BV:8
86 : ite(77, 29, 85) : BV:8
87 : ite(74, 23, 86) : BV:8
88 : ite(71, 17, 87) : BV:8
89 : bvule(2, 11) : BOOL
90 : bvule(11, 14) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(18, 11) : BOOL
93 : bvule(11, 20) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(24, 11) : BOOL
96 : bvule(11, 26) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 11) : BOOL
99 : bvule(11, 32) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(36, 11) : BOOL
102 : bvule(11, 4) : BOOL
103 : and(101, 102) : BOOL
104 : ite(103, 35, 35) : BV:8
105 : ite(100, 35, 104) : BV:8
106 : ite(97, 29, 105) : BV:8
107 : ite(94, 23, 106) : BV:8
108 : ite(91, 17, 107) : BV:8
109 : bvconcat(44, 66, 88, 108) : BV:32
110 : ite(8, 109, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform626 : BV:32
3 : Lambda6481 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6482 : BV:32
6 : unit : UNIT
7 : 985370307 { 0x3abb8ec3 +1.46529424e246 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 794838607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 794838608; 794838611 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 794838612; 3105033587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3105033588; 3105033591 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3105033592; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2613575958
=counter_example_end
=global nodece 11 num_edges_traversed 0
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce851.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce851 2bde6620876002a35b6836c984af59
=input.spec-%var-arr-1
1 : Lambda6494 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6495 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : bvadd(11, 13) : BV:32
15 : bvule(2, 14) : BOOL
16 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
17 : bvule(14, 16) : BOOL
18 : and(15, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
21 : bvule(20, 14) : BOOL
22 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
23 : bvule(14, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
27 : bvule(26, 14) : BOOL
28 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
29 : bvule(14, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
33 : bvule(32, 14) : BOOL
34 : bvule(14, 4) : BOOL
35 : and(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
38 : bvule(37, 14) : BOOL
39 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
40 : bvule(14, 39) : BOOL
41 : and(38, 40) : BOOL
42 : ite(41, 36, 36) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(24, 25, 44) : BV:8
46 : ite(18, 19, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 13) : BV:32
49 : bvule(2, 48) : BOOL
50 : bvule(48, 16) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(20, 48) : BOOL
53 : bvule(48, 22) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(26, 48) : BOOL
56 : bvule(48, 28) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(32, 48) : BOOL
59 : bvule(48, 4) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(37, 48) : BOOL
62 : bvule(48, 39) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 36, 36) : BV:8
65 : ite(60, 36, 64) : BV:8
66 : ite(57, 31, 65) : BV:8
67 : ite(54, 25, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 13) : BV:32
71 : bvule(2, 70) : BOOL
72 : bvule(70, 16) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(20, 70) : BOOL
75 : bvule(70, 22) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(26, 70) : BOOL
78 : bvule(70, 28) : BOOL
79 : and(77, 78) : BOOL
80 : bvule(32, 70) : BOOL
81 : bvule(70, 4) : BOOL
82 : and(80, 81) : BOOL
83 : bvule(37, 70) : BOOL
84 : bvule(70, 39) : BOOL
85 : and(83, 84) : BOOL
86 : ite(85, 36, 36) : BV:8
87 : ite(82, 36, 86) : BV:8
88 : ite(79, 31, 87) : BV:8
89 : ite(76, 25, 88) : BV:8
90 : ite(73, 19, 89) : BV:8
91 : bvule(2, 13) : BOOL
92 : bvule(13, 16) : BOOL
93 : and(91, 92) : BOOL
94 : bvule(20, 13) : BOOL
95 : bvule(13, 22) : BOOL
96 : and(94, 95) : BOOL
97 : bvule(26, 13) : BOOL
98 : bvule(13, 28) : BOOL
99 : and(97, 98) : BOOL
100 : bvule(32, 13) : BOOL
101 : bvule(13, 4) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(37, 13) : BOOL
104 : bvule(13, 39) : BOOL
105 : and(103, 104) : BOOL
106 : ite(105, 36, 36) : BV:8
107 : ite(102, 36, 106) : BV:8
108 : ite(99, 31, 107) : BV:8
109 : ite(96, 25, 108) : BV:8
110 : ite(93, 19, 109) : BV:8
111 : bvconcat(46, 68, 90, 110) : BV:32
112 : lambda(10, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(9, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6497 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6498 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 7, 7) : BOOL
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 10) : BV:32
18 : bvadd(15, 17) : BV:32
19 : bvule(2, 18) : BOOL
20 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
21 : bvule(18, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
25 : bvule(24, 18) : BOOL
26 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
27 : bvule(18, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
31 : bvule(30, 18) : BOOL
32 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
33 : bvule(18, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 4) : BOOL
39 : and(37, 38) : BOOL
40 : 0 { 0x0 } : BV:8
41 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
44 : bvule(18, 43) : BOOL
45 : and(42, 44) : BOOL
46 : ite(45, 40, 40) : BV:8
47 : ite(39, 40, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(28, 29, 48) : BV:8
50 : ite(22, 23, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 17) : BV:32
53 : bvule(2, 52) : BOOL
54 : bvule(52, 20) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(24, 52) : BOOL
57 : bvule(52, 26) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(30, 52) : BOOL
60 : bvule(52, 32) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(36, 52) : BOOL
63 : bvule(52, 4) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 43) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 40, 40) : BV:8
69 : ite(64, 40, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(55, 23, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 17) : BV:32
75 : bvule(2, 74) : BOOL
76 : bvule(74, 20) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(24, 74) : BOOL
79 : bvule(74, 26) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(30, 74) : BOOL
82 : bvule(74, 32) : BOOL
83 : and(81, 82) : BOOL
84 : bvule(36, 74) : BOOL
85 : bvule(74, 4) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(41, 74) : BOOL
88 : bvule(74, 43) : BOOL
89 : and(87, 88) : BOOL
90 : ite(89, 40, 40) : BV:8
91 : ite(86, 40, 90) : BV:8
92 : ite(83, 35, 91) : BV:8
93 : ite(80, 29, 92) : BV:8
94 : ite(77, 23, 93) : BV:8
95 : bvule(2, 17) : BOOL
96 : bvule(17, 20) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(24, 17) : BOOL
99 : bvule(17, 26) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(30, 17) : BOOL
102 : bvule(17, 32) : BOOL
103 : and(101, 102) : BOOL
104 : bvule(36, 17) : BOOL
105 : bvule(17, 4) : BOOL
106 : and(104, 105) : BOOL
107 : bvule(41, 17) : BOOL
108 : bvule(17, 43) : BOOL
109 : and(107, 108) : BOOL
110 : ite(109, 40, 40) : BV:8
111 : ite(106, 40, 110) : BV:8
112 : ite(103, 35, 111) : BV:8
113 : ite(100, 29, 112) : BV:8
114 : ite(97, 23, 113) : BV:8
115 : bvconcat(50, 72, 94, 114) : BV:32
116 : ite(14, 115, 115) : BV:32
117 : lambda(10, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(9, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6461 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : bvadd(9, 11) : BV:32
13 : bvule(2, 12) : BOOL
14 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
15 : bvule(12, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
19 : bvule(18, 12) : BOOL
20 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
21 : bvule(12, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 } : BV:8
24 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
25 : bvule(24, 12) : BOOL
26 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
27 : bvule(12, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
31 : bvule(30, 12) : BOOL
32 : bvule(12, 4) : BOOL
33 : and(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
36 : bvule(35, 12) : BOOL
37 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
38 : bvule(12, 37) : BOOL
39 : and(36, 38) : BOOL
40 : ite(39, 34, 34) : BV:8
41 : ite(33, 34, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : bvule(2, 46) : BOOL
48 : bvule(46, 14) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 46) : BOOL
51 : bvule(46, 20) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(24, 46) : BOOL
54 : bvule(46, 26) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(30, 46) : BOOL
57 : bvule(46, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(35, 46) : BOOL
60 : bvule(46, 37) : BOOL
61 : and(59, 60) : BOOL
62 : ite(61, 34, 34) : BV:8
63 : ite(58, 34, 62) : BV:8
64 : ite(55, 29, 63) : BV:8
65 : ite(52, 23, 64) : BV:8
66 : ite(49, 17, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 11) : BV:32
69 : bvule(2, 68) : BOOL
70 : bvule(68, 14) : BOOL
71 : and(69, 70) : BOOL
72 : bvule(18, 68) : BOOL
73 : bvule(68, 20) : BOOL
74 : and(72, 73) : BOOL
75 : bvule(24, 68) : BOOL
76 : bvule(68, 26) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(30, 68) : BOOL
79 : bvule(68, 4) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(35, 68) : BOOL
82 : bvule(68, 37) : BOOL
83 : and(81, 82) : BOOL
84 : ite(83, 34, 34) : BV:8
85 : ite(80, 34, 84) : BV:8
86 : ite(77, 29, 85) : BV:8
87 : ite(74, 23, 86) : BV:8
88 : ite(71, 17, 87) : BV:8
89 : bvule(2, 11) : BOOL
90 : bvule(11, 14) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(18, 11) : BOOL
93 : bvule(11, 20) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(24, 11) : BOOL
96 : bvule(11, 26) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 11) : BOOL
99 : bvule(11, 4) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(35, 11) : BOOL
102 : bvule(11, 37) : BOOL
103 : and(101, 102) : BOOL
104 : ite(103, 34, 34) : BV:8
105 : ite(100, 34, 104) : BV:8
106 : ite(97, 29, 105) : BV:8
107 : ite(94, 23, 106) : BV:8
108 : ite(91, 17, 107) : BV:8
109 : bvconcat(44, 66, 88, 108) : BV:32
110 : ite(8, 109, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform631 : BV:32
3 : Lambda6501 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6502 : BV:32
6 : unit : UNIT
7 : 291799036 { 0x11647ffc +1.78515577e163 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 536871551 ] -> 1, [ 536871552; 536871555 ] -> 5, [ 536871556; 1073741823 ] -> 0, [ 1073741824; 1073741827 ] -> 4, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6466 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : bvadd(3, 5) : BV:32
7 : bvule(2, 6) : BOOL
8 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
9 : bvule(6, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
13 : bvule(12, 6) : BOOL
14 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
15 : bvule(6, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
19 : bvule(18, 6) : BOOL
20 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
21 : bvule(6, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 5 { 0x5 } : BV:8
24 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
25 : bvule(24, 6) : BOOL
26 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
27 : bvule(6, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 0 { 0x0 } : BV:8
30 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
31 : bvule(30, 6) : BOOL
32 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
33 : bvule(6, 32) : BOOL
34 : and(31, 33) : BOOL
35 : ite(34, 29, 29) : BV:8
36 : ite(28, 29, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 5) : BV:32
42 : bvule(2, 41) : BOOL
43 : bvule(41, 8) : BOOL
44 : and(42, 43) : BOOL
45 : bvule(12, 41) : BOOL
46 : bvule(41, 14) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(18, 41) : BOOL
49 : bvule(41, 20) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 26) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(30, 41) : BOOL
55 : bvule(41, 32) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 29, 29) : BV:8
58 : ite(53, 29, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(44, 11, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 5) : BV:32
64 : bvule(2, 63) : BOOL
65 : bvule(63, 8) : BOOL
66 : and(64, 65) : BOOL
67 : bvule(12, 63) : BOOL
68 : bvule(63, 14) : BOOL
69 : and(67, 68) : BOOL
70 : bvule(18, 63) : BOOL
71 : bvule(63, 20) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(24, 63) : BOOL
74 : bvule(63, 26) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(30, 63) : BOOL
77 : bvule(63, 32) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 29, 29) : BV:8
80 : ite(75, 29, 79) : BV:8
81 : ite(72, 23, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(66, 11, 82) : BV:8
84 : bvule(2, 5) : BOOL
85 : bvule(5, 8) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(12, 5) : BOOL
88 : bvule(5, 14) : BOOL
89 : and(87, 88) : BOOL
90 : bvule(18, 5) : BOOL
91 : bvule(5, 20) : BOOL
92 : and(90, 91) : BOOL
93 : bvule(24, 5) : BOOL
94 : bvule(5, 26) : BOOL
95 : and(93, 94) : BOOL
96 : bvule(30, 5) : BOOL
97 : bvule(5, 32) : BOOL
98 : and(96, 97) : BOOL
99 : ite(98, 29, 29) : BV:8
100 : ite(95, 29, 99) : BV:8
101 : ite(92, 23, 100) : BV:8
102 : ite(89, 17, 101) : BV:8
103 : ite(86, 11, 102) : BV:8
104 : bvconcat(39, 61, 83, 103) : BV:32
105 : lambda(1, 104) : FUNCTION[BV:32 -> BV:32]
106 : sym_const(105) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform630 : BV:32
3 : Lambda6499 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6500 : BV:32
6 : unit : UNIT
7 : 21565230 { 0x1490f2e +1.57077574e131 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 536871551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536871552; 536871555 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 536871556; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3635037473
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3v487.ce966.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce966 d230841fe5a8305cf79583339816386d
=input.spec-%var-arr-1
1 : Lambda6675 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6676 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6678 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6679 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6646 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform651 : BV:32
3 : Lambda6682 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6683 : BV:32
6 : unit : UNIT
7 : 1289202502 { 0x4cd7ab46 +1.68491435e26 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform650 : BV:32
3 : Lambda6680 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6681 : BV:32
6 : unit : UNIT
7 : 720689734 { 0x2af4da46 +1.91291117e214 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
285172310
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3.ce967.num_edges_traversed0
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce967 af172b38ca809d1f347dfe1bbd5bb7a
=input.spec-%var-arr-1
1 : Lambda6693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6694 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6697 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6698 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform655 : BV:32
3 : Lambda6701 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6702 : BV:32
6 : unit : UNIT
7 : 1981092109 { 0x7615110d +1.16458284e109 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6661 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform654 : BV:32
3 : Lambda6699 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6700 : BV:32
6 : unit : UNIT
7 : 1227691396 { 0x492d1584 +1.35221910e19 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
902762413
=counter_example_end
=global nodece 14 num_edges_traversed 0
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce1033.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce1033 54b6214dd6c2f251ec5039a862b23fc
=input.spec-%var-arr-1
1 : Lambda298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda299 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda299 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda278 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.dst.llvm-%arr
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1425295597 { 0x54f448ed +1.90847551e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1424842033
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 16
=global nodece 16 nodece z3.ce1027.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1027 8147e7cd76874cbefd3a9eabe2a834ca
=input.spec-%var-arr-1
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda438 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.dst.llvm-%arr
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 822414643 { 0x31050d33 +1.3946530e227 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
758325269
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 17
=global nodece 17 nodece z3.ce1021.num_edges_traversed2
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce1021 689dbd7d743719e4e9dca87bed6ecf2
=input.spec-%var-arr-1
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.dst.llvm-%arr
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1420111171 { 0x54a52d43 +1.29044377e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3936709643 { 0xeaa56c0b -358257653 -1.29235970e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3860458283 { 0xe619eb2b -434509013 -1.20248925e77 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
155419542
=counter_example_end
=global nodece 17 num_edges_traversed 2
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 18
=global nodece 18 nodece z3v487.ce1017.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3v487.ce1017 62ac84849eecbcb26cf8043646cea3c
=input.spec-%var-arr-1
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-%arr
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1458056982 { 0x56e82f16 +1.81393694e46 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 887 { 0x377 +1.10573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2266038851 { 0x87110243 -2028928445 -1.13288152e143 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1729516611
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 19
=global nodece 19 nodece z3v487.ce1013.num_edges_traversed2
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce1013 e1c93ac77fb4665f8e17911c9315a89
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1563690513 { 0x5d340611 +1.40643513e59 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2853268058
=counter_example_end
=global nodece 19 num_edges_traversed 2
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 20
=global nodece 20 nodece z3.ce1009.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce1009 75db271fe462ea776e735a17c5a5146f
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 807147041 { 0x301c1621 +1.21942532e225 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2652988023
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 21
=global nodece 21 nodece z3.ce1005.num_edges_traversed2
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce1005 d585dfef86cd56f3e79366c5297a3e4e
=input.spec-%var-arr-1
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda1069 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda1070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 628532001 { 0x2576a321 +1.92685329e203 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2199990060
=counter_example_end
=global nodece 21 num_edges_traversed 2
=global nodece 21 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 22
=global nodece 22 nodece z3v487.ce997.num_edges_traversed1
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3v487.ce997 ee89d6f746e6d1c946f31d60df4cec3
=input.spec-%var-arr-1
1 : Lambda6675 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6676 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6678 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6679 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6646 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform651 : BV:32
3 : Lambda6682 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6683 : BV:32
6 : unit : UNIT
7 : 1289202502 { 0x4cd7ab46 +1.68491435e26 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform650 : BV:32
3 : Lambda6680 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6681 : BV:32
6 : unit : UNIT
7 : 720689734 { 0x2af4da46 +1.91291117e214 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
285172310
=counter_example_end
=global nodece 22 num_edges_traversed 1
=global nodece 22 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 23
=global nodece 23 nodece z3.ce993.num_edges_traversed1
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3.ce993 5a47d79210dc91835353d48618bc34
=input.spec-%var-arr-1
1 : Lambda6693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6694 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6697 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6698 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform655 : BV:32
3 : Lambda6701 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6702 : BV:32
6 : unit : UNIT
7 : 1981092109 { 0x7615110d +1.16458284e109 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6661 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform654 : BV:32
3 : Lambda6699 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6700 : BV:32
6 : unit : UNIT
7 : 1227691396 { 0x492d1584 +1.35221910e19 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
902762413
=counter_example_end
=global nodece 23 num_edges_traversed 1
=global nodece 23 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 24
=global nodece 24 nodece z3.ce1280.num_edges_traversed1
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce1280 8cb085bb2865cf311aef712c673d327d
=input.spec-%var-arr-1
1 : Lambda9235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9236 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9239 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9240 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform911 : BV:32
3 : Lambda9243 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9244 : BV:32
6 : unit : UNIT
7 : 1494388770 { 0x59129022 +1.14502358e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform910 : BV:32
3 : Lambda9241 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9242 : BV:32
6 : unit : UNIT
7 : 1495363894 { 0x59217136 +1.26126742e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2885681152 { 0xac000000 -1409286144 -1.0e217 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 815719075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 815719076; 815719079 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 815719080; 1547730463 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1547730464; 1547730467 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1547730468; 2885681151 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2885681152; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 815719079 { 0x309ee2a7 +1.24129188e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1547730467 { 0x5c407e23 +1.50384938e57 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3523207601
=counter_example_end
=global nodece 24 num_edges_traversed 1
=global nodece 24 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 25
=global nodece 25 nodece z3.ce1304.num_edges_traversed1
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce1304 17d7afdb1a65f5c85f2623b19247e36
=input.spec-%var-arr-1
1 : Lambda9431 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9432 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9435 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9436 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform935 : BV:32
3 : Lambda9439 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9440 : BV:32
6 : unit : UNIT
7 : 1151267922 { 0x449ef452 +1.24183106e10 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9407 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 33554432 { 0x2000000 +1.0e133 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform934 : BV:32
3 : Lambda9437 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9438 : BV:32
6 : unit : UNIT
7 : 1958872763 { 0x74c206bb +1.51583039e106 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1006108672 { 0x3bf80000 +1.93750000e248 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2188022803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2188022804; 2188022807 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2188022808; 3452230175 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3452230176; 3452230179 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3452230180; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2188022807 { 0x826a9417 -2106944489 -1.83264434e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3452230179 { 0xcdc4da23 -842737117 -1.53790700e28 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1916121496
=counter_example_end
=global nodece 25 num_edges_traversed 1
=global nodece 25 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 26
=global nodece 26 nodece z3v487.ce1305.num_edges_traversed1
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce1305 1cd3a9bd7c56c62778dc8d82973920ed
=input.spec-%var-arr-1
1 : Lambda9451 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9452 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9454 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9455 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda9414 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8388608 { 0x800000 +1.0e130 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform939 : BV:32
3 : Lambda9458 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9459 : BV:32
6 : unit : UNIT
7 : 396930068 { 0x17a8ac14 +1.31775140e176 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform938 : BV:32
3 : Lambda9456 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9457 : BV:32
6 : unit : UNIT
7 : 1784501788 { 0x6a5d561c +1.72919034e85 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3472848633
=counter_example_end
=global nodece 26 num_edges_traversed 1
=global nodece 26 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 27
=global nodece 27 nodece z3.ce1328.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce1328 863846674286976b1553123de97cb65e
=input.spec-%var-arr-1
1 : Lambda9627 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9628 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform959 : BV:32
3 : Lambda9635 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9636 : BV:32
6 : unit : UNIT
7 : 1461664863 { 0x571f3c5f +1.24402987e47 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9603 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 268435456 { 0x10000000 +1.0e161 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform958 : BV:32
3 : Lambda9633 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9634 : BV:32
6 : unit : UNIT
7 : 1219439564 { 0x48af2bcc +1.36852407e18 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 33554560 { 0x2000080 +1.1525e133 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 843719411 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 843719412; 843719415 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 843719416; 1368568747 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1368568748; 1368568751 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1368568752; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1368568751 { 0x5192b3af +1.14610850e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 843719415 { 0x324a22f7 +1.57919204e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3228033079
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 28
=global nodece 28 nodece z3v487.ce1329.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce1329 d4eca9214f23bec1e65ecc545d5326b
=input.spec-%var-arr-1
1 : Lambda9647 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9648 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9650 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9651 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda9610 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform963 : BV:32
3 : Lambda9654 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9655 : BV:32
6 : unit : UNIT
7 : 79472744 { 0x4bca868 +1.47388935e138 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform962 : BV:32
3 : Lambda9652 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9653 : BV:32
6 : unit : UNIT
7 : 358653684 { 0x15609ef4 +1.75485086e171 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3815626784
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 29
=global nodece 29 nodece z3v487.ce1352.num_edges_traversed1
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce1352 8f228c4276a4cd8e381aaac5ff1d7e84
=input.spec-%var-arr-1
1 : Lambda9828 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9829 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 8) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9831 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9832 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 4) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(8, 16) : BOOL
22 : bvule(16, 8) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 7, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda9799 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(9, 1) : BOOL
11 : bvule(1, 9) : BOOL
12 : and(10, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(7, 8, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform983 : BV:32
3 : Lambda9835 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9836 : BV:32
6 : unit : UNIT
7 : 425612501 { 0x195e54d5 +1.73696386e179 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2415920256 { 0x90000480 -1879047040 -1.13732e161 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform982 : BV:32
3 : Lambda9833 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9834 : BV:32
6 : unit : UNIT
7 : 1368813385 { 0x51966f49 +1.17527115e36 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483642 { 0x7ffffffa +1.99999928e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 131076; 2147483641 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483642; 2415920255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2415920256; 2415920259 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2415920260; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2415920256 { 0x90000480 -1879047040 -1.13732e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2415920259 { 0x90000483 -1879047037 -1.13768e161 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2359537575
=counter_example_end
=global nodece 29 num_edges_traversed 1
=global nodece 29 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 30
=global nodece 30 nodece z3.ce1376.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce1376 87d1f0202d159ff03062896d2fd51d9
=input.spec-%var-arr-1
1 : Lambda10023 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10024 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10027 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10028 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1007 : BV:32
3 : Lambda10031 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda10032 : BV:32
6 : unit : UNIT
7 : 379637331 { 0x16a0ce53 +1.25629651e174 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 794682308 { 0x2f5de3c4 +1.73351335e223 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1325152780 { 0x4efc3a0c +1.97052145e30 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1006 : BV:32
3 : Lambda10029 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda10030 : BV:32
6 : unit : UNIT
7 : 12099822 { 0xb8a0ee +1.44241118e130 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2776983552 { 0xa5856800 -1517983744 -1.4223632e204 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 794682307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 794682308; 794682311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 794682312; 1325152779 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1325152780; 1325152783 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1325152784; 2776983551 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2776983552; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1325152780 { 0x4efc3a0c +1.97052145e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1325152783 { 0x4efc3a0f +1.97052180e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 794682308 { 0x2f5de3c4 +1.73351335e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 794682311 { 0x2f5de3c7 +1.73351371e223 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1522403001
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 31
=global nodece 31 nodece z3.ce1945.num_edges_traversed0
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(epsilon)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3.ce1945 d4dadc7611743c8564fc0538c249b
=input.spec-%var-arr-1
1 : Lambda18696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18697 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda18700 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18701 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2267 : BV:32
3 : Lambda18704 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda18705 : BV:32
6 : unit : UNIT
7 : 336287401 { 0x140b56a9 +1.8858215e169 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda18672 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 536870912 { 0x20000000 +1.0e193 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3076519000 { 0xb75ff458 -1218448296 -1.74964427e239 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1629028048 { 0x6118fed0 +1.19527626e67 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2266 : BV:32
3 : Lambda18702 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda18703 : BV:32
6 : unit : UNIT
7 : 1103503174 { 0x41c61f46 +1.54782938e4 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1629028047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1629028048; 1629028051 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1629028052; 3076518999 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3076519000; 3076519003 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3076519004; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1629028048 { 0x6118fed0 +1.19527626e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1629028051 { 0x6118fed3 +1.19527661e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3076519000 { 0xb75ff458 -1218448296 -1.74964427e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3076519003 { 0xb75ff45b -1218448293 -1.74964463e239 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2287299801
=counter_example_end
=global nodece 31 num_edges_traversed 0
=global nodece 31 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 32
=global nodece 32 nodece z3v487.ce1946.num_edges_traversed0
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(epsilon)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3v487.ce1946 43b7bcbc6d39746f5ada806ad7a35c9a
=input.spec-%var-arr-1
1 : Lambda18716 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18717 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda18719 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda18720 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda18679 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2271 : BV:32
3 : Lambda18723 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda18724 : BV:32
6 : unit : UNIT
7 : 1011175170 { 0x3c454f02 +1.54147362e249 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 396919056 { 0x17a88110 +1.31643867e176 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2270 : BV:32
3 : Lambda18721 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda18722 : BV:32
6 : unit : UNIT
7 : 1842999093 { 0x6dd9ef35 +1.70261251e92 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 396919055 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 396919056; 396919059 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 396919060; 2147483647 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 396919056 { 0x17a88110 +1.31643867e176 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 396919059 { 0x17a88113 +1.31643903e176 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3605156672
=counter_example_end
=global nodece 32 num_edges_traversed 0
=global nodece 32 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 33
=global nodece 33 nodece z3.ce2000.num_edges_traversed3
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3.ce2000 9169adcc535cced4272ef7f26b27bdf
=nextpc_const.1
1 : 96018484 { 0x5b92034 +1.44629526e140 } : BV:32
=input.spec-%var-arr-1
1 : Lambda298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda299 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda298 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda299 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda278 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.dst.llvm-%arr
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 219 , m_adder -> 86), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 96018484 , 1000 , 8 ) -> 1735635100, () -> 95014882, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1735635100 { 0x6773b09c +1.90382719e79 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1425295597 { 0x54f448ed +1.90847551e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 219 , m_adder -> 86), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3258430581
=counter_example_end
=global nodece 33 num_edges_traversed 3
=global nodece 33 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 34
=global nodece 34 nodece z3.ce1997.num_edges_traversed3
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce1997 cf8b2d531ef69af1c0d3b3a70abe6
=nextpc_const.1
1 : 2090445306 { 0x7c99a9fa +1.20049977e122 } : BV:32
=input.spec-%var-arr-1
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda438 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.dst.llvm-%arr
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 31 , m_adder -> 190), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2090445306 , 1000 , 8 ) -> 817259110, () -> 356682857, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 817259110 { 0x30b66266 +1.42487788e226 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 822414643 { 0x31050d33 +1.3946530e227 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 31 , m_adder -> 190), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3494221081
=counter_example_end
=global nodece 34 num_edges_traversed 3
=global nodece 34 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 35
=global nodece 35 nodece z3.ce1994.num_edges_traversed3
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3.ce1994 8f2b6b993eb64fe4a1e21c97b06d72
=nextpc_const.1
1 : 2108327072 { 0x7daa84a0 +1.33217239e124 } : BV:32
=input.spec-%var-arr-1
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.dst.llvm-%arr
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 65), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2108327072 , 1000 , 8 ) -> 1049355574, () -> 437850325, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1049355574 { 0x3e8be536 +1.9293246e254 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1420111171 { 0x54a52d43 +1.29044377e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3936709643 { 0xeaa56c0b -358257653 -1.29235970e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3860458283 { 0xe619eb2b -434509013 -1.20248925e77 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 65), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1399876490
=counter_example_end
=global nodece 35 num_edges_traversed 3
=global nodece 35 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 36
=global nodece 36 nodece z3v487.ce1991.num_edges_traversed3
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce1991 3eff692708aed2259748f32dc50746
=nextpc_const.1
1 : 269248613 { 0x100c6865 +1.9693586e161 } : BV:32
=input.spec-%var-arr-1
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-%arr
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 101), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 269248613 , 1000 , 8 ) -> 650281370, () -> 1847443903, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 650281370 { 0x26c2819a +1.51958012e206 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1458056982 { 0x56e82f16 +1.81393694e46 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 887 { 0x377 +1.10573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2266038851 { 0x87110243 -2028928445 -1.13288152e143 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 101), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
147144807
=counter_example_end
=global nodece 36 num_edges_traversed 3
=global nodece 36 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 37
=global nodece 37 nodece z3v487.ce1988.num_edges_traversed3
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3v487.ce1988 4c4df06f992ad618554390b775d8a763
=nextpc_const.1
1 : 920631648 { 0x36dfb960 +1.74784469e238 } : BV:32
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 96 , m_adder -> 29), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 920631648 , 1000 , 8 ) -> 1157084866, () -> 268488692, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1157084866 { 0x44f7b6c2 +1.93526482e10 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1563690513 { 0x5d340611 +1.40643513e59 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 96 , m_adder -> 29), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3662336526
=counter_example_end
=global nodece 37 num_edges_traversed 3
=global nodece 37 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 38
=global nodece 38 nodece z3.ce1985.num_edges_traversed3
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce1985 cf71cf89d53b3aac387fda96b19db6
=nextpc_const.1
1 : 1947753737 { 0x74185d09 +1.19033920e105 } : BV:32
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 146 , m_adder -> 180), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1947753737 , 1000 , 8 ) -> 2090695345, () -> 1039736795, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2090695345 { 0x7c9d7ab1 +1.23030674e122 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 807147041 { 0x301c1621 +1.21942532e225 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 146 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
470427483
=counter_example_end
=global nodece 38 num_edges_traversed 3
=global nodece 38 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 39
=global nodece 39 nodece z3.ce1982.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3.ce1982 1228c1ca7ac1c7254240c4c3585d79bb
=nextpc_const.1
1 : 411222170 { 0x1882c09a +1.2150273e178 } : BV:32
=input.spec-%var-arr-1
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda1069 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda1070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 128 , m_adder -> 175), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 411222170 , 1000 , 8 ) -> 354785019, () -> 1526142282, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 354785019 { 0x152596fb +1.29367005e171 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 628532001 { 0x2576a321 +1.92685329e203 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 128 , m_adder -> 175), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1868664768
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 40
=global nodece 40 nodece z3v487.ce1979.num_edges_traversed2
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3v487.ce1979 d63e209834fc1dc99ff7a54eb860e0
=nextpc_const.1
1 : 326156233 { 0x1370bfc9 +1.88085281e167 } : BV:32
=input.spec-%var-arr-1
1 : Lambda6675 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6676 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6678 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6679 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6646 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform651 : BV:32
3 : Lambda6682 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6683 : BV:32
6 : unit : UNIT
7 : 1289202502 { 0x4cd7ab46 +1.68491435e26 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 238 , m_adder -> 6), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 326156233 , 1000 , 8 ) -> 1318549221, () -> 503797961, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform650 : BV:32
3 : Lambda6680 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6681 : BV:32
6 : unit : UNIT
7 : 720689734 { 0x2af4da46 +1.91291117e214 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1318549221 { 0x4e9776e5 +1.18331587e30 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 238 , m_adder -> 6), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2841157194
=counter_example_end
=global nodece 40 num_edges_traversed 2
=global nodece 40 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 41
=global nodece 41 nodece z3.ce1976.num_edges_traversed2
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3.ce1976 453f2c91bdc2278bbade5d46a9bc8052
=nextpc_const.1
1 : 1273677158 { 0x4beac566 +1.83414912e24 } : BV:32
=input.spec-%var-arr-1
1 : Lambda6693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6694 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6697 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6698 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform655 : BV:32
3 : Lambda6701 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6702 : BV:32
6 : unit : UNIT
7 : 1981092109 { 0x7615110d +1.16458284e109 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6661 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1273677158 , 1000 , 8 ) -> 272977648, () -> 1815739229, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform654 : BV:32
3 : Lambda6699 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6700 : BV:32
6 : unit : UNIT
7 : 1227691396 { 0x492d1584 +1.35221910e19 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 272977648 { 0x10454ef0 +1.54147148e161 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2505118513
=counter_example_end
=global nodece 41 num_edges_traversed 2
=global nodece 41 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 42
=global nodece 42 nodece z3.ce1973.num_edges_traversed2
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3.ce1973 7d1444a78eee3c2ee1db53db37fbacad
=nextpc_const.1
1 : 165567001 { 0x9de5a19 +1.73712456e148 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9236 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9239 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9240 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform911 : BV:32
3 : Lambda9243 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9244 : BV:32
6 : unit : UNIT
7 : 1494388770 { 0x59129022 +1.14502358e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 165567001 , 1000 , 8 ) -> 402955476, () -> 205054593, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform910 : BV:32
3 : Lambda9241 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9242 : BV:32
6 : unit : UNIT
7 : 1495363894 { 0x59217136 +1.26126742e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 402955476 { 0x18049cd4 +1.3603601e177 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 815719075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 815719076; 815719079 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 815719080; 1547730463 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1547730464; 1547730467 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1547730468; 2885681151 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2885681152; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 815719079 { 0x309ee2a7 +1.24129188e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1547730467 { 0x5c407e23 +1.50384938e57 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1734570229
=counter_example_end
=global nodece 42 num_edges_traversed 2
=global nodece 42 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 43
=global nodece 43 nodece z3.ce1970.num_edges_traversed2
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(epsilon)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3.ce1970 48158820a4fd6a152e14dd1ff7b5ec5
=nextpc_const.1
1 : 144415902 { 0x89b9c9e +1.21571707e146 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9431 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9432 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9435 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9436 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform935 : BV:32
3 : Lambda9439 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9440 : BV:32
6 : unit : UNIT
7 : 1151267922 { 0x449ef452 +1.24183106e10 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9407 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 33554432 { 0x2000000 +1.0e133 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 146 , m_adder -> 224), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 144415902 , 1000 , 8 ) -> 1615675113, () -> 2074074472, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform934 : BV:32
3 : Lambda9437 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9438 : BV:32
6 : unit : UNIT
7 : 1958872763 { 0x74c206bb +1.51583039e106 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1615675113 { 0x604d3ee9 +1.60348236e65 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2188022803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2188022804; 2188022807 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2188022808; 3452230175 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3452230176; 3452230179 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3452230180; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2188022807 { 0x826a9417 -2106944489 -1.83264434e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3452230179 { 0xcdc4da23 -842737117 -1.53790700e28 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 146 , m_adder -> 224), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3486388076
=counter_example_end
=global nodece 43 num_edges_traversed 2
=global nodece 43 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 44
=global nodece 44 nodece z3v487.ce1967.num_edges_traversed2
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce1967 21ae2c5dd6bd648c4dc48b5c48f5ac18
=nextpc_const.1
1 : 1774132375 { 0x69bf1c97 +1.49305999e84 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9451 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9452 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9454 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9455 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda9414 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8388608 { 0x800000 +1.0e130 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform939 : BV:32
3 : Lambda9458 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9459 : BV:32
6 : unit : UNIT
7 : 396930068 { 0x17a8ac14 +1.31775140e176 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 250), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1774132375 , 1000 , 8 ) -> 972945049, () -> 1865169615, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform938 : BV:32
3 : Lambda9456 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9457 : BV:32
6 : unit : UNIT
7 : 1784501788 { 0x6a5d561c +1.72919034e85 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 972945049 { 0x39fdf699 +1.98408806e244 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 252 , m_adder -> 250), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4065118653
=counter_example_end
=global nodece 44 num_edges_traversed 2
=global nodece 44 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 45
=global nodece 45 nodece z3.ce1964.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce1964 658bcc47c528d6cdf45aa7414df28c3
=nextpc_const.1
1 : 1095801849 { 0x41509bf9 +1.62975990e3 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9627 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9628 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform959 : BV:32
3 : Lambda9635 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9636 : BV:32
6 : unit : UNIT
7 : 1461664863 { 0x571f3c5f +1.24402987e47 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9603 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 268435456 { 0x10000000 +1.0e161 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 131), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1095801849 , 1000 , 8 ) -> 1956845832, () -> 683825722, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform958 : BV:32
3 : Lambda9633 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9634 : BV:32
6 : unit : UNIT
7 : 1219439564 { 0x48af2bcc +1.36852407e18 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1956845832 { 0x74a31908 +1.27420139e106 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 843719411 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 843719412; 843719415 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 843719416; 1368568747 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1368568748; 1368568751 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1368568752; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1368568751 { 0x5192b3af +1.14610850e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 843719415 { 0x324a22f7 +1.57919204e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 131), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
42469659
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 46
=global nodece 46 nodece z3v487.ce1961.num_edges_traversed2
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3v487.ce1961 1abaaf33d921f15dd62de9a684ee5710
=nextpc_const.1
1 : 1709224453 { 0x65e0b205 +1.75543272e76 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9647 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9648 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9650 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9651 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda9610 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform963 : BV:32
3 : Lambda9654 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9655 : BV:32
6 : unit : UNIT
7 : 79472744 { 0x4bca868 +1.47388935e138 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 195 , m_adder -> 61), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1709224453 , 1000 , 8 ) -> 1672339351, () -> 940379312, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform962 : BV:32
3 : Lambda9652 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9653 : BV:32
6 : unit : UNIT
7 : 358653684 { 0x15609ef4 +1.75485086e171 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1672339351 { 0x63addf97 +1.35838592e72 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 195 , m_adder -> 61), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
810329460
=counter_example_end
=global nodece 46 num_edges_traversed 2
=global nodece 46 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 47
=global nodece 47 nodece z3v487.ce1958.num_edges_traversed2
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce1958 e9784c293316668076d2ad56e88020c3
=nextpc_const.1
1 : 906058824 { 0x36015c48 +1.1062870e237 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9828 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9829 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 8) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9831 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9832 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 4) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(8, 16) : BOOL
22 : bvule(16, 8) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 7, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda9799 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(9, 1) : BOOL
11 : bvule(1, 9) : BOOL
12 : and(10, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(7, 8, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform983 : BV:32
3 : Lambda9835 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9836 : BV:32
6 : unit : UNIT
7 : 425612501 { 0x195e54d5 +1.73696386e179 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2415920256 { 0x90000480 -1879047040 -1.13732e161 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 72), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 906058824 , 1000 , 8 ) -> 1532545221, () -> 1271426541, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform982 : BV:32
3 : Lambda9833 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9834 : BV:32
6 : unit : UNIT
7 : 1368813385 { 0x51966f49 +1.17527115e36 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1532545221 { 0x5b58c8c5 +1.69362699e55 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 131076; 2147483641 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483642; 2415920255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2415920256; 2415920259 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2415920260; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2415920256 { 0x90000480 -1879047040 -1.13732e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2415920259 { 0x90000483 -1879047037 -1.13768e161 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 198 , m_adder -> 72), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3141448075
=counter_example_end
=global nodece 47 num_edges_traversed 2
=global nodece 47 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 48
=global nodece 48 nodece z3.ce1955.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce1955 4d95379c3ab54351cba4f8dc529e40
=nextpc_const.1
1 : 1354475683 { 0x50bba8a3 +1.46608388e34 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10023 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10024 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10027 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10028 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1007 : BV:32
3 : Lambda10031 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda10032 : BV:32
6 : unit : UNIT
7 : 379637331 { 0x16a0ce53 +1.25629651e174 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 794682308 { 0x2f5de3c4 +1.73351335e223 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1325152780 { 0x4efc3a0c +1.97052145e30 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 135 , m_adder -> 41), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1354475683 , 1000 , 8 ) -> 1165016020, () -> 1670167185, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform1006 : BV:32
3 : Lambda10029 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda10030 : BV:32
6 : unit : UNIT
7 : 12099822 { 0xb8a0ee +1.44241118e130 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1165016020 { 0x4570bbd4 +1.88073205e11 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 794682307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 794682308; 794682311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 794682312; 1325152779 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1325152780; 1325152783 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1325152784; 2776983551 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2776983552; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1325152780 { 0x4efc3a0c +1.97052145e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1325152783 { 0x4efc3a0f +1.97052180e30 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 794682308 { 0x2f5de3c4 +1.73351335e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 794682311 { 0x2f5de3c7 +1.73351371e223 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 135 , m_adder -> 41), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1237818749
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 49
=global nodece 49 nodece z3.ce2318.num_edges_traversed1
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce2318 e7649a5259b5f62decc46aceedd32
=nextpc_const.1
1 : 1040939303 { 0x3e0b7927 +1.8963477e253 } : BV:32
=input.spec-%var-arr-1
1 : Lambda21318 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda21319 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda21322 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda21323 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2541 : BV:32
3 : Lambda21326 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda21327 : BV:32
6 : unit : UNIT
7 : 1283831355 { 0x4c85b63b +1.4462373e26 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda21294 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2 { 0x2 +1.23e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2917241680 { 0xade19350 -1377725616 -1.76230812e220 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 226390252 { 0xd7e70ec +1.98782110e155 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 246 , m_adder -> 35), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1040939303 , 1000 , 8 ) -> 993426452, () -> 266290831, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2540 : BV:32
3 : Lambda21324 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda21325 : BV:32
6 : unit : UNIT
7 : 648241660 { 0x26a361fc +1.27642774e206 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 993426452 { 0x3b367c14 +1.42566156e247 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 226390251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 226390252; 226390255 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 226390256; 2917241679 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2917241680; 2917241683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2917241684; 3221602303 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3221602304; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 226390252 { 0xd7e70ec +1.98782110e155 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 226390255 { 0xd7e70ef +1.98782145e155 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2917241680 { 0xade19350 -1377725616 -1.76230812e220 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2917241683 { 0xade19353 -1377725613 -1.76230847e220 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 246 , m_adder -> 35), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1256566324
=counter_example_end
=global nodece 49 num_edges_traversed 1
=global nodece 49 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 50
=global nodece 50 nodece z3.ce2846.num_edges_traversed0
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3.ce2846 51ebd28ea8d95f1834251aa7c15a30d5
=input.spec-%var-arr-1
1 : Lambda32152 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32153 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 2551491007 { 0x9814a9bf -1743476289 -1.16143023e177 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 2551491006 { 0x9814a9be -1743476290 -1.16143012e177 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 2551491004 { 0x9814a9bc -1743476292 -1.16142988e177 } : BV:32
35 : eq(30, 34) : BOOL
36 : eq(30, 27) : BOOL
37 : 2551491005 { 0x9814a9bd -1743476291 -1.16143000e177 } : BV:32
38 : eq(30, 37) : BOOL
39 : 3 { 0x3 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(36, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(31, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 27) : BOOL
48 : eq(44, 37) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(37, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 27) : BOOL
57 : eq(53, 37) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(34, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 27) : BOOL
66 : eq(62, 37) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2551491004 { 0x9814a9bc -1743476292 -1.16142988e177 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32155 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4095 { 0xfff +1.48816e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4096 { 0x1000 +1.48828e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32156 : BV:32
18 : eq(17, 2) : BOOL
19 : 2551491007 { 0x9814a9bf -1743476289 -1.16143023e177 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 2551491006 { 0x9814a9be -1743476290 -1.16143012e177 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2551491004 { 0x9814a9bc -1743476292 -1.16142988e177 } : BV:32
27 : eq(22, 26) : BOOL
28 : eq(22, 19) : BOOL
29 : 2551491005 { 0x9814a9bd -1743476291 -1.16143000e177 } : BV:32
30 : eq(22, 29) : BOOL
31 : 3 { 0x3 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(28, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(23, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 19) : BOOL
40 : eq(36, 29) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(29, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 29) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(26, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 19) : BOOL
58 : eq(54, 29) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 2551491007 { 0x9814a9bf -1743476289 -1.16143023e177 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 2551491006 { 0x9814a9be -1743476290 -1.16143012e177 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2551491004 { 0x9814a9bc -1743476292 -1.16142988e177 } : BV:32
12 : eq(7, 11) : BOOL
13 : eq(7, 4) : BOOL
14 : 2551491005 { 0x9814a9bd -1743476291 -1.16143000e177 } : BV:32
15 : eq(7, 14) : BOOL
16 : 3 { 0x3 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(13, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(8, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 4) : BOOL
25 : eq(21, 14) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(14, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 4) : BOOL
34 : eq(30, 14) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(11, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 4) : BOOL
43 : eq(39, 14) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4077 : BV:32
3 : Lambda32159 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda32160 : BV:32
6 : unit : UNIT
7 : 859706319 { 0x333e13cf +1.48497951e231 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4095 ] -> true, [ 4096; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda32132 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4095 { 0xfff +1.48816e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4096 { 0x1000 +1.48828e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 2551491007 { 0x9814a9bf -1743476289 -1.16143023e177 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 2551491006 { 0x9814a9be -1743476290 -1.16143012e177 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 2551491004 { 0x9814a9bc -1743476292 -1.16142988e177 } : BV:32
25 : eq(20, 24) : BOOL
26 : eq(20, 17) : BOOL
27 : 2551491005 { 0x9814a9bd -1743476291 -1.16143000e177 } : BV:32
28 : eq(20, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(26, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(21, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 17) : BOOL
38 : eq(34, 27) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(27, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 27) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(24, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 17) : BOOL
56 : eq(52, 27) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3028 { 0xbd4 +1.36096e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3221729444 { 0xc007b0a4 -1073237852 -1.6007814e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4076 : BV:32
3 : Lambda32157 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda32158 : BV:32
6 : unit : UNIT
7 : 138059959 { 0x83aa0b7 +1.45802962e145 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2181038076 { 0x81fffffc -2113929220 -1.99999952e132 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3027 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3028; 3031 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3032; 2551491003 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2551491004; 2551491007 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2551491008; 3221729443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3221729444; 3221729447 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3221729448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2551491003 ] -> 3, [ 2551491004; 2551491007 ] -> 0, [ 2551491008; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3221729444 { 0xc007b0a4 -1073237852 -1.6007814e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3221729447 { 0xc007b0a7 -1073237849 -1.6007850e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3028 { 0xbd4 +1.36096e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3031 { 0xbd7 +1.36132e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1997068159
=counter_example_end
=global nodece 50 num_edges_traversed 0
=global nodece 50 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 51
=global nodece 51 nodece z3v487.ce2847.num_edges_traversed0
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3v487.ce2847 ffd8559e8bea02c31889079ec1df2f9
=input.spec-%var-arr-1
1 : Lambda32170 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32171 : BV:32
18 : eq(17, 2) : BOOL
19 : 705005095 { 0x2a058627 +1.4315650e213 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 705005092 { 0x2a058624 +1.4315614e213 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 705005093 { 0x2a058625 +1.4315626e213 } : BV:32
27 : eq(22, 26) : BOOL
28 : 705005094 { 0x2a058626 +1.4315638e213 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 705005092 { 0x2a058624 +1.4315614e213 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32173 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32174 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 705005095 { 0x2a058627 +1.4315650e213 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 705005092 { 0x2a058624 +1.4315614e213 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 705005093 { 0x2a058625 +1.4315626e213 } : BV:32
35 : eq(30, 34) : BOOL
36 : 705005094 { 0x2a058626 +1.4315638e213 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32137 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 705005095 { 0x2a058627 +1.4315650e213 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 705005092 { 0x2a058624 +1.4315614e213 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 705005093 { 0x2a058625 +1.4315626e213 } : BV:32
25 : eq(20, 24) : BOOL
26 : 705005094 { 0x2a058626 +1.4315638e213 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4081 : BV:32
3 : Lambda32177 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda32178 : BV:32
6 : unit : UNIT
7 : 1016084723 { 0x3c9038f3 +1.12673795e250 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda32141 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 705005095 { 0x2a058627 +1.4315650e213 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 705005092 { 0x2a058624 +1.4315614e213 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 705005093 { 0x2a058625 +1.4315626e213 } : BV:32
12 : eq(7, 11) : BOOL
13 : 705005094 { 0x2a058626 +1.4315638e213 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4080 : BV:32
3 : Lambda32175 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda32176 : BV:32
6 : unit : UNIT
7 : 781964902 { 0x2e9bd666 +1.21748042e222 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 316 { 0x13c +1.3767e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 705005091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 705005092; 705005095 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 705005096; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 705005091 ] -> 5, [ 705005092; 705005095 ] -> 0, [ 705005096; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3635113728
=counter_example_end
=global nodece 51 num_edges_traversed 0
=global nodece 51 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 52
=global nodece 52 nodece z3.ce2916.num_edges_traversed3
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce2916 d2c5c9e031a7e96c0e0d58118da24f
=nextpc_const.1
1 : 1273677158 { 0x4beac566 +1.83414912e24 } : BV:32
=input.spec-%var-arr-1
1 : Lambda6693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6694 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6697 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6698 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform655 : BV:32
3 : Lambda6701 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6702 : BV:32
6 : unit : UNIT
7 : 1981092109 { 0x7615110d +1.16458284e109 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 272977647 ] -> 0, [ 272977648; 272977648 ] -> 0, [ 272977649; 272977649 ] -> 0, [ 272977650; 272977650 ] -> 0, [ 272977651; 272977651 ] -> 0, [ 272977652; 272977652 ] -> 0, [ 272977653; 272977653 ] -> 0, [ 272977654; 272977654 ] -> 0, [ 272977655; 272977655 ] -> 0, [ 272977656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6661 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1273677158 , 1000 , 8 ) -> 272977648, () -> 1815739229, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4109 : BV:32
5 : Lambda32233 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda32234 : BV:32
8 : 1227691396 { 0x492d1584 +1.35221910e19 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 787508980 { 0x2ef06ef4 +1.87838602e222 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1884370064 { 0x70513490 +1.63441658e97 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 272977647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 272977648; 272977655 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 272977656; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 72002139 { 0x44aaa5b +1.58332383e137 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 968885360 { 0x39c00470 +1.50013542e244 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 272977648 { 0x10454ef0 +1.54147148e161 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 169943664 { 0xa212270 +1.25886344e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
440070164
=counter_example_end
=global nodece 52 num_edges_traversed 3
=global nodece 52 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 53
=global nodece 53 nodece z3.ce2977.num_edges_traversed4
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3.ce2977 c5d8bd429535b565ac4a8d4c77ccb6
=nextpc_const.1
1 : 1273677158 { 0x4beac566 +1.83414912e24 } : BV:32
=input.spec-%var-arr-1
1 : Lambda6693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6694 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6697 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6698 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform655 : BV:32
3 : Lambda6701 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6702 : BV:32
6 : unit : UNIT
7 : 1981092109 { 0x7615110d +1.16458284e109 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 272977647 ] -> 0, [ 272977648; 272977648 ] -> 0, [ 272977649; 272977649 ] -> 0, [ 272977650; 272977650 ] -> 0, [ 272977651; 272977651 ] -> 0, [ 272977652; 272977652 ] -> 0, [ 272977653; 272977653 ] -> 0, [ 272977654; 272977654 ] -> 0, [ 272977655; 272977655 ] -> 0, [ 272977656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6661 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1273677158 , 1000 , 8 ) -> 272977648, () -> 1815739229, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4109 : BV:32
5 : Lambda32233 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda32234 : BV:32
8 : 1227691396 { 0x492d1584 +1.35221910e19 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 787508980 { 0x2ef06ef4 +1.87838602e222 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1884370064 { 0x70513490 +1.63441658e97 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 272977647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 272977648; 272977655 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 272977656; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 72002139 { 0x44aaa5b +1.58332383e137 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 968885360 { 0x39c00470 +1.50013542e244 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 272977648 { 0x10454ef0 +1.54147148e161 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 169943664 { 0xa212270 +1.25886344e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
440070164
=counter_example_end
=global nodece 53 num_edges_traversed 4
=global nodece 53 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 54
=global nodece 54 nodece z3.ce2981.num_edges_traversed5
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce2981 a434a096f0fb436b60893dff56e58481
=nextpc_const.1
1 : 1273677158 { 0x4beac566 +1.83414912e24 } : BV:32
=input.spec-%var-arr-1
1 : Lambda6693 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6694 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6697 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6698 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform655 : BV:32
3 : Lambda6701 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda6702 : BV:32
6 : unit : UNIT
7 : 1981092109 { 0x7615110d +1.16458284e109 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 272977647 ] -> 0, [ 272977648; 272977648 ] -> 0, [ 272977649; 272977649 ] -> 0, [ 272977650; 272977650 ] -> 0, [ 272977651; 272977651 ] -> 0, [ 272977652; 272977652 ] -> 0, [ 272977653; 272977653 ] -> 0, [ 272977654; 272977654 ] -> 0, [ 272977655; 272977655 ] -> 0, [ 272977656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6661 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1273677158 , 1000 , 8 ) -> 272977648, () -> 1815739229, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4109 : BV:32
5 : Lambda32233 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda32234 : BV:32
8 : 1227691396 { 0x492d1584 +1.35221910e19 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 787508980 { 0x2ef06ef4 +1.87838602e222 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 272977648 { 0x10454ef0 +1.54147148e161 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1884370064 { 0x70513490 +1.63441658e97 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 272977647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 272977648; 272977655 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 272977656; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 72002139 { 0x44aaa5b +1.58332383e137 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 272977647 ] -> 0, [ 272977648; 272977648 ] -> 0, [ 272977649; 272977649 ] -> 0, [ 272977650; 272977650 ] -> 0, [ 272977651; 272977651 ] -> 0, [ 272977652; 272977652 ] -> 0, [ 272977653; 272977653 ] -> 0, [ 272977654; 272977654 ] -> 0, [ 272977655; 272977655 ] -> 0, [ 272977656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 968885360 { 0x39c00470 +1.50013542e244 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 272977648 { 0x10454ef0 +1.54147148e161 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 169943664 { 0xa212270 +1.25886344e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 245 , m_adder -> 137), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
440070164
=counter_example_end
=global nodece 54 num_edges_traversed 5
=global nodece 54 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 55
=global nodece 55 nodece z3.ce2906.num_edges_traversed3
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce2906 4d47bb830979598912362b4f158fa3
=nextpc_const.1
1 : 165567001 { 0x9de5a19 +1.73712456e148 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9236 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9239 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9240 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform911 : BV:32
3 : Lambda9243 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9244 : BV:32
6 : unit : UNIT
7 : 1494388770 { 0x59129022 +1.14502358e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 402955475 ] -> 0, [ 402955476; 402955476 ] -> 0, [ 402955477; 402955477 ] -> 0, [ 402955478; 402955478 ] -> 0, [ 402955479; 402955479 ] -> 0, [ 402955480; 402955480 ] -> 0, [ 402955481; 402955481 ] -> 0, [ 402955482; 402955482 ] -> 0, [ 402955483; 402955483 ] -> 0, [ 402955484; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 165567001 , 1000 , 8 ) -> 402955476, () -> 205054593, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4102 : BV:32
5 : Lambda32219 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda32220 : BV:32
8 : 1495363894 { 0x59217136 +1.26126742e51 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1541229991 { 0x5bdd4da7 +1.72893226e56 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1109203215 { 0x421d190f +1.22732722e5 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 402955475 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 402955476; 402955483 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 402955484; 815719075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 815719076; 815719079 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 815719080; 1547730463 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1547730464; 1547730467 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1547730468; 2885681151 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2885681152; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1140493031 { 0x43fa8ae7 +1.95736396e8 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1798563644 { 0x6b33e73c +1.40549421e87 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 402955476 { 0x18049cd4 +1.3603601e177 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 379995443 { 0x16a64533 +1.29898679e174 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 815719079 { 0x309ee2a7 +1.24129188e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1547730467 { 0x5c407e23 +1.50384938e57 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2106528424
=counter_example_end
=global nodece 55 num_edges_traversed 3
=global nodece 55 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 56
=global nodece 56 nodece z3v487.ce3184.num_edges_traversed1
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3v487.ce3184 128a80445105b50e34eca4b61264d5
=input.spec-%var-arr-1
1 : Lambda32981 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32982 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32985 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32952 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 134217728 { 0x8000000 +1.0e145 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4185 : BV:32
4 : Lambda32988 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32989 : BV:32
7 : 135321124 { 0x810d624 +1.13153505e145 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 646649892 { 0x268b1824 +1.8667421e206 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2512150536 { 0x95bc6008 -1782816760 -1.47168064e172 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4184 : BV:32
6 : Lambda32986 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32987 : BV:32
9 : 1629727181 { 0x6123a9cd +1.27861940e67 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483642 { 0x7ffffffa +1.99999928e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 646649891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 646649892; 646649895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 646649896; 2147483641 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483642; 2512150535 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2512150536; 2512150539 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2512150540; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2512150536 { 0x95bc6008 -1782816760 -1.47168064e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2512150539 { 0x95bc600b -1782816757 -1.47168099e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 646649892 { 0x268b1824 +1.8667421e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 646649895 { 0x268b1827 +1.8667457e206 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
845527671
=counter_example_end
=global nodece 56 num_edges_traversed 1
=global nodece 56 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 57
=global nodece 57 nodece z3v487.ce3198.num_edges_traversed2
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(epsilon)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3v487.ce3198 8236f59c274f6f581e74784d77cbd2a5
=nextpc_const.1
1 : 850148859 { 0x32ac3dfb +1.34564149e230 } : BV:32
=input.spec-%var-arr-1
1 : Lambda32981 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32982 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32985 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32952 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 134217728 { 0x8000000 +1.0e145 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4185 : BV:32
4 : Lambda32988 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32989 : BV:32
7 : 135321124 { 0x810d624 +1.13153505e145 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 646649892 { 0x268b1824 +1.8667421e206 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2512150536 { 0x95bc6008 -1782816760 -1.47168064e172 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 82 , m_adder -> 144), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 850148859 , 1000 , 8 ) -> 1641931037, () -> 206394101, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4184 : BV:32
6 : Lambda32986 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32987 : BV:32
9 : 1629727181 { 0x6123a9cd +1.27861940e67 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1641931037 { 0x61dde11d +1.73343241e68 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 646649891 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 646649892; 646649895 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 646649896; 2147483641 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483642; 2512150535 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2512150536; 2512150539 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2512150540; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2512150536 { 0x95bc6008 -1782816760 -1.47168064e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2512150539 { 0x95bc600b -1782816757 -1.47168099e172 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 646649892 { 0x268b1824 +1.8667421e206 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 646649895 { 0x268b1827 +1.8667457e206 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 82 , m_adder -> 144), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1456537435
=counter_example_end
=global nodece 57 num_edges_traversed 2
=global nodece 57 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 58
=global nodece 58 nodece z3.ce3185.num_edges_traversed1
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3.ce3185 478186bf8aaa1fe4ba2ffe0cad2db7b
=input.spec-%var-arr-1
1 : Lambda32999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33000 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33003 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33004 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4189 : BV:32
4 : Lambda33007 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33008 : BV:32
7 : 1281063818 { 0x4c5b7b8a +1.71470761e25 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda32967 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 255 { 0xff +1.3039e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 256 { 0x100 +1.3051e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2457284968 { 0x92773168 -1837682328 -1.93119525e165 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4155329276 { 0xf7ad4afc -139638020 -1.35385084e112 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4188 : BV:32
6 : Lambda33005 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33006 : BV:32
9 : 373426176 { 0x16420800 +1.51586914e173 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1133641728 { 0x43920000 +1.14062500e8 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2457284967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2457284968; 2457284971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2457284972; 4155329275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4155329276; 4155329279 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4155329280; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3755999232 { 0xdfe00000 -538968064 -1.75000000e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4155329276 { 0xf7ad4afc -139638020 -1.35385084e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4155329279 { 0xf7ad4aff -139638017 -1.35385119e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2457284968 { 0x92773168 -1837682328 -1.93119525e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2457284971 { 0x9277316b -1837682325 -1.93119561e165 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3161225654
=counter_example_end
=global nodece 58 num_edges_traversed 1
=global nodece 58 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 59
=global nodece 59 nodece z3.ce3218.num_edges_traversed2
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(epsilon)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3.ce3218 d9a8b3803fc934d06bda1ebc1b91be24
=nextpc_const.1
1 : 10155765 { 0x9af6f5 +1.21066153e130 } : BV:32
=input.spec-%var-arr-1
1 : Lambda32999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33000 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33003 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33004 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4189 : BV:32
4 : Lambda33007 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33008 : BV:32
7 : 1281063818 { 0x4c5b7b8a +1.71470761e25 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda32967 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 255 { 0xff +1.3039e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 256 { 0x100 +1.3051e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2457284968 { 0x92773168 -1837682328 -1.93119525e165 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4155329276 { 0xf7ad4afc -139638020 -1.35385084e112 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 110 , m_adder -> 93), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 10155765 , 1000 , 8 ) -> 70930937, () -> 873342474, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4188 : BV:32
6 : Lambda33005 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33006 : BV:32
9 : 373426176 { 0x16420800 +1.51586914e173 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 70930937 { 0x43a51f9 +1.45562660e137 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2457284967 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2457284968; 2457284971 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2457284972; 4155329275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4155329276; 4155329279 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4155329280; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3755999232 { 0xdfe00000 -538968064 -1.75000000e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4155329276 { 0xf7ad4afc -139638020 -1.35385084e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4155329279 { 0xf7ad4aff -139638017 -1.35385119e112 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2457284968 { 0x92773168 -1837682328 -1.93119525e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2457284971 { 0x9277316b -1837682325 -1.93119561e165 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 110 , m_adder -> 93), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
513892266
=counter_example_end
=global nodece 59 num_edges_traversed 2
=global nodece 59 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 60
=global nodece 60 nodece z3.ce3233.num_edges_traversed1
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce3233 378897ca87eda682dc3d9e27d31d1ef
=input.spec-%var-arr-1
1 : Lambda33242 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33243 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33246 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33247 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4217 : BV:32
4 : Lambda33250 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33251 : BV:32
7 : 1690258387 { 0x64bf4bd3 +1.49450147e74 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda33218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16384 { 0x4000 +1.195312e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4216 : BV:32
6 : Lambda33248 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33249 : BV:32
9 : 1688060167 { 0x649dc107 +1.23245322e74 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3601071104 { 0xd6a3fc00 -693896192 -1.28112792e46 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1031170679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1031170680; 1031170683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1031170684; 1853272783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1853272784; 1853272787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1853272788; 3601071103 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3601071104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4290511872 { 0xffbc0400 -4455424 -1.46887207e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1031170683 { 0x3d766a7b +1.92512452e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1853272787 { 0x6e76b2d3 +1.92733228e93 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3931495936
=counter_example_end
=global nodece 60 num_edges_traversed 1
=global nodece 60 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 61
=global nodece 61 nodece z3.ce3247.num_edges_traversed2
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(epsilon)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce3247 7612f5594628ce4744ce28dfbd03284
=nextpc_const.1
1 : 1127383746 { 0x433282c2 +1.39461541e7 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33242 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33243 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33246 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33247 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4217 : BV:32
4 : Lambda33250 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33251 : BV:32
7 : 1690258387 { 0x64bf4bd3 +1.49450147e74 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda33218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16384 { 0x4000 +1.195312e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1127383746 , 1000 , 8 ) -> 642605776, () -> 473142890, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4216 : BV:32
6 : Lambda33248 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33249 : BV:32
9 : 1688060167 { 0x649dc107 +1.23245322e74 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 642605776 { 0x264d62d0 +1.60457801e205 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1031170679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1031170680; 1031170683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1031170684; 1853272783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1853272784; 1853272787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1853272788; 3601071103 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3601071104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4290511872 { 0xffbc0400 -4455424 -1.46887207e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1031170683 { 0x3d766a7b +1.92512452e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1853272787 { 0x6e76b2d3 +1.92733228e93 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2960190804
=counter_example_end
=global nodece 61 num_edges_traversed 2
=global nodece 61 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 62
=global nodece 62 nodece z3.ce3260.num_edges_traversed3
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce3260 2350f52cbcf753b0e51c97d34e8028
=nextpc_const.1
1 : 1127383746 { 0x433282c2 +1.39461541e7 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33242 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33243 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33246 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33247 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4217 : BV:32
4 : Lambda33250 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33251 : BV:32
7 : 1690258387 { 0x64bf4bd3 +1.49450147e74 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 642605775 ] -> 0, [ 642605776; 642605776 ] -> 0, [ 642605777; 642605777 ] -> 0, [ 642605778; 642605778 ] -> 0, [ 642605779; 642605779 ] -> 0, [ 642605780; 642605780 ] -> 0, [ 642605781; 642605781 ] -> 4, [ 642605782; 642605782 ] -> 188, [ 642605783; 642605783 ] -> 255, [ 642605784; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda33218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16384 { 0x4000 +1.195312e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1127383746 , 1000 , 8 ) -> 642605776, () -> 473142890, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : Indxform4228 : BV:32
7 : Lambda33283 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda33284 : BV:32
10 : 1688060167 { 0x649dc107 +1.23245322e74 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(3, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(3, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(3, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(4, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : prod(3, 18) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
20 : sum(1, 2, 19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
21 : sym_const(20) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 71058585 { 0x43c4499 +1.47084343e137 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1283449035 { 0x4c7fe0cb +1.99904763e25 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 642605775 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 642605776; 642605783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 642605784; 1031170679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1031170680; 1031170683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1031170684; 1853272783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1853272784; 1853272787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1853272788; 3601071103 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3601071104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 901801769 { 0x35c06729 +1.50314819e236 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 88458807 { 0x545c637 +1.54511153e139 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 642605776 { 0x264d62d0 +1.60457801e205 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1280729997 { 0x4c56638d +1.67491304e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1031170683 { 0x3d766a7b +1.92512452e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1853272787 { 0x6e76b2d3 +1.92733228e93 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2527574035
=counter_example_end
=global nodece 62 num_edges_traversed 3
=global nodece 62 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 63
=global nodece 63 nodece z3.ce3282.num_edges_traversed4
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(epsilon)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce3282 c7404bd96921e8819d90ed6f851e
=nextpc_const.1
1 : 1127383746 { 0x433282c2 +1.39461541e7 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33242 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33243 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33246 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33247 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4217 : BV:32
4 : Lambda33250 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33251 : BV:32
7 : 1690258387 { 0x64bf4bd3 +1.49450147e74 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 642605775 ] -> 0, [ 642605776; 642605776 ] -> 0, [ 642605777; 642605777 ] -> 0, [ 642605778; 642605778 ] -> 0, [ 642605779; 642605779 ] -> 0, [ 642605780; 642605780 ] -> 0, [ 642605781; 642605781 ] -> 4, [ 642605782; 642605782 ] -> 188, [ 642605783; 642605783 ] -> 255, [ 642605784; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda33218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16384 { 0x4000 +1.195312e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1127383746 , 1000 , 8 ) -> 642605776, () -> 473142890, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : Indxform4228 : BV:32
7 : Lambda33283 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda33284 : BV:32
10 : 1688060167 { 0x649dc107 +1.23245322e74 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(3, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(3, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(3, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(4, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : prod(3, 18) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
20 : sum(1, 2, 19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
21 : sym_const(20) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 71058585 { 0x43c4499 +1.47084343e137 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1283449035 { 0x4c7fe0cb +1.99904763e25 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 642605775 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 642605776; 642605783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 642605784; 1031170679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1031170680; 1031170683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1031170684; 1853272783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1853272784; 1853272787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1853272788; 3601071103 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3601071104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 901801769 { 0x35c06729 +1.50314819e236 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 88458807 { 0x545c637 +1.54511153e139 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 642605776 { 0x264d62d0 +1.60457801e205 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1280729997 { 0x4c56638d +1.67491304e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1031170683 { 0x3d766a7b +1.92512452e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1853272787 { 0x6e76b2d3 +1.92733228e93 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2527574035
=counter_example_end
=global nodece 63 num_edges_traversed 4
=global nodece 63 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 64
=global nodece 64 nodece z3.ce3286.num_edges_traversed5
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce3286 f2a010e0a9711d4683c14b4fff1cc762
=nextpc_const.1
1 : 1127383746 { 0x433282c2 +1.39461541e7 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33242 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33243 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33246 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16383 { 0x3fff +1.195300e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16384 { 0x4000 +1.195312e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33247 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4217 : BV:32
4 : Lambda33250 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33251 : BV:32
7 : 1690258387 { 0x64bf4bd3 +1.49450147e74 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16383 ] -> true, [ 16384; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 642605775 ] -> 0, [ 642605776; 642605776 ] -> 0, [ 642605777; 642605777 ] -> 0, [ 642605778; 642605778 ] -> 0, [ 642605779; 642605779 ] -> 0, [ 642605780; 642605780 ] -> 0, [ 642605781; 642605781 ] -> 4, [ 642605782; 642605782 ] -> 188, [ 642605783; 642605783 ] -> 255, [ 642605784; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda33218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16383 { 0x3fff +1.195300e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16384 { 0x4000 +1.195312e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1127383746 , 1000 , 8 ) -> 642605776, () -> 473142890, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : Indxform4228 : BV:32
7 : Lambda33283 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda33284 : BV:32
10 : 1688060167 { 0x649dc107 +1.23245322e74 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(3, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(3, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(5, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(3, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(4, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : prod(3, 18) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
20 : sum(1, 2, 19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
21 : sym_const(20) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 71058585 { 0x43c4499 +1.47084343e137 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 642605776 { 0x264d62d0 +1.60457801e205 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1283449035 { 0x4c7fe0cb +1.99904763e25 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 642605775 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 642605776; 642605783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 642605784; 1031170679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1031170680; 1031170683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1031170684; 1853272783 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1853272784; 1853272787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1853272788; 3601071103 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3601071104; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 901801769 { 0x35c06729 +1.50314819e236 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 642605775 ] -> 0, [ 642605776; 642605776 ] -> 0, [ 642605777; 642605777 ] -> 0, [ 642605778; 642605778 ] -> 0, [ 642605779; 642605779 ] -> 0, [ 642605780; 642605780 ] -> 0, [ 642605781; 642605781 ] -> 4, [ 642605782; 642605782 ] -> 188, [ 642605783; 642605783 ] -> 255, [ 642605784; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 88458807 { 0x545c637 +1.54511153e139 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 642605776 { 0x264d62d0 +1.60457801e205 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1280729997 { 0x4c56638d +1.67491304e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1031170680 { 0x3d766a78 +1.92512416e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1031170683 { 0x3d766a7b +1.92512452e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1853272784 { 0x6e76b2d0 +1.92733192e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1853272787 { 0x6e76b2d3 +1.92733228e93 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 228 , m_adder -> 219), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2527574035
=counter_example_end
=global nodece 64 num_edges_traversed 5
=global nodece 64 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 65
=global nodece 65 nodece z3v487.ce3234.num_edges_traversed1
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3v487.ce3234 7287eea641b26907d669b90ecf6466c
=input.spec-%var-arr-1
1 : Lambda33262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33263 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33225 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 524288 { 0x80000 +1.6250000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4221 : BV:32
4 : Lambda33269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33270 : BV:32
7 : 744709299 { 0x2c635cb3 +1.77626645e217 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1342715996 { 0x5008385c +1.6421995e33 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4220 : BV:32
6 : Lambda33267 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33268 : BV:32
9 : 1095931088 { 0x415294d0 +1.64516639e3 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3229614080 { 0xc0800000 -1065353216 -1.0e2 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1342715995 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1342715996; 1342715999 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1342716000; 3229614079 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3229614080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1342715996 { 0x5008385c +1.6421995e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1342715999 { 0x5008385f +1.6422030e33 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
4007891611
=counter_example_end
=global nodece 65 num_edges_traversed 1
=global nodece 65 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 66
=global nodece 66 nodece z3v487.ce3312.num_edges_traversed2
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(epsilon)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3v487.ce3312 5880bc85abeb62a92546143bb0c478
=nextpc_const.1
1 : 1193667395 { 0x4725eb43 +1.29624211e15 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33263 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33225 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 524288 { 0x80000 +1.6250000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4221 : BV:32
4 : Lambda33269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33270 : BV:32
7 : 744709299 { 0x2c635cb3 +1.77626645e217 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1342715996 { 0x5008385c +1.6421995e33 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 107 , m_adder -> 199), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1193667395 , 1000 , 8 ) -> 1118468191, () -> 708543130, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4220 : BV:32
6 : Lambda33267 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33268 : BV:32
9 : 1095931088 { 0x415294d0 +1.64516639e3 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1118468191 { 0x42aa785f +1.33179843e6 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1342715995 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1342715996; 1342715999 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1342716000; 3229614079 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3229614080; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1342715996 { 0x5008385c +1.6421995e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1342715999 { 0x5008385f +1.6422030e33 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 107 , m_adder -> 199), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1034379583
=counter_example_end
=global nodece 66 num_edges_traversed 2
=global nodece 66 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 67
=global nodece 67 nodece z3v487.ce3326.num_edges_traversed1
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3v487.ce3326 1acfe3d3e2528f3cad6f7e7a34d87e
=input.spec-%var-arr-1
1 : Lambda33520 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33521 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33523 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33524 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33491 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 128 { 0x80 +1.1525e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4256 : BV:32
4 : Lambda33527 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33528 : BV:32
7 : 580458411 { 0x229917ab +1.19603478e198 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2775462944 { 0xa56e3420 -1519504352 -1.86096572e203 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4255 : BV:32
6 : Lambda33525 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33526 : BV:32
9 : 1064724961 { 0x3f7669e1 +1.92510616e255 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2227175424 { 0x84c00000 -2067791872 -1.50000000e138 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2227175423 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2227175424; 2775462943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2775462944; 2775462947 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2775462948; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2775462944 { 0xa56e3420 -1519504352 -1.86096572e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2775462947 { 0xa56e3423 -1519504349 -1.86096608e203 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3992873460
=counter_example_end
=global nodece 67 num_edges_traversed 1
=global nodece 67 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 68
=global nodece 68 nodece z3v487.ce3340.num_edges_traversed2
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(epsilon)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3v487.ce3340 eb42de230da9ebf49b9bd83aedc218
=nextpc_const.1
1 : 87386584 { 0x53569d8 +1.41729259e139 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33520 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33521 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33523 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33524 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33491 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 128 { 0x80 +1.1525e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4256 : BV:32
4 : Lambda33527 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33528 : BV:32
7 : 580458411 { 0x229917ab +1.19603478e198 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2775462944 { 0xa56e3420 -1519504352 -1.86096572e203 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 57 , m_adder -> 12), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 87386584 , 1000 , 8 ) -> 684833280, () -> 1518643480, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4255 : BV:32
6 : Lambda33525 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33526 : BV:32
9 : 1064724961 { 0x3f7669e1 +1.92510616e255 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 684833280 { 0x28d1ba00 +1.63848876e210 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2227175423 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2227175424; 2775462943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2775462944; 2775462947 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2775462948; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2775462944 { 0xa56e3420 -1519504352 -1.86096572e203 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2775462947 { 0xa56e3423 -1519504349 -1.86096608e203 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 57 , m_adder -> 12), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1276818952
=counter_example_end
=global nodece 68 num_edges_traversed 2
=global nodece 68 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 69
=global nodece 69 nodece z3.ce3364.num_edges_traversed1
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3.ce3364 4336bb29d48e672c7c6a336480614e81
=input.spec-%var-arr-1
1 : Lambda33782 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda33783 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33786 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda33787 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4288 : BV:32
4 : Lambda33790 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33791 : BV:32
7 : 306824901 { 0x1249c6c5 +1.57637846e165 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda33758 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 188134020 { 0xb36b284 +1.42732286e151 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1191273356 { 0x4701638c +1.1085042e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4287 : BV:32
6 : Lambda33788 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33789 : BV:32
9 : 1286531575 { 0x4caee9f7 +1.36651504e26 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 509779968 { 0x1e62a000 +1.77050781e189 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 188134019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 188134020; 188134023 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 188134024; 509779967 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 509779968; 1191273355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1191273356; 1191273359 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1191273360; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4022337528 { 0xefbffff8 -272629768 -1.49999904e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1191273356 { 0x4701638c +1.1085042e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1191273359 { 0x4701638f +1.1085078e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 188134020 { 0xb36b284 +1.42732286e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 188134023 { 0xb36b287 +1.42732322e151 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
1230683047
=counter_example_end
=global nodece 69 num_edges_traversed 1
=global nodece 69 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 70
=global nodece 70 nodece z3.ce3378.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3.ce3378 8efd8ee2eb4f8f43c65eb58e5fb1ae
=nextpc_const.1
1 : 797085316 { 0x2f828e84 +1.1997423e224 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33782 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda33783 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33786 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda33787 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4288 : BV:32
4 : Lambda33790 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33791 : BV:32
7 : 306824901 { 0x1249c6c5 +1.57637846e165 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda33758 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 188134020 { 0xb36b284 +1.42732286e151 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1191273356 { 0x4701638c +1.1085042e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 44 , m_adder -> 235), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 797085316 , 1000 , 8 ) -> 883219910, () -> 2106064562, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4287 : BV:32
6 : Lambda33788 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33789 : BV:32
9 : 1286531575 { 0x4caee9f7 +1.36651504e26 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 883219910 { 0x34a4ddc6 +1.28801798e234 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 188134019 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 188134020; 188134023 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 188134024; 509779967 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 509779968; 1191273355 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1191273356; 1191273359 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1191273360; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4022337528 { 0xefbffff8 -272629768 -1.49999904e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1191273356 { 0x4701638c +1.1085042e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1191273359 { 0x4701638f +1.1085078e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 188134020 { 0xb36b284 +1.42732286e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 188134023 { 0xb36b287 +1.42732322e151 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 44 , m_adder -> 235), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1669922187
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 71
=global nodece 71 nodece z3v487.ce3365.num_edges_traversed1
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3v487.ce3365 236aaa90e3e2549e68e9f6d241d655fc
=input.spec-%var-arr-1
1 : Lambda33802 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33803 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33805 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33806 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33765 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 134217728 { 0x8000000 +1.0e145 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4292 : BV:32
4 : Lambda33809 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33810 : BV:32
7 : 74648955 { 0x4730d7b +1.89884889e137 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3647540256 { 0xd9690c20 -647427040 -1.82068252e51 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4291 : BV:32
6 : Lambda33807 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33808 : BV:32
9 : 616704354 { 0x24c22962 +1.51688790e202 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 3647540255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3647540256; 3647540259 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3647540260; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3647540256 { 0xd9690c20 -647427040 -1.82068252e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3647540259 { 0xd9690c23 -647427037 -1.82068288e51 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
2232269323
=counter_example_end
=global nodece 71 num_edges_traversed 1
=global nodece 71 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 72
=global nodece 72 nodece z3v487.ce3399.num_edges_traversed2
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(epsilon)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3v487.ce3399 8a4f6ea373afce32f79821c424fc4c
=nextpc_const.1
1 : 1351973303 { 0x509579b7 +1.16777694e34 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33802 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33803 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33805 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33806 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33765 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 134217728 { 0x8000000 +1.0e145 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4292 : BV:32
4 : Lambda33809 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33810 : BV:32
7 : 74648955 { 0x4730d7b +1.89884889e137 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3647540256 { 0xd9690c20 -647427040 -1.82068252e51 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 242 , m_adder -> 250), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1351973303 , 1000 , 8 ) -> 1017739579, () -> 1135292601, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4291 : BV:32
6 : Lambda33807 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33808 : BV:32
9 : 616704354 { 0x24c22962 +1.51688790e202 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1017739579 { 0x3ca9793b +1.32401216e250 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 3647540255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3647540256; 3647540259 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3647540260; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3647540256 { 0xd9690c20 -647427040 -1.82068252e51 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3647540259 { 0xd9690c23 -647427037 -1.82068288e51 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 242 , m_adder -> 250), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2586763695
=counter_example_end
=global nodece 72 num_edges_traversed 2
=global nodece 72 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 73
=global nodece 73 nodece z3v487.ce3411.num_edges_traversed1
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3v487.ce3411 1c7c7b50ddd2d7a4bbb1bd107991b635
=input.spec-%var-arr-1
1 : Lambda33983 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33984 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33986 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33987 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33954 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4312 : BV:32
3 : Lambda33990 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda33991 : BV:32
6 : unit : UNIT
7 : 1253913963 { 0x4abd356b +1.47819268e22 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4311 : BV:32
3 : Lambda33988 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda33989 : BV:32
6 : unit : UNIT
7 : 1638990577 { 0x61b102f1 +1.38290226e68 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 21758720 { 0x14c0300 +1.59384155e131 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 21758719 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 21758720; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3725904479
=counter_example_end
=global nodece 73 num_edges_traversed 1
=global nodece 73 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 74
=global nodece 74 nodece z3v487.ce3425.num_edges_traversed2
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3v487.ce3425 a83a4528b6266bca4d591034ce587053
=nextpc_const.1
1 : 265877688 { 0xfd8f8b8 +1.69509029e160 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33983 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33984 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33986 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33987 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33954 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4312 : BV:32
3 : Lambda33990 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda33991 : BV:32
6 : unit : UNIT
7 : 1253913963 { 0x4abd356b +1.47819268e22 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 196 , m_adder -> 20), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 265877688 , 1000 , 8 ) -> 541647585, () -> 1240998235, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4311 : BV:32
3 : Lambda33988 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda33989 : BV:32
6 : unit : UNIT
7 : 1638990577 { 0x61b102f1 +1.38290226e68 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 541647585 { 0x2048e2e1 +1.56942379e193 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 21758719 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 21758720; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 196 , m_adder -> 20), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1699416259
=counter_example_end
=global nodece 74 num_edges_traversed 2
=global nodece 74 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 75
=global nodece 75 nodece z3v487.ce3466.num_edges_traversed1
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3v487.ce3466 2ae42929913b70fdaf4ab3585a3f9bb
=nextpc_const.1
1 : 1781180905 { 0x6a2aa9e9 +1.33331024e85 } : BV:32
=input.spec-%var-arr-1
1 : Lambda34765 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34766 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda34768 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34769 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda34736 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform4408 : BV:32
4 : Lambda34772 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda34773 : BV:32
7 : 213186167 { 0xcb4f677 +1.41377151e154 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 442368 { 0x6c000 +1.5273437e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3790199812 { 0xe1e9dc04 -504767484 -1.82702684e68 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 179), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1781180905 , 1000 , 8 ) -> 1320360533, () -> 864303332, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform4407 : BV:32
6 : Lambda34770 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda34771 : BV:32
9 : 1679969260 { 0x64224bec +1.26794195e73 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1320360533 { 0x4eb31a55 +1.39924108e30 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 442367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 442368; 442371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 442372; 3790199811 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3790199812; 3790199815 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3790199816; 4291297279 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4291297280; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3790199812 { 0xe1e9dc04 -504767484 -1.82702684e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3790199815 { 0xe1e9dc07 -504767481 -1.82702720e68 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 442368 { 0x6c000 +1.5273437e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 442371 { 0x6c003 +1.5273473e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 103 , m_adder -> 179), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3431656117
=counter_example_end
=global nodece 75 num_edges_traversed 1
=global nodece 75 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 76
=global nodece 76 nodece z3v487.ce3512.num_edges_traversed1
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3v487.ce3512 7ed91c174112d56cdcc6899fe918e7
=input.spec-%var-arr-1
1 : Lambda35417 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35418 : BV:32
18 : eq(17, 4) : BOOL
19 : 3684303395 { 0xdb9a0223 -610663901 -1.20319020e56 } : BV:32
20 : bvmul(8, 17) : BV:32
21 : bvadd(19, 20) : BV:32
22 : 3684303407 { 0xdb9a022f -610663889 -1.20319163e56 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3684303405 { 0xdb9a022d -610663891 -1.20319139e56 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3684303406 { 0xdb9a022e -610663890 -1.20319151e56 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3684303404 { 0xdb9a022c -610663892 -1.20319128e56 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3684303394 { 0xdb9a0222 -610663902 -1.20319008e56 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3684303393 { 0xdb9a0221 -610663903 -1.20318996e56 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3684303392 { 0xdb9a0220 -610663904 -1.20318984e56 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(18, 2, 66) : BV:32
68 : lambda(17, 67) : FUNCTION[BV:32 -> BV:32]
69 : map(16, 68) : MAP[BV:32 -> BV:32]
70 : sym_const(69) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3684303392 { 0xdb9a0220 -610663904 -1.20318984e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35420 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35421 : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 3684303395 { 0xdb9a0223 -610663901 -1.20319020e56 } : BV:32
28 : bvmul(8, 17) : BV:32
29 : bvadd(27, 28) : BV:32
30 : 3684303407 { 0xdb9a022f -610663889 -1.20319163e56 } : BV:32
31 : eq(29, 30) : BOOL
32 : 0 { 0x0 } : BV:8
33 : 3684303405 { 0xdb9a022d -610663891 -1.20319139e56 } : BV:32
34 : eq(29, 33) : BOOL
35 : 3684303406 { 0xdb9a022e -610663890 -1.20319151e56 } : BV:32
36 : eq(29, 35) : BOOL
37 : 3684303404 { 0xdb9a022c -610663892 -1.20319128e56 } : BV:32
38 : eq(29, 37) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 32, 39) : BV:8
41 : ite(36, 32, 40) : BV:8
42 : ite(34, 32, 41) : BV:8
43 : ite(31, 32, 42) : BV:8
44 : 3684303394 { 0xdb9a0222 -610663902 -1.20319008e56 } : BV:32
45 : bvadd(44, 28) : BV:32
46 : eq(45, 30) : BOOL
47 : eq(45, 33) : BOOL
48 : eq(45, 35) : BOOL
49 : eq(45, 37) : BOOL
50 : ite(49, 32, 39) : BV:8
51 : ite(48, 32, 50) : BV:8
52 : ite(47, 32, 51) : BV:8
53 : ite(46, 32, 52) : BV:8
54 : 3684303393 { 0xdb9a0221 -610663903 -1.20318996e56 } : BV:32
55 : bvadd(54, 28) : BV:32
56 : eq(55, 30) : BOOL
57 : eq(55, 33) : BOOL
58 : eq(55, 35) : BOOL
59 : eq(55, 37) : BOOL
60 : ite(59, 32, 39) : BV:8
61 : ite(58, 32, 60) : BV:8
62 : ite(57, 32, 61) : BV:8
63 : ite(56, 32, 62) : BV:8
64 : 3684303392 { 0xdb9a0220 -610663904 -1.20318984e56 } : BV:32
65 : bvadd(64, 28) : BV:32
66 : eq(65, 30) : BOOL
67 : eq(65, 33) : BOOL
68 : eq(65, 35) : BOOL
69 : eq(65, 37) : BOOL
70 : ite(69, 32, 39) : BV:8
71 : ite(68, 32, 70) : BV:8
72 : ite(67, 32, 71) : BV:8
73 : ite(66, 32, 72) : BV:8
74 : bvconcat(43, 53, 63, 73) : BV:32
75 : ite(18, 2, 74) : BV:32
76 : ite(26, 75, 74) : BV:32
77 : ite(18, 2, 76) : BV:32
78 : lambda(17, 77) : FUNCTION[BV:32 -> BV:32]
79 : map(16, 78) : MAP[BV:32 -> BV:32]
80 : sym_const(79) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35402 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 3684303395 { 0xdb9a0223 -610663901 -1.20319020e56 } : BV:32
18 : bvmul(9, 1) : BV:32
19 : bvadd(17, 18) : BV:32
20 : 3684303407 { 0xdb9a022f -610663889 -1.20319163e56 } : BV:32
21 : eq(19, 20) : BOOL
22 : 0 { 0x0 } : BV:8
23 : 3684303405 { 0xdb9a022d -610663891 -1.20319139e56 } : BV:32
24 : eq(19, 23) : BOOL
25 : 3684303406 { 0xdb9a022e -610663890 -1.20319151e56 } : BV:32
26 : eq(19, 25) : BOOL
27 : 3684303404 { 0xdb9a022c -610663892 -1.20319128e56 } : BV:32
28 : eq(19, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 22, 29) : BV:8
31 : ite(26, 22, 30) : BV:8
32 : ite(24, 22, 31) : BV:8
33 : ite(21, 22, 32) : BV:8
34 : 3684303394 { 0xdb9a0222 -610663902 -1.20319008e56 } : BV:32
35 : bvadd(34, 18) : BV:32
36 : eq(35, 20) : BOOL
37 : eq(35, 23) : BOOL
38 : eq(35, 25) : BOOL
39 : eq(35, 27) : BOOL
40 : ite(39, 22, 29) : BV:8
41 : ite(38, 22, 40) : BV:8
42 : ite(37, 22, 41) : BV:8
43 : ite(36, 22, 42) : BV:8
44 : 3684303393 { 0xdb9a0221 -610663903 -1.20318996e56 } : BV:32
45 : bvadd(44, 18) : BV:32
46 : eq(45, 20) : BOOL
47 : eq(45, 23) : BOOL
48 : eq(45, 25) : BOOL
49 : eq(45, 27) : BOOL
50 : ite(49, 22, 29) : BV:8
51 : ite(48, 22, 50) : BV:8
52 : ite(47, 22, 51) : BV:8
53 : ite(46, 22, 52) : BV:8
54 : 3684303392 { 0xdb9a0220 -610663904 -1.20318984e56 } : BV:32
55 : bvadd(54, 18) : BV:32
56 : eq(55, 20) : BOOL
57 : eq(55, 23) : BOOL
58 : eq(55, 25) : BOOL
59 : eq(55, 27) : BOOL
60 : ite(59, 22, 29) : BV:8
61 : ite(58, 22, 60) : BV:8
62 : ite(57, 22, 61) : BV:8
63 : ite(56, 22, 62) : BV:8
64 : bvconcat(33, 43, 53, 63) : BV:32
65 : ite(3, 4, 64) : BV:32
66 : ite(16, 65, 64) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4488 : BV:32
3 : Lambda35424 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35425 : BV:32
6 : unit : UNIT
7 : 434916114 { 0x19ec4b12 +1.84604096e180 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4489 : BV:32
3 : Lambda35426 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35427 : BV:32
6 : unit : UNIT
7 : 985843438 { 0x3ac2c6ee +1.52169585e246 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4491 : BV:32
5 : Lambda35430 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda35431 : BV:32
8 : 985843438 { 0x3ac2c6ee +1.52169585e246 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 131071 ] -> 5, [ 131072; 131072 ] -> 0, [ 131073; 131073 ] -> 0, [ 131074; 131074 ] -> 0, [ 131075; 131075 ] -> 0, [ 131076; 131076 ] -> 0, [ 131077; 131077 ] -> 0, [ 131078; 131078 ] -> 0, [ 131079; 131079 ] -> 0, [ 131080; 3684303403 ] -> 5, [ 3684303404; 3684303407 ] -> 0, [ 3684303408; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35406 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3684303395 { 0xdb9a0223 -610663901 -1.20319020e56 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3684303407 { 0xdb9a022f -610663889 -1.20319163e56 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3684303405 { 0xdb9a022d -610663891 -1.20319139e56 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3684303406 { 0xdb9a022e -610663890 -1.20319151e56 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3684303404 { 0xdb9a022c -610663892 -1.20319128e56 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3684303394 { 0xdb9a0222 -610663902 -1.20319008e56 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3684303393 { 0xdb9a0221 -610663903 -1.20318996e56 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3684303392 { 0xdb9a0220 -610663904 -1.20318984e56 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4493 : BV:32
5 : Lambda35434 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda35435 : BV:32
8 : 985843438 { 0x3ac2c6ee +1.52169585e246 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4495 : BV:32
5 : Lambda35438 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda35439 : BV:32
8 : 985843438 { 0x3ac2c6ee +1.52169585e246 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1446474931 { 0x563774b3 +1.43324887e45 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 699203324 { 0x29acfefc +1.35153150e212 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1611666263 { 0x60101357 +1.12559020e65 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131079 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 131080; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 699203324 { 0x29acfefc +1.35153150e212 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3684303403 ] -> 5, [ 3684303404; 3684303407 ] -> 0, [ 3684303408; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1191252023 { 0x47011037 +1.830733e15 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 771973806 { 0x2e0362ae +1.2644896e221 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3684303392 { 0xdb9a0220 -610663904 -1.20318984e56 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 131071 ] -> 5, [ 131072; 131079 ] -> 86, [ 131080; 3684303403 ] -> 5, [ 3684303404; 3684303407 ] -> 0, [ 3684303408; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1191252023 { 0x47011037 +1.830733e15 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131079 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 131080; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1611666263 { 0x60101357 +1.12559020e65 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3684303404 { 0xdb9a022c -610663892 -1.20319128e56 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3684303404 { 0xdb9a022c -610663892 -1.20319128e56 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 131076 { 0x20004 +1.1562547e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1656665183
=counter_example_end
=global nodece 76 num_edges_traversed 1
=global nodece 76 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 77
=global nodece 77 nodece z3.ce3562.num_edges_traversed1
=global nodece 77 nodece_path
=global nodece 77 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 77 nodece_cached_counterexample
=counter_example_begin z3.ce3562 4403fd976595290bbcbc7bae987a223
=input.spec-%var-arr-1
1 : Lambda35707 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388609 { 0x800001 +1.11e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388610 { 0x800002 +1.23e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35708 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35711 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388609 { 0x800001 +1.11e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388610 { 0x800002 +1.23e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35712 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8388609 ] -> true, [ 8388610; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4515 : BV:32
3 : Lambda35715 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35716 : BV:32
6 : unit : UNIT
7 : 637372307 { 0x25fd8793 +1.98069989e204 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8388609 ] -> true, [ 8388610; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35683 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8388609 { 0x800001 +1.11e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8388610 { 0x800002 +1.23e130 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 58241120 { 0x378b060 +1.94288253e135 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4199808864 { 0xfa53ff60 -95158432 -1.65623092e117 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388610 { 0x800002 +1.23e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4514 : BV:32
3 : Lambda35713 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35714 : BV:32
6 : unit : UNIT
7 : 1300702772 { 0x4d872634 +1.5585336e28 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 828293120 { 0x315ec000 +1.74023437e227 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 58241119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 58241120; 58241123 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 58241124; 828293119 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 828293120; 4199808863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4199808864; 4199808867 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4199808868; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4199808864 { 0xfa53ff60 -95158432 -1.65623092e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4199808867 { 0xfa53ff63 -95158429 -1.65623128e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 58241120 { 0x378b060 +1.94288253e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 58241123 { 0x378b063 +1.94288289e135 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1888151183
=counter_example_end
=global nodece 77 num_edges_traversed 1
=global nodece 77 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 78
=global nodece 78 nodece z3.ce3576.num_edges_traversed2
=global nodece 78 nodece_path
=global nodece 78 nodece_path.graph_edge_composition
(epsilon)
=global nodece 78 nodece_cached_counterexample
=counter_example_begin z3.ce3576 5fb5b7c1876471fb2326aa2b6f9b68a5
=nextpc_const.1
1 : 1875907165 { 0x6fd0125d +1.62556040e96 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35707 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388609 { 0x800001 +1.11e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388610 { 0x800002 +1.23e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35708 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35711 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388609 { 0x800001 +1.11e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388610 { 0x800002 +1.23e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35712 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8388609 ] -> true, [ 8388610; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4515 : BV:32
3 : Lambda35715 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35716 : BV:32
6 : unit : UNIT
7 : 637372307 { 0x25fd8793 +1.98069989e204 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8388609 ] -> true, [ 8388610; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35683 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8388609 { 0x800001 +1.11e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8388610 { 0x800002 +1.23e130 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 58241120 { 0x378b060 +1.94288253e135 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4199808864 { 0xfa53ff60 -95158432 -1.65623092e117 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388610 { 0x800002 +1.23e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 178 , m_adder -> 31), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1875907165 , 1000 , 8 ) -> 416082449, () -> 119751982, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4514 : BV:32
3 : Lambda35713 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35714 : BV:32
6 : unit : UNIT
7 : 1300702772 { 0x4d872634 +1.5585336e28 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 416082449 { 0x18ccea11 +1.60089313e178 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 58241119 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 58241120; 58241123 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 58241124; 828293119 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 828293120; 4199808863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4199808864; 4199808867 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4199808868; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4199808864 { 0xfa53ff60 -95158432 -1.65623092e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4199808867 { 0xfa53ff63 -95158429 -1.65623128e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 58241120 { 0x378b060 +1.94288253e135 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 58241123 { 0x378b063 +1.94288289e135 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 178 , m_adder -> 31), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
318468595
=counter_example_end
=global nodece 78 num_edges_traversed 2
=global nodece 78 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 79
=global nodece 79 nodece z3v487.ce3598.num_edges_traversed1
=global nodece 79 nodece_path
=global nodece 79 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 79 nodece_cached_counterexample
=counter_example_begin z3v487.ce3598 c4987eaa6a8893fd1677e286327feed
=nextpc_const.1
1 : 1917204720 { 0x724638f0 +1.54861259e101 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35916 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35917 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35919 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35920 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35887 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 268435456 { 0x10000000 +1.0e161 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4539 : BV:32
3 : Lambda35923 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35924 : BV:32
6 : unit : UNIT
7 : 1500261506 { 0x596c2c82 +1.84510827e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 68 , m_adder -> 23), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1917204720 , 1000 , 8 ) -> 175745879, () -> 1320424970, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4538 : BV:32
3 : Lambda35921 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda35922 : BV:32
6 : unit : UNIT
7 : 1609068734 { 0x5fe870be +1.81594061e64 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 175745879 { 0xa79ab57 +1.95054137e149 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 1946255871 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1946255872; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 68 , m_adder -> 23), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2851686612
=counter_example_end
=global nodece 79 num_edges_traversed 1
=global nodece 79 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 80
=global nodece 80 nodece z3v487.ce3630.num_edges_traversed1
=global nodece 80 nodece_path
=global nodece 80 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 80 nodece_cached_counterexample
=counter_example_begin z3v487.ce3630 63c4221841c979213e9aedc1f3853f7
=input.spec-%var-arr-1
1 : Lambda36106 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36107 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
27 : eq(22, 26) : BOOL
28 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
29 : eq(22, 28) : BOOL
30 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
31 : eq(22, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36109 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36110 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
35 : eq(30, 34) : BOOL
36 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
37 : eq(30, 36) : BOOL
38 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
39 : eq(30, 38) : BOOL
40 : 5 { 0x5 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36091 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
25 : eq(20, 24) : BOOL
26 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
27 : eq(20, 26) : BOOL
28 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
29 : eq(20, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4563 : BV:32
3 : Lambda36113 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36114 : BV:32
6 : unit : UNIT
7 : 979727464 { 0x3a657468 +1.79261493e245 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4564 : BV:32
3 : Lambda36115 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36116 : BV:32
6 : unit : UNIT
7 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4566 : BV:32
5 : Lambda36119 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36120 : BV:32
8 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36095 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
12 : eq(7, 11) : BOOL
13 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
14 : eq(7, 13) : BOOL
15 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
16 : eq(7, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4568 : BV:32
5 : Lambda36123 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36124 : BV:32
8 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4570 : BV:32
5 : Lambda36127 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36128 : BV:32
8 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1059494878 { 0x3f269bde +1.30163168e255 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1299289486 { 0x4d71958e +1.88737654e27 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227826393 { 0x492f24d9 +1.36831200e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3800087583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3800087584; 3800087587 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3800087588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1299289486 { 0x4d71958e +1.88737654e27 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 839135163 { 0x32042fbb +1.3270661e229 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1828931891 { 0x6d034933 +1.2567136e91 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 1023 ] -> 5, [ 1024; 1031 ] -> 216, [ 1032; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 839135163 { 0x32042fbb +1.3270661e229 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3800087583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3800087584; 3800087587 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3800087588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1227826393 { 0x492f24d9 +1.36831200e19 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
770335229
=counter_example_end
=global nodece 80 num_edges_traversed 1
=global nodece 80 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 81
=global nodece 81 nodece z3v487.ce3661.num_edges_traversed2
=global nodece 81 nodece_path
=global nodece 81 nodece_path.graph_edge_composition
(epsilon)
=global nodece 81 nodece_cached_counterexample
=counter_example_begin z3v487.ce3661 b2fcbf6eb71411cf899881b92f1a43e
=input.spec-%var-arr-1
1 : Lambda36106 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36107 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
27 : eq(22, 26) : BOOL
28 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
29 : eq(22, 28) : BOOL
30 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
31 : eq(22, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36109 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36110 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
35 : eq(30, 34) : BOOL
36 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
37 : eq(30, 36) : BOOL
38 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
39 : eq(30, 38) : BOOL
40 : 5 { 0x5 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36091 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
25 : eq(20, 24) : BOOL
26 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
27 : eq(20, 26) : BOOL
28 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
29 : eq(20, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4563 : BV:32
3 : Lambda36113 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36114 : BV:32
6 : unit : UNIT
7 : 979727464 { 0x3a657468 +1.79261493e245 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36095 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
12 : eq(7, 11) : BOOL
13 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
14 : eq(7, 13) : BOOL
15 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
16 : eq(7, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4570 : BV:32
5 : Lambda36127 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36128 : BV:32
8 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1059494878 { 0x3f269bde +1.30163168e255 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227826393 { 0x492f24d9 +1.36831200e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3800087583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3800087584; 3800087587 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3800087588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1299289486 { 0x4d71958e +1.88737654e27 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 839135163 { 0x32042fbb +1.3270661e229 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1828931891 { 0x6d034933 +1.2567136e91 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
770335229
=counter_example_end
=global nodece 81 num_edges_traversed 2
=global nodece 81 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 82
=global nodece 82 nodece z3v487.ce3665.num_edges_traversed3
=global nodece 82 nodece_path
=global nodece 82 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 82 nodece_cached_counterexample
=counter_example_begin z3v487.ce3665 79b1f6866210c84070e6c82b54759c7
=nextpc_const.1
1 : 1430268474 { 0x55402a3a +1.50128865e43 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36106 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36107 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
27 : eq(22, 26) : BOOL
28 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
29 : eq(22, 28) : BOOL
30 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
31 : eq(22, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36109 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36110 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
35 : eq(30, 34) : BOOL
36 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
37 : eq(30, 36) : BOOL
38 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
39 : eq(30, 38) : BOOL
40 : 5 { 0x5 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36091 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
25 : eq(20, 24) : BOOL
26 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
27 : eq(20, 26) : BOOL
28 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
29 : eq(20, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4563 : BV:32
3 : Lambda36113 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36114 : BV:32
6 : unit : UNIT
7 : 979727464 { 0x3a657468 +1.79261493e245 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36095 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
12 : eq(7, 11) : BOOL
13 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
14 : eq(7, 13) : BOOL
15 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
16 : eq(7, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1430268474 , 1000 , 8 ) -> 1140742700, () -> 1191516467, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4570 : BV:32
5 : Lambda36127 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36128 : BV:32
8 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1059494878 { 0x3f269bde +1.30163168e255 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1140742700 { 0x43fe5a2c +1.98712682e8 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227826393 { 0x492f24d9 +1.36831200e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3800087583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3800087584; 3800087587 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3800087588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1299289486 { 0x4d71958e +1.88737654e27 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 839135163 { 0x32042fbb +1.3270661e229 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1828931891 { 0x6d034933 +1.2567136e91 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4155158657
=counter_example_end
=global nodece 82 num_edges_traversed 3
=global nodece 82 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 83
=global nodece 83 nodece z3v487.ce3684.num_edges_traversed4
=global nodece 83 nodece_path
=global nodece 83 nodece_path.graph_edge_composition
(epsilon)
=global nodece 83 nodece_cached_counterexample
=counter_example_begin z3v487.ce3684 fc8f1ea7249eb4e6e74b40ab418a
=nextpc_const.1
1 : 1430268474 { 0x55402a3a +1.50128865e43 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36106 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36107 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
27 : eq(22, 26) : BOOL
28 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
29 : eq(22, 28) : BOOL
30 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
31 : eq(22, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36109 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36110 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
35 : eq(30, 34) : BOOL
36 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
37 : eq(30, 36) : BOOL
38 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
39 : eq(30, 38) : BOOL
40 : 5 { 0x5 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36091 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
25 : eq(20, 24) : BOOL
26 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
27 : eq(20, 26) : BOOL
28 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
29 : eq(20, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4563 : BV:32
3 : Lambda36113 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36114 : BV:32
6 : unit : UNIT
7 : 979727464 { 0x3a657468 +1.79261493e245 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1031 ] -> 0, [ 1032; 1140742699 ] -> 5, [ 1140742700; 1140742700 ] -> 5, [ 1140742701; 1140742701 ] -> 5, [ 1140742702; 1140742702 ] -> 5, [ 1140742703; 1140742703 ] -> 5, [ 1140742704; 1140742704 ] -> 0, [ 1140742705; 1140742705 ] -> 4, [ 1140742706; 1140742706 ] -> 0, [ 1140742707; 1140742707 ] -> 0, [ 1140742708; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36095 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
12 : eq(7, 11) : BOOL
13 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
14 : eq(7, 13) : BOOL
15 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
16 : eq(7, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1430268474 , 1000 , 8 ) -> 1140742700, () -> 1191516467, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform4577 : BV:32
6 : Lambda36141 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda36142 : BV:32
9 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1059494879 { 0x3f269bdf +1.30163180e255 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227826394 { 0x492f24da +1.36831212e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 1140742699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140742700; 1140742707 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1140742708; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3800087583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3800087584; 3800087587 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3800087588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1299289486 { 0x4d71958e +1.88737654e27 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 839135163 { 0x32042fbb +1.3270661e229 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1140742700 { 0x43fe5a2c +1.98712682e8 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1828931892 { 0x6d034934 +1.2567148e91 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4155158657
=counter_example_end
=global nodece 83 num_edges_traversed 4
=global nodece 83 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 84
=global nodece 84 nodece z3v487.ce3700.num_edges_traversed5
=global nodece 84 nodece_path
=global nodece 84 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 84 nodece_cached_counterexample
=counter_example_begin z3v487.ce3700 a6888eed77e2671a8033ed51db3ae3
=nextpc_const.1
1 : 1430268474 { 0x55402a3a +1.50128865e43 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36106 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36107 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
27 : eq(22, 26) : BOOL
28 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
29 : eq(22, 28) : BOOL
30 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
31 : eq(22, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36109 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36110 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
35 : eq(30, 34) : BOOL
36 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
37 : eq(30, 36) : BOOL
38 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
39 : eq(30, 38) : BOOL
40 : 5 { 0x5 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36091 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
25 : eq(20, 24) : BOOL
26 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
27 : eq(20, 26) : BOOL
28 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
29 : eq(20, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4563 : BV:32
3 : Lambda36113 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36114 : BV:32
6 : unit : UNIT
7 : 979727464 { 0x3a657468 +1.79261493e245 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1031 ] -> 0, [ 1032; 1140742699 ] -> 5, [ 1140742700; 1140742700 ] -> 5, [ 1140742701; 1140742701 ] -> 5, [ 1140742702; 1140742702 ] -> 5, [ 1140742703; 1140742703 ] -> 5, [ 1140742704; 1140742704 ] -> 0, [ 1140742705; 1140742705 ] -> 4, [ 1140742706; 1140742706 ] -> 0, [ 1140742707; 1140742707 ] -> 0, [ 1140742708; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36095 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
12 : eq(7, 11) : BOOL
13 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
14 : eq(7, 13) : BOOL
15 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
16 : eq(7, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1430268474 , 1000 , 8 ) -> 1140742700, () -> 1191516467, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform4577 : BV:32
6 : Lambda36141 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda36142 : BV:32
9 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1059494879 { 0x3f269bdf +1.30163180e255 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227826394 { 0x492f24da +1.36831212e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 1140742699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140742700; 1140742707 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1140742708; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3800087583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3800087584; 3800087587 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3800087588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1299289486 { 0x4d71958e +1.88737654e27 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 839135163 { 0x32042fbb +1.3270661e229 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1140742700 { 0x43fe5a2c +1.98712682e8 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1828931892 { 0x6d034934 +1.2567148e91 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4155158657
=counter_example_end
=global nodece 84 num_edges_traversed 5
=global nodece 84 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 85
=global nodece 85 nodece z3v487.ce3710.num_edges_traversed6
=global nodece 85 nodece_path
=global nodece 85 nodece_path.graph_edge_composition
(epsilon)
=global nodece 85 nodece_cached_counterexample
=counter_example_begin z3v487.ce3710 54722fb5eb6b1d3837a867b41c529
=nextpc_const.1
1 : 1430268474 { 0x55402a3a +1.50128865e43 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36106 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36107 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
27 : eq(22, 26) : BOOL
28 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
29 : eq(22, 28) : BOOL
30 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
31 : eq(22, 30) : BOOL
32 : 5 { 0x5 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36109 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36110 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
35 : eq(30, 34) : BOOL
36 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
37 : eq(30, 36) : BOOL
38 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
39 : eq(30, 38) : BOOL
40 : 5 { 0x5 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36091 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
25 : eq(20, 24) : BOOL
26 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
27 : eq(20, 26) : BOOL
28 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
29 : eq(20, 28) : BOOL
30 : 5 { 0x5 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4563 : BV:32
3 : Lambda36113 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36114 : BV:32
6 : unit : UNIT
7 : 979727464 { 0x3a657468 +1.79261493e245 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1031 ] -> 0, [ 1032; 1140742699 ] -> 5, [ 1140742700; 1140742700 ] -> 5, [ 1140742701; 1140742701 ] -> 5, [ 1140742702; 1140742702 ] -> 5, [ 1140742703; 1140742703 ] -> 5, [ 1140742704; 1140742704 ] -> 0, [ 1140742705; 1140742705 ] -> 4, [ 1140742706; 1140742706 ] -> 0, [ 1140742707; 1140742707 ] -> 0, [ 1140742708; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36095 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3800087571 { 0xe280bc13 -494879725 -1.573956e70 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 3800087587 { 0xe280bc23 -494879709 -1.574147e70 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3800087585 { 0xe280bc21 -494879711 -1.574123e70 } : BV:32
12 : eq(7, 11) : BOOL
13 : 3800087586 { 0xe280bc22 -494879710 -1.574135e70 } : BV:32
14 : eq(7, 13) : BOOL
15 : 3800087584 { 0xe280bc20 -494879712 -1.574111e70 } : BV:32
16 : eq(7, 15) : BOOL
17 : 5 { 0x5 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 3800087570 { 0xe280bc12 -494879726 -1.573945e70 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 3800087569 { 0xe280bc11 -494879727 -1.573933e70 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 3800087568 { 0xe280bc10 -494879728 -1.573921e70 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1430268474 , 1000 , 8 ) -> 1140742700, () -> 1191516467, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform4577 : BV:32
6 : Lambda36141 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda36142 : BV:32
9 : 2042615912 { 0x79bfd868 +1.49879169e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1059494879 { 0x3f269bdf +1.30163180e255 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1140742700 { 0x43fe5a2c +1.98712682e8 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227826394 { 0x492f24da +1.36831212e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 1140742699 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1140742700; 1140742707 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1140742708; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3800087583 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3800087584; 3800087587 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3800087588; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1299289486 { 0x4d71958e +1.88737654e27 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1023 ] -> 5, [ 1024; 1031 ] -> 0, [ 1032; 1140742699 ] -> 5, [ 1140742700; 1140742700 ] -> 5, [ 1140742701; 1140742701 ] -> 5, [ 1140742702; 1140742702 ] -> 5, [ 1140742703; 1140742703 ] -> 5, [ 1140742704; 1140742704 ] -> 0, [ 1140742705; 1140742705 ] -> 4, [ 1140742706; 1140742706 ] -> 0, [ 1140742707; 1140742707 ] -> 0, [ 1140742708; 3800087583 ] -> 5, [ 3800087584; 3800087587 ] -> 0, [ 3800087588; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 839135163 { 0x32042fbb +1.3270661e229 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1140742700 { 0x43fe5a2c +1.98712682e8 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1828931892 { 0x6d034934 +1.2567148e91 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 70), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4155158657
=counter_example_end
=global nodece 85 num_edges_traversed 6
=global nodece 85 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 86
=global nodece 86 nodece z3v487.ce3716.num_edges_traversed1
=global nodece 86 nodece_path
=global nodece 86 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 86 nodece_cached_counterexample
=counter_example_begin z3v487.ce3716 18dc582d17cd95799bdf31996c2ef0
=input.spec-%var-arr-1
1 : Lambda36231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36232 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36235 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36216 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4589 : BV:32
3 : Lambda36238 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36239 : BV:32
6 : unit : UNIT
7 : 764923889 { 0x2d97cff1 +1.18603336e220 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4590 : BV:32
3 : Lambda36240 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36241 : BV:32
6 : unit : UNIT
7 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4592 : BV:32
5 : Lambda36244 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36245 : BV:32
8 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4091 ] -> 5, [ 4092; 4092 ] -> 0, [ 4093; 4093 ] -> 0, [ 4094; 4094 ] -> 0, [ 4095; 4095 ] -> 0, [ 4096; 4096 ] -> 0, [ 4097; 4097 ] -> 0, [ 4098; 4098 ] -> 0, [ 4099; 4099 ] -> 0, [ 4100; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36220 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4594 : BV:32
5 : Lambda36248 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36249 : BV:32
8 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4596 : BV:32
5 : Lambda36252 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36253 : BV:32
8 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1621497339 { 0x60a615fb +1.29754579e66 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 19993700 { 0x1311464 +1.38343477e131 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227324847 { 0x49277daf +1.30852305e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4092; 4099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4100; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 19993700 { 0x1311464 +1.38343477e131 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1457202432 { 0x56db2500 +1.71206665e46 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1278112379 { 0x4c2e727b +1.36286866e25 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 4091 ] -> 5, [ 4092; 4099 ] -> 174, [ 4100; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1457202432 { 0x56db2500 +1.71206665e46 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4092; 4099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4100; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1227324847 { 0x49277daf +1.30852305e19 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2986274540
=counter_example_end
=global nodece 86 num_edges_traversed 1
=global nodece 86 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 87
=global nodece 87 nodece z3v487.ce3747.num_edges_traversed2
=global nodece 87 nodece_path
=global nodece 87 nodece_path.graph_edge_composition
(epsilon)
=global nodece 87 nodece_cached_counterexample
=counter_example_begin z3v487.ce3747 bd2f7635c5722ed6c15f816afa4149d7
=input.spec-%var-arr-1
1 : Lambda36231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36232 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36235 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36216 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4589 : BV:32
3 : Lambda36238 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36239 : BV:32
6 : unit : UNIT
7 : 764923889 { 0x2d97cff1 +1.18603336e220 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4091 ] -> 5, [ 4092; 4092 ] -> 0, [ 4093; 4093 ] -> 0, [ 4094; 4094 ] -> 0, [ 4095; 4095 ] -> 0, [ 4096; 4096 ] -> 0, [ 4097; 4097 ] -> 0, [ 4098; 4098 ] -> 0, [ 4099; 4099 ] -> 0, [ 4100; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36220 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4596 : BV:32
5 : Lambda36252 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36253 : BV:32
8 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1621497339 { 0x60a615fb +1.29754579e66 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227324847 { 0x49277daf +1.30852305e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4092; 4099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4100; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 19993700 { 0x1311464 +1.38343477e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1457202432 { 0x56db2500 +1.71206665e46 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1278112379 { 0x4c2e727b +1.36286866e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2986274540
=counter_example_end
=global nodece 87 num_edges_traversed 2
=global nodece 87 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 88
=global nodece 88 nodece z3v487.ce3751.num_edges_traversed3
=global nodece 88 nodece_path
=global nodece 88 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 88 nodece_cached_counterexample
=counter_example_begin z3v487.ce3751 3bb969c8e7d52505f208a323dc58d8
=nextpc_const.1
1 : 1308227828 { 0x4df9f8f4 +1.95290994e28 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36232 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36235 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36216 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4589 : BV:32
3 : Lambda36238 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36239 : BV:32
6 : unit : UNIT
7 : 764923889 { 0x2d97cff1 +1.18603336e220 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4091 ] -> 5, [ 4092; 4092 ] -> 0, [ 4093; 4093 ] -> 0, [ 4094; 4094 ] -> 0, [ 4095; 4095 ] -> 0, [ 4096; 4096 ] -> 0, [ 4097; 4097 ] -> 0, [ 4098; 4098 ] -> 0, [ 4099; 4099 ] -> 0, [ 4100; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36220 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1308227828 , 1000 , 8 ) -> 1649906904, () -> 229935600, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4596 : BV:32
5 : Lambda36252 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36253 : BV:32
8 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1621497339 { 0x60a615fb +1.29754579e66 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1649906904 { 0x625794d8 +1.68422985e69 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227324847 { 0x49277daf +1.30852305e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4092; 4099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4100; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 19993700 { 0x1311464 +1.38343477e131 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4091 ] -> 5, [ 4092; 4092 ] -> 0, [ 4093; 4093 ] -> 0, [ 4094; 4094 ] -> 0, [ 4095; 4095 ] -> 0, [ 4096; 4096 ] -> 0, [ 4097; 4097 ] -> 0, [ 4098; 4098 ] -> 0, [ 4099; 4099 ] -> 0, [ 4100; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1457202432 { 0x56db2500 +1.71206665e46 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4092 { 0xffc +1.48780e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1278112379 { 0x4c2e727b +1.36286866e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1427673984
=counter_example_end
=global nodece 88 num_edges_traversed 3
=global nodece 88 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 89
=global nodece 89 nodece z3v487.ce3770.num_edges_traversed4
=global nodece 89 nodece_path
=global nodece 89 nodece_path.graph_edge_composition
(epsilon)
=global nodece 89 nodece_cached_counterexample
=counter_example_begin z3v487.ce3770 7c9be136672327cefd6a2d12fec105
=nextpc_const.1
1 : 1308227828 { 0x4df9f8f4 +1.95290994e28 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36232 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36235 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36216 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4589 : BV:32
3 : Lambda36238 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36239 : BV:32
6 : unit : UNIT
7 : 764923889 { 0x2d97cff1 +1.18603336e220 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4091 ] -> 5, [ 4092; 4099 ] -> 0, [ 4100; 1649906903 ] -> 5, [ 1649906904; 1649906904 ] -> 5, [ 1649906905; 1649906905 ] -> 5, [ 1649906906; 1649906906 ] -> 5, [ 1649906907; 1649906907 ] -> 5, [ 1649906908; 1649906908 ] -> 252, [ 1649906909; 1649906909 ] -> 15, [ 1649906910; 1649906910 ] -> 0, [ 1649906911; 1649906911 ] -> 0, [ 1649906912; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36220 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1308227828 , 1000 , 8 ) -> 1649906904, () -> 229935600, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform4603 : BV:32
6 : Lambda36266 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda36267 : BV:32
9 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1621497340 { 0x60a615fc +1.29754590e66 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227324848 { 0x49277db0 +1.30852317e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4092; 4099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4100; 1649906903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1649906904; 1649906911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1649906912; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 19993700 { 0x1311464 +1.38343477e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1457202432 { 0x56db2500 +1.71206665e46 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1649906904 { 0x625794d8 +1.68422985e69 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1278112380 { 0x4c2e727c +1.36286878e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1427673984
=counter_example_end
=global nodece 89 num_edges_traversed 4
=global nodece 89 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 90
=global nodece 90 nodece z3v487.ce3786.num_edges_traversed5
=global nodece 90 nodece_path
=global nodece 90 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 90 nodece_cached_counterexample
=counter_example_begin z3v487.ce3786 1f1ff3b1f8b231f33becca1487730
=nextpc_const.1
1 : 1308227828 { 0x4df9f8f4 +1.95290994e28 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36232 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36235 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36216 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4589 : BV:32
3 : Lambda36238 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36239 : BV:32
6 : unit : UNIT
7 : 764923889 { 0x2d97cff1 +1.18603336e220 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4091 ] -> 5, [ 4092; 4099 ] -> 0, [ 4100; 1649906903 ] -> 5, [ 1649906904; 1649906904 ] -> 5, [ 1649906905; 1649906905 ] -> 5, [ 1649906906; 1649906906 ] -> 5, [ 1649906907; 1649906907 ] -> 5, [ 1649906908; 1649906908 ] -> 252, [ 1649906909; 1649906909 ] -> 15, [ 1649906910; 1649906910 ] -> 0, [ 1649906911; 1649906911 ] -> 0, [ 1649906912; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36220 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1308227828 , 1000 , 8 ) -> 1649906904, () -> 229935600, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform4603 : BV:32
6 : Lambda36266 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda36267 : BV:32
9 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1621497340 { 0x60a615fc +1.29754590e66 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227324848 { 0x49277db0 +1.30852317e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4092; 4099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4100; 1649906903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1649906904; 1649906911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1649906912; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 19993700 { 0x1311464 +1.38343477e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1457202432 { 0x56db2500 +1.71206665e46 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1649906904 { 0x625794d8 +1.68422985e69 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1278112380 { 0x4c2e727c +1.36286878e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1427673984
=counter_example_end
=global nodece 90 num_edges_traversed 5
=global nodece 90 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 91
=global nodece 91 nodece z3v487.ce3796.num_edges_traversed6
=global nodece 91 nodece_path
=global nodece 91 nodece_path.graph_edge_composition
(epsilon)
=global nodece 91 nodece_cached_counterexample
=counter_example_begin z3v487.ce3796 f2f4d83659e09e506eb8927fc73de15b
=nextpc_const.1
1 : 1308227828 { 0x4df9f8f4 +1.95290994e28 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36231 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36232 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36235 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36216 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4589 : BV:32
3 : Lambda36238 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36239 : BV:32
6 : unit : UNIT
7 : 764923889 { 0x2d97cff1 +1.18603336e220 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4091 ] -> 5, [ 4092; 4099 ] -> 0, [ 4100; 1649906903 ] -> 5, [ 1649906904; 1649906904 ] -> 5, [ 1649906905; 1649906905 ] -> 5, [ 1649906906; 1649906906 ] -> 5, [ 1649906907; 1649906907 ] -> 5, [ 1649906908; 1649906908 ] -> 252, [ 1649906909; 1649906909 ] -> 15, [ 1649906910; 1649906910 ] -> 0, [ 1649906911; 1649906911 ] -> 0, [ 1649906912; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36220 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3888704483 { 0xe7c8ebe3 -406262813 -1.56969869e80 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3888704511 { 0xe7c8ebff -406262785 -1.56970202e80 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3888704509 { 0xe7c8ebfd -406262787 -1.56970179e80 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3888704510 { 0xe7c8ebfe -406262786 -1.56970191e80 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3888704508 { 0xe7c8ebfc -406262788 -1.56970167e80 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3888704482 { 0xe7c8ebe2 -406262814 -1.56969857e80 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3888704481 { 0xe7c8ebe1 -406262815 -1.56969845e80 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3888704480 { 0xe7c8ebe0 -406262816 -1.56969833e80 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1308227828 , 1000 , 8 ) -> 1649906904, () -> 229935600, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform4603 : BV:32
6 : Lambda36266 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda36267 : BV:32
9 : 1195987962 { 0x474953fa +1.57287526e15 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1621497340 { 0x60a615fc +1.29754590e66 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1649906904 { 0x625794d8 +1.68422985e69 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1227324848 { 0x49277db0 +1.30852317e19 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 4091 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4092; 4099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4100; 1649906903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1649906904; 1649906911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1649906912; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 19993700 { 0x1311464 +1.38343477e131 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4091 ] -> 5, [ 4092; 4099 ] -> 0, [ 4100; 1649906903 ] -> 5, [ 1649906904; 1649906904 ] -> 5, [ 1649906905; 1649906905 ] -> 5, [ 1649906906; 1649906906 ] -> 5, [ 1649906907; 1649906907 ] -> 5, [ 1649906908; 1649906908 ] -> 252, [ 1649906909; 1649906909 ] -> 15, [ 1649906910; 1649906910 ] -> 0, [ 1649906911; 1649906911 ] -> 0, [ 1649906912; 3888704507 ] -> 5, [ 3888704508; 3888704511 ] -> 0, [ 3888704512; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1457202432 { 0x56db2500 +1.71206665e46 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1649906904 { 0x625794d8 +1.68422985e69 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1278112380 { 0x4c2e727c +1.36286878e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 162 , m_adder -> 152), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1427673984
=counter_example_end
=global nodece 91 num_edges_traversed 6
=global nodece 91 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 92
=global nodece 92 nodece z3v487.ce3802.num_edges_traversed1
=global nodece 92 nodece_path
=global nodece 92 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 92 nodece_cached_counterexample
=counter_example_begin z3v487.ce3802 16c959c72ab8ebca2aebda17b080b0
=input.spec-%var-arr-1
1 : Lambda36356 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36357 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
30 : eq(23, 29) : BOOL
31 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36359 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36360 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
38 : eq(31, 37) : BOOL
39 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36341 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
26 : eq(21, 25) : BOOL
27 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
28 : eq(21, 27) : BOOL
29 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4615 : BV:32
3 : Lambda36363 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36364 : BV:32
6 : unit : UNIT
7 : 479866732 { 0x1c9a2f6c +1.20457220e186 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4616 : BV:32
3 : Lambda36365 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36366 : BV:32
6 : unit : UNIT
7 : 1699586229 { 0x654da0b5 +1.60646688e75 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4618 : BV:32
5 : Lambda36369 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36370 : BV:32
8 : 1699586229 { 0x654da0b5 +1.60646688e75 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 11 ] -> 5, [ 12; 12 ] -> 0, [ 13; 13 ] -> 0, [ 14; 14 ] -> 0, [ 15; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 1096876247 ] -> 5, [ 1096876248; 1096876251 ] -> 0, [ 1096876252; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36345 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4620 : BV:32
5 : Lambda36373 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36374 : BV:32
8 : 1699586229 { 0x654da0b5 +1.60646688e75 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4622 : BV:32
5 : Lambda36377 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36378 : BV:32
8 : 1699586229 { 0x654da0b5 +1.60646688e75 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 946671124 { 0x386d0e14 +1.85199213e241 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1477353911 { 0x580ea1b7 +1.11431014e49 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1386058240 { 0x529d9200 +1.23101806e38 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 19 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1477353911 { 0x580ea1b7 +1.11431014e49 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1096876247 ] -> 5, [ 1096876248; 1096876251 ] -> 0, [ 1096876252; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1178664285 { 0x4640fd5d +1.50773203e13 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 428006749 { 0x1982dd5d +1.2238047e180 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 11 ] -> 5, [ 12; 19 ] -> 255, [ 20; 1096876247 ] -> 5, [ 1096876248; 1096876251 ] -> 0, [ 1096876252; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1178664285 { 0x4640fd5d +1.50773203e13 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 19 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1386058240 { 0x529d9200 +1.23101806e38 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2135349463
=counter_example_end
=global nodece 92 num_edges_traversed 1
=global nodece 92 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 93
=global nodece 93 nodece z3v487.ce3833.num_edges_traversed2
=global nodece 93 nodece_path
=global nodece 93 nodece_path.graph_edge_composition
(epsilon)
=global nodece 93 nodece_cached_counterexample
=counter_example_begin z3v487.ce3833 5c78367892d878628f57fa1d8464cc0
=input.spec-%var-arr-1
1 : Lambda36356 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36357 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
30 : eq(23, 29) : BOOL
31 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36359 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36360 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
38 : eq(31, 37) : BOOL
39 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36341 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
26 : eq(21, 25) : BOOL
27 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
28 : eq(21, 27) : BOOL
29 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4615 : BV:32
3 : Lambda36363 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36364 : BV:32
6 : unit : UNIT
7 : 479866732 { 0x1c9a2f6c +1.20457220e186 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 11 ] -> 5, [ 12; 12 ] -> 0, [ 13; 13 ] -> 0, [ 14; 14 ] -> 0, [ 15; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 1096876247 ] -> 5, [ 1096876248; 1096876251 ] -> 0, [ 1096876252; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36345 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4622 : BV:32
5 : Lambda36377 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36378 : BV:32
8 : 1699586229 { 0x654da0b5 +1.60646688e75 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 946671124 { 0x386d0e14 +1.85199213e241 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1386058240 { 0x529d9200 +1.23101806e38 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 19 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1477353911 { 0x580ea1b7 +1.11431014e49 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1178664285 { 0x4640fd5d +1.50773203e13 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 428006749 { 0x1982dd5d +1.2238047e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2135349463
=counter_example_end
=global nodece 93 num_edges_traversed 2
=global nodece 93 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 94
=global nodece 94 nodece z3v487.ce3837.num_edges_traversed3
=global nodece 94 nodece_path
=global nodece 94 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 94 nodece_cached_counterexample
=counter_example_begin z3v487.ce3837 7351f52997223e56ff42b8b79ff7ef
=nextpc_const.1
1 : 1214359636 { 0x4861a854 +1.76294946e17 } : BV:32
=input.spec-%var-arr-1
1 : Lambda36356 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36357 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
28 : eq(23, 27) : BOOL
29 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
30 : eq(23, 29) : BOOL
31 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda36359 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda36360 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
36 : eq(31, 35) : BOOL
37 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
38 : eq(31, 37) : BOOL
39 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda36341 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
26 : eq(21, 25) : BOOL
27 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
28 : eq(21, 27) : BOOL
29 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform4615 : BV:32
3 : Lambda36363 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda36364 : BV:32
6 : unit : UNIT
7 : 479866732 { 0x1c9a2f6c +1.20457220e186 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1073741823 ] -> true, [ 1073741824; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 11 ] -> 5, [ 12; 12 ] -> 0, [ 13; 13 ] -> 0, [ 14; 14 ] -> 0, [ 15; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 1096876247 ] -> 5, [ 1096876248; 1096876251 ] -> 0, [ 1096876252; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda36345 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1096876219 { 0x416100bb +1.75783479e3 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 1096876251 { 0x416100db +1.75783860e3 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 1096876249 { 0x416100d9 +1.75783836e3 } : BV:32
13 : eq(8, 12) : BOOL
14 : 1096876250 { 0x416100da +1.75783848e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 1096876248 { 0x416100d8 +1.75783824e3 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 1096876218 { 0x416100ba +1.75783467e3 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 1096876217 { 0x416100b9 +1.75783455e3 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 1096876216 { 0x416100b8 +1.75783443e3 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 18), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1214359636 , 1000 , 8 ) -> 1391245783, () -> 1598381581, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform4622 : BV:32
5 : Lambda36377 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda36378 : BV:32
8 : 1699586229 { 0x654da0b5 +1.60646688e75 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 946671124 { 0x386d0e14 +1.85199213e241 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1391245783 { 0x52ecb9d7 +1.84942138e38 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1386058240 { 0x529d9200 +1.23101806e38 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 19 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 20; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1477353911 { 0x580ea1b7 +1.11431014e49 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 11 ] -> 5, [ 12; 12 ] -> 0, [ 13; 13 ] -> 0, [ 14; 14 ] -> 0, [ 15; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 1096876247 ] -> 5, [ 1096876248; 1096876251 ] -> 0, [ 1096876252; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1178664285 { 0x4640fd5d +1.50773203e13 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 428006749 { 0x1982dd5d +1.2238047e180 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 18), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3111802811
=counter_example_end
=global nodece 94 num_edges_traversed 3
=global nodece 94 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 38
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 39
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 40
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 41
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=inductive-invariants point_set point_expr 42
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 43
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 44
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 45
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 46
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 47
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 48
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 49
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 50
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 51
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 52
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 53
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 55
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 70
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 71
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 72
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 73
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=inductive-invariants point_set point_expr 74
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 75
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 76
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 77
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 78
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 80
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 81
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 82
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 83
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 84
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 90
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 91
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 92
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 93
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 94
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 95
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 96
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 97
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 98
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 99
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce64 expr point z3v487.ce64 done
=inductive-invariants point_set point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294966336
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967041
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce63 expr point z3.ce63 done
=inductive-invariants point_set point z3v487.ce16
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce16 expr point z3v487.ce16 done
=inductive-invariants point_set point z3.ce15
=inductive-invariants point_set point z3.ce15 expr point z3.ce15
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3975937792
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
285212671
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce15 expr point z3.ce15 done
=inductive-invariants point_set point z3v487.ce40
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce40 expr point z3v487.ce40 done
=inductive-invariants point_set point z3.ce39
=inductive-invariants point_set point z3.ce39 expr point z3.ce39
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8845000
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce39 expr point z3.ce39 done
=inductive-invariants point_set point z3v487.ce87
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce87 expr point z3v487.ce87 done
=inductive-invariants point_set point z3.ce88
=inductive-invariants point_set point z3.ce88 expr point z3.ce88
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2884599568
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce88 expr point z3.ce88 done
=inductive-invariants point_set point z3v487.ce112
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce112 expr point z3v487.ce112 done
=inductive-invariants point_set point z3.ce111
=inductive-invariants point_set point z3.ce111 expr point z3.ce111
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1542647300
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4060214002
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce111 expr point z3.ce111 done
=inductive-invariants point_set point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294967040
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce136 expr point z3v487.ce136 done
=inductive-invariants point_set point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3757570048
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce135 expr point z3.ce135 done
=inductive-invariants point_set point z3.ce175
=inductive-invariants point_set point z3.ce175 expr point z3.ce175
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
297838144
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
176510465
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 done
=inductive-invariants point_set point z3v487.ce176
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 done
=inductive-invariants point_set point z3v487.ce216
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 done
=inductive-invariants point_set point z3.ce215
=inductive-invariants point_set point z3.ce215 expr point z3.ce215
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3975937792
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
285212671
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 done
=inductive-invariants point_set point z3.ce239
=inductive-invariants point_set point z3.ce239 expr point z3.ce239
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4257783740
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 done
=inductive-invariants point_set point z3v487.ce240
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
276857440
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
129
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 done
=inductive-invariants point_set point z3.ce263
=inductive-invariants point_set point z3.ce263 expr point z3.ce263
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1173613828
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce263 expr point z3.ce263 done
=inductive-invariants point_set point z3v487.ce264
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
276857440
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
129
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce264 expr point z3v487.ce264 done
=inductive-invariants point_set point z3.ce287
=inductive-invariants point_set point z3.ce287 expr point z3.ce287
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
289186944
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65541
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 done
=inductive-invariants point_set point z3v487.ce288
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 done
=inductive-invariants point_set point z3.ce311
=inductive-invariants point_set point z3.ce311 expr point z3.ce311
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
289186944
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65541
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce311 expr point z3.ce311 done
=inductive-invariants point_set point z3v487.ce312
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce312 expr point z3v487.ce312 done
=inductive-invariants point_set point z3v487.ce335
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce335 expr point z3v487.ce335 done
=inductive-invariants point_set point z3.ce336
=inductive-invariants point_set point z3.ce336 expr point z3.ce336
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
289186944
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65541
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce336 expr point z3.ce336 done
=inductive-invariants point_set point z3.ce1985
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1542647300
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4060214002
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2090695345
=inductive-invariants point_set point z3.ce1985 expr point z3.ce1985 done
=inductive-invariants point_set point z3v487.ce1991
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
650281370
=inductive-invariants point_set point z3v487.ce1991 expr point z3v487.ce1991 done
=inductive-invariants point_set point z3.ce2981
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
272977648
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
272977648
=inductive-invariants point_set point z3.ce2981 expr point z3.ce2981 done
=inductive-invariants point_set point z3v487.ce2857
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
705005092
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
316
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2857 expr point z3v487.ce2857 done
=inductive-invariants point_set point z3.ce993
=inductive-invariants point_set point z3.ce993 expr point z3.ce993
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce993 expr point z3.ce993 done
=inductive-invariants point_set point z3v487.ce997
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce997 expr point z3v487.ce997 done
=inductive-invariants point_set point z3.ce1280
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1280 expr point z3.ce1280 done
=inductive-invariants point_set point z3v487.ce1281
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1281 expr point z3v487.ce1281 done
=inductive-invariants point_set point z3.ce1304
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1304 expr point z3.ce1304 done
=inductive-invariants point_set point z3v487.ce1305
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1305 expr point z3v487.ce1305 done
=inductive-invariants point_set point z3.ce1328
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1328 expr point z3.ce1328 done
=inductive-invariants point_set point z3v487.ce1329
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1329 expr point z3v487.ce1329 done
=inductive-invariants point_set point z3.ce1353
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1353 expr point z3.ce1353 done
=inductive-invariants point_set point z3v487.ce1352
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1352 expr point z3v487.ce1352 done
=inductive-invariants point_set point z3.ce1376
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1376 expr point z3.ce1376 done
=inductive-invariants point_set point z3v487.ce1377
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1377 expr point z3v487.ce1377 done
=inductive-invariants point_set point z3v487.ce1416
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
336347392
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1416 expr point z3v487.ce1416 done
=inductive-invariants point_set point z3.ce1417
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
723536232
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1417 expr point z3.ce1417 done
=inductive-invariants point_set point z3v487.ce1440
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3288576520
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
262144
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1440 expr point z3v487.ce1440 done
=inductive-invariants point_set point z3.ce1441
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1333940304
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1441 expr point z3.ce1441 done
=inductive-invariants point_set point z3.ce1465
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1465 expr point z3.ce1465 done
=inductive-invariants point_set point z3v487.ce1464
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2097152
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1464 expr point z3v487.ce1464 done
=inductive-invariants point_set point z3v487.ce1489
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67108864
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1489 expr point z3v487.ce1489 done
=inductive-invariants point_set point z3.ce1488
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1488 expr point z3.ce1488 done
=inductive-invariants point_set point z3.ce1513
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
60228676
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65536
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1513 expr point z3.ce1513 done
=inductive-invariants point_set point z3v487.ce1512
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
268633120
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
512
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1512 expr point z3v487.ce1512 done
=inductive-invariants point_set point z3v487.ce1545
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1074020356
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65536
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1545 expr point z3v487.ce1545 done
=inductive-invariants point_set point z3.ce1544
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3295546284
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1544 expr point z3.ce1544 done
=inductive-invariants point_set point z3v487.ce1593
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
285212768
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
128
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1593 expr point z3v487.ce1593 done
=inductive-invariants point_set point z3.ce1592
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2189468576
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1592 expr point z3.ce1592 done
=inductive-invariants point_set point z3v487.ce1625
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
512
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1625 expr point z3v487.ce1625 done
=inductive-invariants point_set point z3.ce1624
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1624 expr point z3.ce1624 done
=inductive-invariants point_set point z3.ce1672
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1672 expr point z3.ce1672 done
=inductive-invariants point_set point z3v487.ce1673
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1673 expr point z3v487.ce1673 done
=inductive-invariants point_set point z3.ce1792
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1028071636
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1792 expr point z3.ce1792 done
=inductive-invariants point_set point z3v487.ce1793
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
538973740
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1793 expr point z3v487.ce1793 done
=inductive-invariants point_set point z3.ce1817
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8192
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1817 expr point z3.ce1817 done
=inductive-invariants point_set point z3v487.ce1816
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1816 expr point z3v487.ce1816 done
=inductive-invariants point_set point z3v487.ce1949
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1596183960
=inductive-invariants point_set point z3v487.ce1949 expr point z3v487.ce1949 done
=inductive-invariants point_set point z3.ce1952
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1941972720
=inductive-invariants point_set point z3.ce1952 expr point z3.ce1952 done
=inductive-invariants point_set point z3.ce1982
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3757570048
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
354785019
=inductive-invariants point_set point z3.ce1982 expr point z3.ce1982 done
=inductive-invariants point_set point z3v487.ce1988
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1157084866
=inductive-invariants point_set point z3v487.ce1988 expr point z3v487.ce1988 done
=inductive-invariants point_set point z3.ce1994
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294966336
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967041
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1049355574
=inductive-invariants point_set point z3.ce1994 expr point z3.ce1994 done
=inductive-invariants point_set point z3.ce1997
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8845000
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
817259110
=inductive-invariants point_set point z3.ce1997 expr point z3.ce1997 done
=inductive-invariants point_set point z3.ce2000
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3975937792
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
285212671
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1735635100
=inductive-invariants point_set point z3.ce2000 expr point z3.ce2000 done
=inductive-invariants point_set point z3.ce2318
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
993426452
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 done
=inductive-invariants point_set point z3v487.ce2319
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1700618262
=inductive-invariants point_set point z3v487.ce2319 expr point z3v487.ce2319 done
=inductive-invariants point_set point z3v487.ce2340
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
531627618
=inductive-invariants point_set point z3v487.ce2340 expr point z3v487.ce2340 done
=inductive-invariants point_set point z3.ce2341
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
32768
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
94462629
=inductive-invariants point_set point z3.ce2341 expr point z3.ce2341 done
=inductive-invariants point_set point z3v487.ce2386
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
626912849
=inductive-invariants point_set point z3v487.ce2386 expr point z3v487.ce2386 done
=inductive-invariants point_set point z3.ce2387
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2048
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
395577140
=inductive-invariants point_set point z3.ce2387 expr point z3.ce2387 done
=inductive-invariants point_set point z3.ce2408
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
281998022
=inductive-invariants point_set point z3.ce2408 expr point z3.ce2408 done
=inductive-invariants point_set point z3v487.ce2409
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1954706298
=inductive-invariants point_set point z3v487.ce2409 expr point z3v487.ce2409 done
=inductive-invariants point_set point z3v487.ce2431
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2014315528
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1279859980
=inductive-invariants point_set point z3v487.ce2431 expr point z3v487.ce2431 done
=inductive-invariants point_set point z3.ce2430
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
313083200
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
128
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1571092676
=inductive-invariants point_set point z3.ce2430 expr point z3.ce2430 done
=inductive-invariants point_set point z3v487.ce2460
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
67127552
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1122648324
=inductive-invariants point_set point z3v487.ce2460 expr point z3v487.ce2460 done
=inductive-invariants point_set point z3.ce2461
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
143765904
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1048576
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1345480812
=inductive-invariants point_set point z3.ce2461 expr point z3.ce2461 done
=inductive-invariants point_set point z3.ce2482
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1703614839
=inductive-invariants point_set point z3.ce2482 expr point z3.ce2482 done
=inductive-invariants point_set point z3v487.ce2483
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
667681022
=inductive-invariants point_set point z3v487.ce2483 expr point z3v487.ce2483 done
=inductive-invariants point_set point z3.ce2504
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
986688043
=inductive-invariants point_set point z3.ce2504 expr point z3.ce2504 done
=inductive-invariants point_set point z3v487.ce2505
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
696881793
=inductive-invariants point_set point z3v487.ce2505 expr point z3v487.ce2505 done
=inductive-invariants point_set point z3v487.ce2531
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
289444392
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
577087619
=inductive-invariants point_set point z3v487.ce2531 expr point z3v487.ce2531 done
=inductive-invariants point_set point z3.ce2530
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3019985068
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1296402967
=inductive-invariants point_set point z3.ce2530 expr point z3.ce2530 done
=inductive-invariants point_set point z3v487.ce2550
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
268779528
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
524288
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
268435457
=inductive-invariants point_set point z3v487.ce2550 expr point z3v487.ce2550 done
=inductive-invariants point_set point z3v487.ce2563
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
539254872
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
970450126
=inductive-invariants point_set point z3v487.ce2563 expr point z3v487.ce2563 done
=inductive-invariants point_set point z3.ce2564
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1801817344
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32768
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
72493479
=inductive-invariants point_set point z3.ce2564 expr point z3.ce2564 done
=inductive-invariants point_set point z3v487.ce2585
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3238002688
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1889806280
=inductive-invariants point_set point z3v487.ce2585 expr point z3v487.ce2585 done
=inductive-invariants point_set point z3.ce2586
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
471155464
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
64
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
323632401
=inductive-invariants point_set point z3.ce2586 expr point z3.ce2586 done
=inductive-invariants point_set point z3v487.ce2615
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
9012232
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2017850986
=inductive-invariants point_set point z3v487.ce2615 expr point z3v487.ce2615 done
=inductive-invariants point_set point z3.ce2616
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
119024280
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1994905564
=inductive-invariants point_set point z3.ce2616 expr point z3.ce2616 done
=inductive-invariants point_set point z3v487.ce2795
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
5664
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
4
=inductive-invariants point_set point z3v487.ce2795 expr point z3v487.ce2795 done
=inductive-invariants point_set point z3v487.ce2816
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce2816 expr point z3v487.ce2816 done
=inductive-invariants point_set point z3.ce2817
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2097152
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
0
=inductive-invariants point_set point z3.ce2817 expr point z3.ce2817 done
=inductive-invariants point_set point z3.ce2867
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2551491004
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2181038076
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4096
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2867 expr point z3.ce2867 done
=inductive-invariants point_set point z3.ce2906
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
402955476
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2906 expr point z3.ce2906 done
=inductive-invariants point_set point z3.ce2916
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
272977648
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2916 expr point z3.ce2916 done
=inductive-invariants point_set point z3.ce3185
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
3755999232
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3185 expr point z3.ce3185 done
=inductive-invariants point_set point z3v487.ce3184
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
262144
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3184 expr point z3v487.ce3184 done
=inductive-invariants point_set point z3.ce3260
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4096
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
642605776
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3260 expr point z3.ce3260 done
=inductive-invariants point_set point z3v487.ce3234
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
64
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
524288
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3234 expr point z3v487.ce3234 done
=inductive-invariants point_set point z3.ce3233
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4096
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4290511872
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3233 expr point z3.ce3233 done
=inductive-invariants point_set point z3.ce3286
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4096
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
642605776
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
642605776
=inductive-invariants point_set point z3.ce3286 expr point z3.ce3286 done
=inductive-invariants point_set point z3.ce3327
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4261412576
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3327 expr point z3.ce3327 done
=inductive-invariants point_set point z3v487.ce3326
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
128
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3326 expr point z3v487.ce3326 done
=inductive-invariants point_set point z3v487.ce3365
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3365 expr point z3v487.ce3365 done
=inductive-invariants point_set point z3.ce3364
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4022337528
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3364 expr point z3.ce3364 done
=inductive-invariants point_set point z3.ce3412
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3412 expr point z3.ce3412 done
=inductive-invariants point_set point z3v487.ce3411
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3411 expr point z3v487.ce3411 done
=inductive-invariants point_set point z3.ce3467
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4290772980
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2031168096
=inductive-invariants point_set point z3.ce3467 expr point z3.ce3467 done
=inductive-invariants point_set point z3v487.ce3466
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1320360533
=inductive-invariants point_set point z3v487.ce3466 expr point z3v487.ce3466 done
=inductive-invariants point_set point z3v487.ce3512
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3684303392
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3512 expr point z3v487.ce3512 done
=inductive-invariants point_set point z3.ce3562
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388610
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3562 expr point z3.ce3562 done
=inductive-invariants point_set point z3v487.ce3563
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3563 expr point z3v487.ce3563 done
=inductive-invariants point_set point z3v487.ce3598
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
175745879
=inductive-invariants point_set point z3v487.ce3598 expr point z3v487.ce3598 done
=inductive-invariants point_set point z3.ce3599
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1317512042
=inductive-invariants point_set point z3.ce3599 expr point z3.ce3599 done
=inductive-invariants point_set point z3v487.ce3665
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3800087568
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1140742700
=inductive-invariants point_set point z3v487.ce3665 expr point z3v487.ce3665 done
=inductive-invariants point_set point z3v487.ce3630
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3800087568
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3630 expr point z3v487.ce3630 done
=inductive-invariants point_set point z3v487.ce3700
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 2 for input.spec-%var-i-0.L3%6%bbentry
6
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3800087568
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1140742700
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3700 expr point z3v487.ce3700 done
=inductive-invariants point_set point z3v487.ce3751
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 2 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3888704480
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4092
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1649906904
=inductive-invariants point_set point z3v487.ce3751 expr point z3v487.ce3751 done
=inductive-invariants point_set point z3v487.ce3716
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 2 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3888704480
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4092
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3716 expr point z3v487.ce3716 done
=inductive-invariants point_set point z3v487.ce3786
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3888704480
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1649906904
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3786 expr point z3v487.ce3786 done
=inductive-invariants point_set point z3v487.ce3837
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1096876216
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
12
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1391245783
=inductive-invariants point_set point z3v487.ce3837 expr point z3v487.ce3837 done
=inductive-invariants point_set point z3v487.ce3802
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1096876216
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
12
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3802 expr point z3v487.ce3802 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallStart for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce997
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 33
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-32-free_var_idx.33
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce993
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce997
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce1280
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce1304
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce1305
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce1328
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce1329
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce3185
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce3184
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce3234
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce3233
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3v487.ce3326
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce3365
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3.ce3364
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=14; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 33->0; 
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 33->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 33->0; 
33
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 33->1; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce997
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3184
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce3411
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3.ce3562
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce3700
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3786
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce997
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce3184
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce3411
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3.ce3562
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce3700
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3786
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce993
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce997
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce1280
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce1352
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce1376
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=5; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3v487.ce997
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3v487.ce1352
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 38 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 22
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 24
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 25
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 26
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 27
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 30
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 31
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 32
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 34
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 35
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 36
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 37
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 38
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 39
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 40
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 41
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 42
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 43
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 44
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 45
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 46
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 47
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 48
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 49
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 50
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 51
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 52
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 53
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3v487.ce997
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=38; number of visited CEs=1; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallEnd for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce2000
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 54
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce1985
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce1991
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce2981
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce1982
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce1988
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce1994
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce1997
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce2000
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce3286
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce3466
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=10; number of preds=3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 54->0; 
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 54->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 54->0; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce2981
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce2000
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce3286
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce3598
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce3665
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3751
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce3837
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce2981
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce2000
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce3286
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce3598
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce3665
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3751
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 6: z3v487.ce3837
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce1982
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce1994
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce2000
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce2318
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce1994
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce2000
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 47 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 55
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 56
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 57
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 58
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 59
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 60
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 61
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 62
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 63
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 64
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 65
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 66
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 67
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 68
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 69
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 70
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 71
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 72
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 73
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 74
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 75
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 76
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 77
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 78
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 80
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 81
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 82
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 83
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 84
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 90
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 91
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 92
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 93
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 94
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 95
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 96
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 97
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 98
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 99
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce2000
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=47; number of visited CEs=1; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce15
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce64
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce63
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce16
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce15
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce40
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce39
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce87
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce111
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce2906
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce2916
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=10; number of preds=3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce15
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce2916
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce3260
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce3512
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce3630
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3716
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce3802
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce15
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce2916
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce3260
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce3512
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce3630
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3716
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 6: z3v487.ce3802
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce63
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce16
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce15
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce135
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce63
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3v487.ce16
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 2: z3.ce15
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 18 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 22
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 24
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 25
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 26
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 27
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 30
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 31
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 32
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce15
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=18; number of visited CEs=1; number of preds=4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140458 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140583 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
140461 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140431 : 0 { 0x0 } : BOOL
140584 : select(140458, 140459, 140583, 140461, 140430, 140431) : BV:32
=RhsExpr
140456 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140458 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140585 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
140460 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140431 : 0 { 0x0 } : BOOL
140586 : select(140458, 140459, 140585, 140460, 140430, 140431) : BV:32
=RhsExpr
140457 : input.dst.llvm-%arr : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140457 : input.dst.llvm-%arr : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140467 : islangaligned(140457, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
pointer-implements-map
=LhsExpr
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
140315 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140375 : bvule(140276, 140315) : BOOL
140456 : input.dst.llvm-%n : BV:32
141355 : bvult(140315, 140456) : BOOL
141356 : and(140375, 141355) : BOOL
141357 : lambda(140315, 141356) : FUNCTION[BV:32 -> BOOL]
140317 : Lambda1 : BV:32
140458 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140425 : memlabel-top : MEMLABEL
140427 : 4 { 0x4 +1.47e129 } : BV:32
140428 : bvmul(140317, 140427) : BV:32
140457 : input.dst.llvm-%arr : BV:32
141377 : bvadd(140428, 140457) : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140431 : 0 { 0x0 } : BOOL
141378 : select(140458, 140459, 140425, 141377, 140430, 140431) : BV:32
141380 : lambda(140317, 141378) : FUNCTION[BV:32 -> BV:32]
141381 : map(141357, 141380) : MAP[BV:32 -> BV:32]
141385 : eq(140273, 141381) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
precond-mlasserts
=LhsExpr
141327 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
141328 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
141329 : bvule(141327, 141328) : BOOL
140427 : 4 { 0x4 +1.47e129 } : BV:32
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141330 : bvadd(140427, 140505) : BV:32
141331 : bvadd(141327, 141330) : BV:32
141332 : eq(141328, 141331) : BOOL
141333 : and(141329, 141332) : BOOL
141334 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
141335 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
141336 : bvule(141334, 141335) : BOOL
141337 : and(141333, 141336) : BOOL
141338 : bvadd(141334, 141330) : BV:32
141339 : eq(141335, 141338) : BOOL
141340 : and(141337, 141339) : BOOL
140461 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
141341 : 3 { 0x3 +1.35e129 } : BV:32
141342 : bvand(140461, 141341) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141343 : eq(141342, 140276) : BOOL
140460 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
141344 : bvand(140460, 141341) : BV:32
141345 : eq(141344, 140276) : BOOL
141346 : and(141343, 141345) : BOOL
141347 : and(141340, 141346) : BOOL
141348 : eq(140461, 141327) : BOOL
141349 : eq(140460, 141334) : BOOL
141350 : and(141348, 141349) : BOOL
141351 : and(141347, 141350) : BOOL
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140298 : 1 { 0x1 +1.11e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141352 : region_agrees_with_memlabel(140459, 140276, 140298, 140462) : BOOL
141353 : and(141351, 141352) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
merged-predicate
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140911 : ite(140903, 140276, 140722) : BV:32
350895 : isgepoffset(140911, 140276) : BOOL
350896 : and(140275, 350895) : BOOL
140652 : 4 { 0x4 +1.0e1025 } : BV:64
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140718 : heap_alloc(140714, 140487, 140713, 140474) : ARRAY[BV:32 -> MEMLABEL]
140905 : ite(140903, 140714, 140718) : ARRAY[BV:32 -> MEMLABEL]
140913 : malloc_side_effect(140726, 140905, 140487) : BV:32
140519 : 32 { 0x20 +1.0e1025 } : INT
350897 : bvsign_ext(140913, 140519) : BV:64
352455 : bvmul(140652, 350897) : BV:64
140523 : 63 { 0x3f +1.0e1025 } : INT
352456 : bvextract(352455, 140523, 140519) : BV:32
352691 : bvslt(140913, 140276) : BOOL
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
352692 : ite(352691, 140505, 140276) : BV:32
353124 : eq(352456, 352692) : BOOL
140430 : 4 { 0x4 +1.0e1025 } : INT
353343 : isindexforsize(353124, 140430) : BOOL
140712 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
140908 : malloc_side_effect(140712, 140905, 140487) : BV:32
140427 : 4 { 0x4 +1.47e129 } : BV:32
145635 : bvmul(140427, 140913) : BV:32
237053 : bvadd(140908, 145635) : BV:32
353344 : isgepoffset(237053, 145635) : BOOL
353863 : and(353343, 353344) : BOOL
353864 : islangaligned(237053, 140430) : BOOL
353865 : and(353863, 353864, 350895, 350896) : BOOL
353866 : islangaligned(140911, 140430) : BOOL
237054 : bvadd(140427, 140911) : BV:32
353867 : isgepoffset(237054, 140427) : BOOL
353868 : and(350896, 353865, 353866, 353867) : BOOL
353869 : islangaligned(237054, 140430) : BOOL
353870 : and(353868, 353869) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
merged-predicate
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
353871 : and(141263, 140954) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallStart
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 35
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallEnd
m_dst_rank: 4, m_src_rank: 0, m_spec_rank: 44
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 15
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
