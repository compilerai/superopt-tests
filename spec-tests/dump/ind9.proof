=FunctionName: make_list
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph make_list.A2.B1.C1.D1.E2
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.make_list:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%10%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%10%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%10%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlheap.src.spec.make_list : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_sum)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%7%d => L3%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%10%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_prod)*((((ctor_sum*letin_def)*ctor_bv)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.make_list
=Loc 1 in src.spec.make_list.
REGMEM
spec-%var-arr-1
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=Loc 20 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 21 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 22 in src.spec.make_list.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
=Loc 23 in src.spec.make_list.
REGMEM
spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 24 in src.spec.make_list.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 25 in src.spec.make_list.
REGMEM
spec-%tmpvar-11.E0%0%d
1 : input.spec-%tmpvar-11.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 26 in src.spec.make_list.
REGMEM
spec-%tmpvar-12.E0%0%d
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 27 in src.spec.make_list.
REGMEM
spec-%tmpvar-7.E0%0%d
1 : input.spec-%tmpvar-7.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 28 in src.spec.make_list.
REGMEM
spec-%tmpvar-8.E0%0%d
1 : input.spec-%tmpvar-8.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 29 in src.spec.make_list.
REGMEM
spec-%var-l-0.L3%6%bbentry
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 30 in src.spec.make_list.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 31 in src.spec.make_list.
REGMEM
spec-%tmpvar-10.L3%6%bbentry
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 32 in src.spec.make_list.
REGMEM
spec-%tmpvar-9.L3%6%bbentry
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=Loc 33 in src.spec.make_list.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 34 in src.spec.make_list.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 35 in src.spec.make_list.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 36 in src.spec.make_list.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=Loc 37 in src.spec.make_list.
REGMEM
spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%tmpvar-4.L3%6%bbentry : BV:32
=Loc 38 in src.spec.make_list.
REGMEM
spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%var-arr_i-0.L3%6%bbentry : BV:32
=Loc 39 in src.spec.make_list.
REGMEM
spec-%var-new_l-0.L3%6%bbentry
1 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Locs end
=Liveness in src.spec.make_list
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
23, 24, 29, 
=live locs at L3%7%d
22, 23, 24, 29, 
=live locs at L3%8%bbentry
29, 
=live locs at L3%10%bbentry
22, 23, 24, 29, 
=live locs at E0%0%d
26, 

=Definedness in src.spec.make_list
=loc definedness at L0%0%d
1, 20, 21
=loc definedness at L3%6%bbentry
1, 20, 21, 23, 24, 29, 31, 32, 33
=loc definedness at L3%7%d
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at L3%8%bbentry
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at L3%10%bbentry
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at E0%0%d
1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33

=Branch affecting variable locs in src.spec.make_list
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
23, 24
=branch affecting variable locs at L3%7%d
22, 23, 24
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%10%bbentry
23, 24
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.make_list
=relevant memlabels
=function: make_list
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 23 {input.spec-%var-arr-0.L3%6%bbentry }
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 24 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 29 {input.spec-%var-l-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 31 {input.spec-%tmpvar-10.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 32 {input.spec-%tmpvar-9.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 33 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 22 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-11.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-12.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 27 {input.spec-%tmpvar-7.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 28 {input.spec-%tmpvar-8.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 30 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 24 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 29 {input.spec-%var-l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 33 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 34 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 35 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 36 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 37 {input.spec-%tmpvar-4.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 38 {input.spec-%var-arr_i-0.L3%6%bbentry }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 39 {input.spec-%var-new_l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%10%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%10%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.make_list
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 23
=loc_expr
140368 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 31
=loc_expr
140400 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 32
=loc_expr
140401 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 36
=loc_expr
140404 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.make_list
=loc 31 expr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 31 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140279 : unit : UNIT
140408 : Indxform7 : BV:32
140411 : Lambda14 : BV:32
140412 : lambda(140411, 140411) : FUNCTION[BV:32 -> BV:32]
140413 : Lambda15 : BV:32
140409 : sum(140276, 140279, 140408) : SUM[UNIT,BV:32]
140410 : prod(140276, 140409) : PROD[BV:32,SUM[UNIT,BV:32]]
140414 : lambda(140413, 140410) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140417 : ind(140276, 140408, 140412, 140414) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140418 : sum(140276, 140279, 140417) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140419 : sym_const(140418) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 32 expr
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=loc 32 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 36 expr
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=loc 36 spreled-expr
140298 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 1 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 20 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 22 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 26 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 27 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 30 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 31 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 35 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 36 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 37 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 39 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 31 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%10%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%10%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%10%bbentry=>L3%6%bbentry
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.make_list
=suffixpath_at_L0%0%d for src.spec.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.make_list
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.make_list
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.make_list
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%10%bbentry for src.spec.make_list
=suffixpath_at_L3%10%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%10%bbentry)))
=suffixpath_at_E0%0%d for src.spec.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.make_list:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal1 Lfor.body%1%fcallStart Lfor.body%1%fcallEnd Lfor.body%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%fcallStart
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
Lfor.body%1%intermediateVal1 => Lfor.body%2%d
Lfor.body%2%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-%arr
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal1
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%arr : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 26 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%arr : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlcall.dst.llvm.make_list.3 : memlabel-mem-
=memlabel_map.1 for call-context {*;make_list}
mlcall.dst.llvm.make_list.4 : memlabel-mem-
=memlabel_map.2 for call-context {*;make_list}
mlheap.dst.llvm.make_list : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;make_list}
mlvar.dst.llvm.make_list.0 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0
=memlabel_map.4 for call-context {*;make_list}
mlvar.dst.llvm.make_list.1 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=memlabel_map.5 for call-context {*;make_list}
mlvar.dst.llvm.make_list.2 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%arr : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !28)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !22)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !27*  br label %for.cond, !dbg !28))*  br label %for.cond, !dbg !28)*(  br label %for.cond, !dbg !28*  br label %for.cond, !dbg !28))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !29)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%fcallStart
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !31*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)*(  br i1 %cmp, label %for.body, label %for.end, !dbg !31*fcall_edge_start))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !31*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret %struct.list* %l.0, !dbg !46
tfg_edge_comment end

=Edge: Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.make_list.3 : MEMLABEL
3 : mlcall.dst.llvm.make_list.4 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.make_list.3 : MEMLABEL
3 : mlcall.dst.llvm.make_list.4 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i8* @malloc(i32 8), !dbg !32)
tfg_edge_comment end

=Edge: Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*  %call = call i8* @malloc(i32 8), !dbg !32)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal1 => Lfor.body%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(1, 4) : BV:32
6 : ite(3, 2, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 1, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 1, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 1, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : eq(4, 2) : BOOL
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc_ptr(1, 6) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : bvadd(7, 9) : BV:32
11 : bvule(7, 10) : BOOL
12 : or(5, 11) : BOOL
13 : or(3, 12) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : mlheap.dst.llvm.make_list : MEMLABEL
7 : region_agrees_with_memlabel(4, 1, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %call = call i8* @malloc(i32 8), !dbg !32
tfg_edge_comment end

=Edge: Lfor.body%2%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_list.1 : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : mlvar.dst.llvm.make_list.0 : MEMLABEL
12 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
13 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(13, 14) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(12, 16) : BV:32
18 : 4 { 0x4 +1.0e1025 } : INT
19 : 0 { 0x0 } : BOOL
20 : select(1, 2, 11, 17, 18, 19) : BV:32
21 : store(1, 2, 3, 10, 20, 18, 19) : ARRAY[BV:32 -> BV:8]
22 : mlvar.dst.llvm.make_list.2 : MEMLABEL
23 : bvadd(8, 14) : BV:32
24 : bvadd(4, 23) : BV:32
25 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
26 : store(21, 2, 22, 24, 25, 18, 19) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_list.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : and(22, 23) : BOOL
25 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
26 : 8 { 0x8 +1.95e129 } : BV:32
27 : bvmul(2, 26) : BV:32
28 : bvadd(2, 27) : BV:32
29 : bvadd(25, 28) : BV:32
30 : isgepoffset(29, 27) : BOOL
31 : bvslt(2, 2) : BOOL
32 : bvsign_ext(2, 4) : BV:64
33 : bvzero_ext(26, 4) : BV:64
34 : bvmul(32, 33) : BV:64
35 : bvextract(34, 9, 4) : BV:32
36 : eq(35, 11) : BOOL
37 : eq(35, 2) : BOOL
38 : ite(31, 36, 37) : BOOL
39 : 8 { 0x8 +1.0e1025 } : INT
40 : isindexforsize(38, 39) : BOOL
41 : and(30, 40) : BOOL
42 : bvadd(28, 2) : BV:32
43 : bvadd(25, 42) : BV:32
44 : isgepoffset(43, 2) : BOOL
45 : and(41, 44) : BOOL
46 : and(24, 45) : BOOL
47 : islangaligned(43, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvadd(28, 6) : BV:32
50 : bvadd(25, 49) : BV:32
51 : isgepoffset(50, 6) : BOOL
52 : and(41, 51) : BOOL
53 : and(48, 52) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((((  %0 = bitcast i8* %call to %struct.list*, !dbg !32*  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36)*(  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36*  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36))*(  %1 = load i32, i32* %arrayidx, align 4, !dbg !36*  %1 = load i32, i32* %arrayidx, align 4, !dbg !36))*((  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37)*(  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37)))*  store i32 %1, i32* %val, align 4, !dbg !38)*((  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39)*(  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39)))*(((((  store %struct.list* %l.0, %struct.list** %next, align 4, !dbg !40*  br label %for.inc, !dbg !41)*  br label %for.inc, !dbg !41)*  br label %for.inc, !dbg !41)*(((((  %inc = add i32 %i.0, 1, !dbg !42*  br label %for.cond, !dbg !43, !llvm.loop !44)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !22)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !27*  br label %for.cond, !dbg !43, !llvm.loop !44))*  br label %for.cond, !dbg !43, !llvm.loop !44)*(  br label %for.cond, !dbg !43, !llvm.loop !44*  br label %for.cond, !dbg !43, !llvm.loop !44)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%arr : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.make_list
=Loc 100006 in dst.llvm.make_list.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100008 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr
1 : input.dst.llvm-%arr : BV:32
=Loc 100031 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100040 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100041 in dst.llvm.make_list.
REGMEM
dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=Loc 100042 in dst.llvm.make_list.
REGMEM
dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=Loc 100044 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100045 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100046 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100047 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100048 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100049 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100050 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100051 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=Loc 100052 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%1%fcallEnd
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=Loc 100054 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=Loc 100055 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=Loc 100056 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100057 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100058 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100059 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=Loc 100060 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Loc 100061 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100062 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=Loc 100064 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=Loc 100066 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=Loc 100067 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100068 in dst.llvm.make_list.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100069 in dst.llvm.make_list.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100070 in dst.llvm.make_list.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100071 in dst.llvm.make_list.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100072 in dst.llvm.make_list.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100073 in dst.llvm.make_list.
REGMEM
dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100075 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100076 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100077 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.make_list.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100084 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100085 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100086 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100087 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100088 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100089 in dst.llvm.make_list.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100090 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100091 in dst.llvm.make_list.
REGMEM
dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=Loc 100092 in dst.llvm.make_list.
REGMEM
dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=Loc 100093 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=Loc 100094 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100095 in dst.llvm.make_list.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Loc 100096 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100097 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100098 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100099 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100100 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100101 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100102 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100103 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100104 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100105 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100106 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100107 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100108 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100109 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100110 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100111 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100112 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100113 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100114 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100115 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100116 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Locs end
=Liveness in dst.llvm.make_list
=live locs at L0%0%d
100006, 100008, 100040, 100045, 100046, 100047, 100048, 100049, 
=live locs at Lfor.body%1%intermediateVal1
100052, 100053, 100056, 100060, 100064, 100094, 100097, 100098, 100099, 100100, 100101, 
=live locs at Lfor.body%1%fcallStart
100052, 100056, 100060, 100064, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.body%1%fcallEnd
100052, 100053, 100056, 100060, 100064, 100094, 100097, 100098, 100099, 100100, 100101, 
=live locs at Lfor.body%2%d
100051, 100054, 100055, 100059, 100063, 100093, 100111, 100112, 100113, 100114, 100115, 
=live locs at Lfor.cond%1%bbentry
100052, 100056, 100060[f], 100064, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.cond%2%d
100052, 100056, 100060[f], 100064, 100070, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.end%1%d
100060[f], 100104, 
=live locs at E0%0%d
100060[f], 100104, 

=Definedness in dst.llvm.make_list
=loc definedness at L0%0%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050
=loc definedness at Lfor.body%1%intermediateVal1
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100053, 100056, 100058, 100060, 100062, 100064, 100065, 100070, 100071, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%1%fcallStart
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%1%fcallEnd
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100053, 100056, 100058, 100060, 100062, 100064, 100065, 100070, 100071, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%2%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066, 100070, 100071, 100093, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109, 100110, 100111, 100112, 100113, 100114, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.cond%2%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.end%1%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at E0%0%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100067, 100068, 100069, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109

=Branch affecting variable locs in dst.llvm.make_list
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%intermediateVal1
100056, 100064
=branch affecting variable locs at Lfor.body%1%fcallStart
100056, 100064
=branch affecting variable locs at Lfor.body%1%fcallEnd
100056, 100064
=branch affecting variable locs at Lfor.body%2%d
100055, 100063
=branch affecting variable locs at Lfor.cond%1%bbentry
100056, 100064
=branch affecting variable locs at Lfor.cond%2%d
100056, 100064, 100070
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.make_list
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%arr.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100071 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100094 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100095 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100103 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100104 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100105 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100106 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100107 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100108 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100109 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100051 {input.dst.llvm-%arr.Lfor.body%2%d }
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100054 {input.dst.llvm-%call.Lfor.body%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100055 {input.dst.llvm-%i.0.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100057 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100059 {input.dst.llvm-%l.0.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100061 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100063 {input.dst.llvm-%n.Lfor.body%2%d }
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100066 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100093 {input.dst.local_alloc_count.Lfor.body%2%d }
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100110 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--arg.0) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100111 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100112 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100113 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100114 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100115 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100116 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--arg.1) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.1 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100053 {input.dst.llvm-%call.Lfor.body%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100065 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100096 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100097 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100098 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100099 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100100 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100101 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100102 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%arr.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100071 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100072 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%1.Lfor.cond%1%bbentry }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100074 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100075 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100076 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100083 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100084 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100085 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100086 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100087 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100088 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100089 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100090 {input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100091 {input.dst.llvm-%next.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100092 {input.dst.llvm-%val.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100094 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100103 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100104 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100105 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 5, 10, 11, 12) : BV:32
14 : store(1, 2, 3, 4, 13, 11, 12) : ARRAY[BV:32 -> BV:8]
15 : bvadd(7, 4) : BV:32
16 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
17 : store(14, 2, 3, 15, 16, 11, 12) : ARRAY[BV:32 -> BV:8]
18 : memmask(17, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100106 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100107 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100108 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100109 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100070 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100067 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100068 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100069 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal1:
vacuous mls at Lfor.body%1%fcallStart:
vacuous mls at Lfor.body%1%fcallEnd:
vacuous mls at Lfor.body%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal1:
non-vacuous mls at Lfor.body%1%fcallStart:
non-vacuous mls at Lfor.body%1%fcallEnd:
non-vacuous mls at Lfor.body%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.make_list
=avail_exprs begin
=loc 100006
=loc_expr
140456 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140457 : input.dst.llvm-%arr : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140574 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140575 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140577 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140579 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140581 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100040
=loc_expr
140465 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100041
=loc_expr
140460 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100042
=loc_expr
140461 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140760 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=avail_exprs_val.end
=loc 100063
=loc_expr
140771 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140736 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140806 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=avail_exprs_val.end
=loc 100067
=loc_expr
140807 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140808 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100069
=loc_expr
140809 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140810 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100073
=loc_expr
140811 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140812 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=avail_exprs_val.end
=loc 100075
=loc_expr
140813 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100076
=loc_expr
140814 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140815 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140816 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100079
=loc_expr
140817 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100080
=loc_expr
140818 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100081
=loc_expr
140819 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140820 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100083
=loc_expr
140821 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140822 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100085
=loc_expr
140823 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100086
=loc_expr
140824 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100087
=loc_expr
140825 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100088
=loc_expr
140826 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140827 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100090
=loc_expr
140828 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100091
=loc_expr
140829 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100092
=loc_expr
140830 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100095
=loc_expr
140831 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.make_list
=loc 100065 expr
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=loc 100065 spreled-expr
140474 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100069 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100069 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140427 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100080 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100080 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100081 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100081 spreled-expr
140427 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100083 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100083 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100086 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100086 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100087 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100087 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100095 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100095 spreled-expr
140466 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 100006 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100008 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100040 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100041 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100044 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100067 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100073 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100076 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100086 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100090 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100091 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100092 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100093 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100094 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100095 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100098 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100099 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100101 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100106 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100108 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100109 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100111 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100116 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100083 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100095 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%2%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%fcallStart
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%call.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 2, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%2%d=>Lfor.cond%1%bbentry
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 5, 10, 11, 12) : BV:32
14 : store(1, 2, 3, 4, 13, 11, 12) : ARRAY[BV:32 -> BV:8]
15 : bvadd(7, 4) : BV:32
16 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
17 : store(14, 2, 3, 15, 16, 11, 12) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%arr : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
7 : region_agrees_with_memlabel(4, 2, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(7, 6) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume# 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : 4 { 0x4 +1.0e1025 } : BV:64
7 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
8 : 32 { 0x20 +1.0e1025 } : INT
9 : bvsign_ext(7, 8) : BV:64
10 : bvmul(6, 9) : BV:64
11 : 63 { 0x3f +1.0e1025 } : INT
12 : bvextract(10, 11, 8) : BV:32
13 : bvslt(7, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : ite(13, 14, 3) : BV:32
16 : eq(12, 15) : BOOL
17 : 4 { 0x4 +1.0e1025 } : INT
18 : isindexforsize(16, 17) : BOOL
19 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 7) : BV:32
22 : bvadd(19, 21) : BV:32
23 : isgepoffset(22, 21) : BOOL
24 : and(18, 23) : BOOL
25 : islangaligned(22, 17) : BOOL
26 : and(24, 25, 4, 5) : BOOL
27 : islangaligned(2, 17) : BOOL
28 : bvadd(20, 2) : BV:32
29 : isgepoffset(28, 20) : BOOL
30 : and(5, 26, 27, 29) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 1
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
5
=String-contents:
=Nextpc-map:
C_NEXTPC1 : malloc
=Nextpc-map done
=suffixpaths for dst.llvm.make_list
=suffixpath_at_L0%0%d for dst.llvm.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal1 for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%intermediateVal1.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*(Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)))))
=suffixpath_at_Lfor.body%1%fcallStart for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallStart.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%fcallStart)))
=suffixpath_at_Lfor.body%1%fcallEnd for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*(Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd))))
=suffixpath_at_Lfor.body%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.body%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*((Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)*(Lfor.body%1%intermediateVal1=>Lfor.body%2%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.make_list
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.make_list
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140457 : input.dst.llvm-%arr : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140467 : islangaligned(140457, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141130 : isgepoffset(140757, 140276) : BOOL
141141 : and(140275, 141130) : BOOL
140652 : 4 { 0x4 +1.0e1025 } : BV:64
140761 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
140519 : 32 { 0x20 +1.0e1025 } : INT
140781 : bvsign_ext(140761, 140519) : BV:64
141102 : bvmul(140652, 140781) : BV:64
140523 : 63 { 0x3f +1.0e1025 } : INT
141103 : bvextract(141102, 140523, 140519) : BV:32
140780 : bvslt(140761, 140276) : BOOL
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141116 : ite(140780, 140505, 140276) : BV:32
141118 : eq(141103, 141116) : BOOL
140430 : 4 { 0x4 +1.0e1025 } : INT
141120 : isindexforsize(141118, 140430) : BOOL
140760 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
140427 : 4 { 0x4 +1.47e129 } : BV:32
141073 : bvmul(140427, 140761) : BV:32
141077 : bvadd(140760, 141073) : BV:32
141122 : isgepoffset(141077, 141073) : BOOL
141124 : and(141120, 141122) : BOOL
141126 : islangaligned(141077, 140430) : BOOL
141147 : and(141124, 141126, 141130, 141141) : BOOL
141149 : islangaligned(140757, 140430) : BOOL
141080 : bvadd(140427, 140757) : BV:32
141155 : isgepoffset(141080, 140427) : BOOL
141163 : and(141141, 141147, 141149, 141155) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140427 : 4 { 0x4 +1.47e129 } : BV:32
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
141080 : bvadd(140427, 140757) : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
141094 : islangaligned(141080, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 8
=pc
Lfor.body%1%d
=linename
line 9
=pc
Lfor.body%2%d
=linename
line 9
=pc
Lfor.body%3%d
=linename
line 10
=pc
Lfor.body%4%d
=linename
line 10
=pc
Lfor.body%5%d
=linename
line 10
=pc
Lfor.body%6%d
=linename
line 10
=pc
Lfor.body%7%d
=linename
line 11
=pc
Lfor.body%8%d
=linename
line 11
=pc
Lfor.body%9%d
=linename
line 13
=pc
Lfor.cond%1%d
=linename
line 8
=pc
Lfor.cond%2%d
=linename
line 8
=pc
Lfor.end%1%d
=linename
line 14
=pc
Lfor.inc%1%d
=linename
line 8
=pc
Lfor.inc%2%d
=linename
line 8
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 18
=pc
Lfor.body%2%d
=column_name
 at column 18
=pc
Lfor.body%3%d
=column_name
 at column 17
=pc
Lfor.body%4%d
=column_name
 at column 17
=pc
Lfor.body%5%d
=column_name
 at column 11
=pc
Lfor.body%6%d
=column_name
 at column 15
=pc
Lfor.body%7%d
=column_name
 at column 11
=pc
Lfor.body%8%d
=column_name
 at column 16
=pc
Lfor.body%9%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 8 at column 8)
=pc
Lfor.body%1%d
=line_and_column
line 9
=pc
Lfor.body%2%d
=line_and_column
line 9
=pc
Lfor.body%3%d
=line_and_column
(line 10 at column 17)
=pc
Lfor.body%4%d
=line_and_column
(line 10 at column 17)
=pc
Lfor.body%5%d
=line_and_column
(line 10 at column 11)
=pc
Lfor.body%6%d
=line_and_column
(line 10 at column 15)
=pc
Lfor.body%7%d
=line_and_column
(line 11 at column 11)
=pc
Lfor.body%8%d
=line_and_column
(line 11 at column 16)
=pc
Lfor.body%9%d
=line_and_column
line 13
=pc
Lfor.cond%1%d
=line_and_column
(line 8 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 8 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 14
=pc
Lfor.inc%1%d
=line_and_column
(line 8 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 8 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%arr : L0%0%d : arr'
input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
input.dst.llvm-%l.0 : Lfor.cond%1%bbentry : l'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset : L0%0%d : (arr' + input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset : L0%0%d : (4 + input.dst.llvm-%0)
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%0 : Lfor.body%3%bbentry : node'
input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset
input.dst.llvm-%l.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%i.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%inc
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%l.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : L0%0%d : 8
input.dst.llvm-%n.Lfor.body%2%d : L0%0%d : malloc_side_effect(input.dst.llvm-%n.Lfor.cond%1%bbentry, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%arr.Lfor.body%2%d : L0%0%d : malloc_side_effect(input.dst.llvm-%arr.Lfor.cond%1%bbentry, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%call.Lfor.body%2%d : L0%0%d : ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, 0, heap_alloc_ptr(input.dst.llvm-%call.Lfor.body%1%fcallEnd, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/))
input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : bvmul(4, input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%l.0.Lfor.cond%1%bbentry
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : L0%0%d : malloc_side_effect(8, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : L0%0%d : (input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%0.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%1.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-mem.Lfor.body%2%d[(input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)]_4
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : bvmul(4, input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : (input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%next.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%val.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%l.0
=dst.llvm-%l.0 loop pc: Lfor.cond%1%d
=dst.llvm-%l.0 val_scevb
=dst.llvm-%l.0 val_scevb scev
=dst.llvm-%l.0 val_scevb scev loop: L0%0%d
=dst.llvm-%l.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 val_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 val_scevb scev scev_expr done
=dst.llvm-%l.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb
=dst.llvm-%l.0 atuse_scevb scev
=dst.llvm-%l.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%l.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atuse_scevb scev scev_expr done
=dst.llvm-%l.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atexit_scev
=dst.llvm-%l.0 atexit_scev loop: L0%0%d
=dst.llvm-%l.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%l.0 atexit_scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atexit_scev scev_expr done
=dst.llvm-%call
=dst.llvm-%call loop pc: Lfor.cond%1%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev
=dst.llvm-%call atexit_scev loop: L0%0%d
=dst.llvm-%call atexit_scev scev_overflow_flag: 
=dst.llvm-%call atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
7 : input.dst.llvm-%arr : BV32
8 : 00000000000000000000000000000100b
9 : scev_op_addrec(7, 8) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
7 : input.dst.llvm-%arr : BV32
8 : 00000000000000000000000000000100b
9 : scev_op_addrec(7, 8) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
8 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
10 : scev_op_mul(8, 4) : loop L0%0%d : 
7 : input.dst.llvm-%arr : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%val
=dst.llvm-%val loop pc: Lfor.cond%1%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev
=dst.llvm-%val atexit_scev loop: L0%0%d
=dst.llvm-%val atexit_scev scev_overflow_flag: 
=dst.llvm-%val atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atexit_scev scev_expr done
=dst.llvm-%next
=dst.llvm-%next loop pc: Lfor.cond%1%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev
=dst.llvm-%next atexit_scev loop: L0%0%d
=dst.llvm-%next atexit_scev scev_overflow_flag: nsw
=dst.llvm-%next atexit_scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
14 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
14 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
15 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal1
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 27 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 28 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 29 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%arr.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%arr
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%n.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%call.Lfor.body%1%fcallEnd
lr_status_bottom(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%n.Lfor.body%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%arr.Lfor.body%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%val.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind9.proof
=function_name make_list
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: make_list
=EntryPreconds
=pred 0
=Comment
pointer-implements-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : $llvm-ret : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : $llvm-md : ARRAY[BV:32 -> BV:8]
6 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(14, 15) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.body%1%fcallStart L3%6%bbentry_Lfor.body%1%fcallEnd L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%arr : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 26 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%arr : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.body%1%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*(Lfor.cond%2%d#{0,0}=>Lfor.body%1%fcallStart#{0,0}))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallStart to Lfor.body%1%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lfor.body%1%fcallStart#{0,0}=>Lfor.body%1%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%10%bbentry#{0,0})*(L3%10%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallEnd to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.body%1%fcallEnd#{0,0}=>Lfor.body%1%intermediateVal1#{0,0})*((Lfor.body%1%intermediateVal1#{0,0}=>Lfor.body%2%d#{0,0})*(Lfor.body%2%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-map
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%arr : BV:32
=predicate done
=graph_with_precondition_done

=Locs in make_list.A2.B1.C1.D1.E2
=Locs end
=Liveness in make_list.A2.B1.C1.D1.E2
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.body%1%fcallStart

=live locs at L3%6%bbentry_Lfor.body%1%fcallEnd

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in make_list.A2.B1.C1.D1.E2

=Branch affecting variable locs in make_list.A2.B1.C1.D1.E2

=Relevant Memlabels in make_list.A2.B1.C1.D1.E2
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in make_list.A2.B1.C1.D1.E2
=avail_exprs begin
=avail_exprs end
=sprel_map in make_list.A2.B1.C1.D1.E2
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce5.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce5 1ab7bae0ea580e8f6555b38e4ca2b7
=input.spec-%var-arr-1
1 : Lambda89 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda90 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda92 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda93 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda69 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform13 : BV:32
4 : Lambda94 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda95 : BV:32
7 : 574694591 { 0x224124bf +1.50893390e197 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda70 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 682954987 ] -> 251, [ 682954988; 682954988 ] -> 198, [ 682954989; 682954989 ] -> 239, [ 682954990; 682954990 ] -> 119, [ 682954991; 1278990523 ] -> 251, [ 1278990524; 1278990527 ] -> 0, [ 1278990528; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 682954987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 682954988; 682954991 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 682954992; 1278990523 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1278990524; 1278990527 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1278990528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 682954991 { 0x28b510ef +1.41457927e210 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
619445555
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce6.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce6 30c069df716be1c3d8cb13c2c871982
=input.spec-%var-arr-1
1 : Lambda103 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda104 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : bvule(2, 22) : BOOL
24 : 1427 { 0x593 +1.17011e129 } : BV:32
25 : bvule(22, 24) : BOOL
26 : and(23, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1428 { 0x594 +1.17023e129 } : BV:32
29 : bvule(28, 22) : BOOL
30 : 1431 { 0x597 +1.17058e129 } : BV:32
31 : bvule(22, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 1432 { 0x598 +1.17070e129 } : BV:32
35 : bvule(34, 22) : BOOL
36 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
37 : bvule(22, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
41 : bvule(40, 22) : BOOL
42 : bvule(22, 10) : BOOL
43 : and(41, 42) : BOOL
44 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
45 : bvule(44, 22) : BOOL
46 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
47 : bvule(22, 46) : BOOL
48 : and(45, 47) : BOOL
49 : 5 { 0x5 } : BV:8
50 : ite(48, 49, 49) : BV:8
51 : ite(43, 39, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(26, 27, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 24) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(28, 56) : BOOL
61 : bvule(56, 30) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(34, 56) : BOOL
64 : bvule(56, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(40, 56) : BOOL
67 : bvule(56, 10) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(44, 56) : BOOL
70 : bvule(56, 46) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 49, 49) : BV:8
73 : ite(68, 39, 72) : BV:8
74 : ite(65, 39, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(59, 27, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 20, 21) : BV:32
79 : bvule(2, 78) : BOOL
80 : bvule(78, 24) : BOOL
81 : and(79, 80) : BOOL
82 : bvule(28, 78) : BOOL
83 : bvule(78, 30) : BOOL
84 : and(82, 83) : BOOL
85 : bvule(34, 78) : BOOL
86 : bvule(78, 36) : BOOL
87 : and(85, 86) : BOOL
88 : bvule(40, 78) : BOOL
89 : bvule(78, 10) : BOOL
90 : and(88, 89) : BOOL
91 : bvule(44, 78) : BOOL
92 : bvule(78, 46) : BOOL
93 : and(91, 92) : BOOL
94 : ite(93, 49, 49) : BV:8
95 : ite(90, 39, 94) : BV:8
96 : ite(87, 39, 95) : BV:8
97 : ite(84, 33, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(20, 21) : BV:32
100 : bvule(2, 99) : BOOL
101 : bvule(99, 24) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(28, 99) : BOOL
104 : bvule(99, 30) : BOOL
105 : and(103, 104) : BOOL
106 : bvule(34, 99) : BOOL
107 : bvule(99, 36) : BOOL
108 : and(106, 107) : BOOL
109 : bvule(40, 99) : BOOL
110 : bvule(99, 10) : BOOL
111 : and(109, 110) : BOOL
112 : bvule(44, 99) : BOOL
113 : bvule(99, 46) : BOOL
114 : and(112, 113) : BOOL
115 : ite(114, 49, 49) : BV:8
116 : ite(111, 39, 115) : BV:8
117 : ite(108, 39, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(102, 27, 118) : BV:8
120 : bvconcat(54, 76, 98, 119) : BV:32
121 : lambda(17, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(16, 121) : MAP[BV:32 -> BV:32]
123 : sym_const(122) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda106 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda107 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : bvule(2, 22) : BOOL
24 : 1427 { 0x593 +1.17011e129 } : BV:32
25 : bvule(22, 24) : BOOL
26 : and(23, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1428 { 0x594 +1.17023e129 } : BV:32
29 : bvule(28, 22) : BOOL
30 : 1431 { 0x597 +1.17058e129 } : BV:32
31 : bvule(22, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 1432 { 0x598 +1.17070e129 } : BV:32
35 : bvule(34, 22) : BOOL
36 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
37 : bvule(22, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
41 : bvule(40, 22) : BOOL
42 : bvule(22, 10) : BOOL
43 : and(41, 42) : BOOL
44 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
45 : bvule(44, 22) : BOOL
46 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
47 : bvule(22, 46) : BOOL
48 : and(45, 47) : BOOL
49 : 5 { 0x5 } : BV:8
50 : ite(48, 49, 49) : BV:8
51 : ite(43, 39, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(26, 27, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 24) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(28, 56) : BOOL
61 : bvule(56, 30) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(34, 56) : BOOL
64 : bvule(56, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(40, 56) : BOOL
67 : bvule(56, 10) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(44, 56) : BOOL
70 : bvule(56, 46) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 49, 49) : BV:8
73 : ite(68, 39, 72) : BV:8
74 : ite(65, 39, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(59, 27, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 20, 21) : BV:32
79 : bvule(2, 78) : BOOL
80 : bvule(78, 24) : BOOL
81 : and(79, 80) : BOOL
82 : bvule(28, 78) : BOOL
83 : bvule(78, 30) : BOOL
84 : and(82, 83) : BOOL
85 : bvule(34, 78) : BOOL
86 : bvule(78, 36) : BOOL
87 : and(85, 86) : BOOL
88 : bvule(40, 78) : BOOL
89 : bvule(78, 10) : BOOL
90 : and(88, 89) : BOOL
91 : bvule(44, 78) : BOOL
92 : bvule(78, 46) : BOOL
93 : and(91, 92) : BOOL
94 : ite(93, 49, 49) : BV:8
95 : ite(90, 39, 94) : BV:8
96 : ite(87, 39, 95) : BV:8
97 : ite(84, 33, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(20, 21) : BV:32
100 : bvule(2, 99) : BOOL
101 : bvule(99, 24) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(28, 99) : BOOL
104 : bvule(99, 30) : BOOL
105 : and(103, 104) : BOOL
106 : bvule(34, 99) : BOOL
107 : bvule(99, 36) : BOOL
108 : and(106, 107) : BOOL
109 : bvule(40, 99) : BOOL
110 : bvule(99, 10) : BOOL
111 : and(109, 110) : BOOL
112 : bvule(44, 99) : BOOL
113 : bvule(99, 46) : BOOL
114 : and(112, 113) : BOOL
115 : ite(114, 49, 49) : BV:8
116 : ite(111, 39, 115) : BV:8
117 : ite(108, 39, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(102, 27, 118) : BV:8
120 : bvconcat(54, 76, 98, 119) : BV:32
121 : lambda(17, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(16, 121) : MAP[BV:32 -> BV:32]
123 : sym_const(122) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda80 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
7 : bvadd(3, 5, 6) : BV:32
8 : bvule(2, 7) : BOOL
9 : 1427 { 0x593 +1.17011e129 } : BV:32
10 : bvule(7, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1428 { 0x594 +1.17023e129 } : BV:32
14 : bvule(13, 7) : BOOL
15 : 1431 { 0x597 +1.17058e129 } : BV:32
16 : bvule(7, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 1432 { 0x598 +1.17070e129 } : BV:32
20 : bvule(19, 7) : BOOL
21 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
22 : bvule(7, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
26 : bvule(25, 7) : BOOL
27 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
28 : bvule(7, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
31 : bvule(30, 7) : BOOL
32 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
33 : bvule(7, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : ite(34, 35, 35) : BV:8
37 : ite(29, 24, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 5, 6) : BV:32
43 : bvule(2, 42) : BOOL
44 : bvule(42, 9) : BOOL
45 : and(43, 44) : BOOL
46 : bvule(13, 42) : BOOL
47 : bvule(42, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(19, 42) : BOOL
50 : bvule(42, 21) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 27) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(30, 42) : BOOL
56 : bvule(42, 32) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 35, 35) : BV:8
59 : ite(54, 24, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(45, 12, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 5, 6) : BV:32
65 : bvule(2, 64) : BOOL
66 : bvule(64, 9) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(13, 64) : BOOL
69 : bvule(64, 15) : BOOL
70 : and(68, 69) : BOOL
71 : bvule(19, 64) : BOOL
72 : bvule(64, 21) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(25, 64) : BOOL
75 : bvule(64, 27) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(30, 64) : BOOL
78 : bvule(64, 32) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 35, 35) : BV:8
81 : ite(76, 24, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(70, 18, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(5, 6) : BV:32
86 : bvule(2, 85) : BOOL
87 : bvule(85, 9) : BOOL
88 : and(86, 87) : BOOL
89 : bvule(13, 85) : BOOL
90 : bvule(85, 15) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(19, 85) : BOOL
93 : bvule(85, 21) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(25, 85) : BOOL
96 : bvule(85, 27) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 85) : BOOL
99 : bvule(85, 32) : BOOL
100 : and(98, 99) : BOOL
101 : ite(100, 35, 35) : BV:8
102 : ite(97, 24, 101) : BV:8
103 : ite(94, 24, 102) : BV:8
104 : ite(91, 18, 103) : BV:8
105 : ite(88, 12, 104) : BV:8
106 : bvconcat(40, 62, 84, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform15 : BV:32
4 : Lambda108 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda109 : BV:32
7 : 342187326 { 0x14655d3e +1.79190802e169 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda81 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
7 : bvadd(3, 5, 6) : BV:32
8 : bvule(2, 7) : BOOL
9 : 1427 { 0x593 +1.17011e129 } : BV:32
10 : bvule(7, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1428 { 0x594 +1.17023e129 } : BV:32
14 : bvule(13, 7) : BOOL
15 : 1431 { 0x597 +1.17058e129 } : BV:32
16 : bvule(7, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 1432 { 0x598 +1.17070e129 } : BV:32
20 : bvule(19, 7) : BOOL
21 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
22 : bvule(7, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
26 : bvule(25, 7) : BOOL
27 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
28 : bvule(7, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
31 : bvule(30, 7) : BOOL
32 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
33 : bvule(7, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : ite(34, 35, 35) : BV:8
37 : ite(29, 24, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 5, 6) : BV:32
43 : bvule(2, 42) : BOOL
44 : bvule(42, 9) : BOOL
45 : and(43, 44) : BOOL
46 : bvule(13, 42) : BOOL
47 : bvule(42, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(19, 42) : BOOL
50 : bvule(42, 21) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 27) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(30, 42) : BOOL
56 : bvule(42, 32) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 35, 35) : BV:8
59 : ite(54, 24, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(45, 12, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 5, 6) : BV:32
65 : bvule(2, 64) : BOOL
66 : bvule(64, 9) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(13, 64) : BOOL
69 : bvule(64, 15) : BOOL
70 : and(68, 69) : BOOL
71 : bvule(19, 64) : BOOL
72 : bvule(64, 21) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(25, 64) : BOOL
75 : bvule(64, 27) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(30, 64) : BOOL
78 : bvule(64, 32) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 35, 35) : BV:8
81 : ite(76, 24, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(70, 18, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(5, 6) : BV:32
86 : bvule(2, 85) : BOOL
87 : bvule(85, 9) : BOOL
88 : and(86, 87) : BOOL
89 : bvule(13, 85) : BOOL
90 : bvule(85, 15) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(19, 85) : BOOL
93 : bvule(85, 21) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(25, 85) : BOOL
96 : bvule(85, 27) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 85) : BOOL
99 : bvule(85, 32) : BOOL
100 : and(98, 99) : BOOL
101 : ite(100, 35, 35) : BV:8
102 : ite(97, 24, 101) : BV:8
103 : ite(94, 24, 102) : BV:8
104 : ite(91, 18, 103) : BV:8
105 : ite(88, 12, 104) : BV:8
106 : bvconcat(40, 62, 84, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1427 ] -> 1, [ 1428; 1431 ] -> 4, [ 1432; 1409482759 ] -> 0, [ 1409482760; 1409482763 ] -> 5, [ 1409482764; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1427 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1428; 1431 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1432; 1409482759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1409482760; 1409482763 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1409482764; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1428 { 0x594 +1.17023e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1428 { 0x594 +1.17023e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1431 { 0x597 +1.17058e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
717504270
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce11.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce11 f0bd821b1584858b91b75407d1b961b
=input.spec-%var-arr-1
1 : Lambda192 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda193 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda192 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda193 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 153623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 153624; 153627 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 153628; 268484611 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 268484612; 268484615 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 268484616; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 153624 { 0x25818 +1.1831340e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 268484612 { 0x1000c004 +1.585985e161 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 207505233 { 0xc5e4751 +1.73655140e153 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 207505233 { 0xc5e4751 +1.73655140e153 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 153623 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 153624; 153627 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 153628; 268484611 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 268484612; 268484615 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 268484616; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 268484612 { 0x1000c004 +1.585985e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 268484615 { 0x1000c007 +1.586020e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 153624 { 0x25818 +1.1831340e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 153627 { 0x2581b +1.1831376e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3813798858
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3.ce12.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce12 5cedae504882b2777bc6981141b7424
=input.spec-%var-arr-1
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 278370198 { 0x10979796 +1.18431353e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda208 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
27 : eq(23, 26) : BOOL
28 : 229 { 0xe5 -27 } : BV:8
29 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 151 { 0x97 -105 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 278370198 { 0x10979796 +1.18431353e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda208 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
27 : eq(23, 26) : BOOL
28 : 229 { 0xe5 -27 } : BV:8
29 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 151 { 0x97 -105 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 278370198 ] -> true, [ 278370199; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda178 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
12 : eq(8, 11) : BOOL
13 : 229 { 0xe5 -27 } : BV:8
14 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 151 { 0x97 -105 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 278370198 ] -> true, [ 278370199; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2041227923 ] -> 151, [ 2041227924; 2041227924 ] -> 0, [ 2041227925; 2041227925 ] -> 251, [ 2041227926; 2041227926 ] -> 151, [ 2041227927; 2041227927 ] -> 229, [ 2041227928; 3851942655 ] -> 151, [ 3851942656; 3851942659 ] -> 0, [ 3851942660; 4225249382 ] -> 151, [ 4225249383; 4225249383 ] -> 16, [ 4225249384; 4294967295 ] -> 151, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda179 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
12 : eq(8, 11) : BOOL
13 : 229 { 0xe5 -27 } : BV:8
14 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 151 { 0x97 -105 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
=input.dst.llvm-%arr
1 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2041227923 ] -> 151, [ 2041227924; 2041227924 ] -> 0, [ 2041227925; 2041227925 ] -> 251, [ 2041227926; 2041227926 ] -> 151, [ 2041227927; 2041227927 ] -> 229, [ 2041227928; 3851942655 ] -> 151, [ 3851942656; 3851942659 ] -> 0, [ 3851942660; 4225249382 ] -> 151, [ 4225249383; 4225249383 ] -> 16, [ 4225249384; 4294967295 ] -> 151, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2041227923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2041227924; 2041227927 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2041227928; 4225249379 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4225249380; 4225249383 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4225249384; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4225249380 { 0xfbd83064 -69717916 -1.68897676e120 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 19323070 { 0x126d8be +1.30348944e131 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 19323070 { 0x126d8be +1.30348944e131 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2041227923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2041227924; 2041227927 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2041227928; 4225249379 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4225249380; 4225249383 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4225249384; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4225249380 { 0xfbd83064 -69717916 -1.68897676e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4173262349
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce33.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce33 913c4c28c2955aef2378f77fec05ae2
=input.spec-%var-arr-1
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda276 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : ite(3, 2, 112) : BV:32
114 : lambda(1, 113) : FUNCTION[BV:32 -> BV:32]
115 : sym_const(114) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : lambda(1, 112) : FUNCTION[BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1749719364 { 0x684a9944 +1.58280229e81 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1749719364 { 0x684a9944 +1.58280229e81 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
826564173
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3.ce55.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce55 6ae61b182ab4e79719772f461dc2ff2
=input.spec-%var-arr-1
1 : Lambda397 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109119 { 0x40000ff +1.3039e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda398 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 245 { 0xf5 -11 } : BV:8
29 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
32 : eq(23, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
35 : eq(23, 34) : BOOL
36 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
39 : eq(23, 38) : BOOL
40 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
41 : eq(23, 40) : BOOL
42 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
43 : eq(23, 42) : BOOL
44 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
45 : eq(23, 44) : BOOL
46 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
47 : eq(23, 46) : BOOL
48 : 4 { 0x4 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(45, 25, 49) : BV:8
51 : ite(43, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 21, 22) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 25, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 21, 22) : BV:32
86 : eq(85, 22) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 25, 48) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 25, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(21, 22) : BV:32
109 : eq(108, 22) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 25, 48) : BV:8
121 : ite(118, 25, 120) : BV:8
122 : ite(117, 25, 121) : BV:8
123 : ite(116, 25, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 25, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(18, 2, 131) : BV:32
133 : lambda(17, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(16, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda397 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109119 { 0x40000ff +1.3039e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda398 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 245 { 0xf5 -11 } : BV:8
29 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
32 : eq(23, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
35 : eq(23, 34) : BOOL
36 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
39 : eq(23, 38) : BOOL
40 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
41 : eq(23, 40) : BOOL
42 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
43 : eq(23, 42) : BOOL
44 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
45 : eq(23, 44) : BOOL
46 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
47 : eq(23, 46) : BOOL
48 : 4 { 0x4 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(45, 25, 49) : BV:8
51 : ite(43, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 21, 22) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 25, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 21, 22) : BV:32
86 : eq(85, 22) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 25, 48) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 25, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(21, 22) : BV:32
109 : eq(108, 22) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 25, 48) : BV:8
121 : ite(118, 25, 120) : BV:8
122 : ite(117, 25, 121) : BV:8
123 : ite(116, 25, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 25, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(18, 2, 131) : BV:32
133 : lambda(17, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(16, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67109119 ] -> true, [ 67109120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda376 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 245 { 0xf5 -11 } : BV:8
14 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
24 : eq(8, 23) : BOOL
25 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
26 : eq(8, 25) : BOOL
27 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
28 : eq(8, 27) : BOOL
29 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
32 : eq(8, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : ite(32, 10, 33) : BV:8
35 : ite(30, 10, 34) : BV:8
36 : ite(28, 10, 35) : BV:8
37 : ite(26, 10, 36) : BV:8
38 : ite(24, 10, 37) : BV:8
39 : ite(22, 10, 38) : BV:8
40 : ite(20, 10, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(15, 10, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : ite(9, 10, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 7) : BOOL
48 : eq(46, 11) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 16) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 25) : BOOL
55 : eq(46, 27) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 10, 33) : BV:8
59 : ite(56, 10, 58) : BV:8
60 : ite(55, 10, 59) : BV:8
61 : ite(54, 10, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : ite(52, 10, 62) : BV:8
64 : ite(51, 10, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 10, 65) : BV:8
67 : ite(48, 13, 66) : BV:8
68 : ite(47, 10, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 7) : BOOL
72 : eq(70, 11) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 25) : BOOL
79 : eq(70, 27) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 10, 33) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 10, 86) : BV:8
88 : ite(75, 10, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 10, 89) : BV:8
91 : ite(72, 13, 90) : BV:8
92 : ite(71, 10, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 7) : BOOL
95 : eq(93, 11) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 25) : BOOL
102 : eq(93, 27) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 10, 33) : BV:8
106 : ite(103, 10, 105) : BV:8
107 : ite(102, 10, 106) : BV:8
108 : ite(101, 10, 107) : BV:8
109 : ite(100, 10, 108) : BV:8
110 : ite(99, 10, 109) : BV:8
111 : ite(98, 10, 110) : BV:8
112 : ite(97, 18, 111) : BV:8
113 : ite(96, 10, 112) : BV:8
114 : ite(95, 13, 113) : BV:8
115 : ite(94, 10, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67109119 ] -> true, [ 67109120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2355436115 ] -> 4, [ 2355436116; 2355436118 ] -> 0, [ 2355436119; 2355436119 ] -> 245, [ 2355436120; 2728494147 ] -> 4, [ 2728494148; 2728494148 ] -> 0, [ 2728494149; 2728494149 ] -> 1, [ 2728494150; 2728494150 ] -> 0, [ 2728494151; 4110417919 ] -> 4, [ 4110417920; 4110417923 ] -> 0, [ 4110417924; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda377 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 245 { 0xf5 -11 } : BV:8
14 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
24 : eq(8, 23) : BOOL
25 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
26 : eq(8, 25) : BOOL
27 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
28 : eq(8, 27) : BOOL
29 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
32 : eq(8, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : ite(32, 10, 33) : BV:8
35 : ite(30, 10, 34) : BV:8
36 : ite(28, 10, 35) : BV:8
37 : ite(26, 10, 36) : BV:8
38 : ite(24, 10, 37) : BV:8
39 : ite(22, 10, 38) : BV:8
40 : ite(20, 10, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(15, 10, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : ite(9, 10, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 7) : BOOL
48 : eq(46, 11) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 16) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 25) : BOOL
55 : eq(46, 27) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 10, 33) : BV:8
59 : ite(56, 10, 58) : BV:8
60 : ite(55, 10, 59) : BV:8
61 : ite(54, 10, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : ite(52, 10, 62) : BV:8
64 : ite(51, 10, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 10, 65) : BV:8
67 : ite(48, 13, 66) : BV:8
68 : ite(47, 10, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 7) : BOOL
72 : eq(70, 11) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 25) : BOOL
79 : eq(70, 27) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 10, 33) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 10, 86) : BV:8
88 : ite(75, 10, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 10, 89) : BV:8
91 : ite(72, 13, 90) : BV:8
92 : ite(71, 10, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 7) : BOOL
95 : eq(93, 11) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 25) : BOOL
102 : eq(93, 27) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 10, 33) : BV:8
106 : ite(103, 10, 105) : BV:8
107 : ite(102, 10, 106) : BV:8
108 : ite(101, 10, 107) : BV:8
109 : ite(100, 10, 108) : BV:8
110 : ite(99, 10, 109) : BV:8
111 : ite(98, 10, 110) : BV:8
112 : ite(97, 18, 111) : BV:8
113 : ite(96, 10, 112) : BV:8
114 : ite(95, 13, 113) : BV:8
115 : ite(94, 10, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : lambda(1, 117) : FUNCTION[BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
=input.dst.llvm-%arr
1 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2355436115 ] -> 4, [ 2355436116; 2355436118 ] -> 0, [ 2355436119; 2355436119 ] -> 245, [ 2355436120; 2728494147 ] -> 4, [ 2728494148; 2728494148 ] -> 0, [ 2728494149; 2728494149 ] -> 1, [ 2728494150; 2728494150 ] -> 0, [ 2728494151; 4110417919 ] -> 4, [ 4110417920; 4110417923 ] -> 0, [ 4110417924; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2355436115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2355436116; 2355436119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2355436120; 2728494147 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2728494148; 2728494151 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2728494152; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 129590049 { 0x7b96321 +1.44833767e144 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 129590049 { 0x7b96321 +1.44833767e144 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2355436115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2355436116; 2355436119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2355436120; 2728494147 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2728494148; 2728494151 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2728494152; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2728494151 { 0xa2a18447 -1566473145 -1.26184928e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
857838728
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3v487.ce56.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce56 4bb253d862755b833d2c5e3dfcab884
=input.spec-%var-arr-1
1 : Lambda411 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda412 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 16384 { 0x4000 +1.195312e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 131073 { 0x20001 +1.1562511e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda411 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda412 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 16384 { 0x4000 +1.195312e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 131073 { 0x20001 +1.1562511e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 64 { 0x40 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda385 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 16384 { 0x4000 +1.195312e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 131073 { 0x20001 +1.1562511e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 64 { 0x40 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 131072 ] -> 0, [ 131073; 131073 ] -> 64, [ 131074; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda386 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 16384 { 0x4000 +1.195312e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 131073 { 0x20001 +1.1562511e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 64 { 0x40 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 16384 { 0x4000 +1.195312e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 131072 ] -> 0, [ 131073; 131073 ] -> 64, [ 131074; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 131076; 1073741823 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 603118651 { 0x23f2dc3b +1.89734590e200 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 603118651 { 0x23f2dc3b +1.89734590e200 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 131076; 1073741823 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
540750873
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3.ce77.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce77 edda5fb25e5e8e9e4d461f196436b
=input.spec-%var-arr-1
1 : Lambda497 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4261216256 { 0xfdfd0000 -33751040 -1.97656250e124 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda498 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
30 : eq(23, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
41 : eq(23, 40) : BOOL
42 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : ite(43, 25, 44) : BV:8
46 : ite(41, 25, 45) : BV:8
47 : ite(39, 25, 46) : BV:8
48 : ite(37, 25, 47) : BV:8
49 : ite(35, 25, 48) : BV:8
50 : ite(33, 25, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 21, 22) : BV:32
56 : eq(55, 22) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 34) : BOOL
61 : eq(55, 36) : BOOL
62 : eq(55, 38) : BOOL
63 : eq(55, 40) : BOOL
64 : eq(55, 42) : BOOL
65 : ite(64, 25, 44) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 25, 66) : BV:8
68 : ite(61, 25, 67) : BV:8
69 : ite(60, 25, 68) : BV:8
70 : ite(59, 25, 69) : BV:8
71 : ite(58, 31, 70) : BV:8
72 : ite(57, 28, 71) : BV:8
73 : ite(56, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 34) : BOOL
81 : eq(75, 36) : BOOL
82 : eq(75, 38) : BOOL
83 : eq(75, 40) : BOOL
84 : eq(75, 42) : BOOL
85 : ite(84, 25, 44) : BV:8
86 : ite(83, 25, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 25, 87) : BV:8
89 : ite(80, 25, 88) : BV:8
90 : ite(79, 25, 89) : BV:8
91 : ite(78, 31, 90) : BV:8
92 : ite(77, 28, 91) : BV:8
93 : ite(76, 25, 92) : BV:8
94 : bvadd(21, 22) : BV:32
95 : eq(94, 22) : BOOL
96 : eq(94, 26) : BOOL
97 : eq(94, 29) : BOOL
98 : eq(94, 32) : BOOL
99 : eq(94, 34) : BOOL
100 : eq(94, 36) : BOOL
101 : eq(94, 38) : BOOL
102 : eq(94, 40) : BOOL
103 : eq(94, 42) : BOOL
104 : ite(103, 25, 44) : BV:8
105 : ite(102, 25, 104) : BV:8
106 : ite(101, 25, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 25, 107) : BV:8
109 : ite(98, 25, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : ite(95, 25, 111) : BV:8
113 : bvconcat(53, 73, 93, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda497 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4261216256 { 0xfdfd0000 -33751040 -1.97656250e124 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda498 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
30 : eq(23, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
41 : eq(23, 40) : BOOL
42 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : ite(43, 25, 44) : BV:8
46 : ite(41, 25, 45) : BV:8
47 : ite(39, 25, 46) : BV:8
48 : ite(37, 25, 47) : BV:8
49 : ite(35, 25, 48) : BV:8
50 : ite(33, 25, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 21, 22) : BV:32
56 : eq(55, 22) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 34) : BOOL
61 : eq(55, 36) : BOOL
62 : eq(55, 38) : BOOL
63 : eq(55, 40) : BOOL
64 : eq(55, 42) : BOOL
65 : ite(64, 25, 44) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 25, 66) : BV:8
68 : ite(61, 25, 67) : BV:8
69 : ite(60, 25, 68) : BV:8
70 : ite(59, 25, 69) : BV:8
71 : ite(58, 31, 70) : BV:8
72 : ite(57, 28, 71) : BV:8
73 : ite(56, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 34) : BOOL
81 : eq(75, 36) : BOOL
82 : eq(75, 38) : BOOL
83 : eq(75, 40) : BOOL
84 : eq(75, 42) : BOOL
85 : ite(84, 25, 44) : BV:8
86 : ite(83, 25, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 25, 87) : BV:8
89 : ite(80, 25, 88) : BV:8
90 : ite(79, 25, 89) : BV:8
91 : ite(78, 31, 90) : BV:8
92 : ite(77, 28, 91) : BV:8
93 : ite(76, 25, 92) : BV:8
94 : bvadd(21, 22) : BV:32
95 : eq(94, 22) : BOOL
96 : eq(94, 26) : BOOL
97 : eq(94, 29) : BOOL
98 : eq(94, 32) : BOOL
99 : eq(94, 34) : BOOL
100 : eq(94, 36) : BOOL
101 : eq(94, 38) : BOOL
102 : eq(94, 40) : BOOL
103 : eq(94, 42) : BOOL
104 : ite(103, 25, 44) : BV:8
105 : ite(102, 25, 104) : BV:8
106 : ite(101, 25, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 25, 107) : BV:8
109 : ite(98, 25, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : ite(95, 25, 111) : BV:8
113 : bvconcat(53, 73, 93, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4261216256 ] -> true, [ 4261216257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda476 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
15 : eq(8, 14) : BOOL
16 : 250 { 0xfa -6 } : BV:8
17 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
26 : eq(8, 25) : BOOL
27 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : ite(28, 10, 29) : BV:8
31 : ite(26, 10, 30) : BV:8
32 : ite(24, 10, 31) : BV:8
33 : ite(22, 10, 32) : BV:8
34 : ite(20, 10, 33) : BV:8
35 : ite(18, 10, 34) : BV:8
36 : ite(15, 16, 35) : BV:8
37 : ite(12, 13, 36) : BV:8
38 : ite(9, 10, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 6, 7) : BV:32
41 : eq(40, 7) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 19) : BOOL
46 : eq(40, 21) : BOOL
47 : eq(40, 23) : BOOL
48 : eq(40, 25) : BOOL
49 : eq(40, 27) : BOOL
50 : ite(49, 10, 29) : BV:8
51 : ite(48, 10, 50) : BV:8
52 : ite(47, 10, 51) : BV:8
53 : ite(46, 10, 52) : BV:8
54 : ite(45, 10, 53) : BV:8
55 : ite(44, 10, 54) : BV:8
56 : ite(43, 16, 55) : BV:8
57 : ite(42, 13, 56) : BV:8
58 : ite(41, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : eq(60, 17) : BOOL
65 : eq(60, 19) : BOOL
66 : eq(60, 21) : BOOL
67 : eq(60, 23) : BOOL
68 : eq(60, 25) : BOOL
69 : eq(60, 27) : BOOL
70 : ite(69, 10, 29) : BV:8
71 : ite(68, 10, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : ite(66, 10, 72) : BV:8
74 : ite(65, 10, 73) : BV:8
75 : ite(64, 10, 74) : BV:8
76 : ite(63, 16, 75) : BV:8
77 : ite(62, 13, 76) : BV:8
78 : ite(61, 10, 77) : BV:8
79 : bvadd(6, 7) : BV:32
80 : eq(79, 7) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 17) : BOOL
84 : eq(79, 19) : BOOL
85 : eq(79, 21) : BOOL
86 : eq(79, 23) : BOOL
87 : eq(79, 25) : BOOL
88 : eq(79, 27) : BOOL
89 : ite(88, 10, 29) : BV:8
90 : ite(87, 10, 89) : BV:8
91 : ite(86, 10, 90) : BV:8
92 : ite(85, 10, 91) : BV:8
93 : ite(84, 10, 92) : BV:8
94 : ite(83, 10, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : ite(80, 10, 96) : BV:8
98 : bvconcat(38, 58, 78, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4261216256 ] -> true, [ 4261216257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1683710935 ] -> 253, [ 1683710936; 1683710937 ] -> 0, [ 1683710938; 1683710938 ] -> 253, [ 1683710939; 1683710939 ] -> 250, [ 1683710940; 3667021499 ] -> 253, [ 3667021500; 3667021500 ] -> 1, [ 3667021501; 3667021501 ] -> 0, [ 3667021502; 4210884607 ] -> 253, [ 4210884608; 4210884611 ] -> 0, [ 4210884612; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
15 : eq(8, 14) : BOOL
16 : 250 { 0xfa -6 } : BV:8
17 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
26 : eq(8, 25) : BOOL
27 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : ite(28, 10, 29) : BV:8
31 : ite(26, 10, 30) : BV:8
32 : ite(24, 10, 31) : BV:8
33 : ite(22, 10, 32) : BV:8
34 : ite(20, 10, 33) : BV:8
35 : ite(18, 10, 34) : BV:8
36 : ite(15, 16, 35) : BV:8
37 : ite(12, 13, 36) : BV:8
38 : ite(9, 10, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 6, 7) : BV:32
41 : eq(40, 7) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 19) : BOOL
46 : eq(40, 21) : BOOL
47 : eq(40, 23) : BOOL
48 : eq(40, 25) : BOOL
49 : eq(40, 27) : BOOL
50 : ite(49, 10, 29) : BV:8
51 : ite(48, 10, 50) : BV:8
52 : ite(47, 10, 51) : BV:8
53 : ite(46, 10, 52) : BV:8
54 : ite(45, 10, 53) : BV:8
55 : ite(44, 10, 54) : BV:8
56 : ite(43, 16, 55) : BV:8
57 : ite(42, 13, 56) : BV:8
58 : ite(41, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : eq(60, 17) : BOOL
65 : eq(60, 19) : BOOL
66 : eq(60, 21) : BOOL
67 : eq(60, 23) : BOOL
68 : eq(60, 25) : BOOL
69 : eq(60, 27) : BOOL
70 : ite(69, 10, 29) : BV:8
71 : ite(68, 10, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : ite(66, 10, 72) : BV:8
74 : ite(65, 10, 73) : BV:8
75 : ite(64, 10, 74) : BV:8
76 : ite(63, 16, 75) : BV:8
77 : ite(62, 13, 76) : BV:8
78 : ite(61, 10, 77) : BV:8
79 : bvadd(6, 7) : BV:32
80 : eq(79, 7) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 17) : BOOL
84 : eq(79, 19) : BOOL
85 : eq(79, 21) : BOOL
86 : eq(79, 23) : BOOL
87 : eq(79, 25) : BOOL
88 : eq(79, 27) : BOOL
89 : ite(88, 10, 29) : BV:8
90 : ite(87, 10, 89) : BV:8
91 : ite(86, 10, 90) : BV:8
92 : ite(85, 10, 91) : BV:8
93 : ite(84, 10, 92) : BV:8
94 : ite(83, 10, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : ite(80, 10, 96) : BV:8
98 : bvconcat(38, 58, 78, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
=input.dst.llvm-%arr
1 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1683710935 ] -> 253, [ 1683710936; 1683710937 ] -> 0, [ 1683710938; 1683710938 ] -> 253, [ 1683710939; 1683710939 ] -> 250, [ 1683710940; 3667021499 ] -> 253, [ 3667021500; 3667021500 ] -> 1, [ 3667021501; 3667021501 ] -> 0, [ 3667021502; 4210884607 ] -> 253, [ 4210884608; 4210884611 ] -> 0, [ 4210884612; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1683710935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1683710936; 1683710939 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1683710940; 3667021499 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3667021500; 3667021503 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3667021504; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1707939243 { 0x65cd15ab +1.60222375e76 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1707939243 { 0x65cd15ab +1.60222375e76 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1683710935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1683710936; 1683710939 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1683710940; 3667021499 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3667021500; 3667021503 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3667021504; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3667021503 { 0xda924ebf -627945793 -1.14302814e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2108386271
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3.ce99.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3.ce99 694ad26d5e1631c13da333fff17c8d
=input.spec-%var-arr-1
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda596 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 2679338256 { 0x9fb37510 -1615629040 -1.40200996e192 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 3444697484 { 0xcd51e98c -850269812 -1.63993978e27 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 3365277295 { 0xc8960e6f -929690001 -1.17231547e18 } : BV:32
20 : eq(15, 19) : BOOL
21 : 159 { 0x9f -97 } : BV:8
22 : 3444697485 { 0xcd51e98d -850269811 -1.63993990e27 } : BV:32
23 : eq(15, 22) : BOOL
24 : 3365277294 { 0xc8960e6e -929690002 -1.17231535e18 } : BV:32
25 : eq(15, 24) : BOOL
26 : 179 { 0xb3 -77 } : BV:8
27 : 3444697486 { 0xcd51e98e -850269810 -1.63994002e27 } : BV:32
28 : eq(15, 27) : BOOL
29 : 3365277292 { 0xc8960e6c -929690004 -1.17231512e18 } : BV:32
30 : eq(15, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 3444697487 { 0xcd51e98f -850269809 -1.63994014e27 } : BV:32
33 : eq(15, 32) : BOOL
34 : 117 { 0x75 } : BV:8
35 : ite(33, 18, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 32) : BOOL
51 : ite(50, 18, 34) : BV:8
52 : ite(49, 31, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 32) : BOOL
67 : ite(66, 18, 34) : BV:8
68 : ite(65, 31, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 32) : BOOL
82 : ite(81, 18, 34) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2679338256 { 0x9fb37510 -1615629040 -1.40200996e192 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda596 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 2679338256 { 0x9fb37510 -1615629040 -1.40200996e192 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 3444697484 { 0xcd51e98c -850269812 -1.63993978e27 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 3365277295 { 0xc8960e6f -929690001 -1.17231547e18 } : BV:32
20 : eq(15, 19) : BOOL
21 : 159 { 0x9f -97 } : BV:8
22 : 3444697485 { 0xcd51e98d -850269811 -1.63993990e27 } : BV:32
23 : eq(15, 22) : BOOL
24 : 3365277294 { 0xc8960e6e -929690002 -1.17231535e18 } : BV:32
25 : eq(15, 24) : BOOL
26 : 179 { 0xb3 -77 } : BV:8
27 : 3444697486 { 0xcd51e98e -850269810 -1.63994002e27 } : BV:32
28 : eq(15, 27) : BOOL
29 : 3365277292 { 0xc8960e6c -929690004 -1.17231512e18 } : BV:32
30 : eq(15, 29) : BOOL
31 : 16 { 0x10 } : BV:8
32 : 3444697487 { 0xcd51e98f -850269809 -1.63994014e27 } : BV:32
33 : eq(15, 32) : BOOL
34 : 117 { 0x75 } : BV:8
35 : ite(33, 18, 34) : BV:8
36 : ite(30, 31, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(23, 18, 38) : BV:8
40 : ite(20, 21, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 22) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 32) : BOOL
51 : ite(50, 18, 34) : BV:8
52 : ite(49, 31, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 18, 54) : BV:8
56 : ite(45, 21, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 22) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 32) : BOOL
67 : ite(66, 18, 34) : BV:8
68 : ite(65, 31, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 18, 70) : BV:8
72 : ite(61, 21, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 22) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 32) : BOOL
82 : ite(81, 18, 34) : BV:8
83 : ite(80, 31, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 18, 85) : BV:8
87 : ite(76, 21, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda574 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2679338256 { 0x9fb37510 -1615629040 -1.40200996e192 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 3444697484 { 0xcd51e98c -850269812 -1.63993978e27 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 3365277295 { 0xc8960e6f -929690001 -1.17231547e18 } : BV:32
11 : eq(6, 10) : BOOL
12 : 159 { 0x9f -97 } : BV:8
13 : 3444697485 { 0xcd51e98d -850269811 -1.63993990e27 } : BV:32
14 : eq(6, 13) : BOOL
15 : 3365277294 { 0xc8960e6e -929690002 -1.17231535e18 } : BV:32
16 : eq(6, 15) : BOOL
17 : 179 { 0xb3 -77 } : BV:8
18 : 3444697486 { 0xcd51e98e -850269810 -1.63994002e27 } : BV:32
19 : eq(6, 18) : BOOL
20 : 3365277292 { 0xc8960e6c -929690004 -1.17231512e18 } : BV:32
21 : eq(6, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 3444697487 { 0xcd51e98f -850269809 -1.63994014e27 } : BV:32
24 : eq(6, 23) : BOOL
25 : 117 { 0x75 } : BV:8
26 : ite(24, 9, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 23) : BOOL
42 : ite(41, 9, 25) : BV:8
43 : ite(40, 22, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 23) : BOOL
58 : ite(57, 9, 25) : BV:8
59 : ite(56, 22, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 23) : BOOL
73 : ite(72, 9, 25) : BV:8
74 : ite(71, 22, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3365277291 ] -> 117, [ 3365277292; 3365277292 ] -> 16, [ 3365277293; 3365277293 ] -> 117, [ 3365277294; 3365277294 ] -> 179, [ 3365277295; 3365277295 ] -> 159, [ 3365277296; 3444697483 ] -> 117, [ 3444697484; 3444697487 ] -> 0, [ 3444697488; 4294967295 ] -> 117, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda575 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 2679338256 { 0x9fb37510 -1615629040 -1.40200996e192 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 3444697484 { 0xcd51e98c -850269812 -1.63993978e27 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 3365277295 { 0xc8960e6f -929690001 -1.17231547e18 } : BV:32
11 : eq(6, 10) : BOOL
12 : 159 { 0x9f -97 } : BV:8
13 : 3444697485 { 0xcd51e98d -850269811 -1.63993990e27 } : BV:32
14 : eq(6, 13) : BOOL
15 : 3365277294 { 0xc8960e6e -929690002 -1.17231535e18 } : BV:32
16 : eq(6, 15) : BOOL
17 : 179 { 0xb3 -77 } : BV:8
18 : 3444697486 { 0xcd51e98e -850269810 -1.63994002e27 } : BV:32
19 : eq(6, 18) : BOOL
20 : 3365277292 { 0xc8960e6c -929690004 -1.17231512e18 } : BV:32
21 : eq(6, 20) : BOOL
22 : 16 { 0x10 } : BV:8
23 : 3444697487 { 0xcd51e98f -850269809 -1.63994014e27 } : BV:32
24 : eq(6, 23) : BOOL
25 : 117 { 0x75 } : BV:8
26 : ite(24, 9, 25) : BV:8
27 : ite(21, 22, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(14, 9, 29) : BV:8
31 : ite(11, 12, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 13) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 23) : BOOL
42 : ite(41, 9, 25) : BV:8
43 : ite(40, 22, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 9, 45) : BV:8
47 : ite(36, 12, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 13) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 23) : BOOL
58 : ite(57, 9, 25) : BV:8
59 : ite(56, 22, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 9, 61) : BV:8
63 : ite(52, 12, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 23) : BOOL
73 : ite(72, 9, 25) : BV:8
74 : ite(71, 22, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 9, 76) : BV:8
78 : ite(67, 12, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 2679338256 { 0x9fb37510 -1615629040 -1.40200996e192 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3365277291 ] -> 117, [ 3365277292; 3365277292 ] -> 16, [ 3365277293; 3365277293 ] -> 117, [ 3365277294; 3365277294 ] -> 179, [ 3365277295; 3365277295 ] -> 159, [ 3365277296; 3444697483 ] -> 117, [ 3444697484; 3444697487 ] -> 0, [ 3444697488; 4294967295 ] -> 117, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3365277291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3365277292; 3365277295 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3365277296; 3444697483 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3444697484; 3444697487 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3444697488; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3365277292 { 0xc8960e6c -929690004 -1.17231512e18 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3444697484 { 0xcd51e98c -850269812 -1.63993978e27 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1964647219 { 0x751a2333 +1.20419919e107 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1964647219 { 0x751a2333 +1.20419919e107 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3365277291 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3365277292; 3365277295 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3365277296; 3444697483 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3444697484; 3444697487 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3444697488; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3444697484 { 0xcd51e98c -850269812 -1.63993978e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3444697487 { 0xcd51e98f -850269809 -1.63994014e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3365277292 { 0xc8960e6c -929690004 -1.17231512e18 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3365277295 { 0xc8960e6f -929690001 -1.17231547e18 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
523471042
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3v487.ce121.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3v487.ce121 1afd22f1d21cd1982eaa52e58b97c77f
=input.spec-%var-arr-1
1 : Lambda696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda697 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda697 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 71054847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71054848; 71054851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 71054852; 2483651843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2483651844; 2483651847 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2483651848; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2483651844 { 0x94098504 -1811315452 -1.7437181e169 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 71054848 { 0x43c3600 +1.47039794e137 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2067276454 { 0x7b3822a6 +1.43855738e119 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2067276454 { 0x7b3822a6 +1.43855738e119 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 71054847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71054848; 71054851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 71054852; 2483651843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2483651844; 2483651847 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2483651848; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 71054848 { 0x43c3600 +1.47039794e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 71054851 { 0x43c3603 +1.47039830e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2483651844 { 0x94098504 -1811315452 -1.7437181e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2483651847 { 0x94098507 -1811315449 -1.7437217e169 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2527495728
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3v487.ce143.num_edges_traversed1
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce143 809ed21761f731af46e7e57c92ddf759
=input.spec-%var-arr-1
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1498599058 { 0x5952ce92 +1.64692902e51 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1498599058 { 0x5952ce92 +1.64692902e51 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 139475 { 0x220d3 +1.1662671e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 555629163 { 0x211e3a6b +1.23615777e195 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
110269796
=counter_example_end
=global nodece 10 num_edges_traversed 1
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3.ce165.num_edges_traversed1
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3.ce165 483dfa92267289155a78323bddae
=input.spec-%var-arr-1
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda902 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
29 : eq(22, 28) : BOOL
30 : 157 { 0x9d -99 } : BV:8
31 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
32 : eq(22, 31) : BOOL
33 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
34 : eq(22, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
39 : eq(22, 38) : BOOL
40 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
43 : eq(22, 42) : BOOL
44 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
45 : eq(22, 44) : BOOL
46 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
47 : eq(22, 46) : BOOL
48 : 222 { 0xde -34 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda902 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
29 : eq(22, 28) : BOOL
30 : 157 { 0x9d -99 } : BV:8
31 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
32 : eq(22, 31) : BOOL
33 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
34 : eq(22, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
39 : eq(22, 38) : BOOL
40 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
43 : eq(22, 42) : BOOL
44 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
45 : eq(22, 44) : BOOL
46 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
47 : eq(22, 46) : BOOL
48 : 222 { 0xde -34 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda880 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 157 { 0x9d -99 } : BV:8
17 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
23 : eq(8, 22) : BOOL
24 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
31 : eq(8, 30) : BOOL
32 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
33 : eq(8, 32) : BOOL
34 : 222 { 0xde -34 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2418034679 ] -> 222, [ 2418034680; 2418034683 ] -> 255, [ 2418034684; 2646334975 ] -> 222, [ 2646334976; 2646334979 ] -> 0, [ 2646334980; 3245096315 ] -> 222, [ 3245096316; 3245096316 ] -> 0, [ 3245096317; 3245096317 ] -> 222, [ 3245096318; 3245096318 ] -> 187, [ 3245096319; 3245096319 ] -> 157, [ 3245096320; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda881 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 157 { 0x9d -99 } : BV:8
17 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
23 : eq(8, 22) : BOOL
24 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
31 : eq(8, 30) : BOOL
32 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
33 : eq(8, 32) : BOOL
34 : 222 { 0xde -34 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2418034679 ] -> 222, [ 2418034680; 2418034683 ] -> 255, [ 2418034684; 2646334975 ] -> 222, [ 2646334976; 2646334979 ] -> 0, [ 2646334980; 3245096315 ] -> 222, [ 3245096316; 3245096316 ] -> 0, [ 3245096317; 3245096317 ] -> 222, [ 3245096318; 3245096318 ] -> 187, [ 3245096319; 3245096319 ] -> 157, [ 3245096320; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2418034679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418034680; 2418034683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2418034684; 3245096315 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3245096316; 3245096319 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3245096320; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 82839516 { 0x4f007dc +1.87523984e138 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 82839516 { 0x4f007dc +1.87523984e138 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2418034679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418034680; 2418034683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2418034684; 3245096315 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3245096316; 3245096319 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3245096320; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1205617897
=counter_example_end
=global nodece 11 num_edges_traversed 1
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3v487.ce809.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3v487.ce809 c1a0d8f3d19ce84860262c8ff380f15
=input.spec-%var-arr-1
1 : Lambda4016 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda4017 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : bvadd(11, 13) : BV:32
15 : bvule(2, 14) : BOOL
16 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
17 : bvule(14, 16) : BOOL
18 : and(15, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
21 : bvule(20, 14) : BOOL
22 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
23 : bvule(14, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
27 : bvule(26, 14) : BOOL
28 : bvule(14, 4) : BOOL
29 : and(27, 28) : BOOL
30 : 0 { 0x0 } : BV:8
31 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
32 : bvule(31, 14) : BOOL
33 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
34 : bvule(14, 33) : BOOL
35 : and(32, 34) : BOOL
36 : 5 { 0x5 } : BV:8
37 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
38 : bvule(37, 14) : BOOL
39 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
40 : bvule(14, 39) : BOOL
41 : and(38, 40) : BOOL
42 : ite(41, 30, 30) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(29, 30, 43) : BV:8
45 : ite(24, 25, 44) : BV:8
46 : ite(18, 19, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 13) : BV:32
49 : bvule(2, 48) : BOOL
50 : bvule(48, 16) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(20, 48) : BOOL
53 : bvule(48, 22) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(26, 48) : BOOL
56 : bvule(48, 4) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(31, 48) : BOOL
59 : bvule(48, 33) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(37, 48) : BOOL
62 : bvule(48, 39) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 30, 30) : BV:8
65 : ite(60, 36, 64) : BV:8
66 : ite(57, 30, 65) : BV:8
67 : ite(54, 25, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 13) : BV:32
71 : bvule(2, 70) : BOOL
72 : bvule(70, 16) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(20, 70) : BOOL
75 : bvule(70, 22) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(26, 70) : BOOL
78 : bvule(70, 4) : BOOL
79 : and(77, 78) : BOOL
80 : bvule(31, 70) : BOOL
81 : bvule(70, 33) : BOOL
82 : and(80, 81) : BOOL
83 : bvule(37, 70) : BOOL
84 : bvule(70, 39) : BOOL
85 : and(83, 84) : BOOL
86 : ite(85, 30, 30) : BV:8
87 : ite(82, 36, 86) : BV:8
88 : ite(79, 30, 87) : BV:8
89 : ite(76, 25, 88) : BV:8
90 : ite(73, 19, 89) : BV:8
91 : bvule(2, 13) : BOOL
92 : bvule(13, 16) : BOOL
93 : and(91, 92) : BOOL
94 : bvule(20, 13) : BOOL
95 : bvule(13, 22) : BOOL
96 : and(94, 95) : BOOL
97 : bvule(26, 13) : BOOL
98 : bvule(13, 4) : BOOL
99 : and(97, 98) : BOOL
100 : bvule(31, 13) : BOOL
101 : bvule(13, 33) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(37, 13) : BOOL
104 : bvule(13, 39) : BOOL
105 : and(103, 104) : BOOL
106 : ite(105, 30, 30) : BV:8
107 : ite(102, 36, 106) : BV:8
108 : ite(99, 30, 107) : BV:8
109 : ite(96, 25, 108) : BV:8
110 : ite(93, 19, 109) : BV:8
111 : bvconcat(46, 68, 90, 110) : BV:32
112 : lambda(10, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(9, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4019 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda4020 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 7, 7) : BOOL
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 10) : BV:32
18 : bvadd(15, 17) : BV:32
19 : bvule(2, 18) : BOOL
20 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
21 : bvule(18, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
25 : bvule(24, 18) : BOOL
26 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
27 : bvule(18, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
31 : bvule(30, 18) : BOOL
32 : bvule(18, 4) : BOOL
33 : and(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
36 : bvule(35, 18) : BOOL
37 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
38 : bvule(18, 37) : BOOL
39 : and(36, 38) : BOOL
40 : 5 { 0x5 } : BV:8
41 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
42 : bvule(41, 18) : BOOL
43 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
44 : bvule(18, 43) : BOOL
45 : and(42, 44) : BOOL
46 : ite(45, 34, 34) : BV:8
47 : ite(39, 40, 46) : BV:8
48 : ite(33, 34, 47) : BV:8
49 : ite(28, 29, 48) : BV:8
50 : ite(22, 23, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 17) : BV:32
53 : bvule(2, 52) : BOOL
54 : bvule(52, 20) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(24, 52) : BOOL
57 : bvule(52, 26) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(30, 52) : BOOL
60 : bvule(52, 4) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(35, 52) : BOOL
63 : bvule(52, 37) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 43) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 34, 34) : BV:8
69 : ite(64, 40, 68) : BV:8
70 : ite(61, 34, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(55, 23, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 17) : BV:32
75 : bvule(2, 74) : BOOL
76 : bvule(74, 20) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(24, 74) : BOOL
79 : bvule(74, 26) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(30, 74) : BOOL
82 : bvule(74, 4) : BOOL
83 : and(81, 82) : BOOL
84 : bvule(35, 74) : BOOL
85 : bvule(74, 37) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(41, 74) : BOOL
88 : bvule(74, 43) : BOOL
89 : and(87, 88) : BOOL
90 : ite(89, 34, 34) : BV:8
91 : ite(86, 40, 90) : BV:8
92 : ite(83, 34, 91) : BV:8
93 : ite(80, 29, 92) : BV:8
94 : ite(77, 23, 93) : BV:8
95 : bvule(2, 17) : BOOL
96 : bvule(17, 20) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(24, 17) : BOOL
99 : bvule(17, 26) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(30, 17) : BOOL
102 : bvule(17, 4) : BOOL
103 : and(101, 102) : BOOL
104 : bvule(35, 17) : BOOL
105 : bvule(17, 37) : BOOL
106 : and(104, 105) : BOOL
107 : bvule(41, 17) : BOOL
108 : bvule(17, 43) : BOOL
109 : and(107, 108) : BOOL
110 : ite(109, 34, 34) : BV:8
111 : ite(106, 40, 110) : BV:8
112 : ite(103, 34, 111) : BV:8
113 : ite(100, 29, 112) : BV:8
114 : ite(97, 23, 113) : BV:8
115 : bvconcat(50, 72, 94, 114) : BV:32
116 : ite(14, 115, 115) : BV:32
117 : lambda(10, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(9, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda3994 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : bvadd(9, 11) : BV:32
13 : bvule(2, 12) : BOOL
14 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
15 : bvule(12, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
19 : bvule(18, 12) : BOOL
20 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
21 : bvule(12, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 } : BV:8
24 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
25 : bvule(24, 12) : BOOL
26 : bvule(12, 4) : BOOL
27 : and(25, 26) : BOOL
28 : 0 { 0x0 } : BV:8
29 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
30 : bvule(29, 12) : BOOL
31 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
32 : bvule(12, 31) : BOOL
33 : and(30, 32) : BOOL
34 : 5 { 0x5 } : BV:8
35 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
36 : bvule(35, 12) : BOOL
37 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
38 : bvule(12, 37) : BOOL
39 : and(36, 38) : BOOL
40 : ite(39, 28, 28) : BV:8
41 : ite(33, 34, 40) : BV:8
42 : ite(27, 28, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : bvule(2, 46) : BOOL
48 : bvule(46, 14) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 46) : BOOL
51 : bvule(46, 20) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(24, 46) : BOOL
54 : bvule(46, 4) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(29, 46) : BOOL
57 : bvule(46, 31) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(35, 46) : BOOL
60 : bvule(46, 37) : BOOL
61 : and(59, 60) : BOOL
62 : ite(61, 28, 28) : BV:8
63 : ite(58, 34, 62) : BV:8
64 : ite(55, 28, 63) : BV:8
65 : ite(52, 23, 64) : BV:8
66 : ite(49, 17, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 11) : BV:32
69 : bvule(2, 68) : BOOL
70 : bvule(68, 14) : BOOL
71 : and(69, 70) : BOOL
72 : bvule(18, 68) : BOOL
73 : bvule(68, 20) : BOOL
74 : and(72, 73) : BOOL
75 : bvule(24, 68) : BOOL
76 : bvule(68, 4) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(29, 68) : BOOL
79 : bvule(68, 31) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(35, 68) : BOOL
82 : bvule(68, 37) : BOOL
83 : and(81, 82) : BOOL
84 : ite(83, 28, 28) : BV:8
85 : ite(80, 34, 84) : BV:8
86 : ite(77, 28, 85) : BV:8
87 : ite(74, 23, 86) : BV:8
88 : ite(71, 17, 87) : BV:8
89 : bvule(2, 11) : BOOL
90 : bvule(11, 14) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(18, 11) : BOOL
93 : bvule(11, 20) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(24, 11) : BOOL
96 : bvule(11, 4) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(29, 11) : BOOL
99 : bvule(11, 31) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(35, 11) : BOOL
102 : bvule(11, 37) : BOOL
103 : and(101, 102) : BOOL
104 : ite(103, 28, 28) : BV:8
105 : ite(100, 34, 104) : BV:8
106 : ite(97, 28, 105) : BV:8
107 : ite(94, 23, 106) : BV:8
108 : ite(91, 17, 107) : BV:8
109 : bvconcat(44, 66, 88, 108) : BV:32
110 : ite(8, 109, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform363 : BV:32
4 : Lambda4023 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4024 : BV:32
7 : 1387676840 { 0x52b644a8 +1.42397022e38 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 536871551 ] -> 1, [ 536871552; 536871555 ] -> 5, [ 536871556; 1073741823 ] -> 0, [ 1073741824; 1073741827 ] -> 4, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda3999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : bvadd(3, 5) : BV:32
7 : bvule(2, 6) : BOOL
8 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
9 : bvule(6, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
13 : bvule(12, 6) : BOOL
14 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
15 : bvule(6, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
19 : bvule(18, 6) : BOOL
20 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
21 : bvule(6, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
25 : bvule(24, 6) : BOOL
26 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
27 : bvule(6, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
31 : bvule(30, 6) : BOOL
32 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
33 : bvule(6, 32) : BOOL
34 : and(31, 33) : BOOL
35 : ite(34, 23, 23) : BV:8
36 : ite(28, 29, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 5) : BV:32
42 : bvule(2, 41) : BOOL
43 : bvule(41, 8) : BOOL
44 : and(42, 43) : BOOL
45 : bvule(12, 41) : BOOL
46 : bvule(41, 14) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(18, 41) : BOOL
49 : bvule(41, 20) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 26) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(30, 41) : BOOL
55 : bvule(41, 32) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 23, 23) : BV:8
58 : ite(53, 29, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(44, 11, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 5) : BV:32
64 : bvule(2, 63) : BOOL
65 : bvule(63, 8) : BOOL
66 : and(64, 65) : BOOL
67 : bvule(12, 63) : BOOL
68 : bvule(63, 14) : BOOL
69 : and(67, 68) : BOOL
70 : bvule(18, 63) : BOOL
71 : bvule(63, 20) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(24, 63) : BOOL
74 : bvule(63, 26) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(30, 63) : BOOL
77 : bvule(63, 32) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 23, 23) : BV:8
80 : ite(75, 29, 79) : BV:8
81 : ite(72, 23, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(66, 11, 82) : BV:8
84 : bvule(2, 5) : BOOL
85 : bvule(5, 8) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(12, 5) : BOOL
88 : bvule(5, 14) : BOOL
89 : and(87, 88) : BOOL
90 : bvule(18, 5) : BOOL
91 : bvule(5, 20) : BOOL
92 : and(90, 91) : BOOL
93 : bvule(24, 5) : BOOL
94 : bvule(5, 26) : BOOL
95 : and(93, 94) : BOOL
96 : bvule(30, 5) : BOOL
97 : bvule(5, 32) : BOOL
98 : and(96, 97) : BOOL
99 : ite(98, 23, 23) : BV:8
100 : ite(95, 29, 99) : BV:8
101 : ite(92, 23, 100) : BV:8
102 : ite(89, 17, 101) : BV:8
103 : ite(86, 11, 102) : BV:8
104 : bvconcat(39, 61, 83, 103) : BV:32
105 : lambda(1, 104) : FUNCTION[BV:32 -> BV:32]
106 : sym_const(105) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform362 : BV:32
4 : Lambda4021 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4022 : BV:32
7 : 1484767232 { 0x587fc000 +1.99804687e49 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 536871551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536871552; 536871555 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 536871556; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3937192660
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce810.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce810 3135db21ea173d6152a1c9ed27b13f
=input.spec-%var-arr-1
1 : Lambda4034 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda4035 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 7, 7) : BOOL
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 10) : BV:32
18 : bvadd(15, 17) : BV:32
19 : bvule(2, 18) : BOOL
20 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
21 : bvule(18, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
25 : bvule(24, 18) : BOOL
26 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
27 : bvule(18, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
31 : bvule(30, 18) : BOOL
32 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
33 : bvule(18, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
37 : bvule(36, 18) : BOOL
38 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
39 : bvule(18, 38) : BOOL
40 : and(37, 39) : BOOL
41 : 0 { 0x0 } : BV:8
42 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 4) : BOOL
45 : and(43, 44) : BOOL
46 : ite(45, 41, 41) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(28, 29, 48) : BV:8
50 : ite(22, 23, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 17) : BV:32
53 : bvule(2, 52) : BOOL
54 : bvule(52, 20) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(24, 52) : BOOL
57 : bvule(52, 26) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(30, 52) : BOOL
60 : bvule(52, 32) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(36, 52) : BOOL
63 : bvule(52, 38) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(42, 52) : BOOL
66 : bvule(52, 4) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(55, 23, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 17) : BV:32
75 : bvule(2, 74) : BOOL
76 : bvule(74, 20) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(24, 74) : BOOL
79 : bvule(74, 26) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(30, 74) : BOOL
82 : bvule(74, 32) : BOOL
83 : and(81, 82) : BOOL
84 : bvule(36, 74) : BOOL
85 : bvule(74, 38) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(42, 74) : BOOL
88 : bvule(74, 4) : BOOL
89 : and(87, 88) : BOOL
90 : ite(89, 41, 41) : BV:8
91 : ite(86, 41, 90) : BV:8
92 : ite(83, 35, 91) : BV:8
93 : ite(80, 29, 92) : BV:8
94 : ite(77, 23, 93) : BV:8
95 : bvule(2, 17) : BOOL
96 : bvule(17, 20) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(24, 17) : BOOL
99 : bvule(17, 26) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(30, 17) : BOOL
102 : bvule(17, 32) : BOOL
103 : and(101, 102) : BOOL
104 : bvule(36, 17) : BOOL
105 : bvule(17, 38) : BOOL
106 : and(104, 105) : BOOL
107 : bvule(42, 17) : BOOL
108 : bvule(17, 4) : BOOL
109 : and(107, 108) : BOOL
110 : ite(109, 41, 41) : BV:8
111 : ite(106, 41, 110) : BV:8
112 : ite(103, 35, 111) : BV:8
113 : ite(100, 29, 112) : BV:8
114 : ite(97, 23, 113) : BV:8
115 : bvconcat(50, 72, 94, 114) : BV:32
116 : ite(14, 115, 115) : BV:32
117 : lambda(10, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(9, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4037 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda4038 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : bvadd(11, 13) : BV:32
15 : bvule(2, 14) : BOOL
16 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
17 : bvule(14, 16) : BOOL
18 : and(15, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
21 : bvule(20, 14) : BOOL
22 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
23 : bvule(14, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
27 : bvule(26, 14) : BOOL
28 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
29 : bvule(14, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
33 : bvule(32, 14) : BOOL
34 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
35 : bvule(14, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
39 : bvule(38, 14) : BOOL
40 : bvule(14, 4) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 37, 37) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(24, 25, 44) : BV:8
46 : ite(18, 19, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 13) : BV:32
49 : bvule(2, 48) : BOOL
50 : bvule(48, 16) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(20, 48) : BOOL
53 : bvule(48, 22) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(26, 48) : BOOL
56 : bvule(48, 28) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(32, 48) : BOOL
59 : bvule(48, 34) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(38, 48) : BOOL
62 : bvule(48, 4) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 37, 37) : BV:8
65 : ite(60, 37, 64) : BV:8
66 : ite(57, 31, 65) : BV:8
67 : ite(54, 25, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 13) : BV:32
71 : bvule(2, 70) : BOOL
72 : bvule(70, 16) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(20, 70) : BOOL
75 : bvule(70, 22) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(26, 70) : BOOL
78 : bvule(70, 28) : BOOL
79 : and(77, 78) : BOOL
80 : bvule(32, 70) : BOOL
81 : bvule(70, 34) : BOOL
82 : and(80, 81) : BOOL
83 : bvule(38, 70) : BOOL
84 : bvule(70, 4) : BOOL
85 : and(83, 84) : BOOL
86 : ite(85, 37, 37) : BV:8
87 : ite(82, 37, 86) : BV:8
88 : ite(79, 31, 87) : BV:8
89 : ite(76, 25, 88) : BV:8
90 : ite(73, 19, 89) : BV:8
91 : bvule(2, 13) : BOOL
92 : bvule(13, 16) : BOOL
93 : and(91, 92) : BOOL
94 : bvule(20, 13) : BOOL
95 : bvule(13, 22) : BOOL
96 : and(94, 95) : BOOL
97 : bvule(26, 13) : BOOL
98 : bvule(13, 28) : BOOL
99 : and(97, 98) : BOOL
100 : bvule(32, 13) : BOOL
101 : bvule(13, 34) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(38, 13) : BOOL
104 : bvule(13, 4) : BOOL
105 : and(103, 104) : BOOL
106 : ite(105, 37, 37) : BV:8
107 : ite(102, 37, 106) : BV:8
108 : ite(99, 31, 107) : BV:8
109 : ite(96, 25, 108) : BV:8
110 : ite(93, 19, 109) : BV:8
111 : bvconcat(46, 68, 90, 110) : BV:32
112 : lambda(10, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(9, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda4001 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : bvadd(3, 5) : BV:32
7 : bvule(2, 6) : BOOL
8 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
9 : bvule(6, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
13 : bvule(12, 6) : BOOL
14 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
15 : bvule(6, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
19 : bvule(18, 6) : BOOL
20 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
21 : bvule(6, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 5 { 0x5 } : BV:8
24 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
25 : bvule(24, 6) : BOOL
26 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
27 : bvule(6, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 0 { 0x0 } : BV:8
30 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
31 : bvule(30, 6) : BOOL
32 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
33 : bvule(6, 32) : BOOL
34 : and(31, 33) : BOOL
35 : ite(34, 29, 29) : BV:8
36 : ite(28, 29, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 5) : BV:32
42 : bvule(2, 41) : BOOL
43 : bvule(41, 8) : BOOL
44 : and(42, 43) : BOOL
45 : bvule(12, 41) : BOOL
46 : bvule(41, 14) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(18, 41) : BOOL
49 : bvule(41, 20) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 26) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(30, 41) : BOOL
55 : bvule(41, 32) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 29, 29) : BV:8
58 : ite(53, 29, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(44, 11, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 5) : BV:32
64 : bvule(2, 63) : BOOL
65 : bvule(63, 8) : BOOL
66 : and(64, 65) : BOOL
67 : bvule(12, 63) : BOOL
68 : bvule(63, 14) : BOOL
69 : and(67, 68) : BOOL
70 : bvule(18, 63) : BOOL
71 : bvule(63, 20) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(24, 63) : BOOL
74 : bvule(63, 26) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(30, 63) : BOOL
77 : bvule(63, 32) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 29, 29) : BV:8
80 : ite(75, 29, 79) : BV:8
81 : ite(72, 23, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(66, 11, 82) : BV:8
84 : bvule(2, 5) : BOOL
85 : bvule(5, 8) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(12, 5) : BOOL
88 : bvule(5, 14) : BOOL
89 : and(87, 88) : BOOL
90 : bvule(18, 5) : BOOL
91 : bvule(5, 20) : BOOL
92 : and(90, 91) : BOOL
93 : bvule(24, 5) : BOOL
94 : bvule(5, 26) : BOOL
95 : and(93, 94) : BOOL
96 : bvule(30, 5) : BOOL
97 : bvule(5, 32) : BOOL
98 : and(96, 97) : BOOL
99 : ite(98, 29, 29) : BV:8
100 : ite(95, 29, 99) : BV:8
101 : ite(92, 23, 100) : BV:8
102 : ite(89, 17, 101) : BV:8
103 : ite(86, 11, 102) : BV:8
104 : bvconcat(39, 61, 83, 103) : BV:32
105 : lambda(1, 104) : FUNCTION[BV:32 -> BV:32]
106 : sym_const(105) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform367 : BV:32
4 : Lambda4041 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4042 : BV:32
7 : 1843569972 { 0x6de2a534 +1.77066659e92 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 794838607 ] -> 1, [ 794838608; 794838611 ] -> 4, [ 794838612; 3105033587 ] -> 0, [ 3105033588; 3105033591 ] -> 5, [ 3105033592; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda4006 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : bvadd(9, 11) : BV:32
13 : bvule(2, 12) : BOOL
14 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
15 : bvule(12, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
19 : bvule(18, 12) : BOOL
20 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
21 : bvule(12, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 } : BV:8
24 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
25 : bvule(24, 12) : BOOL
26 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
27 : bvule(12, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
31 : bvule(30, 12) : BOOL
32 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
33 : bvule(12, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 0 { 0x0 } : BV:8
36 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
37 : bvule(36, 12) : BOOL
38 : bvule(12, 4) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 35, 35) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : bvule(2, 46) : BOOL
48 : bvule(46, 14) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 46) : BOOL
51 : bvule(46, 20) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(24, 46) : BOOL
54 : bvule(46, 26) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(30, 46) : BOOL
57 : bvule(46, 32) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(36, 46) : BOOL
60 : bvule(46, 4) : BOOL
61 : and(59, 60) : BOOL
62 : ite(61, 35, 35) : BV:8
63 : ite(58, 35, 62) : BV:8
64 : ite(55, 29, 63) : BV:8
65 : ite(52, 23, 64) : BV:8
66 : ite(49, 17, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 11) : BV:32
69 : bvule(2, 68) : BOOL
70 : bvule(68, 14) : BOOL
71 : and(69, 70) : BOOL
72 : bvule(18, 68) : BOOL
73 : bvule(68, 20) : BOOL
74 : and(72, 73) : BOOL
75 : bvule(24, 68) : BOOL
76 : bvule(68, 26) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(30, 68) : BOOL
79 : bvule(68, 32) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(36, 68) : BOOL
82 : bvule(68, 4) : BOOL
83 : and(81, 82) : BOOL
84 : ite(83, 35, 35) : BV:8
85 : ite(80, 35, 84) : BV:8
86 : ite(77, 29, 85) : BV:8
87 : ite(74, 23, 86) : BV:8
88 : ite(71, 17, 87) : BV:8
89 : bvule(2, 11) : BOOL
90 : bvule(11, 14) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(18, 11) : BOOL
93 : bvule(11, 20) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(24, 11) : BOOL
96 : bvule(11, 26) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 11) : BOOL
99 : bvule(11, 32) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(36, 11) : BOOL
102 : bvule(11, 4) : BOOL
103 : and(101, 102) : BOOL
104 : ite(103, 35, 35) : BV:8
105 : ite(100, 35, 104) : BV:8
106 : ite(97, 29, 105) : BV:8
107 : ite(94, 23, 106) : BV:8
108 : ite(91, 17, 107) : BV:8
109 : bvconcat(44, 66, 88, 108) : BV:32
110 : ite(8, 109, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform366 : BV:32
4 : Lambda4039 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4040 : BV:32
7 : 1760213736 { 0x68eabae8 +1.83382892e82 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 794838607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 794838608; 794838611 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 794838612; 3105033587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3105033588; 3105033591 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3105033592; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3183894134
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce940.num_edges_traversed0
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce940 674cc2aa32e2bc1f985f981361e19ba0
=input.spec-%var-arr-1
1 : Lambda4147 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4148 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4150 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4151 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda4118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform379 : BV:32
4 : Lambda4154 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4155 : BV:32
7 : 902490623 { 0x35cae9ff +1.58526599e236 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform378 : BV:32
4 : Lambda4152 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4153 : BV:32
7 : 384666725 { 0x16ed8c65 +1.85584700e174 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3719488801
=counter_example_end
=global nodece 14 num_edges_traversed 0
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce941.num_edges_traversed0
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce941 42d7e2c21c59448f2a6ae8725e6ad6
=input.spec-%var-arr-1
1 : Lambda4165 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4166 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4170 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform383 : BV:32
4 : Lambda4173 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4174 : BV:32
7 : 1902011452 { 0x715e643c +1.73743391e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda4133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform382 : BV:32
4 : Lambda4171 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4172 : BV:32
7 : 1747658324 { 0x682b2654 +1.33710718e81 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
38613546
=counter_example_end
=global nodece 15 num_edges_traversed 0
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 16
=global nodece 16 nodece z3.ce1007.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1007 59aa85f8a682754549b38d7acabef0
=input.spec-%var-arr-1
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 278370198 { 0x10979796 +1.18431353e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda208 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
27 : eq(23, 26) : BOOL
28 : 229 { 0xe5 -27 } : BV:8
29 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 151 { 0x97 -105 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 278370198 { 0x10979796 +1.18431353e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda208 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
27 : eq(23, 26) : BOOL
28 : 229 { 0xe5 -27 } : BV:8
29 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 151 { 0x97 -105 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 278370198 ] -> true, [ 278370199; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda178 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
12 : eq(8, 11) : BOOL
13 : 229 { 0xe5 -27 } : BV:8
14 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 151 { 0x97 -105 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 278370198 ] -> true, [ 278370199; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2041227923 ] -> 151, [ 2041227924; 2041227924 ] -> 0, [ 2041227925; 2041227925 ] -> 251, [ 2041227926; 2041227926 ] -> 151, [ 2041227927; 2041227927 ] -> 229, [ 2041227928; 3851942655 ] -> 151, [ 3851942656; 3851942659 ] -> 0, [ 3851942660; 4225249382 ] -> 151, [ 4225249383; 4225249383 ] -> 16, [ 4225249384; 4294967295 ] -> 151, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda179 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
12 : eq(8, 11) : BOOL
13 : 229 { 0xe5 -27 } : BV:8
14 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 151 { 0x97 -105 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
=input.dst.llvm-%arr
1 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2041227923 ] -> 151, [ 2041227924; 2041227924 ] -> 0, [ 2041227925; 2041227925 ] -> 251, [ 2041227926; 2041227926 ] -> 151, [ 2041227927; 2041227927 ] -> 229, [ 2041227928; 3851942655 ] -> 151, [ 3851942656; 3851942659 ] -> 0, [ 3851942660; 4225249382 ] -> 151, [ 4225249383; 4225249383 ] -> 16, [ 4225249384; 4294967295 ] -> 151, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2041227923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2041227924; 2041227927 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2041227928; 4225249379 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4225249380; 4225249383 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4225249384; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4225249380 { 0xfbd83064 -69717916 -1.68897676e120 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 19323070 { 0x126d8be +1.30348944e131 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2041227923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2041227924; 2041227927 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2041227928; 4225249379 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4225249380; 4225249383 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4225249384; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4225249380 { 0xfbd83064 -69717916 -1.68897676e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
4173262349
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 17
=global nodece 17 nodece z3.ce1003.num_edges_traversed2
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce1003 77c48ec1226a252a7e959bed379fce
=input.spec-%var-arr-1
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda276 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : ite(3, 2, 112) : BV:32
114 : lambda(1, 113) : FUNCTION[BV:32 -> BV:32]
115 : sym_const(114) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : lambda(1, 112) : FUNCTION[BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1749719364 { 0x684a9944 +1.58280229e81 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
826564173
=counter_example_end
=global nodece 17 num_edges_traversed 2
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 18
=global nodece 18 nodece z3.ce999.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce999 b41aa66223a4fc61a27f2b6a9981e872
=input.spec-%var-arr-1
1 : Lambda397 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109119 { 0x40000ff +1.3039e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda398 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 245 { 0xf5 -11 } : BV:8
29 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
32 : eq(23, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
35 : eq(23, 34) : BOOL
36 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
39 : eq(23, 38) : BOOL
40 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
41 : eq(23, 40) : BOOL
42 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
43 : eq(23, 42) : BOOL
44 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
45 : eq(23, 44) : BOOL
46 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
47 : eq(23, 46) : BOOL
48 : 4 { 0x4 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(45, 25, 49) : BV:8
51 : ite(43, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 21, 22) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 25, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 21, 22) : BV:32
86 : eq(85, 22) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 25, 48) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 25, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(21, 22) : BV:32
109 : eq(108, 22) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 25, 48) : BV:8
121 : ite(118, 25, 120) : BV:8
122 : ite(117, 25, 121) : BV:8
123 : ite(116, 25, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 25, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(18, 2, 131) : BV:32
133 : lambda(17, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(16, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda397 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109119 { 0x40000ff +1.3039e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda398 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 245 { 0xf5 -11 } : BV:8
29 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
32 : eq(23, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
35 : eq(23, 34) : BOOL
36 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
39 : eq(23, 38) : BOOL
40 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
41 : eq(23, 40) : BOOL
42 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
43 : eq(23, 42) : BOOL
44 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
45 : eq(23, 44) : BOOL
46 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
47 : eq(23, 46) : BOOL
48 : 4 { 0x4 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(45, 25, 49) : BV:8
51 : ite(43, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 21, 22) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 25, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 21, 22) : BV:32
86 : eq(85, 22) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 25, 48) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 25, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(21, 22) : BV:32
109 : eq(108, 22) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 25, 48) : BV:8
121 : ite(118, 25, 120) : BV:8
122 : ite(117, 25, 121) : BV:8
123 : ite(116, 25, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 25, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(18, 2, 131) : BV:32
133 : lambda(17, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(16, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67109119 ] -> true, [ 67109120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda376 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 245 { 0xf5 -11 } : BV:8
14 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
24 : eq(8, 23) : BOOL
25 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
26 : eq(8, 25) : BOOL
27 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
28 : eq(8, 27) : BOOL
29 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
32 : eq(8, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : ite(32, 10, 33) : BV:8
35 : ite(30, 10, 34) : BV:8
36 : ite(28, 10, 35) : BV:8
37 : ite(26, 10, 36) : BV:8
38 : ite(24, 10, 37) : BV:8
39 : ite(22, 10, 38) : BV:8
40 : ite(20, 10, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(15, 10, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : ite(9, 10, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 7) : BOOL
48 : eq(46, 11) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 16) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 25) : BOOL
55 : eq(46, 27) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 10, 33) : BV:8
59 : ite(56, 10, 58) : BV:8
60 : ite(55, 10, 59) : BV:8
61 : ite(54, 10, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : ite(52, 10, 62) : BV:8
64 : ite(51, 10, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 10, 65) : BV:8
67 : ite(48, 13, 66) : BV:8
68 : ite(47, 10, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 7) : BOOL
72 : eq(70, 11) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 25) : BOOL
79 : eq(70, 27) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 10, 33) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 10, 86) : BV:8
88 : ite(75, 10, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 10, 89) : BV:8
91 : ite(72, 13, 90) : BV:8
92 : ite(71, 10, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 7) : BOOL
95 : eq(93, 11) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 25) : BOOL
102 : eq(93, 27) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 10, 33) : BV:8
106 : ite(103, 10, 105) : BV:8
107 : ite(102, 10, 106) : BV:8
108 : ite(101, 10, 107) : BV:8
109 : ite(100, 10, 108) : BV:8
110 : ite(99, 10, 109) : BV:8
111 : ite(98, 10, 110) : BV:8
112 : ite(97, 18, 111) : BV:8
113 : ite(96, 10, 112) : BV:8
114 : ite(95, 13, 113) : BV:8
115 : ite(94, 10, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67109119 ] -> true, [ 67109120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2355436115 ] -> 4, [ 2355436116; 2355436118 ] -> 0, [ 2355436119; 2355436119 ] -> 245, [ 2355436120; 2728494147 ] -> 4, [ 2728494148; 2728494148 ] -> 0, [ 2728494149; 2728494149 ] -> 1, [ 2728494150; 2728494150 ] -> 0, [ 2728494151; 4110417919 ] -> 4, [ 4110417920; 4110417923 ] -> 0, [ 4110417924; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda377 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 245 { 0xf5 -11 } : BV:8
14 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
24 : eq(8, 23) : BOOL
25 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
26 : eq(8, 25) : BOOL
27 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
28 : eq(8, 27) : BOOL
29 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
32 : eq(8, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : ite(32, 10, 33) : BV:8
35 : ite(30, 10, 34) : BV:8
36 : ite(28, 10, 35) : BV:8
37 : ite(26, 10, 36) : BV:8
38 : ite(24, 10, 37) : BV:8
39 : ite(22, 10, 38) : BV:8
40 : ite(20, 10, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(15, 10, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : ite(9, 10, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 7) : BOOL
48 : eq(46, 11) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 16) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 25) : BOOL
55 : eq(46, 27) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 10, 33) : BV:8
59 : ite(56, 10, 58) : BV:8
60 : ite(55, 10, 59) : BV:8
61 : ite(54, 10, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : ite(52, 10, 62) : BV:8
64 : ite(51, 10, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 10, 65) : BV:8
67 : ite(48, 13, 66) : BV:8
68 : ite(47, 10, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 7) : BOOL
72 : eq(70, 11) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 25) : BOOL
79 : eq(70, 27) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 10, 33) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 10, 86) : BV:8
88 : ite(75, 10, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 10, 89) : BV:8
91 : ite(72, 13, 90) : BV:8
92 : ite(71, 10, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 7) : BOOL
95 : eq(93, 11) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 25) : BOOL
102 : eq(93, 27) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 10, 33) : BV:8
106 : ite(103, 10, 105) : BV:8
107 : ite(102, 10, 106) : BV:8
108 : ite(101, 10, 107) : BV:8
109 : ite(100, 10, 108) : BV:8
110 : ite(99, 10, 109) : BV:8
111 : ite(98, 10, 110) : BV:8
112 : ite(97, 18, 111) : BV:8
113 : ite(96, 10, 112) : BV:8
114 : ite(95, 13, 113) : BV:8
115 : ite(94, 10, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : lambda(1, 117) : FUNCTION[BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
=input.dst.llvm-%arr
1 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2355436115 ] -> 4, [ 2355436116; 2355436118 ] -> 0, [ 2355436119; 2355436119 ] -> 245, [ 2355436120; 2728494147 ] -> 4, [ 2728494148; 2728494148 ] -> 0, [ 2728494149; 2728494149 ] -> 1, [ 2728494150; 2728494150 ] -> 0, [ 2728494151; 4110417919 ] -> 4, [ 4110417920; 4110417923 ] -> 0, [ 4110417924; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2355436115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2355436116; 2355436119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2355436120; 2728494147 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2728494148; 2728494151 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2728494152; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 129590049 { 0x7b96321 +1.44833767e144 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2355436115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2355436116; 2355436119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2355436120; 2728494147 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2728494148; 2728494151 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2728494152; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2728494151 { 0xa2a18447 -1566473145 -1.26184928e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
857838728
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 19
=global nodece 19 nodece z3.ce993.num_edges_traversed2
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3.ce993 682ab87ee4bbb863c3cacf1f14127f2
=input.spec-%var-arr-1
1 : Lambda497 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4261216256 { 0xfdfd0000 -33751040 -1.97656250e124 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda498 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
30 : eq(23, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
41 : eq(23, 40) : BOOL
42 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : ite(43, 25, 44) : BV:8
46 : ite(41, 25, 45) : BV:8
47 : ite(39, 25, 46) : BV:8
48 : ite(37, 25, 47) : BV:8
49 : ite(35, 25, 48) : BV:8
50 : ite(33, 25, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 21, 22) : BV:32
56 : eq(55, 22) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 34) : BOOL
61 : eq(55, 36) : BOOL
62 : eq(55, 38) : BOOL
63 : eq(55, 40) : BOOL
64 : eq(55, 42) : BOOL
65 : ite(64, 25, 44) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 25, 66) : BV:8
68 : ite(61, 25, 67) : BV:8
69 : ite(60, 25, 68) : BV:8
70 : ite(59, 25, 69) : BV:8
71 : ite(58, 31, 70) : BV:8
72 : ite(57, 28, 71) : BV:8
73 : ite(56, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 34) : BOOL
81 : eq(75, 36) : BOOL
82 : eq(75, 38) : BOOL
83 : eq(75, 40) : BOOL
84 : eq(75, 42) : BOOL
85 : ite(84, 25, 44) : BV:8
86 : ite(83, 25, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 25, 87) : BV:8
89 : ite(80, 25, 88) : BV:8
90 : ite(79, 25, 89) : BV:8
91 : ite(78, 31, 90) : BV:8
92 : ite(77, 28, 91) : BV:8
93 : ite(76, 25, 92) : BV:8
94 : bvadd(21, 22) : BV:32
95 : eq(94, 22) : BOOL
96 : eq(94, 26) : BOOL
97 : eq(94, 29) : BOOL
98 : eq(94, 32) : BOOL
99 : eq(94, 34) : BOOL
100 : eq(94, 36) : BOOL
101 : eq(94, 38) : BOOL
102 : eq(94, 40) : BOOL
103 : eq(94, 42) : BOOL
104 : ite(103, 25, 44) : BV:8
105 : ite(102, 25, 104) : BV:8
106 : ite(101, 25, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 25, 107) : BV:8
109 : ite(98, 25, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : ite(95, 25, 111) : BV:8
113 : bvconcat(53, 73, 93, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda497 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4261216256 { 0xfdfd0000 -33751040 -1.97656250e124 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda498 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
30 : eq(23, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
41 : eq(23, 40) : BOOL
42 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : ite(43, 25, 44) : BV:8
46 : ite(41, 25, 45) : BV:8
47 : ite(39, 25, 46) : BV:8
48 : ite(37, 25, 47) : BV:8
49 : ite(35, 25, 48) : BV:8
50 : ite(33, 25, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 21, 22) : BV:32
56 : eq(55, 22) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 34) : BOOL
61 : eq(55, 36) : BOOL
62 : eq(55, 38) : BOOL
63 : eq(55, 40) : BOOL
64 : eq(55, 42) : BOOL
65 : ite(64, 25, 44) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 25, 66) : BV:8
68 : ite(61, 25, 67) : BV:8
69 : ite(60, 25, 68) : BV:8
70 : ite(59, 25, 69) : BV:8
71 : ite(58, 31, 70) : BV:8
72 : ite(57, 28, 71) : BV:8
73 : ite(56, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 34) : BOOL
81 : eq(75, 36) : BOOL
82 : eq(75, 38) : BOOL
83 : eq(75, 40) : BOOL
84 : eq(75, 42) : BOOL
85 : ite(84, 25, 44) : BV:8
86 : ite(83, 25, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 25, 87) : BV:8
89 : ite(80, 25, 88) : BV:8
90 : ite(79, 25, 89) : BV:8
91 : ite(78, 31, 90) : BV:8
92 : ite(77, 28, 91) : BV:8
93 : ite(76, 25, 92) : BV:8
94 : bvadd(21, 22) : BV:32
95 : eq(94, 22) : BOOL
96 : eq(94, 26) : BOOL
97 : eq(94, 29) : BOOL
98 : eq(94, 32) : BOOL
99 : eq(94, 34) : BOOL
100 : eq(94, 36) : BOOL
101 : eq(94, 38) : BOOL
102 : eq(94, 40) : BOOL
103 : eq(94, 42) : BOOL
104 : ite(103, 25, 44) : BV:8
105 : ite(102, 25, 104) : BV:8
106 : ite(101, 25, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 25, 107) : BV:8
109 : ite(98, 25, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : ite(95, 25, 111) : BV:8
113 : bvconcat(53, 73, 93, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4261216256 ] -> true, [ 4261216257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda476 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
15 : eq(8, 14) : BOOL
16 : 250 { 0xfa -6 } : BV:8
17 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
26 : eq(8, 25) : BOOL
27 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : ite(28, 10, 29) : BV:8
31 : ite(26, 10, 30) : BV:8
32 : ite(24, 10, 31) : BV:8
33 : ite(22, 10, 32) : BV:8
34 : ite(20, 10, 33) : BV:8
35 : ite(18, 10, 34) : BV:8
36 : ite(15, 16, 35) : BV:8
37 : ite(12, 13, 36) : BV:8
38 : ite(9, 10, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 6, 7) : BV:32
41 : eq(40, 7) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 19) : BOOL
46 : eq(40, 21) : BOOL
47 : eq(40, 23) : BOOL
48 : eq(40, 25) : BOOL
49 : eq(40, 27) : BOOL
50 : ite(49, 10, 29) : BV:8
51 : ite(48, 10, 50) : BV:8
52 : ite(47, 10, 51) : BV:8
53 : ite(46, 10, 52) : BV:8
54 : ite(45, 10, 53) : BV:8
55 : ite(44, 10, 54) : BV:8
56 : ite(43, 16, 55) : BV:8
57 : ite(42, 13, 56) : BV:8
58 : ite(41, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : eq(60, 17) : BOOL
65 : eq(60, 19) : BOOL
66 : eq(60, 21) : BOOL
67 : eq(60, 23) : BOOL
68 : eq(60, 25) : BOOL
69 : eq(60, 27) : BOOL
70 : ite(69, 10, 29) : BV:8
71 : ite(68, 10, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : ite(66, 10, 72) : BV:8
74 : ite(65, 10, 73) : BV:8
75 : ite(64, 10, 74) : BV:8
76 : ite(63, 16, 75) : BV:8
77 : ite(62, 13, 76) : BV:8
78 : ite(61, 10, 77) : BV:8
79 : bvadd(6, 7) : BV:32
80 : eq(79, 7) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 17) : BOOL
84 : eq(79, 19) : BOOL
85 : eq(79, 21) : BOOL
86 : eq(79, 23) : BOOL
87 : eq(79, 25) : BOOL
88 : eq(79, 27) : BOOL
89 : ite(88, 10, 29) : BV:8
90 : ite(87, 10, 89) : BV:8
91 : ite(86, 10, 90) : BV:8
92 : ite(85, 10, 91) : BV:8
93 : ite(84, 10, 92) : BV:8
94 : ite(83, 10, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : ite(80, 10, 96) : BV:8
98 : bvconcat(38, 58, 78, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4261216256 ] -> true, [ 4261216257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1683710935 ] -> 253, [ 1683710936; 1683710937 ] -> 0, [ 1683710938; 1683710938 ] -> 253, [ 1683710939; 1683710939 ] -> 250, [ 1683710940; 3667021499 ] -> 253, [ 3667021500; 3667021500 ] -> 1, [ 3667021501; 3667021501 ] -> 0, [ 3667021502; 4210884607 ] -> 253, [ 4210884608; 4210884611 ] -> 0, [ 4210884612; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
15 : eq(8, 14) : BOOL
16 : 250 { 0xfa -6 } : BV:8
17 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
26 : eq(8, 25) : BOOL
27 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : ite(28, 10, 29) : BV:8
31 : ite(26, 10, 30) : BV:8
32 : ite(24, 10, 31) : BV:8
33 : ite(22, 10, 32) : BV:8
34 : ite(20, 10, 33) : BV:8
35 : ite(18, 10, 34) : BV:8
36 : ite(15, 16, 35) : BV:8
37 : ite(12, 13, 36) : BV:8
38 : ite(9, 10, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 6, 7) : BV:32
41 : eq(40, 7) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 19) : BOOL
46 : eq(40, 21) : BOOL
47 : eq(40, 23) : BOOL
48 : eq(40, 25) : BOOL
49 : eq(40, 27) : BOOL
50 : ite(49, 10, 29) : BV:8
51 : ite(48, 10, 50) : BV:8
52 : ite(47, 10, 51) : BV:8
53 : ite(46, 10, 52) : BV:8
54 : ite(45, 10, 53) : BV:8
55 : ite(44, 10, 54) : BV:8
56 : ite(43, 16, 55) : BV:8
57 : ite(42, 13, 56) : BV:8
58 : ite(41, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : eq(60, 17) : BOOL
65 : eq(60, 19) : BOOL
66 : eq(60, 21) : BOOL
67 : eq(60, 23) : BOOL
68 : eq(60, 25) : BOOL
69 : eq(60, 27) : BOOL
70 : ite(69, 10, 29) : BV:8
71 : ite(68, 10, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : ite(66, 10, 72) : BV:8
74 : ite(65, 10, 73) : BV:8
75 : ite(64, 10, 74) : BV:8
76 : ite(63, 16, 75) : BV:8
77 : ite(62, 13, 76) : BV:8
78 : ite(61, 10, 77) : BV:8
79 : bvadd(6, 7) : BV:32
80 : eq(79, 7) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 17) : BOOL
84 : eq(79, 19) : BOOL
85 : eq(79, 21) : BOOL
86 : eq(79, 23) : BOOL
87 : eq(79, 25) : BOOL
88 : eq(79, 27) : BOOL
89 : ite(88, 10, 29) : BV:8
90 : ite(87, 10, 89) : BV:8
91 : ite(86, 10, 90) : BV:8
92 : ite(85, 10, 91) : BV:8
93 : ite(84, 10, 92) : BV:8
94 : ite(83, 10, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : ite(80, 10, 96) : BV:8
98 : bvconcat(38, 58, 78, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
=input.dst.llvm-%arr
1 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1683710935 ] -> 253, [ 1683710936; 1683710937 ] -> 0, [ 1683710938; 1683710938 ] -> 253, [ 1683710939; 1683710939 ] -> 250, [ 1683710940; 3667021499 ] -> 253, [ 3667021500; 3667021500 ] -> 1, [ 3667021501; 3667021501 ] -> 0, [ 3667021502; 4210884607 ] -> 253, [ 4210884608; 4210884611 ] -> 0, [ 4210884612; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1683710935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1683710936; 1683710939 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1683710940; 3667021499 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3667021500; 3667021503 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3667021504; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1707939243 { 0x65cd15ab +1.60222375e76 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1683710935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1683710936; 1683710939 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1683710940; 3667021499 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3667021500; 3667021503 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3667021504; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3667021503 { 0xda924ebf -627945793 -1.14302814e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2108386271
=counter_example_end
=global nodece 19 num_edges_traversed 2
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 20
=global nodece 20 nodece z3v487.ce987.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3v487.ce987 b19d71db351ff01a97de6e3bd35adcf4
=input.spec-%var-arr-1
1 : Lambda696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda697 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda697 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 71054847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71054848; 71054851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 71054852; 2483651843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2483651844; 2483651847 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2483651848; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2483651844 { 0x94098504 -1811315452 -1.7437181e169 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 71054848 { 0x43c3600 +1.47039794e137 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2067276454 { 0x7b3822a6 +1.43855738e119 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 71054847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71054848; 71054851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 71054852; 2483651843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2483651844; 2483651847 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2483651848; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 71054848 { 0x43c3600 +1.47039794e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 71054851 { 0x43c3603 +1.47039830e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2483651844 { 0x94098504 -1811315452 -1.7437181e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2483651847 { 0x94098507 -1811315449 -1.7437217e169 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2527495728
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 21
=global nodece 21 nodece z3v487.ce983.num_edges_traversed2
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce983 155c933a9653c1a29f843f58348d8eb6
=input.spec-%var-arr-1
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1498599058 { 0x5952ce92 +1.64692902e51 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 139475 { 0x220d3 +1.1662671e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 555629163 { 0x211e3a6b +1.23615777e195 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
110269796
=counter_example_end
=global nodece 21 num_edges_traversed 2
=global nodece 21 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 22
=global nodece 22 nodece z3.ce979.num_edges_traversed2
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce979 596b69cea5fbbf396a137d9a8c663bf
=input.spec-%var-arr-1
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda902 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
29 : eq(22, 28) : BOOL
30 : 157 { 0x9d -99 } : BV:8
31 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
32 : eq(22, 31) : BOOL
33 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
34 : eq(22, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
39 : eq(22, 38) : BOOL
40 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
43 : eq(22, 42) : BOOL
44 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
45 : eq(22, 44) : BOOL
46 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
47 : eq(22, 46) : BOOL
48 : 222 { 0xde -34 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda902 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
29 : eq(22, 28) : BOOL
30 : 157 { 0x9d -99 } : BV:8
31 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
32 : eq(22, 31) : BOOL
33 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
34 : eq(22, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
39 : eq(22, 38) : BOOL
40 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
43 : eq(22, 42) : BOOL
44 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
45 : eq(22, 44) : BOOL
46 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
47 : eq(22, 46) : BOOL
48 : 222 { 0xde -34 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda880 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 157 { 0x9d -99 } : BV:8
17 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
23 : eq(8, 22) : BOOL
24 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
31 : eq(8, 30) : BOOL
32 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
33 : eq(8, 32) : BOOL
34 : 222 { 0xde -34 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2418034679 ] -> 222, [ 2418034680; 2418034683 ] -> 255, [ 2418034684; 2646334975 ] -> 222, [ 2646334976; 2646334979 ] -> 0, [ 2646334980; 3245096315 ] -> 222, [ 3245096316; 3245096316 ] -> 0, [ 3245096317; 3245096317 ] -> 222, [ 3245096318; 3245096318 ] -> 187, [ 3245096319; 3245096319 ] -> 157, [ 3245096320; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda881 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 157 { 0x9d -99 } : BV:8
17 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
23 : eq(8, 22) : BOOL
24 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
31 : eq(8, 30) : BOOL
32 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
33 : eq(8, 32) : BOOL
34 : 222 { 0xde -34 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2418034679 ] -> 222, [ 2418034680; 2418034683 ] -> 255, [ 2418034684; 2646334975 ] -> 222, [ 2646334976; 2646334979 ] -> 0, [ 2646334980; 3245096315 ] -> 222, [ 3245096316; 3245096316 ] -> 0, [ 3245096317; 3245096317 ] -> 222, [ 3245096318; 3245096318 ] -> 187, [ 3245096319; 3245096319 ] -> 157, [ 3245096320; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2418034679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418034680; 2418034683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2418034684; 3245096315 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3245096316; 3245096319 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3245096320; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 82839516 { 0x4f007dc +1.87523984e138 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2418034679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418034680; 2418034683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2418034684; 3245096315 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3245096316; 3245096319 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3245096320; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1205617897
=counter_example_end
=global nodece 22 num_edges_traversed 2
=global nodece 22 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 23
=global nodece 23 nodece z3v487.ce971.num_edges_traversed1
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce971 7248a137fb96b5732469da04bb57a
=input.spec-%var-arr-1
1 : Lambda4147 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4148 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4150 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4151 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda4118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform379 : BV:32
4 : Lambda4154 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4155 : BV:32
7 : 902490623 { 0x35cae9ff +1.58526599e236 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform378 : BV:32
4 : Lambda4152 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4153 : BV:32
7 : 384666725 { 0x16ed8c65 +1.85584700e174 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3719488801
=counter_example_end
=global nodece 23 num_edges_traversed 1
=global nodece 23 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 24
=global nodece 24 nodece z3.ce967.num_edges_traversed1
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce967 7ef1c0cb8fa7464a5143e469e0ed91b6
=input.spec-%var-arr-1
1 : Lambda4165 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4166 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4170 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform383 : BV:32
4 : Lambda4173 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4174 : BV:32
7 : 1902011452 { 0x715e643c +1.73743391e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda4133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform382 : BV:32
4 : Lambda4171 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4172 : BV:32
7 : 1747658324 { 0x682b2654 +1.33710718e81 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
38613546
=counter_example_end
=global nodece 24 num_edges_traversed 1
=global nodece 24 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 25
=global nodece 25 nodece z3v487.ce1230.num_edges_traversed1
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3v487.ce1230 9360ad9253bc6941194f169812a957
=input.spec-%var-arr-1
1 : Lambda5484 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5485 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5487 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5488 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda5455 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2 { 0x2 +1.23e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform499 : BV:32
4 : Lambda5491 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5492 : BV:32
7 : 967812145 { 0x39afa431 +1.37219822e244 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform498 : BV:32
4 : Lambda5489 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5490 : BV:32
7 : 847732475 { 0x32875efb +1.5758607e230 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 805048320 { 0x2ffc1000 +1.96923828e224 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 805048319 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 805048320; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2603142724
=counter_example_end
=global nodece 25 num_edges_traversed 1
=global nodece 25 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 26
=global nodece 26 nodece z3.ce1231.num_edges_traversed1
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3.ce1231 3f2330a9b89e4df5b99b38e9b1aa9fc5
=input.spec-%var-arr-1
1 : Lambda5502 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda5503 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5506 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda5507 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform503 : BV:32
4 : Lambda5510 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5511 : BV:32
7 : 638822108 { 0x2613a6dc +1.15352964e205 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5470 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 489588244 { 0x1d2e8614 +1.36346673e187 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1193448468 { 0x47229414 +1.27014398e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform502 : BV:32
4 : Lambda5508 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5509 : BV:32
7 : 369362386 { 0x160405d2 +1.3142762e173 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483641 { 0x7ffffff9 +1.99999916e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 489588243 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 489588244; 489588247 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 489588248; 1193448467 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1193448468; 1193448471 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1193448472; 2147483640 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483641; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1193448468 { 0x47229414 +1.27014398e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1193448471 { 0x47229417 +1.27014434e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 489588244 { 0x1d2e8614 +1.36346673e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 489588247 { 0x1d2e8617 +1.36346709e187 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3965071988
=counter_example_end
=global nodece 26 num_edges_traversed 1
=global nodece 26 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 27
=global nodece 27 nodece z3.ce1252.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce1252 2df91e5365c16b2b1eb503da6e0b28
=input.spec-%var-arr-1
1 : Lambda5611 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5612 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5615 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5616 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform515 : BV:32
4 : Lambda5619 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5620 : BV:32
7 : 637899872 { 0x26059460 +1.4359054e205 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5587 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 134217728 { 0x8000000 +1.0e145 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2749900368 { 0xa3e82650 -1545066928 -1.81366920e200 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3492268856 { 0xd027cb38 -802698440 -1.31088924e33 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform514 : BV:32
4 : Lambda5617 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5618 : BV:32
7 : 570456886 { 0x22007b36 +1.376009e197 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1090519034 { 0x40fffffa +1.99999928e2 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2749900367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2749900368; 2749900371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2749900372; 3492268855 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3492268856; 3492268859 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3492268860; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3492268856 { 0xd027cb38 -802698440 -1.31088924e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3492268859 { 0xd027cb3b -802698437 -1.31088960e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2749900368 { 0xa3e82650 -1545066928 -1.81366920e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2749900371 { 0xa3e82653 -1545066925 -1.81366956e200 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
749160746
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 28
=global nodece 28 nodece z3v487.ce1253.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce1253 294470af374138d4dcc8bff82d307e2e
=input.spec-%var-arr-1
1 : Lambda5631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5634 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5635 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda5594 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform519 : BV:32
4 : Lambda5638 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5639 : BV:32
7 : 952710065 { 0x38c933b1 +1.57188999e242 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 311702768 { 0x129434f0 +1.15786552e166 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform518 : BV:32
4 : Lambda5636 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5637 : BV:32
7 : 1455665650 { 0x56c3b1f2 +1.52886795e46 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1878788672 { 0x6ffc0a40 +1.96906280e96 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 311702767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 311702768; 311702771 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 311702772; 1878788671 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1878788672; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 311702768 { 0x129434f0 +1.15786552e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 311702771 { 0x129434f3 +1.15786588e166 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1968684607
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 29
=global nodece 29 nodece z3.ce1274.num_edges_traversed1
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3.ce1274 ec80ae377c5f72ec120ee74ca813d3c
=input.spec-%var-arr-1
1 : Lambda5739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5740 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5744 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform531 : BV:32
4 : Lambda5747 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5748 : BV:32
7 : 1032590163 { 0x3d8c1353 +1.9433972e252 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5715 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 255 { 0xff +1.3039e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 256 { 0x100 +1.3051e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform530 : BV:32
4 : Lambda5745 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5746 : BV:32
7 : 479547865 { 0x1c9551d9 +1.16656029e186 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2432349743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2432349744; 2432349747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2432349748; 3237817435 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3237817436; 3237817439 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3237817440; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3237817439 { 0xc0fd2c5f -1057149857 -1.97791659e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2432349747 { 0x90fab633 -1862617549 -1.95868527e162 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
689491454
=counter_example_end
=global nodece 29 num_edges_traversed 1
=global nodece 29 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 30
=global nodece 30 nodece z3.ce1296.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce1296 d196601fbd191d5314a5eb3f8d5cc179
=input.spec-%var-arr-1
1 : Lambda5867 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5868 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5871 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5872 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform547 : BV:32
4 : Lambda5875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5876 : BV:32
7 : 110728013 { 0x699934d +1.19980776e142 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5843 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 15 { 0xf +1.178e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16 { 0x10 +1.190e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform546 : BV:32
4 : Lambda5873 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5874 : BV:32
7 : 1896464982 { 0x7109c256 +1.7624316e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483642 { 0x7ffffffa +1.99999928e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2969435763 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2969435764; 2969435767 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2969435768; 3810303603 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3810303604; 3810303607 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3810303608; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2969435767 { 0xb0fdfe77 -1325531529 -1.98432815e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3810303607 { 0xe31c9e77 -484663689 -1.22358596e71 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1655736921
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 31
=global nodece 31 nodece z3v487.ce1297.num_edges_traversed1
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce1297 9b4956977f1dd46b96fc13584cf4ca62
=input.spec-%var-arr-1
1 : Lambda5887 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5888 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5890 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5891 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda5850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 128 { 0x80 +1.1525e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform551 : BV:32
4 : Lambda5894 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5895 : BV:32
7 : 141429096 { 0x86e0968 +1.85966205e145 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 168886928 { 0xa110290 +1.13289070e149 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform550 : BV:32
4 : Lambda5892 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5893 : BV:32
7 : 165603792 { 0x9dee9d0 +1.74151039e148 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483642 { 0x7ffffffa +1.99999928e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 168886927 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 168886928; 168886931 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 168886932; 2147483641 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483642; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 168886928 { 0xa110290 +1.13289070e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 168886931 { 0xa110293 +1.13289105e149 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3097252460
=counter_example_end
=global nodece 31 num_edges_traversed 1
=global nodece 31 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 32
=global nodece 32 nodece z3.ce1318.num_edges_traversed1
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce1318 30462c3ced3a01cb6ca41f6a3b29f7
=input.spec-%var-arr-1
1 : Lambda5995 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda5996 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 4) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(8, 16) : BOOL
22 : bvule(16, 8) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 7, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda6000 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 8) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform563 : BV:32
4 : Lambda6003 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6004 : BV:32
7 : 1701503222 { 0x656ae0f6 +1.83499026e75 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5971 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(9, 1) : BOOL
11 : bvule(1, 9) : BOOL
12 : and(10, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(7, 8, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3822491572 { 0xe3d697b4 -472475724 -1.67650461e72 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 395450808 { 0x179219b8 +1.14140987e176 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform562 : BV:32
4 : Lambda6001 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6002 : BV:32
7 : 48353393 { 0x2e1d071 +1.76417362e134 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3808428032 { 0xe3000000 -486539264 -1.0e71 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 395450807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 395450808; 395450811 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 395450812; 3808428031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3808428032; 3822491571 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3822491572; 3822491575 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3822491576; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 395450808 { 0x179219b8 +1.14140987e176 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 395450811 { 0x179219bb +1.14141023e176 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3822491572 { 0xe3d697b4 -472475724 -1.67650461e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3822491575 { 0xe3d697b7 -472475721 -1.67650496e72 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
286797159
=counter_example_end
=global nodece 32 num_edges_traversed 1
=global nodece 32 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 33
=global nodece 33 nodece z3v487.ce1659.num_edges_traversed0
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(epsilon)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3v487.ce1659 ccde47fe42213473f599c57536fd7a26
=input.spec-%var-arr-1
1 : Lambda9858 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9859 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9861 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9862 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda9829 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1079 : BV:32
4 : Lambda9865 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9866 : BV:32
7 : 40226078 { 0x265cd1e +1.79532217e133 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4095190176 { 0xf417a4a0 -199777120 -1.18471145e105 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4100 { 0x1004 +1.48875e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1078 : BV:32
4 : Lambda9863 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9864 : BV:32
7 : 1213022953 { 0x484d42e9 +1.60360443e17 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 4099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4100; 4103 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4104; 4095190175 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4095190176; 4095190179 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4095190180; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4100 { 0x1004 +1.48875e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4103 { 0x1007 +1.48911e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4095190176 { 0xf417a4a0 -199777120 -1.18471145e105 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4095190179 { 0xf417a4a3 -199777117 -1.18471181e105 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1448174433
=counter_example_end
=global nodece 33 num_edges_traversed 0
=global nodece 33 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 34
=global nodece 34 nodece z3.ce1660.num_edges_traversed0
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(epsilon)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce1660 7c539a873534ab22d7a0c23024435ab0
=input.spec-%var-arr-1
1 : Lambda9876 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9877 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9880 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 524288 { 0x80000 +1.6250000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda9881 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1083 : BV:32
4 : Lambda9884 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9885 : BV:32
7 : 698839793 { 0x29a772f1 +1.30819523e212 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 524287 ] -> true, [ 524288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9844 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 524287 { 0x7ffff +1.6249988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 524288 { 0x80000 +1.6250000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2968741752 { 0xb0f36778 -1326225544 -1.90159511e226 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3122377712 { 0xba1bb3f0 -1172589584 -1.21642875e245 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1082 : BV:32
4 : Lambda9882 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9883 : BV:32
7 : 97944724 { 0x5d68494 +1.67592096e140 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2968741751 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2968741752; 2968741755 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2968741756; 3122377711 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3122377712; 3122377715 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3122377716; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3122377712 { 0xba1bb3f0 -1172589584 -1.21642875e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3122377715 { 0xba1bb3f3 -1172589581 -1.21642911e245 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2968741752 { 0xb0f36778 -1326225544 -1.90159511e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2968741755 { 0xb0f3677b -1326225541 -1.90159547e226 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
14167104
=counter_example_end
=global nodece 34 num_edges_traversed 0
=global nodece 34 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 35
=global nodece 35 nodece z3.ce1717.num_edges_traversed3
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3.ce1717 939e9d35ad74bd8ec170546c18718ea9
=nextpc_const.1
1 : 236873005 { 0xe1e652d +1.23746263e157 } : BV:32
=input.spec-%var-arr-1
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 278370198 { 0x10979796 +1.18431353e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda208 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
27 : eq(23, 26) : BOOL
28 : 229 { 0xe5 -27 } : BV:8
29 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 151 { 0x97 -105 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda207 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 278370198 { 0x10979796 +1.18431353e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda208 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
27 : eq(23, 26) : BOOL
28 : 229 { 0xe5 -27 } : BV:8
29 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
37 : eq(23, 36) : BOOL
38 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 151 { 0x97 -105 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 278370198 ] -> true, [ 278370199; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda178 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
12 : eq(8, 11) : BOOL
13 : 229 { 0xe5 -27 } : BV:8
14 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 151 { 0x97 -105 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 278370198 ] -> true, [ 278370199; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2041227923 ] -> 151, [ 2041227924; 2041227924 ] -> 0, [ 2041227925; 2041227925 ] -> 251, [ 2041227926; 2041227926 ] -> 151, [ 2041227927; 2041227927 ] -> 229, [ 2041227928; 3851942655 ] -> 151, [ 3851942656; 3851942659 ] -> 0, [ 3851942660; 4225249382 ] -> 151, [ 4225249383; 4225249383 ] -> 16, [ 4225249384; 4294967295 ] -> 151, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda179 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
12 : eq(8, 11) : BOOL
13 : 229 { 0xe5 -27 } : BV:8
14 : 2041227925 { 0x79aaaa95 +1.33333075e116 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3851942659 { 0xe597fb03 -443024637 -1.18734776e76 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3851942658 { 0xe597fb02 -443024638 -1.18734765e76 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3851942657 { 0xe597fb01 -443024639 -1.18734753e76 } : BV:32
22 : eq(8, 21) : BOOL
23 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 151 { 0x97 -105 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
=input.dst.llvm-%arr
1 : 3851942656 { 0xe597fb00 -443024640 -1.18734741e76 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2041227923 ] -> 151, [ 2041227924; 2041227924 ] -> 0, [ 2041227925; 2041227925 ] -> 251, [ 2041227926; 2041227926 ] -> 151, [ 2041227927; 2041227927 ] -> 229, [ 2041227928; 3851942655 ] -> 151, [ 3851942656; 3851942659 ] -> 0, [ 3851942660; 4225249382 ] -> 151, [ 4225249383; 4225249383 ] -> 16, [ 4225249384; 4294967295 ] -> 151, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2041227923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2041227924; 2041227927 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2041227928; 4225249379 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4225249380; 4225249383 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4225249384; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4225249380 { 0xfbd83064 -69717916 -1.68897676e120 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 278370199 { 0x10979797 +1.18431365e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 126 , m_adder -> 13), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 236873005 , 1000 , 8 ) -> 853186023, () -> 91088095, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 853186023 { 0x32da95e7 +1.70769965e230 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 19323070 { 0x126d8be +1.30348944e131 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2041227923 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2041227924; 2041227927 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2041227928; 4225249379 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4225249380; 4225249383 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4225249384; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2041227923 ] -> 151, [ 2041227924; 2041227924 ] -> 0, [ 2041227925; 2041227925 ] -> 251, [ 2041227926; 2041227926 ] -> 151, [ 2041227927; 2041227927 ] -> 229, [ 2041227928; 3851942655 ] -> 151, [ 3851942656; 3851942659 ] -> 0, [ 3851942660; 4225249382 ] -> 151, [ 4225249383; 4225249383 ] -> 16, [ 4225249384; 4294967295 ] -> 151, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4225249380 { 0xfbd83064 -69717916 -1.68897676e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4225249383 { 0xfbd83067 -69717913 -1.68897712e120 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2041227924 { 0x79aaaa94 +1.33333063e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2041227927 { 0x79aaaa97 +1.33333098e116 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 126 , m_adder -> 13), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
123546513
=counter_example_end
=global nodece 35 num_edges_traversed 3
=global nodece 35 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 36
=global nodece 36 nodece z3.ce1714.num_edges_traversed3
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3.ce1714 4fa0d32e95c4987d3b49ceb85daba
=nextpc_const.1
1 : 911306036 { 0x36516d34 +1.63614511e237 } : BV:32
=input.spec-%var-arr-1
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda276 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : ite(3, 2, 112) : BV:32
114 : lambda(1, 113) : FUNCTION[BV:32 -> BV:32]
115 : sym_const(114) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : lambda(1, 112) : FUNCTION[BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 911306036 , 1000 , 8 ) -> 648242112, () -> 1951265905, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 648242112 { 0x26a363c0 +1.27648162e206 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1749719364 { 0x684a9944 +1.58280229e81 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2615564241
=counter_example_end
=global nodece 36 num_edges_traversed 3
=global nodece 36 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 37
=global nodece 37 nodece z3.ce1711.num_edges_traversed3
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3.ce1711 4bb1ed13a7f8c01065b38ab5c79b64e
=nextpc_const.1
1 : 467152190 { 0x1bd82d3e +1.68888068e184 } : BV:32
=input.spec-%var-arr-1
1 : Lambda397 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109119 { 0x40000ff +1.3039e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda398 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 245 { 0xf5 -11 } : BV:8
29 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
32 : eq(23, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
35 : eq(23, 34) : BOOL
36 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
39 : eq(23, 38) : BOOL
40 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
41 : eq(23, 40) : BOOL
42 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
43 : eq(23, 42) : BOOL
44 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
45 : eq(23, 44) : BOOL
46 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
47 : eq(23, 46) : BOOL
48 : 4 { 0x4 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(45, 25, 49) : BV:8
51 : ite(43, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 21, 22) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 25, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 21, 22) : BV:32
86 : eq(85, 22) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 25, 48) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 25, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(21, 22) : BV:32
109 : eq(108, 22) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 25, 48) : BV:8
121 : ite(118, 25, 120) : BV:8
122 : ite(117, 25, 121) : BV:8
123 : ite(116, 25, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 25, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(18, 2, 131) : BV:32
133 : lambda(17, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(16, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda397 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67109119 { 0x40000ff +1.3039e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda398 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 245 { 0xf5 -11 } : BV:8
29 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
32 : eq(23, 31) : BOOL
33 : 1 { 0x1 } : BV:8
34 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
35 : eq(23, 34) : BOOL
36 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
39 : eq(23, 38) : BOOL
40 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
41 : eq(23, 40) : BOOL
42 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
43 : eq(23, 42) : BOOL
44 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
45 : eq(23, 44) : BOOL
46 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
47 : eq(23, 46) : BOOL
48 : 4 { 0x4 } : BV:8
49 : ite(47, 25, 48) : BV:8
50 : ite(45, 25, 49) : BV:8
51 : ite(43, 25, 50) : BV:8
52 : ite(41, 25, 51) : BV:8
53 : ite(39, 25, 52) : BV:8
54 : ite(37, 25, 53) : BV:8
55 : ite(35, 25, 54) : BV:8
56 : ite(32, 33, 55) : BV:8
57 : ite(30, 25, 56) : BV:8
58 : ite(27, 28, 57) : BV:8
59 : ite(24, 25, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 21, 22) : BV:32
62 : eq(61, 22) : BOOL
63 : eq(61, 26) : BOOL
64 : eq(61, 29) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 34) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 25, 48) : BV:8
74 : ite(71, 25, 73) : BV:8
75 : ite(70, 25, 74) : BV:8
76 : ite(69, 25, 75) : BV:8
77 : ite(68, 25, 76) : BV:8
78 : ite(67, 25, 77) : BV:8
79 : ite(66, 25, 78) : BV:8
80 : ite(65, 33, 79) : BV:8
81 : ite(64, 25, 80) : BV:8
82 : ite(63, 28, 81) : BV:8
83 : ite(62, 25, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 21, 22) : BV:32
86 : eq(85, 22) : BOOL
87 : eq(85, 26) : BOOL
88 : eq(85, 29) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 34) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 25, 48) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 25, 101) : BV:8
103 : ite(90, 25, 102) : BV:8
104 : ite(89, 33, 103) : BV:8
105 : ite(88, 25, 104) : BV:8
106 : ite(87, 28, 105) : BV:8
107 : ite(86, 25, 106) : BV:8
108 : bvadd(21, 22) : BV:32
109 : eq(108, 22) : BOOL
110 : eq(108, 26) : BOOL
111 : eq(108, 29) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 34) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 25, 48) : BV:8
121 : ite(118, 25, 120) : BV:8
122 : ite(117, 25, 121) : BV:8
123 : ite(116, 25, 122) : BV:8
124 : ite(115, 25, 123) : BV:8
125 : ite(114, 25, 124) : BV:8
126 : ite(113, 25, 125) : BV:8
127 : ite(112, 33, 126) : BV:8
128 : ite(111, 25, 127) : BV:8
129 : ite(110, 28, 128) : BV:8
130 : ite(109, 25, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(18, 2, 131) : BV:32
133 : lambda(17, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(16, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67109119 ] -> true, [ 67109120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda376 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 245 { 0xf5 -11 } : BV:8
14 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
24 : eq(8, 23) : BOOL
25 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
26 : eq(8, 25) : BOOL
27 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
28 : eq(8, 27) : BOOL
29 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
32 : eq(8, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : ite(32, 10, 33) : BV:8
35 : ite(30, 10, 34) : BV:8
36 : ite(28, 10, 35) : BV:8
37 : ite(26, 10, 36) : BV:8
38 : ite(24, 10, 37) : BV:8
39 : ite(22, 10, 38) : BV:8
40 : ite(20, 10, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(15, 10, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : ite(9, 10, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 7) : BOOL
48 : eq(46, 11) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 16) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 25) : BOOL
55 : eq(46, 27) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 10, 33) : BV:8
59 : ite(56, 10, 58) : BV:8
60 : ite(55, 10, 59) : BV:8
61 : ite(54, 10, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : ite(52, 10, 62) : BV:8
64 : ite(51, 10, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 10, 65) : BV:8
67 : ite(48, 13, 66) : BV:8
68 : ite(47, 10, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 7) : BOOL
72 : eq(70, 11) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 25) : BOOL
79 : eq(70, 27) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 10, 33) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 10, 86) : BV:8
88 : ite(75, 10, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 10, 89) : BV:8
91 : ite(72, 13, 90) : BV:8
92 : ite(71, 10, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 7) : BOOL
95 : eq(93, 11) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 25) : BOOL
102 : eq(93, 27) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 10, 33) : BV:8
106 : ite(103, 10, 105) : BV:8
107 : ite(102, 10, 106) : BV:8
108 : ite(101, 10, 107) : BV:8
109 : ite(100, 10, 108) : BV:8
110 : ite(99, 10, 109) : BV:8
111 : ite(98, 10, 110) : BV:8
112 : ite(97, 18, 111) : BV:8
113 : ite(96, 10, 112) : BV:8
114 : ite(95, 13, 113) : BV:8
115 : ite(94, 10, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67109119 ] -> true, [ 67109120; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2355436115 ] -> 4, [ 2355436116; 2355436118 ] -> 0, [ 2355436119; 2355436119 ] -> 245, [ 2355436120; 2728494147 ] -> 4, [ 2728494148; 2728494148 ] -> 0, [ 2728494149; 2728494149 ] -> 1, [ 2728494150; 2728494150 ] -> 0, [ 2728494151; 4110417919 ] -> 4, [ 4110417920; 4110417923 ] -> 0, [ 4110417924; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda377 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 245 { 0xf5 -11 } : BV:8
14 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2728494149 { 0xa2a18445 -1566473147 -1.26184904e198 } : BV:32
17 : eq(8, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 2355436118 { 0x8c651a56 -1939531178 -1.78986620e153 } : BV:32
20 : eq(8, 19) : BOOL
21 : 2355436117 { 0x8c651a55 -1939531179 -1.78986608e153 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4110417923 { 0xf5000003 -184549373 -1.35e107 } : BV:32
24 : eq(8, 23) : BOOL
25 : 2728494150 { 0xa2a18446 -1566473146 -1.26184916e198 } : BV:32
26 : eq(8, 25) : BOOL
27 : 4110417922 { 0xf5000002 -184549374 -1.23e107 } : BV:32
28 : eq(8, 27) : BOOL
29 : 4110417921 { 0xf5000001 -184549375 -1.11e107 } : BV:32
30 : eq(8, 29) : BOOL
31 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
32 : eq(8, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : ite(32, 10, 33) : BV:8
35 : ite(30, 10, 34) : BV:8
36 : ite(28, 10, 35) : BV:8
37 : ite(26, 10, 36) : BV:8
38 : ite(24, 10, 37) : BV:8
39 : ite(22, 10, 38) : BV:8
40 : ite(20, 10, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : ite(15, 10, 41) : BV:8
43 : ite(12, 13, 42) : BV:8
44 : ite(9, 10, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 6, 7) : BV:32
47 : eq(46, 7) : BOOL
48 : eq(46, 11) : BOOL
49 : eq(46, 14) : BOOL
50 : eq(46, 16) : BOOL
51 : eq(46, 19) : BOOL
52 : eq(46, 21) : BOOL
53 : eq(46, 23) : BOOL
54 : eq(46, 25) : BOOL
55 : eq(46, 27) : BOOL
56 : eq(46, 29) : BOOL
57 : eq(46, 31) : BOOL
58 : ite(57, 10, 33) : BV:8
59 : ite(56, 10, 58) : BV:8
60 : ite(55, 10, 59) : BV:8
61 : ite(54, 10, 60) : BV:8
62 : ite(53, 10, 61) : BV:8
63 : ite(52, 10, 62) : BV:8
64 : ite(51, 10, 63) : BV:8
65 : ite(50, 18, 64) : BV:8
66 : ite(49, 10, 65) : BV:8
67 : ite(48, 13, 66) : BV:8
68 : ite(47, 10, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 6, 7) : BV:32
71 : eq(70, 7) : BOOL
72 : eq(70, 11) : BOOL
73 : eq(70, 14) : BOOL
74 : eq(70, 16) : BOOL
75 : eq(70, 19) : BOOL
76 : eq(70, 21) : BOOL
77 : eq(70, 23) : BOOL
78 : eq(70, 25) : BOOL
79 : eq(70, 27) : BOOL
80 : eq(70, 29) : BOOL
81 : eq(70, 31) : BOOL
82 : ite(81, 10, 33) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 10, 86) : BV:8
88 : ite(75, 10, 87) : BV:8
89 : ite(74, 18, 88) : BV:8
90 : ite(73, 10, 89) : BV:8
91 : ite(72, 13, 90) : BV:8
92 : ite(71, 10, 91) : BV:8
93 : bvadd(6, 7) : BV:32
94 : eq(93, 7) : BOOL
95 : eq(93, 11) : BOOL
96 : eq(93, 14) : BOOL
97 : eq(93, 16) : BOOL
98 : eq(93, 19) : BOOL
99 : eq(93, 21) : BOOL
100 : eq(93, 23) : BOOL
101 : eq(93, 25) : BOOL
102 : eq(93, 27) : BOOL
103 : eq(93, 29) : BOOL
104 : eq(93, 31) : BOOL
105 : ite(104, 10, 33) : BV:8
106 : ite(103, 10, 105) : BV:8
107 : ite(102, 10, 106) : BV:8
108 : ite(101, 10, 107) : BV:8
109 : ite(100, 10, 108) : BV:8
110 : ite(99, 10, 109) : BV:8
111 : ite(98, 10, 110) : BV:8
112 : ite(97, 18, 111) : BV:8
113 : ite(96, 10, 112) : BV:8
114 : ite(95, 13, 113) : BV:8
115 : ite(94, 10, 114) : BV:8
116 : bvconcat(44, 68, 92, 115) : BV:32
117 : ite(3, 2, 116) : BV:32
118 : lambda(1, 117) : FUNCTION[BV:32 -> BV:32]
119 : sym_const(118) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
=input.dst.llvm-%arr
1 : 4110417920 { 0xf5000000 -184549376 -1.0e107 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2355436115 ] -> 4, [ 2355436116; 2355436118 ] -> 0, [ 2355436119; 2355436119 ] -> 245, [ 2355436120; 2728494147 ] -> 4, [ 2728494148; 2728494148 ] -> 0, [ 2728494149; 2728494149 ] -> 1, [ 2728494150; 2728494150 ] -> 0, [ 2728494151; 4110417919 ] -> 4, [ 4110417920; 4110417923 ] -> 0, [ 4110417924; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2355436115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2355436116; 2355436119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2355436120; 2728494147 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2728494148; 2728494151 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2728494152; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67109120 { 0x4000100 +1.3051e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 72 , m_adder -> 51), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 467152190 , 1000 , 8 ) -> 650004495, () -> 833995884, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 650004495 { 0x26be480f +1.48657405e206 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 129590049 { 0x7b96321 +1.44833767e144 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2355436115 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2355436116; 2355436119 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2355436120; 2728494147 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2728494148; 2728494151 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2728494152; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2355436115 ] -> 4, [ 2355436116; 2355436118 ] -> 0, [ 2355436119; 2355436119 ] -> 245, [ 2355436120; 2728494147 ] -> 4, [ 2728494148; 2728494148 ] -> 0, [ 2728494149; 2728494149 ] -> 1, [ 2728494150; 2728494150 ] -> 0, [ 2728494151; 4110417919 ] -> 4, [ 4110417920; 4110417923 ] -> 0, [ 4110417924; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2728494148 { 0xa2a18444 -1566473148 -1.26184892e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2728494151 { 0xa2a18447 -1566473145 -1.26184928e198 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2355436116 { 0x8c651a54 -1939531180 -1.78986597e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2355436119 { 0x8c651a57 -1939531177 -1.78986632e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 72 , m_adder -> 51), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3631879004
=counter_example_end
=global nodece 37 num_edges_traversed 3
=global nodece 37 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 38
=global nodece 38 nodece z3.ce1708.num_edges_traversed3
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce1708 161ab4cfe77b49916642022f47ad9a6
=nextpc_const.1
1 : 626832466 { 0x255cb452 +1.72425293e203 } : BV:32
=input.spec-%var-arr-1
1 : Lambda497 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4261216256 { 0xfdfd0000 -33751040 -1.97656250e124 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda498 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
30 : eq(23, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
41 : eq(23, 40) : BOOL
42 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : ite(43, 25, 44) : BV:8
46 : ite(41, 25, 45) : BV:8
47 : ite(39, 25, 46) : BV:8
48 : ite(37, 25, 47) : BV:8
49 : ite(35, 25, 48) : BV:8
50 : ite(33, 25, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 21, 22) : BV:32
56 : eq(55, 22) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 34) : BOOL
61 : eq(55, 36) : BOOL
62 : eq(55, 38) : BOOL
63 : eq(55, 40) : BOOL
64 : eq(55, 42) : BOOL
65 : ite(64, 25, 44) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 25, 66) : BV:8
68 : ite(61, 25, 67) : BV:8
69 : ite(60, 25, 68) : BV:8
70 : ite(59, 25, 69) : BV:8
71 : ite(58, 31, 70) : BV:8
72 : ite(57, 28, 71) : BV:8
73 : ite(56, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 34) : BOOL
81 : eq(75, 36) : BOOL
82 : eq(75, 38) : BOOL
83 : eq(75, 40) : BOOL
84 : eq(75, 42) : BOOL
85 : ite(84, 25, 44) : BV:8
86 : ite(83, 25, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 25, 87) : BV:8
89 : ite(80, 25, 88) : BV:8
90 : ite(79, 25, 89) : BV:8
91 : ite(78, 31, 90) : BV:8
92 : ite(77, 28, 91) : BV:8
93 : ite(76, 25, 92) : BV:8
94 : bvadd(21, 22) : BV:32
95 : eq(94, 22) : BOOL
96 : eq(94, 26) : BOOL
97 : eq(94, 29) : BOOL
98 : eq(94, 32) : BOOL
99 : eq(94, 34) : BOOL
100 : eq(94, 36) : BOOL
101 : eq(94, 38) : BOOL
102 : eq(94, 40) : BOOL
103 : eq(94, 42) : BOOL
104 : ite(103, 25, 44) : BV:8
105 : ite(102, 25, 104) : BV:8
106 : ite(101, 25, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 25, 107) : BV:8
109 : ite(98, 25, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : ite(95, 25, 111) : BV:8
113 : bvconcat(53, 73, 93, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda497 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4261216256 { 0xfdfd0000 -33751040 -1.97656250e124 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda498 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
30 : eq(23, 29) : BOOL
31 : 250 { 0xfa -6 } : BV:8
32 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
33 : eq(23, 32) : BOOL
34 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
37 : eq(23, 36) : BOOL
38 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
39 : eq(23, 38) : BOOL
40 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
41 : eq(23, 40) : BOOL
42 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : ite(43, 25, 44) : BV:8
46 : ite(41, 25, 45) : BV:8
47 : ite(39, 25, 46) : BV:8
48 : ite(37, 25, 47) : BV:8
49 : ite(35, 25, 48) : BV:8
50 : ite(33, 25, 49) : BV:8
51 : ite(30, 31, 50) : BV:8
52 : ite(27, 28, 51) : BV:8
53 : ite(24, 25, 52) : BV:8
54 : 2 { 0x2 +1.23e129 } : BV:32
55 : bvadd(54, 21, 22) : BV:32
56 : eq(55, 22) : BOOL
57 : eq(55, 26) : BOOL
58 : eq(55, 29) : BOOL
59 : eq(55, 32) : BOOL
60 : eq(55, 34) : BOOL
61 : eq(55, 36) : BOOL
62 : eq(55, 38) : BOOL
63 : eq(55, 40) : BOOL
64 : eq(55, 42) : BOOL
65 : ite(64, 25, 44) : BV:8
66 : ite(63, 25, 65) : BV:8
67 : ite(62, 25, 66) : BV:8
68 : ite(61, 25, 67) : BV:8
69 : ite(60, 25, 68) : BV:8
70 : ite(59, 25, 69) : BV:8
71 : ite(58, 31, 70) : BV:8
72 : ite(57, 28, 71) : BV:8
73 : ite(56, 25, 72) : BV:8
74 : 1 { 0x1 +1.11e129 } : BV:32
75 : bvadd(74, 21, 22) : BV:32
76 : eq(75, 22) : BOOL
77 : eq(75, 26) : BOOL
78 : eq(75, 29) : BOOL
79 : eq(75, 32) : BOOL
80 : eq(75, 34) : BOOL
81 : eq(75, 36) : BOOL
82 : eq(75, 38) : BOOL
83 : eq(75, 40) : BOOL
84 : eq(75, 42) : BOOL
85 : ite(84, 25, 44) : BV:8
86 : ite(83, 25, 85) : BV:8
87 : ite(82, 25, 86) : BV:8
88 : ite(81, 25, 87) : BV:8
89 : ite(80, 25, 88) : BV:8
90 : ite(79, 25, 89) : BV:8
91 : ite(78, 31, 90) : BV:8
92 : ite(77, 28, 91) : BV:8
93 : ite(76, 25, 92) : BV:8
94 : bvadd(21, 22) : BV:32
95 : eq(94, 22) : BOOL
96 : eq(94, 26) : BOOL
97 : eq(94, 29) : BOOL
98 : eq(94, 32) : BOOL
99 : eq(94, 34) : BOOL
100 : eq(94, 36) : BOOL
101 : eq(94, 38) : BOOL
102 : eq(94, 40) : BOOL
103 : eq(94, 42) : BOOL
104 : ite(103, 25, 44) : BV:8
105 : ite(102, 25, 104) : BV:8
106 : ite(101, 25, 105) : BV:8
107 : ite(100, 25, 106) : BV:8
108 : ite(99, 25, 107) : BV:8
109 : ite(98, 25, 108) : BV:8
110 : ite(97, 31, 109) : BV:8
111 : ite(96, 28, 110) : BV:8
112 : ite(95, 25, 111) : BV:8
113 : bvconcat(53, 73, 93, 112) : BV:32
114 : ite(18, 2, 113) : BV:32
115 : lambda(17, 114) : FUNCTION[BV:32 -> BV:32]
116 : map(16, 115) : MAP[BV:32 -> BV:32]
117 : sym_const(116) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4261216256 ] -> true, [ 4261216257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda476 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
15 : eq(8, 14) : BOOL
16 : 250 { 0xfa -6 } : BV:8
17 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
26 : eq(8, 25) : BOOL
27 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : ite(28, 10, 29) : BV:8
31 : ite(26, 10, 30) : BV:8
32 : ite(24, 10, 31) : BV:8
33 : ite(22, 10, 32) : BV:8
34 : ite(20, 10, 33) : BV:8
35 : ite(18, 10, 34) : BV:8
36 : ite(15, 16, 35) : BV:8
37 : ite(12, 13, 36) : BV:8
38 : ite(9, 10, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 6, 7) : BV:32
41 : eq(40, 7) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 19) : BOOL
46 : eq(40, 21) : BOOL
47 : eq(40, 23) : BOOL
48 : eq(40, 25) : BOOL
49 : eq(40, 27) : BOOL
50 : ite(49, 10, 29) : BV:8
51 : ite(48, 10, 50) : BV:8
52 : ite(47, 10, 51) : BV:8
53 : ite(46, 10, 52) : BV:8
54 : ite(45, 10, 53) : BV:8
55 : ite(44, 10, 54) : BV:8
56 : ite(43, 16, 55) : BV:8
57 : ite(42, 13, 56) : BV:8
58 : ite(41, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : eq(60, 17) : BOOL
65 : eq(60, 19) : BOOL
66 : eq(60, 21) : BOOL
67 : eq(60, 23) : BOOL
68 : eq(60, 25) : BOOL
69 : eq(60, 27) : BOOL
70 : ite(69, 10, 29) : BV:8
71 : ite(68, 10, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : ite(66, 10, 72) : BV:8
74 : ite(65, 10, 73) : BV:8
75 : ite(64, 10, 74) : BV:8
76 : ite(63, 16, 75) : BV:8
77 : ite(62, 13, 76) : BV:8
78 : ite(61, 10, 77) : BV:8
79 : bvadd(6, 7) : BV:32
80 : eq(79, 7) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 17) : BOOL
84 : eq(79, 19) : BOOL
85 : eq(79, 21) : BOOL
86 : eq(79, 23) : BOOL
87 : eq(79, 25) : BOOL
88 : eq(79, 27) : BOOL
89 : ite(88, 10, 29) : BV:8
90 : ite(87, 10, 89) : BV:8
91 : ite(86, 10, 90) : BV:8
92 : ite(85, 10, 91) : BV:8
93 : ite(84, 10, 92) : BV:8
94 : ite(83, 10, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : ite(80, 10, 96) : BV:8
98 : bvconcat(38, 58, 78, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : ite(3, 2, 99) : BV:32
101 : lambda(1, 100) : FUNCTION[BV:32 -> BV:32]
102 : sym_const(101) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4261216256 ] -> true, [ 4261216257; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1683710935 ] -> 253, [ 1683710936; 1683710937 ] -> 0, [ 1683710938; 1683710938 ] -> 253, [ 1683710939; 1683710939 ] -> 250, [ 1683710940; 3667021499 ] -> 253, [ 3667021500; 3667021500 ] -> 1, [ 3667021501; 3667021501 ] -> 0, [ 3667021502; 4210884607 ] -> 253, [ 4210884608; 4210884611 ] -> 0, [ 4210884612; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda477 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
15 : eq(8, 14) : BOOL
16 : 250 { 0xfa -6 } : BV:8
17 : 3667021501 { 0xda924ebd -627945795 -1.14302790e54 } : BV:32
18 : eq(8, 17) : BOOL
19 : 1683710937 { 0x645b63d9 +1.71398460e73 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4210884611 { 0xfafd0003 -84082685 -1.97656285e118 } : BV:32
22 : eq(8, 21) : BOOL
23 : 4210884610 { 0xfafd0002 -84082686 -1.97656273e118 } : BV:32
24 : eq(8, 23) : BOOL
25 : 4210884609 { 0xfafd0001 -84082687 -1.97656261e118 } : BV:32
26 : eq(8, 25) : BOOL
27 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : ite(28, 10, 29) : BV:8
31 : ite(26, 10, 30) : BV:8
32 : ite(24, 10, 31) : BV:8
33 : ite(22, 10, 32) : BV:8
34 : ite(20, 10, 33) : BV:8
35 : ite(18, 10, 34) : BV:8
36 : ite(15, 16, 35) : BV:8
37 : ite(12, 13, 36) : BV:8
38 : ite(9, 10, 37) : BV:8
39 : 2 { 0x2 +1.23e129 } : BV:32
40 : bvadd(39, 6, 7) : BV:32
41 : eq(40, 7) : BOOL
42 : eq(40, 11) : BOOL
43 : eq(40, 14) : BOOL
44 : eq(40, 17) : BOOL
45 : eq(40, 19) : BOOL
46 : eq(40, 21) : BOOL
47 : eq(40, 23) : BOOL
48 : eq(40, 25) : BOOL
49 : eq(40, 27) : BOOL
50 : ite(49, 10, 29) : BV:8
51 : ite(48, 10, 50) : BV:8
52 : ite(47, 10, 51) : BV:8
53 : ite(46, 10, 52) : BV:8
54 : ite(45, 10, 53) : BV:8
55 : ite(44, 10, 54) : BV:8
56 : ite(43, 16, 55) : BV:8
57 : ite(42, 13, 56) : BV:8
58 : ite(41, 10, 57) : BV:8
59 : 1 { 0x1 +1.11e129 } : BV:32
60 : bvadd(59, 6, 7) : BV:32
61 : eq(60, 7) : BOOL
62 : eq(60, 11) : BOOL
63 : eq(60, 14) : BOOL
64 : eq(60, 17) : BOOL
65 : eq(60, 19) : BOOL
66 : eq(60, 21) : BOOL
67 : eq(60, 23) : BOOL
68 : eq(60, 25) : BOOL
69 : eq(60, 27) : BOOL
70 : ite(69, 10, 29) : BV:8
71 : ite(68, 10, 70) : BV:8
72 : ite(67, 10, 71) : BV:8
73 : ite(66, 10, 72) : BV:8
74 : ite(65, 10, 73) : BV:8
75 : ite(64, 10, 74) : BV:8
76 : ite(63, 16, 75) : BV:8
77 : ite(62, 13, 76) : BV:8
78 : ite(61, 10, 77) : BV:8
79 : bvadd(6, 7) : BV:32
80 : eq(79, 7) : BOOL
81 : eq(79, 11) : BOOL
82 : eq(79, 14) : BOOL
83 : eq(79, 17) : BOOL
84 : eq(79, 19) : BOOL
85 : eq(79, 21) : BOOL
86 : eq(79, 23) : BOOL
87 : eq(79, 25) : BOOL
88 : eq(79, 27) : BOOL
89 : ite(88, 10, 29) : BV:8
90 : ite(87, 10, 89) : BV:8
91 : ite(86, 10, 90) : BV:8
92 : ite(85, 10, 91) : BV:8
93 : ite(84, 10, 92) : BV:8
94 : ite(83, 10, 93) : BV:8
95 : ite(82, 16, 94) : BV:8
96 : ite(81, 13, 95) : BV:8
97 : ite(80, 10, 96) : BV:8
98 : bvconcat(38, 58, 78, 97) : BV:32
99 : ite(3, 2, 98) : BV:32
100 : lambda(1, 99) : FUNCTION[BV:32 -> BV:32]
101 : sym_const(100) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
=input.dst.llvm-%arr
1 : 4210884608 { 0xfafd0000 -84082688 -1.97656250e118 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1683710935 ] -> 253, [ 1683710936; 1683710937 ] -> 0, [ 1683710938; 1683710938 ] -> 253, [ 1683710939; 1683710939 ] -> 250, [ 1683710940; 3667021499 ] -> 253, [ 3667021500; 3667021500 ] -> 1, [ 3667021501; 3667021501 ] -> 0, [ 3667021502; 4210884607 ] -> 253, [ 4210884608; 4210884611 ] -> 0, [ 4210884612; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1683710935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1683710936; 1683710939 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1683710940; 3667021499 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3667021500; 3667021503 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3667021504; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4261216257 { 0xfdfd0001 -33751039 -1.97656261e124 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 172 , m_adder -> 255), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 626832466 , 1000 , 8 ) -> 582041571, () -> 1429707282, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 582041571 { 0x22b13fe3 +1.38476216e198 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1707939243 { 0x65cd15ab +1.60222375e76 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1683710935 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1683710936; 1683710939 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1683710940; 3667021499 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3667021500; 3667021503 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3667021504; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1683710935 ] -> 253, [ 1683710936; 1683710937 ] -> 0, [ 1683710938; 1683710938 ] -> 253, [ 1683710939; 1683710939 ] -> 250, [ 1683710940; 3667021499 ] -> 253, [ 3667021500; 3667021500 ] -> 1, [ 3667021501; 3667021501 ] -> 0, [ 3667021502; 4210884607 ] -> 253, [ 4210884608; 4210884611 ] -> 0, [ 4210884612; 4294967295 ] -> 253, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3667021500 { 0xda924ebc -627945796 -1.14302778e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3667021503 { 0xda924ebf -627945793 -1.14302814e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1683710936 { 0x645b63d8 +1.71398448e73 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1683710939 { 0x645b63db +1.71398484e73 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 172 , m_adder -> 255), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
932713027
=counter_example_end
=global nodece 38 num_edges_traversed 3
=global nodece 38 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 39
=global nodece 39 nodece z3v487.ce1705.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3v487.ce1705 e176c59f33dbf8d6884a6fdcb282ebd7
=nextpc_const.1
1 : 781519548 { 0x2e950abc +1.16439008e222 } : BV:32
=input.spec-%var-arr-1
1 : Lambda696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda697 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda697 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 71054847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71054848; 71054851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 71054852; 2483651843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2483651844; 2483651847 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2483651848; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2483651844 { 0x94098504 -1811315452 -1.7437181e169 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 71054848 { 0x43c3600 +1.47039794e137 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 98 , m_adder -> 106), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 781519548 , 1000 , 8 ) -> 2079996730, () -> 1853188596, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2079996730 { 0x7bfa3b3a +1.95493245e120 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2067276454 { 0x7b3822a6 +1.43855738e119 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 71054847 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 71054848; 71054851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 71054852; 2483651843 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2483651844; 2483651847 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2483651848; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 71054848 { 0x43c3600 +1.47039794e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 71054851 { 0x43c3603 +1.47039830e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2483651844 { 0x94098504 -1811315452 -1.7437181e169 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2483651847 { 0x94098507 -1811315449 -1.7437217e169 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 98 , m_adder -> 106), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2279023236
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 40
=global nodece 40 nodece z3v487.ce1702.num_edges_traversed3
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3v487.ce1702 22f229f24d5db9eeff5988f2fc7af782
=nextpc_const.1
1 : 1415873585 { 0x54648431 +1.78528416e41 } : BV:32
=input.spec-%var-arr-1
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1415873585 , 1000 , 8 ) -> 1418039576, () -> 1121012526, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1418039576 { 0x54859118 +1.4349040e42 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1498599058 { 0x5952ce92 +1.64692902e51 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 139475 { 0x220d3 +1.1662671e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 555629163 { 0x211e3a6b +1.23615777e195 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2065169016
=counter_example_end
=global nodece 40 num_edges_traversed 3
=global nodece 40 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 41
=global nodece 41 nodece z3.ce1699.num_edges_traversed3
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3.ce1699 4286b31ba46a2c20817dab5756331e16
=nextpc_const.1
1 : 803236384 { 0x2fe06a20 +1.75323867e224 } : BV:32
=input.spec-%var-arr-1
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda902 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
29 : eq(22, 28) : BOOL
30 : 157 { 0x9d -99 } : BV:8
31 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
32 : eq(22, 31) : BOOL
33 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
34 : eq(22, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
39 : eq(22, 38) : BOOL
40 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
43 : eq(22, 42) : BOOL
44 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
45 : eq(22, 44) : BOOL
46 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
47 : eq(22, 46) : BOOL
48 : 222 { 0xde -34 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda901 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda902 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
29 : eq(22, 28) : BOOL
30 : 157 { 0x9d -99 } : BV:8
31 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
32 : eq(22, 31) : BOOL
33 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
34 : eq(22, 33) : BOOL
35 : 187 { 0xbb -69 } : BV:8
36 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
39 : eq(22, 38) : BOOL
40 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
41 : eq(22, 40) : BOOL
42 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
43 : eq(22, 42) : BOOL
44 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
45 : eq(22, 44) : BOOL
46 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
47 : eq(22, 46) : BOOL
48 : 222 { 0xde -34 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda880 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 157 { 0x9d -99 } : BV:8
17 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
23 : eq(8, 22) : BOOL
24 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
31 : eq(8, 30) : BOOL
32 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
33 : eq(8, 32) : BOOL
34 : 222 { 0xde -34 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2418034679 ] -> 222, [ 2418034680; 2418034683 ] -> 255, [ 2418034684; 2646334975 ] -> 222, [ 2646334976; 2646334979 ] -> 0, [ 2646334980; 3245096315 ] -> 222, [ 3245096316; 3245096316 ] -> 0, [ 3245096317; 3245096317 ] -> 222, [ 3245096318; 3245096318 ] -> 187, [ 3245096319; 3245096319 ] -> 157, [ 3245096320; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda881 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
15 : eq(8, 14) : BOOL
16 : 157 { 0x9d -99 } : BV:8
17 : 2418034681 { 0x902047f9 -1876932615 -1.25219643e161 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3245096318 { 0xc16c3d7e -1049870978 -1.84562659e3 } : BV:32
20 : eq(8, 19) : BOOL
21 : 187 { 0xbb -69 } : BV:8
22 : 2646334979 { 0x9dbbde03 -1648632317 -1.46771275e188 } : BV:32
23 : eq(8, 22) : BOOL
24 : 2418034682 { 0x902047fa -1876932614 -1.25219655e161 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2646334978 { 0x9dbbde02 -1648632318 -1.46771264e188 } : BV:32
27 : eq(8, 26) : BOOL
28 : 2646334977 { 0x9dbbde01 -1648632319 -1.46771252e188 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
31 : eq(8, 30) : BOOL
32 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
33 : eq(8, 32) : BOOL
34 : 222 { 0xde -34 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 2646334976 { 0x9dbbde00 -1648632320 -1.46771240e188 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2418034679 ] -> 222, [ 2418034680; 2418034683 ] -> 255, [ 2418034684; 2646334975 ] -> 222, [ 2646334976; 2646334979 ] -> 0, [ 2646334980; 3245096315 ] -> 222, [ 3245096316; 3245096316 ] -> 0, [ 3245096317; 3245096317 ] -> 222, [ 3245096318; 3245096318 ] -> 187, [ 3245096319; 3245096319 ] -> 157, [ 3245096320; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2418034679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418034680; 2418034683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2418034684; 3245096315 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3245096316; 3245096319 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3245096320; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 106 , m_adder -> 110), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 803236384 , 1000 , 8 ) -> 1185442816, () -> 1543503184, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1185442816 { 0x46a86c00 +1.31579589e14 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 82839516 { 0x4f007dc +1.87523984e138 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2418034679 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2418034680; 2418034683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2418034684; 3245096315 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3245096316; 3245096319 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3245096320; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2418034679 ] -> 222, [ 2418034680; 2418034683 ] -> 255, [ 2418034684; 2646334975 ] -> 222, [ 2646334976; 2646334979 ] -> 0, [ 2646334980; 3245096315 ] -> 222, [ 3245096316; 3245096316 ] -> 0, [ 3245096317; 3245096317 ] -> 222, [ 3245096318; 3245096318 ] -> 187, [ 3245096319; 3245096319 ] -> 157, [ 3245096320; 4294967295 ] -> 222, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2418034680 { 0x902047f8 -1876932616 -1.25219631e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2418034683 { 0x902047fb -1876932613 -1.25219666e161 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3245096316 { 0xc16c3d7c -1049870980 -1.84562635e3 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3245096319 { 0xc16c3d7f -1049870977 -1.84562671e3 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 106 , m_adder -> 110), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4183034029
=counter_example_end
=global nodece 41 num_edges_traversed 3
=global nodece 41 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 42
=global nodece 42 nodece z3v487.ce1696.num_edges_traversed2
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3v487.ce1696 31a1a0d1ee1abeaaeeb6af4e42ad4f
=nextpc_const.1
1 : 2014564321 { 0x7813cfe1 +1.15478146e113 } : BV:32
=input.spec-%var-arr-1
1 : Lambda4147 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4148 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4150 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4151 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda4118 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform379 : BV:32
4 : Lambda4154 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4155 : BV:32
7 : 902490623 { 0x35cae9ff +1.58526599e236 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 15 , m_adder -> 246), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2014564321 , 1000 , 8 ) -> 526571828, () -> 1205785014, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform378 : BV:32
4 : Lambda4152 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4153 : BV:32
7 : 384666725 { 0x16ed8c65 +1.85584700e174 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 526571828 { 0x1f62d934 +1.77225351e191 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 15 , m_adder -> 246), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4124708197
=counter_example_end
=global nodece 42 num_edges_traversed 2
=global nodece 42 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 43
=global nodece 43 nodece z3.ce1693.num_edges_traversed2
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(epsilon)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3.ce1693 39cba7b983cf69c588d5e0748985ea33
=nextpc_const.1
1 : 1781603057 { 0x6a311af1 +1.38363468e85 } : BV:32
=input.spec-%var-arr-1
1 : Lambda4165 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4166 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda4169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda4170 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform383 : BV:32
4 : Lambda4173 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4174 : BV:32
7 : 1902011452 { 0x715e643c +1.73743391e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda4133 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 79 , m_adder -> 50), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1781603057 , 1000 , 8 ) -> 205460583, () -> 515276368, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform382 : BV:32
4 : Lambda4171 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda4172 : BV:32
7 : 1747658324 { 0x682b2654 +1.33710718e81 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 205460583 { 0xc3f1467 +1.49281013e153 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 79 , m_adder -> 50), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3044674782
=counter_example_end
=global nodece 43 num_edges_traversed 2
=global nodece 43 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 44
=global nodece 44 nodece z3v487.ce1690.num_edges_traversed2
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce1690 a9cd13bb26edd940cdf8bb4813f2abe
=nextpc_const.1
1 : 1024120203 { 0x3d0ad58b +1.8464181e251 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5484 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5485 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5487 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5488 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda5455 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2 { 0x2 +1.23e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform499 : BV:32
4 : Lambda5491 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5492 : BV:32
7 : 967812145 { 0x39afa431 +1.37219822e244 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 149 , m_adder -> 123), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1024120203 , 1000 , 8 ) -> 682140196, () -> 111184068, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform498 : BV:32
4 : Lambda5489 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5490 : BV:32
7 : 847732475 { 0x32875efb +1.5758607e230 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 682140196 { 0x28a8a224 +1.31744813e210 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 805048319 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 805048320; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 149 , m_adder -> 123), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
244860248
=counter_example_end
=global nodece 44 num_edges_traversed 2
=global nodece 44 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 45
=global nodece 45 nodece z3.ce1687.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce1687 11408fe330c89acead2a71b2d18ce287
=nextpc_const.1
1 : 1555817383 { 0x5cbbe3a7 +1.46788489e58 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5502 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda5503 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5506 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda5507 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform503 : BV:32
4 : Lambda5510 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5511 : BV:32
7 : 638822108 { 0x2613a6dc +1.15352964e205 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5470 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 489588244 { 0x1d2e8614 +1.36346673e187 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1193448468 { 0x47229414 +1.27014398e15 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 87 , m_adder -> 152), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1555817383 , 1000 , 8 ) -> 1806627112, () -> 902770904, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform502 : BV:32
4 : Lambda5508 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5509 : BV:32
7 : 369362386 { 0x160405d2 +1.3142762e173 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1806627112 { 0x6baef128 +1.36673450e88 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 489588243 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 489588244; 489588247 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 489588248; 1193448467 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1193448468; 1193448471 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1193448472; 2147483640 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483641; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1193448468 { 0x47229414 +1.27014398e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1193448471 { 0x47229417 +1.27014434e15 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 489588244 { 0x1d2e8614 +1.36346673e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 489588247 { 0x1d2e8617 +1.36346709e187 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 87 , m_adder -> 152), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
681801352
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 46
=global nodece 46 nodece z3.ce1684.num_edges_traversed2
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3.ce1684 34245b1f77f25695cd7ae4ed94f83b
=nextpc_const.1
1 : 1075593351 { 0x401c4087 +1.22071921e1 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5611 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5612 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5615 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134217728 { 0x8000000 +1.0e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5616 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform515 : BV:32
4 : Lambda5619 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5620 : BV:32
7 : 637899872 { 0x26059460 +1.4359054e205 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134217727 ] -> true, [ 134217728; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5587 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 134217727 { 0x7ffffff +1.99999988e144 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 134217728 { 0x8000000 +1.0e145 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2749900368 { 0xa3e82650 -1545066928 -1.81366920e200 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3492268856 { 0xd027cb38 -802698440 -1.31088924e33 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134217728 { 0x8000000 +1.0e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 186 , m_adder -> 133), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1075593351 , 1000 , 8 ) -> 750399057, () -> 1665970493, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform514 : BV:32
4 : Lambda5617 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5618 : BV:32
7 : 570456886 { 0x22007b36 +1.376009e197 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 750399057 { 0x2cba2e51 +1.45453846e218 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2749900367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2749900368; 2749900371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2749900372; 3492268855 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3492268856; 3492268859 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3492268860; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3492268856 { 0xd027cb38 -802698440 -1.31088924e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3492268859 { 0xd027cb3b -802698437 -1.31088960e33 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2749900368 { 0xa3e82650 -1545066928 -1.81366920e200 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2749900371 { 0xa3e82653 -1545066925 -1.81366956e200 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 186 , m_adder -> 133), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3792679902
=counter_example_end
=global nodece 46 num_edges_traversed 2
=global nodece 46 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 47
=global nodece 47 nodece z3v487.ce1681.num_edges_traversed2
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce1681 ea1c8ee1ffa71d21679e5de8735a6a
=nextpc_const.1
1 : 1625073286 { 0x60dca686 +1.72383189e66 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5634 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5635 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda5594 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform519 : BV:32
4 : Lambda5638 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5639 : BV:32
7 : 952710065 { 0x38c933b1 +1.57188999e242 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 311702768 { 0x129434f0 +1.15786552e166 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 82), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1625073286 , 1000 , 8 ) -> 282750628, () -> 285889360, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform518 : BV:32
4 : Lambda5636 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5637 : BV:32
7 : 1455665650 { 0x56c3b1f2 +1.52886795e46 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 282750628 { 0x10da6ea4 +1.70650148e162 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 311702767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 311702768; 311702771 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 311702772; 1878788671 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1878788672; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 311702768 { 0x129434f0 +1.15786552e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 311702771 { 0x129434f3 +1.15786588e166 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 82), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1108696739
=counter_example_end
=global nodece 47 num_edges_traversed 2
=global nodece 47 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 48
=global nodece 48 nodece z3.ce1678.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce1678 cfc8433e129f923622cd3c6da7e35da
=nextpc_const.1
1 : 1819721178 { 0x6c76bdda +1.92766880e89 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5740 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5744 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform531 : BV:32
4 : Lambda5747 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5748 : BV:32
7 : 1032590163 { 0x3d8c1353 +1.9433972e252 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5715 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 255 { 0xff +1.3039e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 256 { 0x100 +1.3051e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1819721178 , 1000 , 8 ) -> 2050431808, () -> 887420062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform530 : BV:32
4 : Lambda5745 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5746 : BV:32
7 : 479547865 { 0x1c9551d9 +1.16656029e186 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2050431808 { 0x7a371b40 +1.43051910e117 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2432349743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2432349744; 2432349747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2432349748; 3237817435 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3237817436; 3237817439 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3237817440; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3237817439 { 0xc0fd2c5f -1057149857 -1.97791659e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2432349747 { 0x90fab633 -1862617549 -1.95868527e162 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
947947378
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 49
=global nodece 49 nodece z3.ce1675.num_edges_traversed2
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(epsilon)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce1675 672b88af1251db7b049d79dc5d540b0
=nextpc_const.1
1 : 311378148 { 0x128f40e4 +1.11916780e166 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5867 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5868 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5871 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5872 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform547 : BV:32
4 : Lambda5875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5876 : BV:32
7 : 110728013 { 0x699934d +1.19980776e142 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5843 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 15 { 0xf +1.178e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16 { 0x10 +1.190e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 311378148 , 1000 , 8 ) -> 123433208, () -> 498536062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform546 : BV:32
4 : Lambda5873 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5874 : BV:32
7 : 1896464982 { 0x7109c256 +1.7624316e99 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 123433208 { 0x75b70f8 +1.71438503e143 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2969435763 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2969435764; 2969435767 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2969435768; 3810303603 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3810303604; 3810303607 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3810303608; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2969435767 { 0xb0fdfe77 -1325531529 -1.98432815e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3810303607 { 0xe31c9e77 -484663689 -1.22358596e71 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2397947677
=counter_example_end
=global nodece 49 num_edges_traversed 2
=global nodece 49 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 50
=global nodece 50 nodece z3v487.ce1672.num_edges_traversed2
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3v487.ce1672 ab4560ddd72a670fee2658f1bf73f42
=nextpc_const.1
1 : 1934072013 { 0x734798cd +1.55935060e103 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5887 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5888 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5890 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 127 { 0x7f +1.1513e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 128 { 0x80 +1.1525e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5891 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda5850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 127 { 0x7f +1.1513e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 128 { 0x80 +1.1525e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform551 : BV:32
4 : Lambda5894 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5895 : BV:32
7 : 141429096 { 0x86e0968 +1.85966205e145 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 127 ] -> true, [ 128; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 168886928 { 0xa110290 +1.13289070e149 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 178 , m_adder -> 122), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1934072013 , 1000 , 8 ) -> 597540181, () -> 1444087900, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform550 : BV:32
4 : Lambda5892 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5893 : BV:32
7 : 165603792 { 0x9dee9d0 +1.74151039e148 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 597540181 { 0x239dbd55 +1.23234045e200 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 168886927 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 168886928; 168886931 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 168886932; 2147483641 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483642; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 168886928 { 0xa110290 +1.13289070e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 168886931 { 0xa110293 +1.13289105e149 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 178 , m_adder -> 122), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2492874496
=counter_example_end
=global nodece 50 num_edges_traversed 2
=global nodece 50 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 51
=global nodece 51 nodece z3.ce1669.num_edges_traversed2
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3.ce1669 226ecdc318a9ca577591c88883bcd0dd
=nextpc_const.1
1 : 481104318 { 0x1cad11be +1.35210394e186 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5995 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda5996 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 4) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(8, 16) : BOOL
22 : bvule(16, 8) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 7, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda6000 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 8) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform563 : BV:32
4 : Lambda6003 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6004 : BV:32
7 : 1701503222 { 0x656ae0f6 +1.83499026e75 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5971 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(9, 1) : BOOL
11 : bvule(1, 9) : BOOL
12 : and(10, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(7, 8, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3822491572 { 0xe3d697b4 -472475724 -1.67650461e72 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 395450808 { 0x179219b8 +1.14140987e176 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 234 , m_adder -> 190), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 481104318 , 1000 , 8 ) -> 884729378, () -> 904962098, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform562 : BV:32
4 : Lambda6001 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6002 : BV:32
7 : 48353393 { 0x2e1d071 +1.76417362e134 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 884729378 { 0x34bbe622 +1.46796059e234 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 395450807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 395450808; 395450811 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 395450812; 3808428031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3808428032; 3822491571 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3822491572; 3822491575 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3822491576; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 395450808 { 0x179219b8 +1.14140987e176 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 395450811 { 0x179219bb +1.14141023e176 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3822491572 { 0xe3d697b4 -472475724 -1.67650461e72 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3822491575 { 0xe3d697b7 -472475721 -1.67650496e72 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 234 , m_adder -> 190), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2601161547
=counter_example_end
=global nodece 51 num_edges_traversed 2
=global nodece 51 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 52
=global nodece 52 nodece z3.ce1964.num_edges_traversed1
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3.ce1964 eaa3f27a19f77c17d7ad8f3c5eefed47
=nextpc_const.1
1 : 389999839 { 0x173eecdf +1.49160373e175 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10890 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10891 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10894 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10895 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1175 : BV:32
4 : Lambda10898 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10899 : BV:32
7 : 2050480534 { 0x7a37d996 +1.43632769e117 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda10866 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 665915792 { 0x27b11190 +1.38334846e208 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1138030816 { 0x43d4f8e0 +1.66384506e8 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 93 , m_adder -> 88), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 389999839 , 1000 , 8 ) -> 474403146, () -> 862820891, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1174 : BV:32
4 : Lambda10896 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10897 : BV:32
7 : 1067074643 { 0x3f9a4453 +1.20521008e0 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 474403146 { 0x1c46d14a +1.55326199e185 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 665915791 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 665915792; 665915795 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 665915796; 1138030815 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1138030816; 1138030819 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1138030820; 4281335807 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4281335808; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1138030816 { 0x43d4f8e0 +1.66384506e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1138030819 { 0x43d4f8e3 +1.66384541e8 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 665915792 { 0x27b11190 +1.38334846e208 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 665915795 { 0x27b11193 +1.38334882e208 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 93 , m_adder -> 88), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1280519114
=counter_example_end
=global nodece 52 num_edges_traversed 1
=global nodece 52 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 53
=global nodece 53 nodece z3v487.ce2212.num_edges_traversed0
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce2212 907e83722521e43eff96543864a9c6
=input.spec-%var-arr-1
1 : Lambda15262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15263 : BV:32
18 : eq(17, 2) : BOOL
19 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
27 : eq(22, 26) : BOOL
28 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
25 : eq(20, 24) : BOOL
26 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1747 : BV:32
4 : Lambda15269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15270 : BV:32
7 : 1592708970 { 0x5eeecf6a +1.86570477e62 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda15251 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
12 : eq(7, 11) : BOOL
13 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1746 : BV:32
4 : Lambda15267 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15268 : BV:32
7 : 135777261 { 0x817cbed +1.18591082e145 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741827 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741828; 1073741831 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741832; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741831 { 0x40000007 +1.83e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
213231677
=counter_example_end
=global nodece 53 num_edges_traversed 0
=global nodece 53 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 54
=global nodece 54 nodece z3.ce2322.num_edges_traversed4
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce2322 3a26448312e8c7df49e34771f46eb
=nextpc_const.1
1 : 911306036 { 0x36516d34 +1.63614511e237 } : BV:32
=input.spec-%var-arr-1
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda276 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : ite(3, 2, 112) : BV:32
114 : lambda(1, 113) : FUNCTION[BV:32 -> BV:32]
115 : sym_const(114) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> 0, [ 4; 648242111 ] -> 96, [ 648242112; 648242112 ] -> 0, [ 648242113; 648242113 ] -> 0, [ 648242114; 648242114 ] -> 0, [ 648242115; 648242115 ] -> 0, [ 648242116; 648242116 ] -> 0, [ 648242117; 648242117 ] -> 0, [ 648242118; 648242118 ] -> 0, [ 648242119; 648242119 ] -> 0, [ 648242120; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : lambda(1, 112) : FUNCTION[BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 911306036 , 1000 , 8 ) -> 648242112, () -> 1951265905, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1782 : BV:32
5 : Lambda15339 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15340 : BV:32
8 : sum(3, 2, 4) : SUM[UNIT,BV:32]
9 : prod(3, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(3, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1749719365 { 0x684a9945 +1.58280241e81 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 648242111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 648242112; 648242119 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 648242120; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 648242112 { 0x26a363c0 +1.27648162e206 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2615564241
=counter_example_end
=global nodece 54 num_edges_traversed 4
=global nodece 54 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce2343.num_edges_traversed5
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce2343 224ed983b4ec1af1fba267c453032
=nextpc_const.1
1 : 911306036 { 0x36516d34 +1.63614511e237 } : BV:32
=input.spec-%var-arr-1
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda276 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : ite(3, 2, 112) : BV:32
114 : lambda(1, 113) : FUNCTION[BV:32 -> BV:32]
115 : sym_const(114) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> 0, [ 4; 648242111 ] -> 96, [ 648242112; 648242112 ] -> 0, [ 648242113; 648242113 ] -> 0, [ 648242114; 648242114 ] -> 0, [ 648242115; 648242115 ] -> 0, [ 648242116; 648242116 ] -> 0, [ 648242117; 648242117 ] -> 0, [ 648242118; 648242118 ] -> 0, [ 648242119; 648242119 ] -> 0, [ 648242120; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : lambda(1, 112) : FUNCTION[BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 911306036 , 1000 , 8 ) -> 648242112, () -> 1951265905, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1782 : BV:32
5 : Lambda15339 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15340 : BV:32
8 : sum(3, 2, 4) : SUM[UNIT,BV:32]
9 : prod(3, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(3, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1749719365 { 0x684a9945 +1.58280241e81 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 648242111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 648242112; 648242119 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 648242120; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 648242112 { 0x26a363c0 +1.27648162e206 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2615564241
=counter_example_end
=global nodece 55 num_edges_traversed 5
=global nodece 55 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 56
=global nodece 56 nodece z3.ce2353.num_edges_traversed6
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce2353 21b5fe31f8321f7ab6ea2521e68d853e
=nextpc_const.1
1 : 911306036 { 0x36516d34 +1.63614511e237 } : BV:32
=input.spec-%var-arr-1
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda297 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 6331391 { 0x609bff +1.75476062e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
29 : eq(22, 28) : BOOL
30 : 156 { 0x9c -100 } : BV:8
31 : eq(22, 19) : BOOL
32 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
33 : eq(22, 32) : BOOL
34 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
35 : eq(22, 34) : BOOL
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : eq(22, 36) : BOOL
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : eq(22, 38) : BOOL
40 : eq(22, 2) : BOOL
41 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
42 : eq(22, 41) : BOOL
43 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
44 : eq(22, 43) : BOOL
45 : 96 { 0x60 } : BV:8
46 : ite(44, 25, 45) : BV:8
47 : ite(42, 25, 46) : BV:8
48 : ite(40, 25, 47) : BV:8
49 : ite(39, 25, 48) : BV:8
50 : ite(37, 25, 49) : BV:8
51 : ite(35, 25, 50) : BV:8
52 : ite(33, 25, 51) : BV:8
53 : ite(31, 25, 52) : BV:8
54 : ite(29, 30, 53) : BV:8
55 : ite(27, 25, 54) : BV:8
56 : ite(24, 25, 55) : BV:8
57 : bvadd(38, 21, 2) : BV:32
58 : eq(57, 23) : BOOL
59 : eq(57, 26) : BOOL
60 : eq(57, 28) : BOOL
61 : eq(57, 19) : BOOL
62 : eq(57, 32) : BOOL
63 : eq(57, 34) : BOOL
64 : eq(57, 36) : BOOL
65 : eq(57, 38) : BOOL
66 : eq(57, 2) : BOOL
67 : eq(57, 41) : BOOL
68 : eq(57, 43) : BOOL
69 : ite(68, 25, 45) : BV:8
70 : ite(67, 25, 69) : BV:8
71 : ite(66, 25, 70) : BV:8
72 : ite(65, 25, 71) : BV:8
73 : ite(64, 25, 72) : BV:8
74 : ite(63, 25, 73) : BV:8
75 : ite(62, 25, 74) : BV:8
76 : ite(61, 25, 75) : BV:8
77 : ite(60, 30, 76) : BV:8
78 : ite(59, 25, 77) : BV:8
79 : ite(58, 25, 78) : BV:8
80 : bvadd(36, 21, 2) : BV:32
81 : eq(80, 23) : BOOL
82 : eq(80, 26) : BOOL
83 : eq(80, 28) : BOOL
84 : eq(80, 19) : BOOL
85 : eq(80, 32) : BOOL
86 : eq(80, 34) : BOOL
87 : eq(80, 36) : BOOL
88 : eq(80, 38) : BOOL
89 : eq(80, 2) : BOOL
90 : eq(80, 41) : BOOL
91 : eq(80, 43) : BOOL
92 : ite(91, 25, 45) : BV:8
93 : ite(90, 25, 92) : BV:8
94 : ite(89, 25, 93) : BV:8
95 : ite(88, 25, 94) : BV:8
96 : ite(87, 25, 95) : BV:8
97 : ite(86, 25, 96) : BV:8
98 : ite(85, 25, 97) : BV:8
99 : ite(84, 25, 98) : BV:8
100 : ite(83, 30, 99) : BV:8
101 : ite(82, 25, 100) : BV:8
102 : ite(81, 25, 101) : BV:8
103 : bvadd(21, 2) : BV:32
104 : eq(103, 23) : BOOL
105 : eq(103, 26) : BOOL
106 : eq(103, 28) : BOOL
107 : eq(103, 19) : BOOL
108 : eq(103, 32) : BOOL
109 : eq(103, 34) : BOOL
110 : eq(103, 36) : BOOL
111 : eq(103, 38) : BOOL
112 : eq(103, 2) : BOOL
113 : eq(103, 41) : BOOL
114 : eq(103, 43) : BOOL
115 : ite(114, 25, 45) : BV:8
116 : ite(113, 25, 115) : BV:8
117 : ite(112, 25, 116) : BV:8
118 : ite(111, 25, 117) : BV:8
119 : ite(110, 25, 118) : BV:8
120 : ite(109, 25, 119) : BV:8
121 : ite(108, 25, 120) : BV:8
122 : ite(107, 25, 121) : BV:8
123 : ite(106, 30, 122) : BV:8
124 : ite(105, 25, 123) : BV:8
125 : ite(104, 25, 124) : BV:8
126 : bvconcat(56, 79, 102, 125) : BV:32
127 : ite(18, 2, 126) : BV:32
128 : lambda(17, 127) : FUNCTION[BV:32 -> BV:32]
129 : map(16, 128) : MAP[BV:32 -> BV:32]
130 : sym_const(129) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda276 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : ite(3, 2, 112) : BV:32
114 : lambda(1, 113) : FUNCTION[BV:32 -> BV:32]
115 : sym_const(114) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 6331391 ] -> true, [ 6331392; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> 0, [ 4; 648242111 ] -> 96, [ 648242112; 648242112 ] -> 0, [ 648242113; 648242113 ] -> 0, [ 648242114; 648242114 ] -> 0, [ 648242115; 648242115 ] -> 0, [ 648242116; 648242116 ] -> 0, [ 648242117; 648242117 ] -> 0, [ 648242118; 648242118 ] -> 0, [ 648242119; 648242119 ] -> 0, [ 648242120; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda277 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1844064341 { 0x6dea3055 +1.82959997e92 } : BV:32
14 : eq(7, 13) : BOOL
15 : 156 { 0x9c -100 } : BV:8
16 : eq(7, 4) : BOOL
17 : 846802678 { 0x32792ef6 +1.94674563e229 } : BV:32
18 : eq(7, 17) : BOOL
19 : 846802677 { 0x32792ef5 +1.94674551e229 } : BV:32
20 : eq(7, 19) : BOOL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : eq(7, 21) : BOOL
23 : 2 { 0x2 +1.23e129 } : BV:32
24 : eq(7, 23) : BOOL
25 : eq(7, 2) : BOOL
26 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
27 : eq(7, 26) : BOOL
28 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
29 : eq(7, 28) : BOOL
30 : 96 { 0x60 } : BV:8
31 : ite(29, 10, 30) : BV:8
32 : ite(27, 10, 31) : BV:8
33 : ite(25, 10, 32) : BV:8
34 : ite(24, 10, 33) : BV:8
35 : ite(22, 10, 34) : BV:8
36 : ite(20, 10, 35) : BV:8
37 : ite(18, 10, 36) : BV:8
38 : ite(16, 10, 37) : BV:8
39 : ite(14, 15, 38) : BV:8
40 : ite(12, 10, 39) : BV:8
41 : ite(9, 10, 40) : BV:8
42 : bvadd(23, 6, 2) : BV:32
43 : eq(42, 8) : BOOL
44 : eq(42, 11) : BOOL
45 : eq(42, 13) : BOOL
46 : eq(42, 4) : BOOL
47 : eq(42, 17) : BOOL
48 : eq(42, 19) : BOOL
49 : eq(42, 21) : BOOL
50 : eq(42, 23) : BOOL
51 : eq(42, 2) : BOOL
52 : eq(42, 26) : BOOL
53 : eq(42, 28) : BOOL
54 : ite(53, 10, 30) : BV:8
55 : ite(52, 10, 54) : BV:8
56 : ite(51, 10, 55) : BV:8
57 : ite(50, 10, 56) : BV:8
58 : ite(49, 10, 57) : BV:8
59 : ite(48, 10, 58) : BV:8
60 : ite(47, 10, 59) : BV:8
61 : ite(46, 10, 60) : BV:8
62 : ite(45, 15, 61) : BV:8
63 : ite(44, 10, 62) : BV:8
64 : ite(43, 10, 63) : BV:8
65 : bvadd(21, 6, 2) : BV:32
66 : eq(65, 8) : BOOL
67 : eq(65, 11) : BOOL
68 : eq(65, 13) : BOOL
69 : eq(65, 4) : BOOL
70 : eq(65, 17) : BOOL
71 : eq(65, 19) : BOOL
72 : eq(65, 21) : BOOL
73 : eq(65, 23) : BOOL
74 : eq(65, 2) : BOOL
75 : eq(65, 26) : BOOL
76 : eq(65, 28) : BOOL
77 : ite(76, 10, 30) : BV:8
78 : ite(75, 10, 77) : BV:8
79 : ite(74, 10, 78) : BV:8
80 : ite(73, 10, 79) : BV:8
81 : ite(72, 10, 80) : BV:8
82 : ite(71, 10, 81) : BV:8
83 : ite(70, 10, 82) : BV:8
84 : ite(69, 10, 83) : BV:8
85 : ite(68, 15, 84) : BV:8
86 : ite(67, 10, 85) : BV:8
87 : ite(66, 10, 86) : BV:8
88 : bvadd(6, 2) : BV:32
89 : eq(88, 8) : BOOL
90 : eq(88, 11) : BOOL
91 : eq(88, 13) : BOOL
92 : eq(88, 4) : BOOL
93 : eq(88, 17) : BOOL
94 : eq(88, 19) : BOOL
95 : eq(88, 21) : BOOL
96 : eq(88, 23) : BOOL
97 : eq(88, 2) : BOOL
98 : eq(88, 26) : BOOL
99 : eq(88, 28) : BOOL
100 : ite(99, 10, 30) : BV:8
101 : ite(98, 10, 100) : BV:8
102 : ite(97, 10, 101) : BV:8
103 : ite(96, 10, 102) : BV:8
104 : ite(95, 10, 103) : BV:8
105 : ite(94, 10, 104) : BV:8
106 : ite(93, 10, 105) : BV:8
107 : ite(92, 10, 106) : BV:8
108 : ite(91, 15, 107) : BV:8
109 : ite(90, 10, 108) : BV:8
110 : ite(89, 10, 109) : BV:8
111 : bvconcat(41, 64, 87, 110) : BV:32
112 : ite(3, 2, 111) : BV:32
113 : lambda(1, 112) : FUNCTION[BV:32 -> BV:32]
114 : sym_const(113) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6331392 { 0x609c00 +1.75476074e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 911306036 , 1000 , 8 ) -> 648242112, () -> 1951265905, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1782 : BV:32
5 : Lambda15339 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15340 : BV:32
8 : sum(3, 2, 4) : SUM[UNIT,BV:32]
9 : prod(3, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(3, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 648242112 { 0x26a363c0 +1.27648162e206 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1749719365 { 0x684a9945 +1.58280241e81 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 648242111 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 648242112; 648242119 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 648242120; 846802675 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 846802676; 846802679 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 846802680; 1844064339 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1844064340; 1844064343 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1844064344; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3 ] -> 0, [ 4; 648242111 ] -> 96, [ 648242112; 648242112 ] -> 0, [ 648242113; 648242113 ] -> 0, [ 648242114; 648242114 ] -> 0, [ 648242115; 648242115 ] -> 0, [ 648242116; 648242116 ] -> 0, [ 648242117; 648242117 ] -> 0, [ 648242118; 648242118 ] -> 0, [ 648242119; 648242119 ] -> 0, [ 648242120; 846802675 ] -> 96, [ 846802676; 846802679 ] -> 0, [ 846802680; 1844064339 ] -> 96, [ 1844064340; 1844064340 ] -> 0, [ 1844064341; 1844064341 ] -> 156, [ 1844064342; 1844064342 ] -> 96, [ 1844064343; 1844064343 ] -> 0, [ 1844064344; 4294967295 ] -> 96, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 648242112 { 0x26a363c0 +1.27648162e206 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1844064340 { 0x6dea3054 +1.82959985e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1844064343 { 0x6dea3057 +1.82960021e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 846802676 { 0x32792ef4 +1.94674539e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 846802679 { 0x32792ef7 +1.94674575e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 136 , m_adder -> 178), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2615564241
=counter_example_end
=global nodece 56 num_edges_traversed 6
=global nodece 56 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 57
=global nodece 57 nodece z3v487.ce2297.num_edges_traversed4
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(epsilon)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3v487.ce2297 20ef81819743bd238ad94cf79863315
=nextpc_const.1
1 : 1415873585 { 0x54648431 +1.78528416e41 } : BV:32
=input.spec-%var-arr-1
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1418039575 ] -> 4, [ 1418039576; 1418039576 ] -> 4, [ 1418039577; 1418039577 ] -> 4, [ 1418039578; 1418039578 ] -> 4, [ 1418039579; 1418039579 ] -> 4, [ 1418039580; 1418039580 ] -> 0, [ 1418039581; 1418039581 ] -> 0, [ 1418039582; 1418039582 ] -> 0, [ 1418039583; 1418039583 ] -> 0, [ 1418039584; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1415873585 , 1000 , 8 ) -> 1418039576, () -> 1121012526, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform1775 : BV:32
6 : Lambda15325 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15326 : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1498599059 { 0x5952ce93 +1.64692914e51 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 1418039575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1418039576; 1418039583 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1418039584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1418039576 { 0x54859118 +1.4349040e42 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 139475 { 0x220d3 +1.1662671e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 555629163 { 0x211e3a6b +1.23615777e195 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2065169016
=counter_example_end
=global nodece 57 num_edges_traversed 4
=global nodece 57 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 58
=global nodece 58 nodece z3v487.ce2376.num_edges_traversed5
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3v487.ce2376 e2d3924b7fecd3478c7d446cc8f8f7a
=nextpc_const.1
1 : 1415873585 { 0x54648431 +1.78528416e41 } : BV:32
=input.spec-%var-arr-1
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1418039575 ] -> 4, [ 1418039576; 1418039576 ] -> 4, [ 1418039577; 1418039577 ] -> 4, [ 1418039578; 1418039578 ] -> 4, [ 1418039579; 1418039579 ] -> 4, [ 1418039580; 1418039580 ] -> 0, [ 1418039581; 1418039581 ] -> 0, [ 1418039582; 1418039582 ] -> 0, [ 1418039583; 1418039583 ] -> 0, [ 1418039584; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1415873585 , 1000 , 8 ) -> 1418039576, () -> 1121012526, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform1775 : BV:32
6 : Lambda15325 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15326 : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1498599059 { 0x5952ce93 +1.64692914e51 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 1418039575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1418039576; 1418039583 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1418039584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1418039576 { 0x54859118 +1.4349040e42 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 139475 { 0x220d3 +1.1662671e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 555629163 { 0x211e3a6b +1.23615777e195 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2065169016
=counter_example_end
=global nodece 58 num_edges_traversed 5
=global nodece 58 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 59
=global nodece 59 nodece z3v487.ce2386.num_edges_traversed6
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(epsilon)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3v487.ce2386 5f5d451a9fa1de0e850aaa83e1992
=nextpc_const.1
1 : 1415873585 { 0x54648431 +1.78528416e41 } : BV:32
=input.spec-%var-arr-1
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda796 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda797 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform7 : BV:32
4 : Lambda14 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15 : BV:32
7 : sum(1, 2, 3) : SUM[UNIT,BV:32]
8 : prod(1, 7) : PROD[BV:32,SUM[UNIT,BV:32]]
9 : lambda(6, 8) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
10 : ind(1, 3, 5, 9) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
11 : sum(1, 2, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1418039575 ] -> 4, [ 1418039576; 1418039576 ] -> 4, [ 1418039577; 1418039577 ] -> 4, [ 1418039578; 1418039578 ] -> 4, [ 1418039579; 1418039579 ] -> 4, [ 1418039580; 1418039580 ] -> 0, [ 1418039581; 1418039581 ] -> 0, [ 1418039582; 1418039582 ] -> 0, [ 1418039583; 1418039583 ] -> 0, [ 1418039584; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 67372036, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1415873585 , 1000 , 8 ) -> 1418039576, () -> 1121012526, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform1775 : BV:32
6 : Lambda15325 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15326 : BV:32
9 : sum(4, 2, 5) : SUM[UNIT,BV:32]
10 : prod(4, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(4, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1418039576 { 0x54859118 +1.4349040e42 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1498599059 { 0x5952ce93 +1.64692914e51 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 139471 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 139472; 139475 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 139476; 555629159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 555629160; 555629163 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 555629164; 1418039575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1418039576; 1418039583 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1418039584; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1418039575 ] -> 4, [ 1418039576; 1418039576 ] -> 4, [ 1418039577; 1418039577 ] -> 4, [ 1418039578; 1418039578 ] -> 4, [ 1418039579; 1418039579 ] -> 4, [ 1418039580; 1418039580 ] -> 0, [ 1418039581; 1418039581 ] -> 0, [ 1418039582; 1418039582 ] -> 0, [ 1418039583; 1418039583 ] -> 0, [ 1418039584; 4294967295 ] -> 4, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1418039576 { 0x54859118 +1.4349040e42 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 139472 { 0x220d0 +1.1662635e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 139475 { 0x220d3 +1.1662671e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 555629160 { 0x211e3a68 +1.23615741e195 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 555629163 { 0x211e3a6b +1.23615777e195 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 104 , m_adder -> 204), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2065169016
=counter_example_end
=global nodece 59 num_edges_traversed 6
=global nodece 59 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 60
=global nodece 60 nodece z3.ce2255.num_edges_traversed3
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce2255 e2b49861c6758b9b7a42357f05cfeb0
=nextpc_const.1
1 : 1819721178 { 0x6c76bdda +1.92766880e89 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5740 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5744 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform531 : BV:32
4 : Lambda5747 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5748 : BV:32
7 : 1032590163 { 0x3d8c1353 +1.9433972e252 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2050431807 ] -> 0, [ 2050431808; 2050431808 ] -> 0, [ 2050431809; 2050431809 ] -> 0, [ 2050431810; 2050431810 ] -> 0, [ 2050431811; 2050431811 ] -> 0, [ 2050431812; 2050431812 ] -> 0, [ 2050431813; 2050431813 ] -> 0, [ 2050431814; 2050431814 ] -> 0, [ 2050431815; 2050431815 ] -> 0, [ 2050431816; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5715 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 255 { 0xff +1.3039e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 256 { 0x100 +1.3051e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1819721178 , 1000 , 8 ) -> 2050431808, () -> 887420062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1768 : BV:32
5 : Lambda15311 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15312 : BV:32
8 : 479547865 { 0x1c9551d9 +1.16656029e186 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1021376365 { 0x3ce0f76d +1.75755083e250 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1645893251 { 0x621a5683 +1.20576512e69 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2050431807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2050431808; 2050431815 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2050431816; 2432349743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2432349744; 2432349747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2432349748; 3237817435 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3237817436; 3237817439 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3237817440; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1117833221 { 0x42a0c805 +1.25610411e6 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 39404388 { 0x2594364 +1.69736909e133 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2050431808 { 0x7a371b40 +1.43051910e117 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1040783984 { 0x3e091a70 +1.7111930e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3237817439 { 0xc0fd2c5f -1057149857 -1.97791659e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2432349747 { 0x90fab633 -1862617549 -1.95868527e162 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2656273353
=counter_example_end
=global nodece 60 num_edges_traversed 3
=global nodece 60 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce2415.num_edges_traversed4
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(epsilon)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce2415 ab4c525bef6c51b89942316d1649b
=nextpc_const.1
1 : 1819721178 { 0x6c76bdda +1.92766880e89 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5740 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5744 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform531 : BV:32
4 : Lambda5747 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5748 : BV:32
7 : 1032590163 { 0x3d8c1353 +1.9433972e252 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2050431807 ] -> 0, [ 2050431808; 2050431808 ] -> 0, [ 2050431809; 2050431809 ] -> 0, [ 2050431810; 2050431810 ] -> 0, [ 2050431811; 2050431811 ] -> 0, [ 2050431812; 2050431812 ] -> 0, [ 2050431813; 2050431813 ] -> 0, [ 2050431814; 2050431814 ] -> 0, [ 2050431815; 2050431815 ] -> 0, [ 2050431816; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5715 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 255 { 0xff +1.3039e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 256 { 0x100 +1.3051e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1819721178 , 1000 , 8 ) -> 2050431808, () -> 887420062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1768 : BV:32
5 : Lambda15311 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15312 : BV:32
8 : 479547865 { 0x1c9551d9 +1.16656029e186 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1021376365 { 0x3ce0f76d +1.75755083e250 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1645893251 { 0x621a5683 +1.20576512e69 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2050431807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2050431808; 2050431815 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2050431816; 2432349743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2432349744; 2432349747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2432349748; 3237817435 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3237817436; 3237817439 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3237817440; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1117833221 { 0x42a0c805 +1.25610411e6 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 39404388 { 0x2594364 +1.69736909e133 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2050431808 { 0x7a371b40 +1.43051910e117 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1040783984 { 0x3e091a70 +1.7111930e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3237817439 { 0xc0fd2c5f -1057149857 -1.97791659e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2432349747 { 0x90fab633 -1862617549 -1.95868527e162 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2656273353
=counter_example_end
=global nodece 61 num_edges_traversed 4
=global nodece 61 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 62
=global nodece 62 nodece z3.ce2419.num_edges_traversed5
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce2419 2c71cfe615549b41a43d81c081cf266a
=nextpc_const.1
1 : 1819721178 { 0x6c76bdda +1.92766880e89 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5739 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5740 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5743 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 255 { 0xff +1.3039e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 256 { 0x100 +1.3051e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5744 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform531 : BV:32
4 : Lambda5747 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5748 : BV:32
7 : 1032590163 { 0x3d8c1353 +1.9433972e252 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 255 ] -> true, [ 256; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2050431807 ] -> 0, [ 2050431808; 2050431808 ] -> 0, [ 2050431809; 2050431809 ] -> 0, [ 2050431810; 2050431810 ] -> 0, [ 2050431811; 2050431811 ] -> 0, [ 2050431812; 2050431812 ] -> 0, [ 2050431813; 2050431813 ] -> 0, [ 2050431814; 2050431814 ] -> 0, [ 2050431815; 2050431815 ] -> 0, [ 2050431816; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5715 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 255 { 0xff +1.3039e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 256 { 0x100 +1.3051e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1819721178 , 1000 , 8 ) -> 2050431808, () -> 887420062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1768 : BV:32
5 : Lambda15311 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15312 : BV:32
8 : 479547865 { 0x1c9551d9 +1.16656029e186 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1021376365 { 0x3ce0f76d +1.75755083e250 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2050431808 { 0x7a371b40 +1.43051910e117 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1645893251 { 0x621a5683 +1.20576512e69 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2050431807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2050431808; 2050431815 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2050431816; 2432349743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2432349744; 2432349747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2432349748; 3237817435 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3237817436; 3237817439 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3237817440; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1117833221 { 0x42a0c805 +1.25610411e6 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2050431807 ] -> 0, [ 2050431808; 2050431808 ] -> 0, [ 2050431809; 2050431809 ] -> 0, [ 2050431810; 2050431810 ] -> 0, [ 2050431811; 2050431811 ] -> 0, [ 2050431812; 2050431812 ] -> 0, [ 2050431813; 2050431813 ] -> 0, [ 2050431814; 2050431814 ] -> 0, [ 2050431815; 2050431815 ] -> 0, [ 2050431816; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 39404388 { 0x2594364 +1.69736909e133 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2050431808 { 0x7a371b40 +1.43051910e117 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1040783984 { 0x3e091a70 +1.7111930e253 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3237817436 { 0xc0fd2c5c -1057149860 -1.97791624e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3237817439 { 0xc0fd2c5f -1057149857 -1.97791659e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2432349744 { 0x90fab630 -1862617552 -1.95868492e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2432349747 { 0x90fab633 -1862617549 -1.95868527e162 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 133 , m_adder -> 155), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2656273353
=counter_example_end
=global nodece 62 num_edges_traversed 5
=global nodece 62 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 63
=global nodece 63 nodece z3.ce2245.num_edges_traversed3
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3.ce2245 745396166efc9694e3d4bf431cb5723
=nextpc_const.1
1 : 311378148 { 0x128f40e4 +1.11916780e166 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5867 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5868 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5871 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5872 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform547 : BV:32
4 : Lambda5875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5876 : BV:32
7 : 110728013 { 0x699934d +1.19980776e142 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 123433207 ] -> 0, [ 123433208; 123433208 ] -> 0, [ 123433209; 123433209 ] -> 0, [ 123433210; 123433210 ] -> 0, [ 123433211; 123433211 ] -> 0, [ 123433212; 123433212 ] -> 0, [ 123433213; 123433213 ] -> 0, [ 123433214; 123433214 ] -> 0, [ 123433215; 123433215 ] -> 0, [ 123433216; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5843 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 15 { 0xf +1.178e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16 { 0x10 +1.190e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 311378148 , 1000 , 8 ) -> 123433208, () -> 498536062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1761 : BV:32
5 : Lambda15297 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15298 : BV:32
8 : 1896464982 { 0x7109c256 +1.7624316e99 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1426229420 { 0x550288ac +1.1979589e43 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2125552191 { 0x7eb15a3f +1.38556659e126 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 123433207 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 123433208; 123433215 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 123433216; 2969435763 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2969435764; 2969435767 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2969435768; 3810303603 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3810303604; 3810303607 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3810303608; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 896405636 { 0x356e1084 +1.85987901e235 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 725263768 { 0x2b3aa598 +1.45817852e215 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 123433208 { 0x75b70f8 +1.71438503e143 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1731768466 { 0x6738b092 +1.44288849e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2969435767 { 0xb0fdfe77 -1325531529 -1.98432815e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3810303607 { 0xe31c9e77 -484663689 -1.22358596e71 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3853665008
=counter_example_end
=global nodece 63 num_edges_traversed 3
=global nodece 63 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 64
=global nodece 64 nodece z3.ce2454.num_edges_traversed4
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3.ce2454 49512af597766ecde5f920f049341380
=nextpc_const.1
1 : 311378148 { 0x128f40e4 +1.11916780e166 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5867 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5868 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5871 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5872 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform547 : BV:32
4 : Lambda5875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5876 : BV:32
7 : 110728013 { 0x699934d +1.19980776e142 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 123433207 ] -> 0, [ 123433208; 123433208 ] -> 0, [ 123433209; 123433209 ] -> 0, [ 123433210; 123433210 ] -> 0, [ 123433211; 123433211 ] -> 0, [ 123433212; 123433212 ] -> 0, [ 123433213; 123433213 ] -> 0, [ 123433214; 123433214 ] -> 0, [ 123433215; 123433215 ] -> 0, [ 123433216; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5843 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 15 { 0xf +1.178e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16 { 0x10 +1.190e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 311378148 , 1000 , 8 ) -> 123433208, () -> 498536062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1761 : BV:32
5 : Lambda15297 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15298 : BV:32
8 : 1896464982 { 0x7109c256 +1.7624316e99 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1426229420 { 0x550288ac +1.1979589e43 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2125552191 { 0x7eb15a3f +1.38556659e126 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 123433207 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 123433208; 123433215 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 123433216; 2969435763 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2969435764; 2969435767 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2969435768; 3810303603 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3810303604; 3810303607 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3810303608; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 896405636 { 0x356e1084 +1.85987901e235 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 725263768 { 0x2b3aa598 +1.45817852e215 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 123433208 { 0x75b70f8 +1.71438503e143 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1731768466 { 0x6738b092 +1.44288849e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2969435767 { 0xb0fdfe77 -1325531529 -1.98432815e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3810303607 { 0xe31c9e77 -484663689 -1.22358596e71 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3853665008
=counter_example_end
=global nodece 64 num_edges_traversed 4
=global nodece 64 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 65
=global nodece 65 nodece z3.ce2458.num_edges_traversed5
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3.ce2458 35764535a4b9f9873b8a3e6c9782bc44
=nextpc_const.1
1 : 311378148 { 0x128f40e4 +1.11916780e166 } : BV:32
=input.spec-%var-arr-1
1 : Lambda5867 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5868 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda5871 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5872 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform547 : BV:32
4 : Lambda5875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda5876 : BV:32
7 : 110728013 { 0x699934d +1.19980776e142 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 123433207 ] -> 0, [ 123433208; 123433208 ] -> 0, [ 123433209; 123433209 ] -> 0, [ 123433210; 123433210 ] -> 0, [ 123433211; 123433211 ] -> 0, [ 123433212; 123433212 ] -> 0, [ 123433213; 123433213 ] -> 0, [ 123433214; 123433214 ] -> 0, [ 123433215; 123433215 ] -> 0, [ 123433216; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda5843 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 15 { 0xf +1.178e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16 { 0x10 +1.190e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 311378148 , 1000 , 8 ) -> 123433208, () -> 498536062, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1761 : BV:32
5 : Lambda15297 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15298 : BV:32
8 : 1896464982 { 0x7109c256 +1.7624316e99 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1426229420 { 0x550288ac +1.1979589e43 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 123433208 { 0x75b70f8 +1.71438503e143 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2125552191 { 0x7eb15a3f +1.38556659e126 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 123433207 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 123433208; 123433215 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 123433216; 2969435763 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2969435764; 2969435767 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2969435768; 3810303603 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3810303604; 3810303607 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3810303608; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 896405636 { 0x356e1084 +1.85987901e235 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 123433207 ] -> 0, [ 123433208; 123433208 ] -> 0, [ 123433209; 123433209 ] -> 0, [ 123433210; 123433210 ] -> 0, [ 123433211; 123433211 ] -> 0, [ 123433212; 123433212 ] -> 0, [ 123433213; 123433213 ] -> 0, [ 123433214; 123433214 ] -> 0, [ 123433215; 123433215 ] -> 0, [ 123433216; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 725263768 { 0x2b3aa598 +1.45817852e215 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 123433208 { 0x75b70f8 +1.71438503e143 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1731768466 { 0x6738b092 +1.44288849e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2969435764 { 0xb0fdfe74 -1325531532 -1.98432779e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2969435767 { 0xb0fdfe77 -1325531529 -1.98432815e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3810303604 { 0xe31c9e74 -484663692 -1.22358560e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3810303607 { 0xe31c9e77 -484663689 -1.22358596e71 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 26 , m_adder -> 235), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3853665008
=counter_example_end
=global nodece 65 num_edges_traversed 5
=global nodece 65 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 66
=global nodece 66 nodece z3v487.ce2222.num_edges_traversed1
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3v487.ce2222 e8cd47ed26de7079f3708b19776543
=input.spec-%var-arr-1
1 : Lambda15262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15263 : BV:32
18 : eq(17, 2) : BOOL
19 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
27 : eq(22, 26) : BOOL
28 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
25 : eq(20, 24) : BOOL
26 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1747 : BV:32
4 : Lambda15269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15270 : BV:32
7 : 1592708970 { 0x5eeecf6a +1.86570477e62 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 0, [ 1073741828; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda15251 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
12 : eq(7, 11) : BOOL
13 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1754 : BV:32
5 : Lambda15283 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15284 : BV:32
8 : 135777261 { 0x817cbed +1.18591082e145 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1854347188 { 0x6e8717b4 +1.5541086e94 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1000112290 { 0x3b9c80a2 +1.22267556e248 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 1073741831 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741832; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1821946057 { 0x6c98b0c9 +1.19289505e90 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1416044835 { 0x54672123 +1.80569875e41 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 418743316 { 0x18f58414 +1.91809320e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741831 { 0x40000007 +1.83e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2419877520
=counter_example_end
=global nodece 66 num_edges_traversed 1
=global nodece 66 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 67
=global nodece 67 nodece z3v487.ce2493.num_edges_traversed2
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3v487.ce2493 5f7531e15ec85365f31ebead58e37d90
=input.spec-%var-arr-1
1 : Lambda15262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15263 : BV:32
18 : eq(17, 2) : BOOL
19 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
27 : eq(22, 26) : BOOL
28 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
25 : eq(20, 24) : BOOL
26 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1747 : BV:32
4 : Lambda15269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15270 : BV:32
7 : 1592708970 { 0x5eeecf6a +1.86570477e62 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 0, [ 1073741828; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda15251 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
12 : eq(7, 11) : BOOL
13 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1754 : BV:32
5 : Lambda15283 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15284 : BV:32
8 : 135777261 { 0x817cbed +1.18591082e145 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1854347188 { 0x6e8717b4 +1.5541086e94 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1000112290 { 0x3b9c80a2 +1.22267556e248 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 1073741831 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741832; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1821946057 { 0x6c98b0c9 +1.19289505e90 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1416044835 { 0x54672123 +1.80569875e41 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 418743316 { 0x18f58414 +1.91809320e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741831 { 0x40000007 +1.83e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2419877520
=counter_example_end
=global nodece 67 num_edges_traversed 2
=global nodece 67 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 68
=global nodece 68 nodece z3v487.ce2497.num_edges_traversed3
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3v487.ce2497 7a8eae133f68def1f96437642b7399ea
=nextpc_const.1
1 : 1165349210 { 0x4575d15a +1.92045140e11 } : BV:32
=input.spec-%var-arr-1
1 : Lambda15262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15263 : BV:32
18 : eq(17, 2) : BOOL
19 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
27 : eq(22, 26) : BOOL
28 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
25 : eq(20, 24) : BOOL
26 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1747 : BV:32
4 : Lambda15269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15270 : BV:32
7 : 1592708970 { 0x5eeecf6a +1.86570477e62 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 0, [ 1073741828; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda15251 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
12 : eq(7, 11) : BOOL
13 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1165349210 , 1000 , 8 ) -> 1697797108, () -> 1441361959, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1754 : BV:32
5 : Lambda15283 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15284 : BV:32
8 : 135777261 { 0x817cbed +1.18591082e145 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1854347188 { 0x6e8717b4 +1.5541086e94 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1697797108 { 0x653253f4 +1.39318704e75 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1000112290 { 0x3b9c80a2 +1.22267556e248 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 1073741831 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741832; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1821946057 { 0x6c98b0c9 +1.19289505e90 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 0, [ 1073741828; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1416044835 { 0x54672123 +1.80569875e41 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 418743316 { 0x18f58414 +1.91809320e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741831 { 0x40000007 +1.83e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2088705252
=counter_example_end
=global nodece 68 num_edges_traversed 3
=global nodece 68 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 69
=global nodece 69 nodece z3v487.ce2516.num_edges_traversed4
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(epsilon)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3v487.ce2516 b4f087f55d39e1a42e19705c4bc28ba
=nextpc_const.1
1 : 1165349210 { 0x4575d15a +1.92045140e11 } : BV:32
=input.spec-%var-arr-1
1 : Lambda15262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15263 : BV:32
18 : eq(17, 2) : BOOL
19 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
27 : eq(22, 26) : BOOL
28 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
25 : eq(20, 24) : BOOL
26 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1747 : BV:32
4 : Lambda15269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15270 : BV:32
7 : 1592708970 { 0x5eeecf6a +1.86570477e62 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741827 ] -> 0, [ 1073741828; 1697797107 ] -> 5, [ 1697797108; 1697797108 ] -> 5, [ 1697797109; 1697797109 ] -> 5, [ 1697797110; 1697797110 ] -> 5, [ 1697797111; 1697797111 ] -> 5, [ 1697797112; 1697797112 ] -> 252, [ 1697797113; 1697797113 ] -> 255, [ 1697797114; 1697797114 ] -> 255, [ 1697797115; 1697797115 ] -> 63, [ 1697797116; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda15251 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
12 : eq(7, 11) : BOOL
13 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1165349210 , 1000 , 8 ) -> 1697797108, () -> 1441361959, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform1789 : BV:32
6 : Lambda15353 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15354 : BV:32
9 : 135777261 { 0x817cbed +1.18591082e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(4, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(4, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1854347189 { 0x6e8717b5 +1.5541098e94 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1000112291 { 0x3b9c80a3 +1.22267568e248 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 1073741831 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741832; 1697797107 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1697797108; 1697797115 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1697797116; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1821946057 { 0x6c98b0c9 +1.19289505e90 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1416044835 { 0x54672123 +1.80569875e41 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1697797108 { 0x653253f4 +1.39318704e75 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 418743317 { 0x18f58415 +1.91809332e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741831 { 0x40000007 +1.83e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2088705252
=counter_example_end
=global nodece 69 num_edges_traversed 4
=global nodece 69 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 70
=global nodece 70 nodece z3v487.ce2532.num_edges_traversed5
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3v487.ce2532 579bcc9ffdd2e4024eff1b33114312d
=nextpc_const.1
1 : 1165349210 { 0x4575d15a +1.92045140e11 } : BV:32
=input.spec-%var-arr-1
1 : Lambda15262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15263 : BV:32
18 : eq(17, 2) : BOOL
19 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
27 : eq(22, 26) : BOOL
28 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
25 : eq(20, 24) : BOOL
26 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1747 : BV:32
4 : Lambda15269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15270 : BV:32
7 : 1592708970 { 0x5eeecf6a +1.86570477e62 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741827 ] -> 0, [ 1073741828; 1697797107 ] -> 5, [ 1697797108; 1697797108 ] -> 5, [ 1697797109; 1697797109 ] -> 5, [ 1697797110; 1697797110 ] -> 5, [ 1697797111; 1697797111 ] -> 5, [ 1697797112; 1697797112 ] -> 252, [ 1697797113; 1697797113 ] -> 255, [ 1697797114; 1697797114 ] -> 255, [ 1697797115; 1697797115 ] -> 63, [ 1697797116; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda15251 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
12 : eq(7, 11) : BOOL
13 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1165349210 , 1000 , 8 ) -> 1697797108, () -> 1441361959, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform1789 : BV:32
6 : Lambda15353 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15354 : BV:32
9 : 135777261 { 0x817cbed +1.18591082e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(4, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(4, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1854347189 { 0x6e8717b5 +1.5541098e94 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1000112291 { 0x3b9c80a3 +1.22267568e248 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 1073741831 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741832; 1697797107 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1697797108; 1697797115 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1697797116; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1821946057 { 0x6c98b0c9 +1.19289505e90 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1416044835 { 0x54672123 +1.80569875e41 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1697797108 { 0x653253f4 +1.39318704e75 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 418743317 { 0x18f58415 +1.91809332e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741831 { 0x40000007 +1.83e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2088705252
=counter_example_end
=global nodece 70 num_edges_traversed 5
=global nodece 70 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 71
=global nodece 71 nodece z3v487.ce2542.num_edges_traversed6
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(epsilon)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3v487.ce2542 651962994cdaa182e8ead80787520
=nextpc_const.1
1 : 1165349210 { 0x4575d15a +1.92045140e11 } : BV:32
=input.spec-%var-arr-1
1 : Lambda15262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15263 : BV:32
18 : eq(17, 2) : BOOL
19 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
27 : eq(22, 26) : BOOL
28 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15265 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15266 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
35 : eq(30, 34) : BOOL
36 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15247 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
25 : eq(20, 24) : BOOL
26 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1747 : BV:32
4 : Lambda15269 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15270 : BV:32
7 : 1592708970 { 0x5eeecf6a +1.86570477e62 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741827 ] -> 0, [ 1073741828; 1697797107 ] -> 5, [ 1697797108; 1697797108 ] -> 5, [ 1697797109; 1697797109 ] -> 5, [ 1697797110; 1697797110 ] -> 5, [ 1697797111; 1697797111 ] -> 5, [ 1697797112; 1697797112 ] -> 252, [ 1697797113; 1697797113 ] -> 255, [ 1697797114; 1697797114 ] -> 255, [ 1697797115; 1697797115 ] -> 63, [ 1697797116; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda15251 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 296306947 { 0x11a94903 +1.32254064e164 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 296306944 { 0x11a94900 +1.32254028e164 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 296306945 { 0x11a94901 +1.32254040e164 } : BV:32
12 : eq(7, 11) : BOOL
13 : 296306946 { 0x11a94902 +1.32254052e164 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1165349210 , 1000 , 8 ) -> 1697797108, () -> 1441361959, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : Indxform1789 : BV:32
6 : Lambda15353 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15354 : BV:32
9 : 135777261 { 0x817cbed +1.18591082e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(4, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(4, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(4, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1854347189 { 0x6e8717b5 +1.5541098e94 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1697797108 { 0x653253f4 +1.39318704e75 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1000112291 { 0x3b9c80a3 +1.22267568e248 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 1073741831 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741832; 1697797107 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1697797108; 1697797115 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1697797116; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1821946057 { 0x6c98b0c9 +1.19289505e90 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 296306943 ] -> 5, [ 296306944; 296306947 ] -> 0, [ 296306948; 1073741819 ] -> 5, [ 1073741820; 1073741827 ] -> 0, [ 1073741828; 1697797107 ] -> 5, [ 1697797108; 1697797108 ] -> 5, [ 1697797109; 1697797109 ] -> 5, [ 1697797110; 1697797110 ] -> 5, [ 1697797111; 1697797111 ] -> 5, [ 1697797112; 1697797112 ] -> 252, [ 1697797113; 1697797113 ] -> 255, [ 1697797114; 1697797114 ] -> 255, [ 1697797115; 1697797115 ] -> 63, [ 1697797116; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1416044835 { 0x54672123 +1.80569875e41 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1697797108 { 0x653253f4 +1.39318704e75 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 418743317 { 0x18f58415 +1.91809332e178 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741831 { 0x40000007 +1.83e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 9), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2088705252
=counter_example_end
=global nodece 71 num_edges_traversed 6
=global nodece 71 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 72
=global nodece 72 nodece z3.ce2776.num_edges_traversed1
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3.ce2776 3e8324f1b0ccd2ef29a177c339c27
=nextpc_const.1
1 : 447031161 { 0x1aa52779 +1.29026710e182 } : BV:32
=input.spec-%var-arr-1
1 : Lambda15547 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15548 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15551 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2 { 0x2 +1.23e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15552 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1809 : BV:32
4 : Lambda15555 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15556 : BV:32
7 : 324861290 { 0x135cfd6a +1.72648358e167 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2 ] -> true, [ 3; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda15523 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4255590348 { 0xfda727cc -39376948 -1.30590200e124 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2985946300 { 0xb1f9ecbc -1309020996 -1.95253705e228 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 46 , m_adder -> 63), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 447031161 , 1000 , 8 ) -> 1850769211, () -> 1117171921, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : Indxform1808 : BV:32
5 : Lambda15553 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15554 : BV:32
8 : 1437110953 { 0x55a892a9 +1.31697571e44 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(3, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(3, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(3, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1850769211 { 0x6e507f3b +1.62888276e93 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2985946299 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2985946300; 2985946303 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2985946304; 4255590347 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4255590348; 4255590351 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4255590352; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967168 { 0xffffff80 -128 -1.99998474e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2985946300 { 0xb1f9ecbc -1309020996 -1.95253705e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2985946303 { 0xb1f9ecbf -1309020993 -1.95253741e228 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4255590348 { 0xfda727cc -39376948 -1.30590200e124 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4255590351 { 0xfda727cf -39376945 -1.30590236e124 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 46 , m_adder -> 63), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2086570942
=counter_example_end
=global nodece 72 num_edges_traversed 1
=global nodece 72 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 73
=global nodece 73 nodece z3v487.ce2807.num_edges_traversed1
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3v487.ce2807 e865ce606033f657dde26933c265b8
=input.spec-%var-arr-1
1 : Lambda15686 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15687 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3664585280 { 0xda6d2240 -630382016 -1.85260772e53 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15689 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15690 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15670 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1825 : BV:32
4 : Lambda15693 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15694 : BV:32
7 : 980445885 { 0x3a706abd +1.87825739e245 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : unit : UNIT
4 : Indxform1826 : BV:32
5 : Lambda15695 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15696 : BV:32
8 : 609015372 { 0x244cd64c +1.60028982e201 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 3, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 3, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(1, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(2, 3, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(1, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1828 : BV:32
6 : Lambda15699 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15700 : BV:32
9 : 609015372 { 0x244cd64c +1.60028982e201 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 0, [ 21; 21 ] -> 0, [ 22; 22 ] -> 8, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1830 : BV:32
6 : Lambda15703 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15704 : BV:32
9 : 609015372 { 0x244cd64c +1.60028982e201 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1832 : BV:32
6 : Lambda15707 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15708 : BV:32
9 : 609015372 { 0x244cd64c +1.60028982e201 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1262389646 { 0x4b3e898e +1.48857283e23 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 147862968 { 0x8d035b8 +1.62663936e146 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 182895905 { 0xae6c521 +1.80289089e150 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 12; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 147862968 { 0x8d035b8 +1.62663936e146 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 620760529 { 0x25000dd1 +1.42164e203 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1918811387 { 0x725ebcfb +1.74014222e101 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3664585280 { 0xda6d2240 -630382016 -1.85260772e53 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 15 ] -> 0, [ 16; 23 ] -> 32, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 620760529 { 0x25000dd1 +1.42164e203 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 12; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 182895905 { 0xae6c521 +1.80289089e150 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3664585284 { 0xda6d2244 -630382012 -1.85260820e53 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3664585284 { 0xda6d2244 -630382012 -1.85260820e53 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1024950071
=counter_example_end
=global nodece 73 num_edges_traversed 1
=global nodece 73 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 74
=global nodece 74 nodece z3v487.ce2838.num_edges_traversed2
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(epsilon)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3v487.ce2838 2a44d42290bcb88d8e3b9a60f5c5b93
=input.spec-%var-arr-1
1 : Lambda15686 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15687 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3664585280 { 0xda6d2240 -630382016 -1.85260772e53 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15689 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15690 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15670 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1825 : BV:32
4 : Lambda15693 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15694 : BV:32
7 : 980445885 { 0x3a706abd +1.87825739e245 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 0, [ 21; 21 ] -> 0, [ 22; 22 ] -> 8, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1832 : BV:32
6 : Lambda15707 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15708 : BV:32
9 : 609015372 { 0x244cd64c +1.60028982e201 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1262389646 { 0x4b3e898e +1.48857283e23 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 182895905 { 0xae6c521 +1.80289089e150 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 12; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 147862968 { 0x8d035b8 +1.62663936e146 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 620760529 { 0x25000dd1 +1.42164e203 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1918811387 { 0x725ebcfb +1.74014222e101 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1024950071
=counter_example_end
=global nodece 74 num_edges_traversed 2
=global nodece 74 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 75
=global nodece 75 nodece z3v487.ce2854.num_edges_traversed1
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3v487.ce2854 837541e664a89bdc2b282d127279d
=input.spec-%var-arr-1
1 : Lambda15799 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15800 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2147483196 { 0x7ffffe3c +1.99994611e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15802 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15803 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15783 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 17 { 0x11 +1.202e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 18 { 0x12 +1.214e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1844 : BV:32
4 : Lambda15806 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15807 : BV:32
7 : 1047659706 { 0x3e7204ba +1.89076924e253 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
3 : unit : UNIT
4 : Indxform1845 : BV:32
5 : Lambda15808 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15809 : BV:32
8 : 2011481862 { 0x77e4c706 +1.78732371e112 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 3, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 3, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(1, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(2, 3, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(1, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1847 : BV:32
6 : Lambda15812 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15813 : BV:32
9 : 2011481862 { 0x77e4c706 +1.78732371e112 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 128, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1849 : BV:32
6 : Lambda15816 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15817 : BV:32
9 : 2011481862 { 0x77e4c706 +1.78732371e112 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 18 { 0x12 +1.214e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1851 : BV:32
6 : Lambda15820 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15821 : BV:32
9 : 2011481862 { 0x77e4c706 +1.78732371e112 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 604833173 { 0x240d0595 +1.10173285e201 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 2108920256 { 0x7db391c0 +1.40288543e124 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1545001555 { 0x5c16da53 +1.17853772e57 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 36; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2108920256 { 0x7db391c0 +1.40288543e124 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1627674236 { 0x6104567c +1.3388929e67 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1331744734 { 0x4f60cfde +1.75634360e31 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 18 { 0x12 +1.214e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 2147483196 { 0x7ffffe3c +1.99994611e128 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 1073741819 ] -> 0, [ 1073741820; 1073741827 ] -> 82, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1627674236 { 0x6104567c +1.3388929e67 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 36; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1545001555 { 0x5c16da53 +1.17853772e57 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2147483208 { 0x7ffffe48 +1.99994754e128 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2147483208 { 0x7ffffe48 +1.99994754e128 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 35 { 0x23 +1.417e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
502919836
=counter_example_end
=global nodece 75 num_edges_traversed 1
=global nodece 75 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 76
=global nodece 76 nodece z3v487.ce2885.num_edges_traversed2
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3v487.ce2885 d493904af36931972ea74c47937c0c9
=input.spec-%var-arr-1
1 : Lambda15799 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15800 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2147483196 { 0x7ffffe3c +1.99994611e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15802 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15803 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15783 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 17 { 0x11 +1.202e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 18 { 0x12 +1.214e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1844 : BV:32
4 : Lambda15806 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15807 : BV:32
7 : 1047659706 { 0x3e7204ba +1.89076924e253 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 128, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 18 { 0x12 +1.214e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1851 : BV:32
6 : Lambda15820 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15821 : BV:32
9 : 2011481862 { 0x77e4c706 +1.78732371e112 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 604833173 { 0x240d0595 +1.10173285e201 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1545001555 { 0x5c16da53 +1.17853772e57 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 36; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2108920256 { 0x7db391c0 +1.40288543e124 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1627674236 { 0x6104567c +1.3388929e67 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1331744734 { 0x4f60cfde +1.75634360e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 35 { 0x23 +1.417e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
502919836
=counter_example_end
=global nodece 76 num_edges_traversed 2
=global nodece 76 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 77
=global nodece 77 nodece z3v487.ce2889.num_edges_traversed3
=global nodece 77 nodece_path
=global nodece 77 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 77 nodece_cached_counterexample
=counter_example_begin z3v487.ce2889 d3238a544927a1769293993e51597998
=nextpc_const.1
1 : 1074276627 { 0x40082913 +1.6375348e1 } : BV:32
=input.spec-%var-arr-1
1 : Lambda15799 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15800 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2147483196 { 0x7ffffe3c +1.99994611e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15802 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 17 { 0x11 +1.202e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 18 { 0x12 +1.214e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15803 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15783 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 17 { 0x11 +1.202e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 18 { 0x12 +1.214e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1844 : BV:32
4 : Lambda15806 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15807 : BV:32
7 : 1047659706 { 0x3e7204ba +1.89076924e253 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 17 ] -> true, [ 18; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1073741819 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 128, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 18 { 0x12 +1.214e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 212 , m_adder -> 245), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1074276627 , 1000 , 8 ) -> 2126578461, () -> 478701275, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
5 : Indxform1851 : BV:32
6 : Lambda15820 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15821 : BV:32
9 : 2011481862 { 0x77e4c706 +1.78732371e112 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 604833173 { 0x240d0595 +1.10173285e201 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2126578461 { 0x7ec1031d +1.50790750e126 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1545001555 { 0x5c16da53 +1.17853772e57 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 31 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 32; 35 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 36; 1073741819 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741820; 1073741827 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1073741828; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2108920256 { 0x7db391c0 +1.40288543e124 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1073741819 ] -> 0, [ 1073741820; 1073741820 ] -> 0, [ 1073741821; 1073741821 ] -> 0, [ 1073741822; 1073741822 ] -> 0, [ 1073741823; 1073741823 ] -> 0, [ 1073741824; 1073741824 ] -> 0, [ 1073741825; 1073741825 ] -> 0, [ 1073741826; 1073741826 ] -> 0, [ 1073741827; 1073741827 ] -> 128, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1627674236 { 0x6104567c +1.3388929e67 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1073741820 { 0x3ffffffc +1.99999952e0 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1331744734 { 0x4f60cfde +1.75634360e31 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 35 { 0x23 +1.417e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 212 , m_adder -> 245), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1910631472
=counter_example_end
=global nodece 77 num_edges_traversed 3
=global nodece 77 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 78
=global nodece 78 nodece z3v487.ce2906.num_edges_traversed1
=global nodece 78 nodece_path
=global nodece 78 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 78 nodece_cached_counterexample
=counter_example_begin z3v487.ce2906 d332cbc97244e8211e3fd27c6a130e2
=input.spec-%var-arr-1
1 : Lambda15913 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15914 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4169137472 { 0xf87ffd40 -125829824 -1.99991607e113 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda15916 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 5 { 0x5 +1.59e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda15917 : BV:32
18 : eq(17, 4) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda15897 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : bvule(1, 2) : BOOL
7 : and(5, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 5 { 0x5 +1.59e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(5, 12) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(16, 18, 4) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1863 : BV:32
4 : Lambda15920 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda15921 : BV:32
7 : 669190990 { 0x27e30b4e +1.77378249e208 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(1, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
3 : unit : UNIT
4 : Indxform1864 : BV:32
5 : Lambda15922 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15923 : BV:32
8 : 422052580 { 0x192802e4 +1.31258821e179 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 3, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 3, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(1, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(2, 3, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(1, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4 ] -> true, [ 5; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
5 : Indxform1866 : BV:32
6 : Lambda15926 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15927 : BV:32
9 : 422052580 { 0x192802e4 +1.31258821e179 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 255 ] -> 0, [ 256; 256 ] -> 0, [ 257; 257 ] -> 0, [ 258; 258 ] -> 0, [ 259; 259 ] -> 0, [ 260; 260 ] -> 0, [ 261; 261 ] -> 0, [ 262; 262 ] -> 4, [ 263; 263 ] -> 0, [ 264; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
5 : Indxform1868 : BV:32
6 : Lambda15930 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15931 : BV:32
9 : 422052580 { 0x192802e4 +1.31258821e179 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
5 : Indxform1870 : BV:32
6 : Lambda15934 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda15935 : BV:32
9 : 422052580 { 0x192802e4 +1.31258821e179 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(4, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 513421405 { 0x1e9a305d +1.20460093e190 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 504356970 { 0x1e0fe06a +1.12403607e189 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 714045025 { 0x2a8f7661 +1.12080013e214 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 256; 263 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 264; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741828; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 504356970 { 0x1e0fe06a +1.12403607e189 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 248393795 { 0xece3043 +1.61084783e158 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1733242302 { 0x674f2dbe +1.61858344e79 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 4169137472 { 0xf87ffd40 -125829824 -1.99991607e113 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 255 ] -> 0, [ 256; 263 ] -> 96, [ 264; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 248393795 { 0xece3043 +1.61084783e158 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 262144 { 0x40000 +1.3125000e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 255 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 256; 263 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 264; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1073741828; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 714045025 { 0x2a8f7661 +1.12080013e214 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 4169137488 { 0xf87ffd50 -125829808 -1.99991798e113 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4169137488 { 0xf87ffd50 -125829808 -1.99991798e113 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 260 { 0x104 +1.3099e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3012695940
=counter_example_end
=global nodece 78 num_edges_traversed 1
=global nodece 78 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 79
=global nodece 79 nodece z3v487.ce2956.num_edges_traversed1
=global nodece 79 nodece_path
=global nodece 79 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 79 nodece_cached_counterexample
=counter_example_begin z3v487.ce2956 1f78d3bf10d2c1eefcffc886c44dc2f5
=input.spec-%var-arr-1
1 : Lambda16201 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131072 { 0x20000 +1.1562500e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131073 { 0x20001 +1.1562511e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16202 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16204 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131072 { 0x20000 +1.1562500e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131073 { 0x20001 +1.1562511e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16205 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 131072 ] -> true, [ 131073; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16172 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 131072 { 0x20000 +1.1562500e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 131073 { 0x20001 +1.1562511e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1890 : BV:32
4 : Lambda16208 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16209 : BV:32
7 : 1799567062 { 0x6b4336d6 +1.52511096e87 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 131072 ] -> true, [ 131073; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 131073 { 0x20001 +1.1562511e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : Indxform1889 : BV:32
5 : Lambda16206 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda16207 : BV:32
8 : 88237738 { 0x54266aa +1.51875805e139 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 151225216 { 0x9038380 +1.2745056e147 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 19 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 20; 23 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 24; 151225215 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 151225216; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 23 { 0x17 +1.274e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
3075613945
=counter_example_end
=global nodece 79 num_edges_traversed 1
=global nodece 79 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 80
=global nodece 80 nodece z3v487.ce2970.num_edges_traversed2
=global nodece 80 nodece_path
=global nodece 80 nodece_path.graph_edge_composition
(epsilon)
=global nodece 80 nodece_cached_counterexample
=counter_example_begin z3v487.ce2970 fce048371811da526ffad7f31e9a991b
=nextpc_const.1
1 : 1832482004 { 0x6d3974d4 +1.44887781e91 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16201 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131072 { 0x20000 +1.1562500e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131073 { 0x20001 +1.1562511e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16202 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16204 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 131072 { 0x20000 +1.1562500e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 131073 { 0x20001 +1.1562511e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16205 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 131072 ] -> true, [ 131073; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16172 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 131072 { 0x20000 +1.1562500e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 131073 { 0x20001 +1.1562511e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1890 : BV:32
4 : Lambda16208 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16209 : BV:32
7 : 1799567062 { 0x6b4336d6 +1.52511096e87 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 131072 ] -> true, [ 131073; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 131073 { 0x20001 +1.1562511e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 146 , m_adder -> 200), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1832482004 , 1000 , 8 ) -> 1489745631, () -> 1216366721, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : Indxform1889 : BV:32
5 : Lambda16206 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda16207 : BV:32
8 : 88237738 { 0x54266aa +1.51875805e139 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1489745631 { 0x58cbb6df +1.59151828e50 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 19 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 20; 23 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 24; 151225215 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 151225216; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 23 { 0x17 +1.274e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 146 , m_adder -> 200), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1152292797
=counter_example_end
=global nodece 80 num_edges_traversed 2
=global nodece 80 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 81
=global nodece 81 nodece z3v487.ce2990.num_edges_traversed1
=global nodece 81 nodece_path
=global nodece 81 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 81 nodece_cached_counterexample
=counter_example_begin z3v487.ce2990 c26589e06daab17055f1dff88bacf0c7
=input.spec-%var-arr-1
1 : Lambda16329 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16330 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16332 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16333 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16300 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1906 : BV:32
4 : Lambda16336 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16337 : BV:32
7 : 1637864462 { 0x619fd40e +1.24865889e68 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1125318784 { 0x43130080 +1.14845275e7 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : Indxform1905 : BV:32
5 : Lambda16334 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda16335 : BV:32
8 : 552955678 { 0x20f56f1e +1.91745352e194 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 31 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 32; 1125318783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1125318784; 1125318787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1125318788; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1125318784 { 0x43130080 +1.14845275e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1125318787 { 0x43130083 +1.14845311e7 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
892188536
=counter_example_end
=global nodece 81 num_edges_traversed 1
=global nodece 81 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 82
=global nodece 82 nodece z3v487.ce3004.num_edges_traversed2
=global nodece 82 nodece_path
=global nodece 82 nodece_path.graph_edge_composition
(epsilon)
=global nodece 82 nodece_cached_counterexample
=counter_example_begin z3v487.ce3004 dca65d88ae5e9c8a49550db5f741b2
=nextpc_const.1
1 : 316123306 { 0x12d7a8aa +1.68483471e166 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16329 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16330 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16332 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16333 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16300 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1906 : BV:32
4 : Lambda16336 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16337 : BV:32
7 : 1637864462 { 0x619fd40e +1.24865889e68 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1125318784 { 0x43130080 +1.14845275e7 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 207), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 316123306 , 1000 , 8 ) -> 265748850, () -> 1556391794, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : Indxform1905 : BV:32
5 : Lambda16334 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda16335 : BV:32
8 : 552955678 { 0x20f56f1e +1.91745352e194 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 265748850 { 0xfd70172 +1.67973160e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 31 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 32; 1125318783 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1125318784; 1125318787 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1125318788; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1125318784 { 0x43130080 +1.14845275e7 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1125318787 { 0x43130083 +1.14845311e7 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 207), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4211234636
=counter_example_end
=global nodece 82 num_edges_traversed 2
=global nodece 82 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 83
=global nodece 83 nodece z3.ce3031.num_edges_traversed1
=global nodece 83 nodece_path
=global nodece 83 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 83 nodece_cached_counterexample
=counter_example_begin z3.ce3031 e2b3545f5c0ca7049147e7dabd8f738
=nextpc_const.1
1 : 858675466 { 0x332e590a +1.36209225e231 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16646 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16647 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16650 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 5 { 0x5 +1.59e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 6 { 0x6 +1.71e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16651 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1946 : BV:32
4 : Lambda16654 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16655 : BV:32
7 : 1524197871 { 0x5ad969ef +1.69854533e54 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 5 ] -> true, [ 6; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda16633 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 5 { 0x5 +1.59e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 6 { 0x6 +1.71e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3073844144 { 0xb73723b0 -1221123152 -1.43077659e239 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3993732616 { 0xee0b8608 -301234680 -1.9002780e93 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 6 { 0x6 +1.71e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 135), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 858675466 , 1000 , 8 ) -> 331963486, () -> 1328083972, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : Indxform1945 : BV:32
5 : Lambda16652 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda16653 : BV:32
8 : 533981194 { 0x1fd3e80a +1.65551877e192 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : sym_const(14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 331963486 { 0x13c95c5e +1.57313132e168 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3073844143 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3073844144; 3073844147 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3073844148; 3758096383 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3758096384; 3993732615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3993732616; 3993732619 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3993732620; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3993732616 { 0xee0b8608 -301234680 -1.9002780e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3993732619 { 0xee0b860b -301234677 -1.9002816e93 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3073844144 { 0xb73723b0 -1221123152 -1.43077659e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3073844147 { 0xb73723b3 -1221123149 -1.43077695e239 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 91 , m_adder -> 135), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1069090760
=counter_example_end
=global nodece 83 num_edges_traversed 1
=global nodece 83 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 84
=global nodece 84 nodece z3v487.ce3055.num_edges_traversed1
=global nodece 84 nodece_path
=global nodece 84 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 84 nodece_cached_counterexample
=counter_example_begin z3v487.ce3055 96cbd529085d157218835cc9d29f8
=input.spec-%var-arr-1
1 : Lambda16921 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16922 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4143972292 { 0xf6ffffc4 -150995004 -1.99999284e110 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16924 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16925 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16905 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1978 : BV:32
4 : Lambda16928 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16929 : BV:32
7 : 953651639 { 0x38d791b7 +1.68413436e242 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : Indxform1979 : BV:32
5 : Lambda16930 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda16931 : BV:32
8 : 2041679686 { 0x79b18f46 +1.38718485e116 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(1, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform1981 : BV:32
6 : Lambda16934 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda16935 : BV:32
9 : 2041679686 { 0x79b18f46 +1.38718485e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 67108863 ] -> 0, [ 67108864; 67108864 ] -> 0, [ 67108865; 67108865 ] -> 0, [ 67108866; 67108866 ] -> 0, [ 67108867; 67108867 ] -> 0, [ 67108868; 67108868 ] -> 0, [ 67108869; 67108869 ] -> 0, [ 67108870; 67108870 ] -> 0, [ 67108871; 67108871 ] -> 0, [ 67108872; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform1983 : BV:32
6 : Lambda16938 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda16939 : BV:32
9 : 2041679686 { 0x79b18f46 +1.38718485e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform1985 : BV:32
6 : Lambda16942 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda16943 : BV:32
9 : 2041679686 { 0x79b18f46 +1.38718485e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1490551306 { 0x58d8020a +1.68756222e50 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 573243768 { 0x222b0178 +1.33598232e197 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 966666525 { 0x399e291d +1.23562967e244 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 67108863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67108864; 67108871 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 67108872; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4143972319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4143972320; 4143972323 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4143972324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 573243768 { 0x222b0178 +1.33598232e197 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 571221123 { 0x220c2483 +1.9486424e197 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1146785098 { 0x445a8d4a +1.70743680e9 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 4143972292 { 0xf6ffffc4 -150995004 -1.99999284e110 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 67108863 ] -> 0, [ 67108864; 67108871 ] -> 28, [ 67108872; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 571221123 { 0x220c2483 +1.9486424e197 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 67108863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67108864; 67108871 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 67108872; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4143972319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4143972320; 4143972323 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4143972324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 966666525 { 0x399e291d +1.23562967e244 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 67108868 { 0x4000004 +1.47e137 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 4143972320 { 0xf6ffffe0 -150994976 -1.99999618e110 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4143972320 { 0xf6ffffe0 -150994976 -1.99999618e110 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 67108868 { 0x4000004 +1.47e137 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
352511689
=counter_example_end
=global nodece 84 num_edges_traversed 1
=global nodece 84 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 85
=global nodece 85 nodece z3v487.ce3086.num_edges_traversed2
=global nodece 85 nodece_path
=global nodece 85 nodece_path.graph_edge_composition
(epsilon)
=global nodece 85 nodece_cached_counterexample
=counter_example_begin z3v487.ce3086 171c29827dbf3db96314fbd7a721f796
=input.spec-%var-arr-1
1 : Lambda16921 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16922 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4143972292 { 0xf6ffffc4 -150995004 -1.99999284e110 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16924 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16925 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16905 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1978 : BV:32
4 : Lambda16928 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16929 : BV:32
7 : 953651639 { 0x38d791b7 +1.68413436e242 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 67108863 ] -> 0, [ 67108864; 67108864 ] -> 0, [ 67108865; 67108865 ] -> 0, [ 67108866; 67108866 ] -> 0, [ 67108867; 67108867 ] -> 0, [ 67108868; 67108868 ] -> 0, [ 67108869; 67108869 ] -> 0, [ 67108870; 67108870 ] -> 0, [ 67108871; 67108871 ] -> 0, [ 67108872; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform1985 : BV:32
6 : Lambda16942 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda16943 : BV:32
9 : 2041679686 { 0x79b18f46 +1.38718485e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1490551306 { 0x58d8020a +1.68756222e50 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 966666525 { 0x399e291d +1.23562967e244 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 67108863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67108864; 67108871 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 67108872; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4143972319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4143972320; 4143972323 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4143972324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 573243768 { 0x222b0178 +1.33598232e197 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 571221123 { 0x220c2483 +1.9486424e197 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1146785098 { 0x445a8d4a +1.70743680e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
352511689
=counter_example_end
=global nodece 85 num_edges_traversed 2
=global nodece 85 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 86
=global nodece 86 nodece z3v487.ce3090.num_edges_traversed3
=global nodece 86 nodece_path
=global nodece 86 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 86 nodece_cached_counterexample
=counter_example_begin z3v487.ce3090 48f4bb18963c76709266fe86575b65f0
=nextpc_const.1
1 : 1345867697 { 0x50384fb1 +1.43993198e33 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16921 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16922 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4143972292 { 0xf6ffffc4 -150995004 -1.99999284e110 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda16924 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda16925 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16905 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 536870912 { 0x20000000 +1.0e193 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1978 : BV:32
4 : Lambda16928 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda16929 : BV:32
7 : 953651639 { 0x38d791b7 +1.68413436e242 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 67108863 ] -> 0, [ 67108864; 67108864 ] -> 0, [ 67108865; 67108865 ] -> 0, [ 67108866; 67108866 ] -> 0, [ 67108867; 67108867 ] -> 0, [ 67108868; 67108868 ] -> 0, [ 67108869; 67108869 ] -> 0, [ 67108870; 67108870 ] -> 0, [ 67108871; 67108871 ] -> 0, [ 67108872; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 41 , m_adder -> 238), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1345867697 , 1000 , 8 ) -> 1573166414, () -> 1565286989, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform1985 : BV:32
6 : Lambda16942 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda16943 : BV:32
9 : 2041679686 { 0x79b18f46 +1.38718485e116 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1490551306 { 0x58d8020a +1.68756222e50 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1573166414 { 0x5dc49d4e +1.53605055e60 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 966666525 { 0x399e291d +1.23562967e244 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 67108863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 67108864; 67108871 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 67108872; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4143972319 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4143972320; 4143972323 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4143972324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 573243768 { 0x222b0178 +1.33598232e197 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 67108863 ] -> 0, [ 67108864; 67108864 ] -> 0, [ 67108865; 67108865 ] -> 0, [ 67108866; 67108866 ] -> 0, [ 67108867; 67108867 ] -> 0, [ 67108868; 67108868 ] -> 0, [ 67108869; 67108869 ] -> 0, [ 67108870; 67108870 ] -> 0, [ 67108871; 67108871 ] -> 0, [ 67108872; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 571221123 { 0x220c2483 +1.9486424e197 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1146785098 { 0x445a8d4a +1.70743680e9 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 41 , m_adder -> 238), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4160826509
=counter_example_end
=global nodece 86 num_edges_traversed 3
=global nodece 86 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 87
=global nodece 87 nodece z3v487.ce3106.num_edges_traversed1
=global nodece 87 nodece_path
=global nodece 87 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 87 nodece_cached_counterexample
=counter_example_begin z3v487.ce3106 20c61ba7578144c1fefdb27b2892bd
=input.spec-%var-arr-1
1 : Lambda16999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17000 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3106463960 { 0xb928e0d8 -1188503336 -1.31936168e243 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda17002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17003 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16983 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1993 : BV:32
4 : Lambda17006 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda17007 : BV:32
7 : 1600903594 { 0x5f6bd9aa +1.84258008e63 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
4 : Indxform1994 : BV:32
5 : Lambda17008 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda17009 : BV:32
8 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
9 : prod(8, 4) : PROD[BV:32,BV:32]
10 : sum(1, 2, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(7, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 4, 6, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(3, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(1, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(1, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform1996 : BV:32
6 : Lambda17012 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17013 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> 0, [ 361760; 361760 ] -> 0, [ 361761; 361761 ] -> 0, [ 361762; 361762 ] -> 0, [ 361763; 361763 ] -> 0, [ 361764; 361764 ] -> 0, [ 361765; 361765 ] -> 0, [ 361766; 361766 ] -> 0, [ 361767; 361767 ] -> 0, [ 361768; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform1998 : BV:32
6 : Lambda17016 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17017 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform2000 : BV:32
6 : Lambda17020 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17021 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1177112447 { 0x46294f7f +1.32273852e13 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 564666447 { 0x21a8204f +1.31348598e196 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778591864 { 0x6a032878 +1.2467250e85 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 361760; 361767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 361768; 430723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 430724; 430727 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 430728; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3106463991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3106463992; 3106463995 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3106463996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 564666447 { 0x21a8204f +1.31348598e196 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 792334184 { 0x2f3a0f68 +1.45359516e223 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 950903781 { 0x38ada3e5 +1.35656416e242 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3106463960 { 0xb928e0d8 -1188503336 -1.31936168e243 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 361759 ] -> 0, [ 361760; 361767 ] -> 119, [ 361768; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 792334184 { 0x2f3a0f68 +1.45359516e223 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 361759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 361760; 361767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 361768; 430723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 430724; 430727 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 430728; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3106463991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3106463992; 3106463995 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3106463996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1778591864 { 0x6a032878 +1.2467250e85 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 361764 { 0x58524 +1.4312562e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3106463992 { 0xb928e0f8 -1188503304 -1.31936550e243 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3106463992 { 0xb928e0f8 -1188503304 -1.31936550e243 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 361764 { 0x58524 +1.4312562e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 430727 { 0x69287 +1.5134665e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
2503492465
=counter_example_end
=global nodece 87 num_edges_traversed 1
=global nodece 87 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 88
=global nodece 88 nodece z3v487.ce3137.num_edges_traversed2
=global nodece 88 nodece_path
=global nodece 88 nodece_path.graph_edge_composition
(epsilon)
=global nodece 88 nodece_cached_counterexample
=counter_example_begin z3v487.ce3137 8883a9e45bdba7d3f14a12452214f12f
=input.spec-%var-arr-1
1 : Lambda16999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17000 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3106463960 { 0xb928e0d8 -1188503336 -1.31936168e243 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda17002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17003 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16983 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1993 : BV:32
4 : Lambda17006 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda17007 : BV:32
7 : 1600903594 { 0x5f6bd9aa +1.84258008e63 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> 0, [ 361760; 361760 ] -> 0, [ 361761; 361761 ] -> 0, [ 361762; 361762 ] -> 0, [ 361763; 361763 ] -> 0, [ 361764; 361764 ] -> 0, [ 361765; 361765 ] -> 0, [ 361766; 361766 ] -> 0, [ 361767; 361767 ] -> 0, [ 361768; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform2000 : BV:32
6 : Lambda17020 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17021 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1177112447 { 0x46294f7f +1.32273852e13 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778591864 { 0x6a032878 +1.2467250e85 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 361760; 361767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 361768; 430723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 430724; 430727 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 430728; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3106463991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3106463992; 3106463995 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3106463996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 564666447 { 0x21a8204f +1.31348598e196 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 792334184 { 0x2f3a0f68 +1.45359516e223 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 950903781 { 0x38ada3e5 +1.35656416e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 430727 { 0x69287 +1.5134665e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=counter_example.random_seed
2503492465
=counter_example_end
=global nodece 88 num_edges_traversed 2
=global nodece 88 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 89
=global nodece 89 nodece z3v487.ce3141.num_edges_traversed3
=global nodece 89 nodece_path
=global nodece 89 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 89 nodece_cached_counterexample
=counter_example_begin z3v487.ce3141 d3feb146e3c99d2cb2bba970ef27f9c1
=nextpc_const.1
1 : 2121273215 { 0x7e700f7f +1.87547290e125 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17000 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3106463960 { 0xb928e0d8 -1188503336 -1.31936168e243 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda17002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17003 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16983 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1993 : BV:32
4 : Lambda17006 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda17007 : BV:32
7 : 1600903594 { 0x5f6bd9aa +1.84258008e63 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> 0, [ 361760; 361760 ] -> 0, [ 361761; 361761 ] -> 0, [ 361762; 361762 ] -> 0, [ 361763; 361763 ] -> 0, [ 361764; 361764 ] -> 0, [ 361765; 361765 ] -> 0, [ 361766; 361766 ] -> 0, [ 361767; 361767 ] -> 0, [ 361768; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2121273215 , 1000 , 8 ) -> 1675011904, () -> 382988880, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform2000 : BV:32
6 : Lambda17020 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17021 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : sym_const(17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1177112447 { 0x46294f7f +1.32273852e13 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1675011904 { 0x63d6a740 +1.67697906e72 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778591864 { 0x6a032878 +1.2467250e85 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 361760; 361767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 361768; 430723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 430724; 430727 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 430728; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3106463991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3106463992; 3106463995 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3106463996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 564666447 { 0x21a8204f +1.31348598e196 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 361759 ] -> 0, [ 361760; 361760 ] -> 0, [ 361761; 361761 ] -> 0, [ 361762; 361762 ] -> 0, [ 361763; 361763 ] -> 0, [ 361764; 361764 ] -> 0, [ 361765; 361765 ] -> 0, [ 361766; 361766 ] -> 0, [ 361767; 361767 ] -> 0, [ 361768; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 792334184 { 0x2f3a0f68 +1.45359516e223 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 361760 { 0x58520 +1.4312515e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 950903781 { 0x38ada3e5 +1.35656416e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 430727 { 0x69287 +1.5134665e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3909154485
=counter_example_end
=global nodece 89 num_edges_traversed 3
=global nodece 89 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 90
=global nodece 90 nodece z3v487.ce3160.num_edges_traversed4
=global nodece 90 nodece_path
=global nodece 90 nodece_path.graph_edge_composition
(epsilon)
=global nodece 90 nodece_cached_counterexample
=counter_example_begin z3v487.ce3160 43a2b6588eb510aea9a46cea81d7bc5
=nextpc_const.1
1 : 2121273215 { 0x7e700f7f +1.87547290e125 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17000 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3106463960 { 0xb928e0d8 -1188503336 -1.31936168e243 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda17002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17003 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16983 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1993 : BV:32
4 : Lambda17006 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda17007 : BV:32
7 : 1600903594 { 0x5f6bd9aa +1.84258008e63 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1675011903 ] -> 0, [ 1675011904; 1675011904 ] -> 0, [ 1675011905; 1675011905 ] -> 0, [ 1675011906; 1675011906 ] -> 0, [ 1675011907; 1675011907 ] -> 0, [ 1675011908; 1675011908 ] -> 32, [ 1675011909; 1675011909 ] -> 133, [ 1675011910; 1675011910 ] -> 5, [ 1675011911; 1675011911 ] -> 0, [ 1675011912; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2121273215 , 1000 , 8 ) -> 1675011904, () -> 382988880, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform2007 : BV:32
6 : Lambda17034 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17035 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1177112448 { 0x46294f80 +1.32273864e13 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778591865 { 0x6a032879 +1.2467262e85 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 361760; 361767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 361768; 430723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 430724; 430727 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 430728; 1675011903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1675011904; 1675011911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1675011912; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3106463991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3106463992; 3106463995 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3106463996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 564666447 { 0x21a8204f +1.31348598e196 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 792334184 { 0x2f3a0f68 +1.45359516e223 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1675011904 { 0x63d6a740 +1.67697906e72 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 950903782 { 0x38ada3e6 +1.35656428e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 430727 { 0x69287 +1.5134665e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3909154485
=counter_example_end
=global nodece 90 num_edges_traversed 4
=global nodece 90 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 91
=global nodece 91 nodece z3v487.ce3176.num_edges_traversed5
=global nodece 91 nodece_path
=global nodece 91 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 91 nodece_cached_counterexample
=counter_example_begin z3v487.ce3176 3870458494bf6fcb43a7310da8cf114
=nextpc_const.1
1 : 2121273215 { 0x7e700f7f +1.87547290e125 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17000 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3106463960 { 0xb928e0d8 -1188503336 -1.31936168e243 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda17002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17003 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16983 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1993 : BV:32
4 : Lambda17006 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda17007 : BV:32
7 : 1600903594 { 0x5f6bd9aa +1.84258008e63 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1675011903 ] -> 0, [ 1675011904; 1675011904 ] -> 0, [ 1675011905; 1675011905 ] -> 0, [ 1675011906; 1675011906 ] -> 0, [ 1675011907; 1675011907 ] -> 0, [ 1675011908; 1675011908 ] -> 32, [ 1675011909; 1675011909 ] -> 133, [ 1675011910; 1675011910 ] -> 5, [ 1675011911; 1675011911 ] -> 0, [ 1675011912; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2121273215 , 1000 , 8 ) -> 1675011904, () -> 382988880, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform2007 : BV:32
6 : Lambda17034 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17035 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1177112448 { 0x46294f80 +1.32273864e13 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778591865 { 0x6a032879 +1.2467262e85 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 361760; 361767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 361768; 430723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 430724; 430727 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 430728; 1675011903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1675011904; 1675011911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1675011912; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3106463991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3106463992; 3106463995 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3106463996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 564666447 { 0x21a8204f +1.31348598e196 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 792334184 { 0x2f3a0f68 +1.45359516e223 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1675011904 { 0x63d6a740 +1.67697906e72 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 950903782 { 0x38ada3e6 +1.35656428e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 430727 { 0x69287 +1.5134665e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3909154485
=counter_example_end
=global nodece 91 num_edges_traversed 5
=global nodece 91 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 92
=global nodece 92 nodece z3v487.ce3186.num_edges_traversed6
=global nodece 92 nodece_path
=global nodece 92 nodece_path.graph_edge_composition
(epsilon)
=global nodece 92 nodece_cached_counterexample
=counter_example_begin z3v487.ce3186 8abb7ef723f3aba2c5bba0492ab26e9
=nextpc_const.1
1 : 2121273215 { 0x7e700f7f +1.87547290e125 } : BV:32
=input.spec-%var-arr-1
1 : Lambda16999 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17000 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3106463960 { 0xb928e0d8 -1188503336 -1.31936168e243 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda17002 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 15 { 0xf +1.178e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16 { 0x10 +1.190e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda17003 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : and(20, 24) : BOOL
29 : ite(28, 2, 2) : BV:32
30 : ite(27, 29, 2) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda16983 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 15 { 0xf +1.178e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 16 { 0x10 +1.190e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : and(5, 13) : BOOL
19 : ite(18, 4, 4) : BV:32
20 : ite(17, 19, 4) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : Indxform1993 : BV:32
4 : Lambda17006 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda17007 : BV:32
7 : 1600903594 { 0x5f6bd9aa +1.84258008e63 } : BV:32
8 : prod(7, 3) : PROD[BV:32,BV:32]
9 : sum(1, 2, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(6, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 3, 5, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : prod(1, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(1, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 15 ] -> true, [ 16; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1675011903 ] -> 0, [ 1675011904; 1675011904 ] -> 0, [ 1675011905; 1675011905 ] -> 0, [ 1675011906; 1675011906 ] -> 0, [ 1675011907; 1675011907 ] -> 0, [ 1675011908; 1675011908 ] -> 32, [ 1675011909; 1675011909 ] -> 133, [ 1675011910; 1675011910 ] -> 5, [ 1675011911; 1675011911 ] -> 0, [ 1675011912; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2121273215 , 1000 , 8 ) -> 1675011904, () -> 382988880, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : Indxform2007 : BV:32
6 : Lambda17034 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda17035 : BV:32
9 : 889959757 { 0x350bb54d +1.9147036e235 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(4, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(3, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : prod(3, 15) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
17 : sum(1, 2, 16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
18 : prod(3, 17) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
19 : sum(1, 2, 18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
20 : sym_const(19) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1177112448 { 0x46294f80 +1.32273864e13 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1675011904 { 0x63d6a740 +1.67697906e72 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1778591865 { 0x6a032879 +1.2467262e85 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 361759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 361760; 361767 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 361768; 430723 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 430724; 430727 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 430728; 1675011903 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1675011904; 1675011911 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1675011912; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 3106463991 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3106463992; 3106463995 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3106463996; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 564666447 { 0x21a8204f +1.31348598e196 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1675011903 ] -> 0, [ 1675011904; 1675011904 ] -> 0, [ 1675011905; 1675011905 ] -> 0, [ 1675011906; 1675011906 ] -> 0, [ 1675011907; 1675011907 ] -> 0, [ 1675011908; 1675011908 ] -> 32, [ 1675011909; 1675011909 ] -> 133, [ 1675011910; 1675011910 ] -> 5, [ 1675011911; 1675011911 ] -> 0, [ 1675011912; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 792334184 { 0x2f3a0f68 +1.45359516e223 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1675011904 { 0x63d6a740 +1.67697906e72 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 950903782 { 0x38ada3e6 +1.35656428e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 430724 { 0x69284 +1.5134630e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 430727 { 0x69287 +1.5134665e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.2.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.1.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.2.0
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 240 , m_adder -> 180), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3909154485
=counter_example_end
=global nodece 92 num_edges_traversed 6
=global nodece 92 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 21
1 : spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 22
1 : spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 23
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 29
1 : spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 30
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 31
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : eq(25, 42) : BOOL
44 : and(24, 43) : BOOL
=inductive-invariants point_set point_expr 32
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 33
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 34
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 35
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(14, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=inductive-invariants point_set point_expr 36
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 37
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=inductive-invariants point_set point_expr 38
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 15, 16) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 15, 16) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(25, 22, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(24, 43) : BOOL
45 : and(23, 44) : BOOL
=inductive-invariants point_set point_expr 39
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 40
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=inductive-invariants point_set point_expr 41
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 42
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 43
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 44
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 45
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 46
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 47
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 48
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 49
1 : spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 50
1 : spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 51
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 52
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : eq(25, 42) : BOOL
44 : and(24, 43) : BOOL
=inductive-invariants point_set point_expr 53
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 54
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 55
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=inductive-invariants point_set point_expr 60
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 61
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(14, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=inductive-invariants point_set point_expr 62
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 63
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=inductive-invariants point_set point_expr 64
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 15, 16) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 15, 16) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(25, 22, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(24, 43) : BOOL
45 : and(23, 44) : BOOL
=inductive-invariants point_set point_expr 65
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 66
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=inductive-invariants point_set point_expr 67
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set point_expr 68
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce99
=inductive-invariants point_set point z3.ce99 expr point z3.ce99
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2679338256
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce99 expr point z3.ce99 done
=inductive-invariants point_set point z3v487.ce100
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce100 expr point z3v487.ce100 done
=inductive-invariants point_set point z3v487.ce11
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce11 expr point z3v487.ce11 done
=inductive-invariants point_set point z3.ce12
=inductive-invariants point_set point z3.ce12 expr point z3.ce12
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3851942656
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
278370199
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce12 expr point z3.ce12 done
=inductive-invariants point_set point z3v487.ce34
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2490368
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce34 expr point z3v487.ce34 done
=inductive-invariants point_set point z3.ce33
=inductive-invariants point_set point z3.ce33 expr point z3.ce33
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
6331392
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce33 expr point z3.ce33 done
=inductive-invariants point_set point z3v487.ce56
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce56 expr point z3v487.ce56 done
=inductive-invariants point_set point z3.ce55
=inductive-invariants point_set point z3.ce55 expr point z3.ce55
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4110417920
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67109120
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce55 expr point z3.ce55 done
=inductive-invariants point_set point z3v487.ce78
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce78 expr point z3v487.ce78 done
=inductive-invariants point_set point z3.ce77
=inductive-invariants point_set point z3.ce77 expr point z3.ce77
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4210884608
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4261216257
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce77 expr point z3.ce77 done
=inductive-invariants point_set point z3v487.ce121
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce121 expr point z3v487.ce121 done
=inductive-invariants point_set point z3.ce122
=inductive-invariants point_set point z3.ce122 expr point z3.ce122
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2679338248
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce122 expr point z3.ce122 done
=inductive-invariants point_set point z3v487.ce188
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1610625088
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
805439489
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 done
=inductive-invariants point_set point z3.ce187
=inductive-invariants point_set point z3.ce187 expr point z3.ce187
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2685409860
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
348782697
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 done
=inductive-invariants point_set point z3v487.ce143
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce143 expr point z3v487.ce143 done
=inductive-invariants point_set point z3.ce144
=inductive-invariants point_set point z3.ce144 expr point z3.ce144
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2077297668
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce144 expr point z3.ce144 done
=inductive-invariants point_set point z3v487.ce166
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294967040
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce166 expr point z3v487.ce166 done
=inductive-invariants point_set point z3.ce165
=inductive-invariants point_set point z3.ce165 expr point z3.ce165
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2646334976
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce165 expr point z3.ce165 done
=inductive-invariants point_set point z3.ce215
=inductive-invariants point_set point z3.ce215 expr point z3.ce215
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1866430812
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 done
=inductive-invariants point_set point z3v487.ce216
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
100663328
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 done
=inductive-invariants point_set point z3v487.ce237
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2214863168
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce237 expr point z3v487.ce237 done
=inductive-invariants point_set point z3.ce238
=inductive-invariants point_set point z3.ce238 expr point z3.ce238
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3997722448
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce238 expr point z3.ce238 done
=inductive-invariants point_set point z3v487.ce260
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2214863168
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce260 expr point z3v487.ce260 done
=inductive-invariants point_set point z3.ce259
=inductive-invariants point_set point z3.ce259 expr point z3.ce259
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3234869552
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce259 expr point z3.ce259 done
=inductive-invariants point_set point z3v487.ce288
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 done
=inductive-invariants point_set point z3.ce287
=inductive-invariants point_set point z3.ce287 expr point z3.ce287
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3851942656
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
278370199
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 done
=inductive-invariants point_set point z3.ce2458
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
123433208
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
123433208
=inductive-invariants point_set point z3.ce2458 expr point z3.ce2458 done
=inductive-invariants point_set point z3v487.ce2497
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
296306944
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1073741820
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1697797108
=inductive-invariants point_set point z3v487.ce2497 expr point z3v487.ce2497 done
=inductive-invariants point_set point z3.ce2419
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2050431808
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2050431808
=inductive-invariants point_set point z3.ce2419 expr point z3.ce2419 done
=inductive-invariants point_set point z3.ce967
=inductive-invariants point_set point z3.ce967 expr point z3.ce967
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce967 expr point z3.ce967 done
=inductive-invariants point_set point z3v487.ce971
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce971 expr point z3v487.ce971 done
=inductive-invariants point_set point z3.ce1231
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1231 expr point z3.ce1231 done
=inductive-invariants point_set point z3v487.ce1230
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1230 expr point z3v487.ce1230 done
=inductive-invariants point_set point z3.ce1252
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
128
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1252 expr point z3.ce1252 done
=inductive-invariants point_set point z3v487.ce1253
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1253 expr point z3v487.ce1253 done
=inductive-invariants point_set point z3.ce1274
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1274 expr point z3.ce1274 done
=inductive-invariants point_set point z3v487.ce1275
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1275 expr point z3v487.ce1275 done
=inductive-invariants point_set point z3.ce1296
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1296 expr point z3.ce1296 done
=inductive-invariants point_set point z3v487.ce1297
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
128
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1297 expr point z3v487.ce1297 done
=inductive-invariants point_set point z3.ce1318
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1318 expr point z3.ce1318 done
=inductive-invariants point_set point z3v487.ce1319
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1319 expr point z3v487.ce1319 done
=inductive-invariants point_set point z3v487.ce1340
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
330563616
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1340 expr point z3v487.ce1340 done
=inductive-invariants point_set point z3.ce1341
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1211683656
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1341 expr point z3.ce1341 done
=inductive-invariants point_set point z3v487.ce1374
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134512656
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1374 expr point z3v487.ce1374 done
=inductive-invariants point_set point z3.ce1375
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1246573504
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1375 expr point z3.ce1375 done
=inductive-invariants point_set point z3v487.ce1403
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16384
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1403 expr point z3v487.ce1403 done
=inductive-invariants point_set point z3.ce1402
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1402 expr point z3.ce1402 done
=inductive-invariants point_set point z3.ce1431
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1083508096
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
604661267
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1431 expr point z3.ce1431 done
=inductive-invariants point_set point z3v487.ce1430
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1115684992
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
33796
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1430 expr point z3v487.ce1430 done
=inductive-invariants point_set point z3.ce1501
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32768
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1501 expr point z3.ce1501 done
=inductive-invariants point_set point z3v487.ce1500
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1500 expr point z3v487.ce1500 done
=inductive-invariants point_set point z3v487.ce1534
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1249918984
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65536
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1534 expr point z3v487.ce1534 done
=inductive-invariants point_set point z3.ce1535
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1108484756
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1535 expr point z3.ce1535 done
=inductive-invariants point_set point z3.ce1663
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
524288
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1098395926
=inductive-invariants point_set point z3.ce1663 expr point z3.ce1663 done
=inductive-invariants point_set point z3v487.ce1666
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
65207228
=inductive-invariants point_set point z3v487.ce1666 expr point z3v487.ce1666 done
=inductive-invariants point_set point z3.ce1699
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2646334976
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1185442816
=inductive-invariants point_set point z3.ce1699 expr point z3.ce1699 done
=inductive-invariants point_set point z3v487.ce1702
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1418039576
=inductive-invariants point_set point z3v487.ce1702 expr point z3v487.ce1702 done
=inductive-invariants point_set point z3v487.ce1705
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2079996730
=inductive-invariants point_set point z3v487.ce1705 expr point z3v487.ce1705 done
=inductive-invariants point_set point z3.ce1708
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4210884608
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4261216257
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
582041571
=inductive-invariants point_set point z3.ce1708 expr point z3.ce1708 done
=inductive-invariants point_set point z3.ce1711
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4110417920
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67109120
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
650004495
=inductive-invariants point_set point z3.ce1711 expr point z3.ce1711 done
=inductive-invariants point_set point z3.ce1714
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
6331392
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
648242112
=inductive-invariants point_set point z3.ce1714 expr point z3.ce1714 done
=inductive-invariants point_set point z3.ce1717
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3851942656
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
278370199
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
853186023
=inductive-invariants point_set point z3.ce1717 expr point z3.ce1717 done
=inductive-invariants point_set point z3v487.ce1965
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1941972720
=inductive-invariants point_set point z3v487.ce1965 expr point z3v487.ce1965 done
=inductive-invariants point_set point z3.ce1964
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
474403146
=inductive-invariants point_set point z3.ce1964 expr point z3.ce1964 done
=inductive-invariants point_set point z3v487.ce1983
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
34116608
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
33554433
=inductive-invariants point_set point z3v487.ce1983 expr point z3v487.ce1983 done
=inductive-invariants point_set point z3v487.ce1994
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
206577712
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1578109741
=inductive-invariants point_set point z3v487.ce1994 expr point z3v487.ce1994 done
=inductive-invariants point_set point z3.ce1995
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
537796768
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
842158537
=inductive-invariants point_set point z3.ce1995 expr point z3.ce1995 done
=inductive-invariants point_set point z3.ce2033
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1422957334
=inductive-invariants point_set point z3.ce2033 expr point z3.ce2033 done
=inductive-invariants point_set point z3v487.ce2032
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1981100149
=inductive-invariants point_set point z3v487.ce2032 expr point z3v487.ce2032 done
=inductive-invariants point_set point z3v487.ce2064
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
537650496
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
371970059
=inductive-invariants point_set point z3v487.ce2064 expr point z3v487.ce2064 done
=inductive-invariants point_set point z3.ce2065
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1624267908
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1041283352
=inductive-invariants point_set point z3.ce2065 expr point z3.ce2065 done
=inductive-invariants point_set point z3v487.ce2148
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2755821568
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
645303815
=inductive-invariants point_set point z3v487.ce2148 expr point z3v487.ce2148 done
=inductive-invariants point_set point z3.ce2147
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3359688960
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
909553721
=inductive-invariants point_set point z3.ce2147 expr point z3.ce2147 done
=inductive-invariants point_set point z3v487.ce2168
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
734625003
=inductive-invariants point_set point z3v487.ce2168 expr point z3v487.ce2168 done
=inductive-invariants point_set point z3.ce2167
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1781390963
=inductive-invariants point_set point z3.ce2167 expr point z3.ce2167 done
=inductive-invariants point_set point z3v487.ce2188
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
654338048
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
33554433
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
418236558
=inductive-invariants point_set point z3v487.ce2188 expr point z3v487.ce2188 done
=inductive-invariants point_set point z3.ce2187
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2611323112
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
137298
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1696825026
=inductive-invariants point_set point z3.ce2187 expr point z3.ce2187 done
=inductive-invariants point_set point z3v487.ce2222
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
296306944
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1073741820
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2222 expr point z3v487.ce2222 done
=inductive-invariants point_set point z3.ce2245
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
123433208
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2245 expr point z3.ce2245 done
=inductive-invariants point_set point z3.ce2255
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2050431808
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2255 expr point z3.ce2255 done
=inductive-invariants point_set point z3v487.ce2376
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1418039576
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2376 expr point z3v487.ce2376 done
=inductive-invariants point_set point z3.ce2343
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
648242112
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
6331392
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2343 expr point z3.ce2343 done
=inductive-invariants point_set point z3v487.ce2532
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
296306944
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1697797108
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2532 expr point z3v487.ce2532 done
=inductive-invariants point_set point z3v487.ce2777
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
315019682
=inductive-invariants point_set point z3v487.ce2777 expr point z3v487.ce2777 done
=inductive-invariants point_set point z3.ce2776
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4294967168
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
3
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1850769211
=inductive-invariants point_set point z3.ce2776 expr point z3.ce2776 done
=inductive-invariants point_set point z3v487.ce2842
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3664585280
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1152967321
=inductive-invariants point_set point z3v487.ce2842 expr point z3v487.ce2842 done
=inductive-invariants point_set point z3v487.ce2807
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3664585280
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2807 expr point z3v487.ce2807 done
=inductive-invariants point_set point z3v487.ce2889
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2147483196
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1073741820
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
18
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2126578461
=inductive-invariants point_set point z3v487.ce2889 expr point z3v487.ce2889 done
=inductive-invariants point_set point z3v487.ce2854
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2147483196
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1073741820
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
18
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2854 expr point z3v487.ce2854 done
=inductive-invariants point_set point z3v487.ce2906
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4169137472
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2906 expr point z3v487.ce2906 done
=inductive-invariants point_set point z3v487.ce2956
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131073
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2956 expr point z3v487.ce2956 done
=inductive-invariants point_set point z3.ce2957
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2957 expr point z3.ce2957 done
=inductive-invariants point_set point z3v487.ce2990
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2990 expr point z3v487.ce2990 done
=inductive-invariants point_set point z3.ce2991
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 2 for input.spec-%var-i-0.L3%6%bbentry
6
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
7
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2991 expr point z3.ce2991 done
=inductive-invariants point_set point z3.ce3031
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
6
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
331963486
=inductive-invariants point_set point z3.ce3031 expr point z3.ce3031 done
=inductive-invariants point_set point z3v487.ce3090
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 2 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4143972292
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
67108864
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1573166414
=inductive-invariants point_set point z3v487.ce3090 expr point z3v487.ce3090 done
=inductive-invariants point_set point z3v487.ce3055
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 2 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4143972292
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
67108864
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3055 expr point z3v487.ce3055 done
=inductive-invariants point_set point z3v487.ce3141
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3106463960
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
361760
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 val 41 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1675011904
=inductive-invariants point_set point z3v487.ce3141 expr point z3v487.ce3141 done
=inductive-invariants point_set point z3v487.ce3106
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3106463960
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
361760
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3106 expr point z3v487.ce3106 done
=inductive-invariants point_set point z3v487.ce3176
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 2 for input.spec-%var-i-0.L3%6%bbentry
10
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3106463960
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
10
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1675011904
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 val 28 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3176 expr point z3v487.ce3176 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallStart for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce971
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 28
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-32-free_var_idx.28
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce967
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce971
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce1231
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce1230
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce1252
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce1274
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce1296
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce1297
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce2376
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce2343
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3v487.ce2532
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=11; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 28->0; 
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 28->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 28->0; 
28
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 28->1; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce971
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce2343
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce2532
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce2956
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce2990
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3176
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce971
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce2343
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce2532
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce2956
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce2990
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3176
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=6; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce967
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce971
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3v487.ce1230
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce1253
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce1318
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=5; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3v487.ce971
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3v487.ce1253
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 23 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 22
1 : spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 24
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 25
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 26
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 27
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 29
1 : spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 30
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 31
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : eq(25, 42) : BOOL
44 : and(24, 43) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 32
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 33
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 34
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 35
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(14, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 36
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 37
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 38
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 15, 16) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 15, 16) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(25, 22, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(24, 43) : BOOL
45 : and(23, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 39
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 40
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3v487.ce971
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=23; number of visited CEs=1; number of preds=3
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallEnd for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce1717
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 41
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce2458
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce2497
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce2419
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3v487.ce1702
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce1705
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce1708
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce1711
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce1714
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce1717
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=9; number of preds=3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 41->0; 
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 41->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 41->0; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce2419
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce1717
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3.ce2776
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce2889
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce3031
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3090
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce3141
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce2419
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce1717
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3.ce2776
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce2889
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce3031
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3090
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 6: z3v487.ce3141
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce1699
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce1708
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce1717
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce1964
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce1708
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce1717
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 27 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 42
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 43
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 44
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 45
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 46
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 47
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 48
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 49
1 : spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 50
1 : spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 51
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 52
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : eq(25, 42) : BOOL
44 : and(24, 43) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 53
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 54
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 55
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 56
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 57
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 58
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 59
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 60
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 61
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(14, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 62
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 63
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 64
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 15, 16) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 15, 16) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(28, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(26, 27, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(25, 22, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(24, 43) : BOOL
45 : and(23, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 65
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 66
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : Indxform0 : BV:32
30 : bvadd(8, 12) : BV:32
31 : select(9, 10, 11, 30, 16, 17) : BV:32
32 : lambda(8, 31) : FUNCTION[BV:32 -> BV:32]
33 : eq(2, 1) : BOOL
34 : 1 { 0x1 +1.11e129 } : BV:32
35 : ite(33, 2, 34) : BV:32
36 : unit : UNIT
37 : select(9, 10, 11, 1, 16, 17) : BV:32
38 : prod(37, 29) : PROD[BV:32,BV:32]
39 : sum(35, 36, 38) : SUM[UNIT,PROD[BV:32,BV:32]]
40 : lambda(1, 39) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
41 : ind(4, 29, 32, 40) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
42 : prod_init(27, 28, 41) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
43 : sum_init(26, 23, 42) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
44 : eq(25, 43) : BOOL
45 : and(24, 44) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 67
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 68
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
30 : Indxform0 : BV:32
31 : bvadd(8, 12) : BV:32
32 : select(9, 10, 11, 31, 16, 17) : BV:32
33 : lambda(8, 32) : FUNCTION[BV:32 -> BV:32]
34 : eq(2, 1) : BOOL
35 : 1 { 0x1 +1.11e129 } : BV:32
36 : ite(34, 2, 35) : BV:32
37 : unit : UNIT
38 : select(9, 10, 11, 1, 16, 17) : BV:32
39 : prod(38, 30) : PROD[BV:32,BV:32]
40 : sum(36, 37, 39) : SUM[UNIT,PROD[BV:32,BV:32]]
41 : lambda(1, 40) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
42 : ind(29, 30, 33, 41) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
43 : prod_init(27, 28, 42) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
44 : sum_init(26, 23, 43) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
45 : eq(25, 44) : BOOL
46 : and(24, 45) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce1717
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=27; number of visited CEs=1; number of preds=3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce11
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce99
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce11
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce12
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce33
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce56
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce55
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce77
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3v487.ce121
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce143
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce2222
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3.ce2245
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3.ce2255
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=12; number of preds=3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce11
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce2255
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce2807
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce2854
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3v487.ce2906
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce3055
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce3106
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce11
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce2255
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce2807
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce2854
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3v487.ce2906
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce3055
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 6: z3v487.ce3106
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce11
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce12
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce77
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce165
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3v487.ce11
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce12
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 2: z3.ce77
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 13 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 22
1 : spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 23
1 : spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 24
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 25
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 26
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 27
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3v487.ce11
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=13; number of visited CEs=1; number of preds=3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
4 : input.spec-%var-i-0.L3%6%bbentry : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
3 : Indxform0 : BV:32
4 : Lambda1 : BV:32
5 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : memlabel-top : MEMLABEL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(5, 6, 7, 9, 10, 11) : BV:32
13 : lambda(4, 12) : FUNCTION[BV:32 -> BV:32]
14 : Lambda0 : BV:32
15 : 0 { 0x0 +1.0e129 } : BV:32
16 : eq(15, 14) : BOOL
17 : 1 { 0x1 +1.11e129 } : BV:32
18 : ite(16, 15, 17) : BV:32
19 : unit : UNIT
20 : select(5, 6, 7, 14, 10, 11) : BV:32
21 : prod(20, 3) : PROD[BV:32,BV:32]
22 : sum(18, 19, 21) : SUM[UNIT,PROD[BV:32,BV:32]]
23 : lambda(14, 22) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
24 : ind(2, 3, 13, 23) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : eq(1, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140458 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140583 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
140461 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140431 : 0 { 0x0 } : BOOL
140584 : select(140458, 140459, 140583, 140461, 140430, 140431) : BV:32
=RhsExpr
140456 : input.dst.llvm-%n : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140458 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140585 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
140460 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140431 : 0 { 0x0 } : BOOL
140586 : select(140458, 140459, 140585, 140460, 140430, 140431) : BV:32
=RhsExpr
140457 : input.dst.llvm-%arr : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140457 : input.dst.llvm-%arr : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140467 : islangaligned(140457, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #3.pred
=Comment
precond-mlasserts
=LhsExpr
141327 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
141328 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
141329 : bvule(141327, 141328) : BOOL
140427 : 4 { 0x4 +1.47e129 } : BV:32
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141330 : bvadd(140427, 140505) : BV:32
141331 : bvadd(141327, 141330) : BV:32
141332 : eq(141328, 141331) : BOOL
141333 : and(141329, 141332) : BOOL
141334 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
141335 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
141336 : bvule(141334, 141335) : BOOL
141337 : and(141333, 141336) : BOOL
141338 : bvadd(141334, 141330) : BV:32
141339 : eq(141335, 141338) : BOOL
141340 : and(141337, 141339) : BOOL
140461 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
141341 : 3 { 0x3 +1.35e129 } : BV:32
141342 : bvand(140461, 141341) : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141343 : eq(141342, 140276) : BOOL
140460 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
141344 : bvand(140460, 141341) : BV:32
141345 : eq(141344, 140276) : BOOL
141346 : and(141343, 141345) : BOOL
141347 : and(141340, 141346) : BOOL
141348 : eq(140461, 141327) : BOOL
141349 : eq(140460, 141334) : BOOL
141350 : and(141348, 141349) : BOOL
141351 : and(141347, 141350) : BOOL
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140298 : 1 { 0x1 +1.11e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141352 : region_agrees_with_memlabel(140459, 140276, 140298, 140462) : BOOL
141353 : and(141351, 141352) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #4.pred
=Comment
pointer-implements-map
=LhsExpr
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
140315 : Lambda0 : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
140375 : bvule(140276, 140315) : BOOL
140456 : input.dst.llvm-%n : BV:32
141355 : bvult(140315, 140456) : BOOL
141356 : and(140375, 141355) : BOOL
141357 : lambda(140315, 141356) : FUNCTION[BV:32 -> BOOL]
140317 : Lambda1 : BV:32
140458 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140459 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140425 : memlabel-top : MEMLABEL
140427 : 4 { 0x4 +1.47e129 } : BV:32
140428 : bvmul(140317, 140427) : BV:32
140457 : input.dst.llvm-%arr : BV:32
141370 : bvadd(140428, 140457) : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140431 : 0 { 0x0 } : BOOL
141371 : select(140458, 140459, 140425, 141370, 140430, 140431) : BV:32
141373 : lambda(140317, 141371) : FUNCTION[BV:32 -> BV:32]
141374 : map(141357, 141373) : MAP[BV:32 -> BV:32]
141378 : eq(140273, 141374) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
merged-predicate
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
219508 : and(141263, 140954) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
merged-predicate
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140911 : ite(140903, 140276, 140722) : BV:32
285730 : isgepoffset(140911, 140276) : BOOL
285731 : and(140275, 285730) : BOOL
140652 : 4 { 0x4 +1.0e1025 } : BV:64
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140718 : heap_alloc(140714, 140487, 140713, 140474) : ARRAY[BV:32 -> MEMLABEL]
140905 : ite(140903, 140714, 140718) : ARRAY[BV:32 -> MEMLABEL]
140913 : malloc_side_effect(140726, 140905, 140487) : BV:32
140519 : 32 { 0x20 +1.0e1025 } : INT
285732 : bvsign_ext(140913, 140519) : BV:64
286149 : bvmul(140652, 285732) : BV:64
140523 : 63 { 0x3f +1.0e1025 } : INT
286163 : bvextract(286149, 140523, 140519) : BV:32
286566 : bvslt(140913, 140276) : BOOL
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
286567 : ite(286566, 140505, 140276) : BV:32
286787 : eq(286163, 286567) : BOOL
140430 : 4 { 0x4 +1.0e1025 } : INT
286788 : isindexforsize(286787, 140430) : BOOL
140712 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
140908 : malloc_side_effect(140712, 140905, 140487) : BV:32
140427 : 4 { 0x4 +1.47e129 } : BV:32
147743 : bvmul(140427, 140913) : BV:32
154221 : bvadd(140908, 147743) : BV:32
286802 : isgepoffset(154221, 147743) : BOOL
287364 : and(286788, 286802) : BOOL
287365 : islangaligned(154221, 140430) : BOOL
287366 : and(287364, 287365, 285730, 285731) : BOOL
287367 : islangaligned(140911, 140430) : BOOL
154222 : bvadd(140427, 140911) : BV:32
287368 : isgepoffset(154222, 140427) : BOOL
287369 : and(285731, 287366, 287367, 287368) : BOOL
287370 : islangaligned(154222, 140430) : BOOL
287371 : and(287369, 287370) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallStart
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 21
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallEnd
m_dst_rank: 4, m_src_rank: 0, m_spec_rank: 25
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 11
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
