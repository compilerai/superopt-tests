=FunctionName: bar
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph bar.A2.B2.C2.D2.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.bar:
=TFG:
=Nodes: L0%0%d L3%1%fcallStart L3%1%fcallEnd L3%3%fcallStart L3%3%fcallEnd E0%0%d
=Edges:
L0%0%d => L3%1%fcallStart
L3%1%fcallStart => L3%1%fcallEnd
L3%1%fcallEnd => L3%3%fcallStart
L3%3%fcallStart => L3%3%fcallEnd
L3%3%fcallEnd => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L3%1%fcallStart
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L3%1%fcallEnd
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L3%3%fcallStart
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L3%3%fcallEnd
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: bar
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;bar}
=memlabel_map.0 for call-context {*;bar}
mlheap.src.spec.bar : memlabel-mem--heap
=Edge: L0%0%d => L3%1%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(func_head*fcall_edge_start)
tfg_edge_comment end

=Edge: L3%1%fcallStart => L3%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-24.L3%1%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*fn_app)
tfg_edge_comment end

=Edge: L3%1%fcallEnd => L3%3%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-fi-0.L3%3%fcallStart
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*(letin_def*fcall_edge_start))
tfg_edge_comment end

=Edge: L3%3%fcallStart => L3%3%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=spec-%tmpvar-25.L3%3%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*fn_app)
tfg_edge_comment end

=Edge: L3%3%fcallEnd => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-26.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-27.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-28.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-29.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%var-se-0.E0%0%d
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((fcall_edge_end*letin_def)*intrinsic_app_bvsub)*letin_body)*letin_body)*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.bar
=Loc 1 in src.spec.bar.
REGMEM
spec-%var-m1-1
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=Loc 2 in src.spec.bar.
REGMEM
spec-%var-m2-1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=Loc 13 in src.spec.bar.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 14 in src.spec.bar.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 15 in src.spec.bar.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 16 in src.spec.bar.
REGMEM
spec-%tmpvar-24.L3%1%fcallEnd
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=Loc 17 in src.spec.bar.
REGMEM
spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd : MAP[BV:32 -> BV:32]
=Loc 18 in src.spec.bar.
REGMEM
spec-%var-fi-0.L3%3%fcallStart
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=Loc 19 in src.spec.bar.
REGMEM
spec-%tmpvar-25.L3%3%fcallEnd
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
=Loc 20 in src.spec.bar.
REGMEM
spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd : MAP[BV:32 -> BV:32]
=Loc 21 in src.spec.bar.
REGMEM
spec-%tmpvar-26.E0%0%d
1 : input.spec-%tmpvar-26.E0%0%d : BV:32
=Loc 22 in src.spec.bar.
REGMEM
spec-%tmpvar-27.E0%0%d
1 : input.spec-%tmpvar-27.E0%0%d : BV:32
=Loc 23 in src.spec.bar.
REGMEM
spec-%tmpvar-28.E0%0%d
1 : input.spec-%tmpvar-28.E0%0%d : BV:32
=Loc 24 in src.spec.bar.
REGMEM
spec-%tmpvar-29.E0%0%d
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
=Loc 25 in src.spec.bar.
REGMEM
spec-%var-se-0.E0%0%d
1 : input.spec-%var-se-0.E0%0%d : BV:32
=Locs end
=Liveness in src.spec.bar
=live locs at L0%0%d
1, 2, 
=live locs at L3%1%fcallStart
1, 2, 
=live locs at L3%1%fcallEnd
2, 16, 
=live locs at L3%3%fcallStart
2, 18, 
=live locs at L3%3%fcallEnd
18, 19, 
=live locs at E0%0%d
24[f], 

=Definedness in src.spec.bar
=loc definedness at L0%0%d
1, 2, 13, 14, 15
=loc definedness at L3%1%fcallStart
1, 2, 13, 14, 15
=loc definedness at L3%1%fcallEnd
1, 2, 13, 14, 15, 16, 17
=loc definedness at L3%3%fcallStart
1, 2, 13, 14, 15, 16, 17, 18
=loc definedness at L3%3%fcallEnd
1, 2, 13, 14, 15, 16, 17, 18, 19, 20
=loc definedness at E0%0%d
1, 2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25

=Branch affecting variable locs in src.spec.bar
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at L3%1%fcallStart

=branch affecting variable locs at L3%1%fcallEnd

=branch affecting variable locs at L3%3%fcallStart

=branch affecting variable locs at L3%3%fcallEnd

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.bar
=relevant memlabels
=function: bar
memlabel-mem--heap
memlabel-mem--arg.0
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at L3%1%fcallStart=>L3%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at L3%1%fcallStart=>L3%1%fcallEnd for loc_id 16 {input.spec-%tmpvar-24.L3%1%fcallEnd }
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%1%fcallStart=>L3%1%fcallEnd for loc_id 17 {input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd }
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%1%fcallStart=>L3%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at L3%1%fcallEnd=>L3%3%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L3%1%fcallEnd=>L3%3%fcallStart for loc_id 18 {input.spec-%var-fi-0.L3%3%fcallStart }
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%1%fcallEnd=>L3%3%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallStart=>L3%3%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallStart=>L3%3%fcallEnd for loc_id 19 {input.spec-%tmpvar-25.L3%3%fcallEnd }
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallStart=>L3%3%fcallEnd for loc_id 20 {input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd }
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallStart=>L3%3%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallEnd=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallEnd=>E0%0%d for loc_id 21 {input.spec-%tmpvar-26.E0%0%d }
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallEnd=>E0%0%d for loc_id 22 {input.spec-%tmpvar-27.E0%0%d }
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallEnd=>E0%0%d for loc_id 23 {input.spec-%tmpvar-28.E0%0%d }
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallEnd=>E0%0%d for loc_id 24 {input.spec-%tmpvar-29.E0%0%d }
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallEnd=>E0%0%d for loc_id 25 {input.spec-%var-se-0.E0%0%d }
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%3%fcallEnd=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%1%fcallStart:
vacuous mls at L3%1%fcallEnd:
vacuous mls at L3%3%fcallStart:
vacuous mls at L3%3%fcallEnd:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%1%fcallStart:
non-vacuous mls at L3%1%fcallEnd:
non-vacuous mls at L3%3%fcallStart:
non-vacuous mls at L3%3%fcallEnd:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.bar
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 2
=loc_expr
140274 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 17
=loc_expr
140387 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 20
=loc_expr
140388 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.bar
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;bar}
=loc_id 1 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 2 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, )
=loc_id 13 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 14 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 15 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 17 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 18 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 19 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, )
=loc_id 20 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, )
=loc_id 21 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 22 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 23 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 24 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, )
=loc_id 25 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%1%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%1%fcallStart=>L3%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%1%fcallEnd=>L3%3%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%3%fcallStart=>L3%3%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%3%fcallEnd=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%1%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%1%fcallStart=>L3%1%fcallEnd
=spec-%tmpvar-24.L3%1%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%1%fcallEnd=>L3%3%fcallStart
=spec-%var-fi-0.L3%3%fcallStart
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%3%fcallStart=>L3%3%fcallEnd
=spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=spec-%tmpvar-25.L3%3%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%3%fcallEnd=>E0%0%d
=spec-%tmpvar-26.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-27.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-28.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-29.E0%0%d
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-se-0.E0%0%d
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at L3%1%fcallStart=>L3%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at L3%1%fcallStart=>L3%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at L3%1%fcallEnd=>L3%3%fcallStart
=graph_with_simplified_assets.simplified_assumes at L3%1%fcallEnd=>L3%3%fcallStart done
=graph_with_simplified_assets.simplified_assumes at L3%3%fcallStart=>L3%3%fcallEnd
=graph_with_simplified_assets.simplified_assumes at L3%3%fcallStart=>L3%3%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at L3%3%fcallEnd=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%3%fcallEnd=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
C_NEXTPC1 : foo
=Nextpc-map done
=suffixpaths for src.spec.bar
=suffixpath_at_L0%0%d for src.spec.bar
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%1%fcallStart for src.spec.bar
=suffixpath_at_L3%1%fcallStart.graph_edge_composition
(L0%0%d=>L3%1%fcallStart)
=suffixpath_at_L3%1%fcallEnd for src.spec.bar
=suffixpath_at_L3%1%fcallEnd.graph_edge_composition
((L0%0%d=>L3%1%fcallStart)*(L3%1%fcallStart=>L3%1%fcallEnd))
=suffixpath_at_L3%3%fcallStart for src.spec.bar
=suffixpath_at_L3%3%fcallStart.graph_edge_composition
((L0%0%d=>L3%1%fcallStart)*((L3%1%fcallStart=>L3%1%fcallEnd)*(L3%1%fcallEnd=>L3%3%fcallStart)))
=suffixpath_at_L3%3%fcallEnd for src.spec.bar
=suffixpath_at_L3%3%fcallEnd.graph_edge_composition
((L0%0%d=>L3%1%fcallStart)*((L3%1%fcallStart=>L3%1%fcallEnd)*((L3%1%fcallEnd=>L3%3%fcallStart)*(L3%3%fcallStart=>L3%3%fcallEnd))))
=suffixpath_at_E0%0%d for src.spec.bar
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%1%fcallStart)*((L3%1%fcallStart=>L3%1%fcallEnd)*((L3%1%fcallEnd=>L3%3%fcallStart)*((L3%3%fcallStart=>L3%3%fcallEnd)*(L3%3%fcallEnd=>E0%0%d)))))
=suffixpaths for src.spec.bar done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%1%fcallStart
tfg.assumes_around_edge at L0%0%d=>L3%1%fcallStart done
tfg.assumes_around_edge at L3%1%fcallStart=>L3%1%fcallEnd
tfg.assumes_around_edge at L3%1%fcallStart=>L3%1%fcallEnd done
tfg.assumes_around_edge at L3%1%fcallEnd=>L3%3%fcallStart
tfg.assumes_around_edge at L3%1%fcallEnd=>L3%3%fcallStart done
tfg.assumes_around_edge at L3%3%fcallStart=>L3%3%fcallEnd
tfg.assumes_around_edge at L3%3%fcallStart=>L3%3%fcallEnd done
tfg.assumes_around_edge at L3%3%fcallEnd=>E0%0%d
tfg.assumes_around_edge at L3%3%fcallEnd=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.bar:
=TFG:
=Nodes: L0%0%d Lentry%1%fcallStart Lentry%1%fcallEnd Lentry%2%fcallStart Lentry%2%fcallEnd E0%0%d
=Edges:
L0%0%d => Lentry%1%fcallStart
Lentry%1%fcallStart => Lentry%1%fcallEnd
Lentry%1%fcallEnd => Lentry%2%fcallStart
Lentry%2%fcallStart => Lentry%2%fcallEnd
Lentry%2%fcallEnd => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.llvm-%m1
1 : input.dst.llvm-%m1 : BV:32
=dst.llvm-%m2
1 : input.dst.llvm-%m2 : BV:32
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: bar
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m1 : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%m2 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m1 : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%m2 : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;bar}
=memlabel_map.0 for call-context {*;bar}
mlcall.dst.llvm.bar.0 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=memlabel_map.1 for call-context {*;bar}
mlcall.dst.llvm.bar.1 : memlabel-mem-
=memlabel_map.2 for call-context {*;bar}
mlcall.dst.llvm.bar.2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=memlabel_map.3 for call-context {*;bar}
mlcall.dst.llvm.bar.3 : memlabel-mem-
=memlabel_map.4 for call-context {*;bar}
mlheap.dst.llvm.bar : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=Edge: L0%0%d => Lentry%1%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%m2 : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : input.dst.llvm-%m1 : BV:32
5 : islangaligned(4, 2) : BOOL
6 : and(3, 5) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*fcall_edge_start)
tfg_edge_comment end

=Edge: Lentry%1%fcallStart => Lentry%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.bar.0 : MEMLABEL
3 : mlcall.dst.llvm.bar.1 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lentry%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.bar.0 : MEMLABEL
3 : mlcall.dst.llvm.bar.1 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : input.dst.llvm-%m1 : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i32 @foo(i32* %m1), !dbg !17)
tfg_edge_comment end

=Edge: Lentry%1%fcallEnd => Lentry%2%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*fcall_edge_start)
tfg_edge_comment end

=Edge: Lentry%2%fcallStart => Lentry%2%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call1.Lentry%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.bar.2 : MEMLABEL
3 : mlcall.dst.llvm.bar.3 : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lentry%2%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.bar.2 : MEMLABEL
3 : mlcall.dst.llvm.bar.3 : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : input.dst.llvm-%m2 : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call1 = call i32 @foo(i32* %m2), !dbg !18)
tfg_edge_comment end

=Edge: Lentry%2%fcallEnd => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((fcall_edge_end*  %sub = sub i32 %call, %call1, !dbg !19)*  ret i32 %sub, !dbg !20)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m1 : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.bar
=Loc 100004 in dst.llvm.bar.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100006 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100007 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100008 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100009 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100011 in dst.llvm.bar.
REGMEM
dst.llvm-%m1
1 : input.dst.llvm-%m1 : BV:32
=Loc 100012 in dst.llvm.bar.
REGMEM
dst.llvm-%m2
1 : input.dst.llvm-%m2 : BV:32
=Loc 100016 in dst.llvm.bar.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100017 in dst.llvm.bar.
REGMEM
dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=Loc 100018 in dst.llvm.bar.
REGMEM
dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=Loc 100020 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100021 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100022 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
=Loc 100023 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=Loc 100024 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=Loc 100025 in dst.llvm.bar.
REGMEM
dst.llvm-%call.Lentry%1%fcallEnd
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=Loc 100026 in dst.llvm.bar.
REGMEM
llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=Loc 100027 in dst.llvm.bar.
REGMEM
dst.llvm-%call1.Lentry%2%fcallEnd
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=Loc 100028 in dst.llvm.bar.
REGMEM
llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=Loc 100029 in dst.llvm.bar.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100030 in dst.llvm.bar.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100031 in dst.llvm.bar.
REGMEM
dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Loc 100032 in dst.llvm.bar.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100033 in dst.llvm.bar.
REGMEM
dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=Loc 100034 in dst.llvm.bar.
REGMEM
dst.cur_rounding_mode.Lentry%1%fcallStart
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=Loc 100035 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100036 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100037 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=Loc 100038 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
=Loc 100039 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=Loc 100040 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100041 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100042 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=Loc 100043 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
=Loc 100044 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=Locs end
=Liveness in dst.llvm.bar
=live locs at L0%0%d
100011, 100012, 100022, 100023, 100024, 
=live locs at Lentry%1%fcallStart
100011, 100012, 100022, 100023, 100024, 
=live locs at Lentry%1%fcallEnd
100012, 100025, 100037, 100038, 100039, 
=live locs at Lentry%2%fcallStart
100012, 100025, 100037, 100038, 100039, 
=live locs at Lentry%2%fcallEnd
100025, 100027, 100042, 
=live locs at E0%0%d
100031[f], 100042, 

=Definedness in dst.llvm.bar
=loc definedness at L0%0%d
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024
=loc definedness at Lentry%1%fcallStart
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100033, 100034
=loc definedness at Lentry%1%fcallEnd
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100033, 100034, 100035, 100036, 100037, 100038, 100039
=loc definedness at Lentry%2%fcallStart
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100033, 100034, 100035, 100036, 100037, 100038, 100039
=loc definedness at Lentry%2%fcallEnd
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100027, 100028, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044
=loc definedness at E0%0%d
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044

=Branch affecting variable locs in dst.llvm.bar
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at Lentry%1%fcallStart

=branch affecting variable locs at Lentry%1%fcallEnd

=branch affecting variable locs at Lentry%2%fcallStart

=branch affecting variable locs at Lentry%2%fcallEnd

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.bar
=relevant memlabels
=function: bar
memlabel-mem--arg.0
memlabel-mem--arg.1
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100033 {input.dst.local_alloc_count.Lentry%1%fcallStart }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100034 {input.dst.cur_rounding_mode.Lentry%1%fcallStart }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100025 {input.dst.llvm-%call.Lentry%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100026 {input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd }
1 : input.dst.llvm-%m1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100035 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100036 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100037 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100038 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100039 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%2%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%2%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100027 {input.dst.llvm-%call1.Lentry%2%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100028 {input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd }
1 : input.dst.llvm-%m2 : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100040 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100041 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100042 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100043 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100044 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100029 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100030 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100031 {input.dst.llvm-%sub.E0%0%d }
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100032 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%1%fcallStart:
vacuous mls at Lentry%1%fcallEnd:
vacuous mls at Lentry%2%fcallStart:
vacuous mls at Lentry%2%fcallEnd:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%1%fcallStart:
non-vacuous mls at Lentry%1%fcallEnd:
non-vacuous mls at Lentry%2%fcallStart:
non-vacuous mls at Lentry%2%fcallEnd:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.bar
=avail_exprs begin
=loc 100004
=loc_expr
140531 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100006
=loc_expr
140532 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140534 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140536 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140538 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140505 : input.dst.llvm-%m1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140506 : input.dst.llvm-%m2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140513 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140507 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100018
=loc_expr
140508 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140408 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m1 : BV:32
=avail_exprs_val.end
=loc 100028
=loc_expr
140409 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m2 : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140410 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100030
=loc_expr
140411 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100031
=loc_expr
140407 : input.dst.llvm-%sub.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100032
=loc_expr
140412 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140413 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100034
=loc_expr
140414 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=loc 100035
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140293 : memlabel-mem--arg.0 : MEMLABEL
140415 : memmask(140399, 140504, 140293) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100036
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140295 : memlabel-mem--arg.1 : MEMLABEL
140416 : memmask(140399, 140504, 140295) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100037
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140509 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140417 : memmask(140399, 140504, 140509) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100038
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140540 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
140418 : memmask(140399, 140504, 140540) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100039
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140542 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
140419 : memmask(140399, 140504, 140542) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100040
=loc_expr
140405 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140293 : memlabel-mem--arg.0 : MEMLABEL
140420 : memmask(140405, 140504, 140293) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100041
=loc_expr
140405 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140295 : memlabel-mem--arg.1 : MEMLABEL
140421 : memmask(140405, 140504, 140295) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100042
=loc_expr
140405 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140509 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140406 : memmask(140405, 140504, 140509) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100043
=loc_expr
140405 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140540 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
140422 : memmask(140405, 140504, 140540) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100044
=loc_expr
140405 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140542 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
140423 : memmask(140405, 140504, 140542) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.bar
=loc 100032 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100032 spreled-expr
140267 : retaddr_const : BV:32
=loc 100033 expr
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=loc 100033 spreled-expr
140513 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100034 expr
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=loc 100034 spreled-expr
140512 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;bar}
=loc_id 100004 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100006 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100007 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100009 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100011 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100018 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100022 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100023 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100036 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100043 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100044 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%1%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallStart=>Lentry%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallEnd=>Lentry%2%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%fcallStart=>Lentry%2%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%fcallEnd=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%1%fcallStart
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lentry%1%fcallEnd
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : input.dst.llvm-%m1 : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallEnd=>Lentry%2%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%fcallStart=>Lentry%2%fcallEnd
=dst.llvm-%call1.Lentry%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lentry%2%fcallEnd
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : input.dst.llvm-%m2 : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%fcallEnd=>E0%0%d
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart assume# 0
1 : input.dst.llvm-%m1 : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : input.dst.llvm-%m2 : BV:32
5 : islangaligned(4, 2) : BOOL
6 : and(3, 5) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%2%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%2%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallStart=>Lentry%2%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallStart=>Lentry%2%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallEnd=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallEnd=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
C_NEXTPC1 : foo
=Nextpc-map done
=suffixpaths for dst.llvm.bar
=suffixpath_at_L0%0%d for dst.llvm.bar
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%1%fcallStart for dst.llvm.bar
=suffixpath_at_Lentry%1%fcallStart.graph_edge_composition
(L0%0%d=>Lentry%1%fcallStart)
=suffixpath_at_Lentry%1%fcallEnd for dst.llvm.bar
=suffixpath_at_Lentry%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*(Lentry%1%fcallStart=>Lentry%1%fcallEnd))
=suffixpath_at_Lentry%2%fcallStart for dst.llvm.bar
=suffixpath_at_Lentry%2%fcallStart.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*(Lentry%1%fcallEnd=>Lentry%2%fcallStart)))
=suffixpath_at_Lentry%2%fcallEnd for dst.llvm.bar
=suffixpath_at_Lentry%2%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%2%fcallStart)*(Lentry%2%fcallStart=>Lentry%2%fcallEnd))))
=suffixpath_at_E0%0%d for dst.llvm.bar
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%2%fcallStart)*((Lentry%2%fcallStart=>Lentry%2%fcallEnd)*(Lentry%2%fcallEnd=>E0%0%d)))))
=suffixpaths for dst.llvm.bar done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0.pred
=Comment
undef-behavioursome.edge.L0%0%d=>Lentry%1%fcallStart
=LhsExpr
140505 : input.dst.llvm-%m1 : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140514 : islangaligned(140505, 140483) : BOOL
140506 : input.dst.llvm-%m2 : BV:32
140515 : islangaligned(140506, 140483) : BOOL
140431 : and(140514, 140515) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart done
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%2%fcallStart
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%2%fcallStart done
tfg.assumes_around_edge at Lentry%2%fcallStart=>Lentry%2%fcallEnd
tfg.assumes_around_edge at Lentry%2%fcallStart=>Lentry%2%fcallEnd done
tfg.assumes_around_edge at Lentry%2%fcallEnd=>E0%0%d
tfg.assumes_around_edge at Lentry%2%fcallEnd=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 6
=pc
Lentry%2%d
=linename
line 6
=pc
Lentry%3%d
=linename
line 6
=pc
Lentry%4%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 10
=pc
Lentry%2%d
=column_name
 at column 20
=pc
Lentry%3%d
=column_name
 at column 18
=pc
Lentry%4%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 6 at column 10)
=pc
Lentry%2%d
=line_and_column
(line 6 at column 20)
=pc
Lentry%3%d
=line_and_column
(line 6 at column 18)
=pc
Lentry%4%d
=line_and_column
(line 6 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : L0%0%d : m1'
input.dst.llvm-%sub.E0%0%d : L0%0%d : (input.dst.llvm-%call.Lentry%1%fcallEnd - input.dst.llvm-%call1.Lentry%2%fcallEnd)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : (input.dst.llvm-%call.Lentry%1%fcallEnd - input.dst.llvm-%call1.Lentry%2%fcallEnd)
input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : L0%0%d : m2'
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.local_alloc_count.Lentry%1%fcallStart : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.Lentry%1%fcallStart : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%m1 : L0%0%d : m1'
input.dst.llvm-%m2 : L0%0%d : m2'
input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___bar__x__=L0%0%argnum0=/
input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___bar__x__=L0%0%argnum1=/
input.dst.llvm-%sub : L0%0%d : (input.dst.llvm-%call - input.dst.llvm-%call1)
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.llvm-fcall_arg_copy.0.dst.llvm-%m1 : L0%0%d : m1'
input.llvm-fcall_arg_copy.0.dst.llvm-%m2 : L0%0%d : m2'
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%call
=dst.llvm-%call loop pc: L0%0%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
4 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
4 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev nullptr
=dst.llvm-%call1
=dst.llvm-%call1 loop pc: L0%0%d
=dst.llvm-%call1 val_scevb
=dst.llvm-%call1 val_scevb scev
=dst.llvm-%call1 val_scevb scev loop: L0%0%d
=dst.llvm-%call1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%call1 val_scevb scev scev_expr
2 : input.dst.llvm-%call1 : BV32
=dst.llvm-%call1 val_scevb scev scev_expr done
=dst.llvm-%call1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb
=dst.llvm-%call1 atuse_scevb scev
=dst.llvm-%call1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%call1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call1 atuse_scevb scev scev_expr
2 : input.dst.llvm-%call1 : BV32
=dst.llvm-%call1 atuse_scevb scev scev_expr done
=dst.llvm-%call1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call1 atexit_scev nullptr
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
1 : 11111111111111111111111111111111b
2 : input.dst.llvm-%call1 : BV32
3 : scev_op_mul(1, 2) : loop L0%0%d : 
4 : input.dst.llvm-%call : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
1 : 11111111111111111111111111111111b
2 : input.dst.llvm-%call1 : BV32
3 : scev_op_mul(1, 2) : loop L0%0%d : 
4 : input.dst.llvm-%call : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallEnd
=reaching defns for expr 0
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%fcallStart
=reaching defns for expr 0
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%fcallEnd
=reaching defns for expr 0
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 2 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 3 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 0 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 2 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=reaching defns for expr 3 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 4 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 5 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 6 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 7 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 11 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 12 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 13 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 14 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 14 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lentry%1%fcallEnd
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%call1.Lentry%2%fcallEnd
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.dst.llvm-%sub.E0%0%d
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lentry%1%fcallStart
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%1%fcallStart
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%m1
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%m2
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local./*___y___bar__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___bar__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename fcall3.proof
=function_name bar
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: bar
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg1
=LhsExpr
1 : $spec-arg-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%1%fcallStart_Lentry%1%fcallStart L3%1%fcallEnd_Lentry%1%fcallEnd L3%3%fcallStart_Lentry%2%fcallStart L3%3%fcallEnd_Lentry%2%fcallEnd E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%1%fcallStart_Lentry%1%fcallStart
L3%1%fcallStart_Lentry%1%fcallStart => L3%1%fcallEnd_Lentry%1%fcallEnd
L3%1%fcallEnd_Lentry%1%fcallEnd => L3%3%fcallStart_Lentry%2%fcallStart
L3%3%fcallStart_Lentry%2%fcallStart => L3%3%fcallEnd_Lentry%2%fcallEnd
L3%3%fcallEnd_Lentry%2%fcallEnd => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: bar
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m1 : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%m2 : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m1 : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%m2 : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%1%fcallStart_Lentry%1%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%1%fcallStart at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%1%fcallStart#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lentry%1%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lentry%1%fcallStart#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%1%fcallStart_Lentry%1%fcallStart => L3%1%fcallEnd_Lentry%1%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%1%fcallStart to L3%1%fcallEnd at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L3%1%fcallStart#{0,0}=>L3%1%fcallEnd#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%1%fcallStart to Lentry%1%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%1%fcallStart#{0,0}=>Lentry%1%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%1%fcallEnd_Lentry%1%fcallEnd => L3%3%fcallStart_Lentry%2%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%1%fcallEnd to L3%3%fcallStart at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L3%1%fcallEnd#{0,0}=>L3%3%fcallStart#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%1%fcallEnd to Lentry%2%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%1%fcallEnd#{0,0}=>Lentry%2%fcallStart#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumesAssume.0
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%3%fcallStart_Lentry%2%fcallStart => L3%3%fcallEnd_Lentry%2%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%3%fcallStart to L3%3%fcallEnd at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L3%3%fcallStart#{0,0}=>L3%3%fcallEnd#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%2%fcallStart to Lentry%2%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%2%fcallStart#{0,0}=>Lentry%2%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%3%fcallEnd_Lentry%2%fcallEnd => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%3%fcallEnd to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L3%3%fcallEnd#{0,0}=>E0%0%d#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%2%fcallEnd to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%2%fcallEnd#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumesAssume.0
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-map-arg1
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m1 : BV:32
=predicate done
=graph_with_precondition_done

=Locs in bar.A2.B2.C2.D2.E1
=Locs end
=Liveness in bar.A2.B2.C2.D2.E1
=live locs at L0%0%d_L0%0%d

=live locs at L3%1%fcallStart_Lentry%1%fcallStart

=live locs at L3%1%fcallEnd_Lentry%1%fcallEnd

=live locs at L3%3%fcallStart_Lentry%2%fcallStart

=live locs at L3%3%fcallEnd_Lentry%2%fcallEnd

=live locs at E0%0%d_E0%0%d


=Definedness in bar.A2.B2.C2.D2.E1

=Branch affecting variable locs in bar.A2.B2.C2.D2.E1

=Relevant Memlabels in bar.A2.B2.C2.D2.E1
=relevant memlabels
=function: bar
memlabel-mem--arg.0
memlabel-mem--arg.1
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in bar.A2.B2.C2.D2.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in bar.A2.B2.C2.D2.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 ba6f50a75a9237689882dcc4c6bed012
=input.spec-%var-m1-1
1 : Lambda41 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda42 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3758063095 { 0xdfff7df7 -536904201 -1.99603164e64 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
25 : eq(23, 24) : BOOL
26 : 223 { 0xdf -33 } : BV:8
27 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 240 { 0xf0 -16 } : BV:8
30 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
31 : eq(23, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
34 : eq(23, 33) : BOOL
35 : 186 { 0xba -70 } : BV:8
36 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
37 : eq(23, 36) : BOOL
38 : 124 { 0x7c } : BV:8
39 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
40 : eq(23, 39) : BOOL
41 : 111 { 0x6f } : BV:8
42 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
46 : eq(23, 45) : BOOL
47 : 125 { 0x7d } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda44 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda45 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3127898236 { 0xba6ff07c -1167069060 -1.87452650e245 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
25 : eq(23, 24) : BOOL
26 : 223 { 0xdf -33 } : BV:8
27 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 240 { 0xf0 -16 } : BV:8
30 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
31 : eq(23, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
34 : eq(23, 33) : BOOL
35 : 186 { 0xba -70 } : BV:8
36 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
37 : eq(23, 36) : BOOL
38 : 124 { 0x7c } : BV:8
39 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
40 : eq(23, 39) : BOOL
41 : 111 { 0x6f } : BV:8
42 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
46 : eq(23, 45) : BOOL
47 : 125 { 0x7d } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda47 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda48 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3758063095 { 0xdfff7df7 -536904201 -1.99603164e64 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
25 : eq(23, 24) : BOOL
26 : 223 { 0xdf -33 } : BV:8
27 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 240 { 0xf0 -16 } : BV:8
30 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
31 : eq(23, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
34 : eq(23, 33) : BOOL
35 : 186 { 0xba -70 } : BV:8
36 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
37 : eq(23, 36) : BOOL
38 : 124 { 0x7c } : BV:8
39 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
40 : eq(23, 39) : BOOL
41 : 111 { 0x6f } : BV:8
42 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
46 : eq(23, 45) : BOOL
47 : 125 { 0x7d } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : ite(18, 2, 111) : BV:32
113 : lambda(17, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(16, 113) : MAP[BV:32 -> BV:32]
115 : sym_const(114) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda50 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda51 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3127898236 { 0xba6ff07c -1167069060 -1.87452650e245 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
25 : eq(23, 24) : BOOL
26 : 223 { 0xdf -33 } : BV:8
27 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 240 { 0xf0 -16 } : BV:8
30 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
31 : eq(23, 30) : BOOL
32 : 247 { 0xf7 -9 } : BV:8
33 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
34 : eq(23, 33) : BOOL
35 : 186 { 0xba -70 } : BV:8
36 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
37 : eq(23, 36) : BOOL
38 : 124 { 0x7c } : BV:8
39 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
40 : eq(23, 39) : BOOL
41 : 111 { 0x6f } : BV:8
42 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
43 : eq(23, 42) : BOOL
44 : 255 { 0xff -1 } : BV:8
45 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
46 : eq(23, 45) : BOOL
47 : 125 { 0x7d } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : ite(18, 2, 111) : BV:32
113 : lambda(17, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(16, 113) : MAP[BV:32 -> BV:32]
115 : sym_const(114) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1035551163 ] -> 0, [ 1035551164; 1035551164 ] -> 124, [ 1035551165; 1035551165 ] -> 240, [ 1035551166; 1035551166 ] -> 111, [ 1035551167; 1035551167 ] -> 186, [ 1035551168; 3250422975 ] -> 0, [ 3250422976; 3250422976 ] -> 247, [ 3250422977; 3250422977 ] -> 125, [ 3250422978; 3250422978 ] -> 255, [ 3250422979; 3250422979 ] -> 223, [ 3250422980; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1035551163 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1035551164; 1035551167 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 1035551168; 3250422975 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3250422976; 3250422979 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3250422980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 3758063095 { 0xdfff7df7 -536904201 -1.99603164e64 } : BV:32
=input.dst.llvm-%m2
1 : 3127898236 { 0xba6ff07c -1167069060 -1.87452650e245 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda14 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3127898236 { 0xba6ff07c -1167069060 -1.87452650e245 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
10 : eq(8, 9) : BOOL
11 : 223 { 0xdf -33 } : BV:8
12 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
16 : eq(8, 15) : BOOL
17 : 247 { 0xf7 -9 } : BV:8
18 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
19 : eq(8, 18) : BOOL
20 : 186 { 0xba -70 } : BV:8
21 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
22 : eq(8, 21) : BOOL
23 : 124 { 0x7c } : BV:8
24 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
25 : eq(8, 24) : BOOL
26 : 111 { 0x6f } : BV:8
27 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
31 : eq(8, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : Lambda18 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3758063095 { 0xdfff7df7 -536904201 -1.99603164e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
10 : eq(8, 9) : BOOL
11 : 223 { 0xdf -33 } : BV:8
12 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
16 : eq(8, 15) : BOOL
17 : 247 { 0xf7 -9 } : BV:8
18 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
19 : eq(8, 18) : BOOL
20 : 186 { 0xba -70 } : BV:8
21 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
22 : eq(8, 21) : BOOL
23 : 124 { 0x7c } : BV:8
24 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
25 : eq(8, 24) : BOOL
26 : 111 { 0x6f } : BV:8
27 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
31 : eq(8, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : Lambda20 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3758063095 { 0xdfff7df7 -536904201 -1.99603164e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
10 : eq(8, 9) : BOOL
11 : 223 { 0xdf -33 } : BV:8
12 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
16 : eq(8, 15) : BOOL
17 : 247 { 0xf7 -9 } : BV:8
18 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
19 : eq(8, 18) : BOOL
20 : 186 { 0xba -70 } : BV:8
21 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
22 : eq(8, 21) : BOOL
23 : 124 { 0x7c } : BV:8
24 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
25 : eq(8, 24) : BOOL
26 : 111 { 0x6f } : BV:8
27 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
31 : eq(8, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : ite(3, 2, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : Lambda22 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3127898236 { 0xba6ff07c -1167069060 -1.87452650e245 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
10 : eq(8, 9) : BOOL
11 : 223 { 0xdf -33 } : BV:8
12 : 1035551165 { 0x3db941bd +1.44731867e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 240 { 0xf0 -16 } : BV:8
15 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
16 : eq(8, 15) : BOOL
17 : 247 { 0xf7 -9 } : BV:8
18 : 1035551167 { 0x3db941bf +1.44731891e252 } : BV:32
19 : eq(8, 18) : BOOL
20 : 186 { 0xba -70 } : BV:8
21 : 1035551164 { 0x3db941bc +1.44731855e252 } : BV:32
22 : eq(8, 21) : BOOL
23 : 124 { 0x7c } : BV:8
24 : 1035551166 { 0x3db941be +1.44731879e252 } : BV:32
25 : eq(8, 24) : BOOL
26 : 111 { 0x6f } : BV:8
27 : 3250422978 { 0xc1bd84c2 -1044544318 -1.48061394e4 } : BV:32
28 : eq(8, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 3250422977 { 0xc1bd84c1 -1044544319 -1.48061382e4 } : BV:32
31 : eq(8, 30) : BOOL
32 : 125 { 0x7d } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : ite(3, 2, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2222994555
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed2
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart)*(L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 3d121b8e35f4c4fe29dbb6e6ec185f8
=nextpc_const.1
1 : 1569985124 { 0x5d941264 +1.15681123e60 } : BV:32
=input.spec-%var-m1-1
1 : Lambda62 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda63 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda66 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda67 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 29477446, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 29477446 { 0x1c1ca46 +1.51398539e132 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 1759522630 { 0x68e02f46 +1.75144267e82 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda62 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda63 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda74 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda75 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1617120051 { 0x60634b33 +1.77573239e65 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 8; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1617120051 { 0x60634b33 +1.77573239e65 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1569985124 , 1000 , 0 ) -> 1759522630, () -> 1704322734, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1213159068
=counter_example_end
=global nodece 1 num_edges_traversed 2
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L3%1%fcallStart_Lentry%1%fcallStart -> L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 2
=global nodece 2 nodece z3.ce11.num_edges_traversed2
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart)*(L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce11 d299a5f540314baf823bdecef69051
=nextpc_const.1
1 : 45242394 { 0x2b2581a +1.39331364e134 } : BV:32
=input.spec-%var-m1-1
1 : Lambda123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda124 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2932727040 { 0xaecddd00 -1362240256 -1.60830688e222 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
25 : eq(23, 24) : BOOL
26 : 64 { 0x40 } : BV:8
27 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
28 : eq(23, 27) : BOOL
29 : 174 { 0xae -82 } : BV:8
30 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
34 : eq(23, 33) : BOOL
35 : 8 { 0x8 } : BV:8
36 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
37 : eq(23, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
40 : eq(23, 39) : BOOL
41 : 205 { 0xcd -51 } : BV:8
42 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
43 : eq(23, 42) : BOOL
44 : 221 { 0xdd -35 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda126 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda127 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 41959432 { 0x2804008 +1.195407e134 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
25 : eq(23, 24) : BOOL
26 : 64 { 0x40 } : BV:8
27 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
28 : eq(23, 27) : BOOL
29 : 174 { 0xae -82 } : BV:8
30 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
34 : eq(23, 33) : BOOL
35 : 8 { 0x8 } : BV:8
36 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
37 : eq(23, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
40 : eq(23, 39) : BOOL
41 : 205 { 0xcd -51 } : BV:8
42 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
43 : eq(23, 42) : BOOL
44 : 221 { 0xdd -35 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 900203389, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 900203389 { 0x35a8037d +1.31260645e236 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 2665293599 ] -> 0, [ 2665293600; 2665293600 ] -> 8, [ 2665293601; 2665293601 ] -> 64, [ 2665293602; 2665293602 ] -> 128, [ 2665293603; 2665293603 ] -> 2, [ 2665293604; 3383659332 ] -> 0, [ 3383659333; 3383659333 ] -> 221, [ 3383659334; 3383659334 ] -> 205, [ 3383659335; 3383659335 ] -> 174, [ 3383659336; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 1663110789 { 0x63210e85 +1.25825560e71 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 2932727040 { 0xaecddd00 -1362240256 -1.60830688e222 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda123 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda124 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2932727040 { 0xaecddd00 -1362240256 -1.60830688e222 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
25 : eq(23, 24) : BOOL
26 : 64 { 0x40 } : BV:8
27 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
28 : eq(23, 27) : BOOL
29 : 174 { 0xae -82 } : BV:8
30 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
34 : eq(23, 33) : BOOL
35 : 8 { 0x8 } : BV:8
36 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
37 : eq(23, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
40 : eq(23, 39) : BOOL
41 : 205 { 0xcd -51 } : BV:8
42 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
43 : eq(23, 42) : BOOL
44 : 221 { 0xdd -35 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda132 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda133 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 41959432 { 0x2804008 +1.195407e134 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
25 : eq(23, 24) : BOOL
26 : 64 { 0x40 } : BV:8
27 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
28 : eq(23, 27) : BOOL
29 : 174 { 0xae -82 } : BV:8
30 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
31 : eq(23, 30) : BOOL
32 : 2 { 0x2 } : BV:8
33 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
34 : eq(23, 33) : BOOL
35 : 8 { 0x8 } : BV:8
36 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
37 : eq(23, 36) : BOOL
38 : 128 { 0x80 -128 } : BV:8
39 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
40 : eq(23, 39) : BOOL
41 : 205 { 0xcd -51 } : BV:8
42 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
43 : eq(23, 42) : BOOL
44 : 221 { 0xdd -35 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : ite(18, 2, 101) : BV:32
103 : lambda(17, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(16, 103) : MAP[BV:32 -> BV:32]
105 : sym_const(104) : MAP[BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1965199184 { 0x75228f50 +1.26999855e107 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.llvm-mem
1 : ([ 0; 2665293599 ] -> 0, [ 2665293600; 2665293600 ] -> 8, [ 2665293601; 2665293601 ] -> 64, [ 2665293602; 2665293602 ] -> 128, [ 2665293603; 2665293603 ] -> 2, [ 2665293604; 3383659332 ] -> 0, [ 3383659333; 3383659333 ] -> 221, [ 3383659334; 3383659334 ] -> 205, [ 3383659335; 3383659335 ] -> 174, [ 3383659336; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2665293599 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2665293600; 2665293603 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2665293604; 3383659331 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3383659332; 3383659335 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3383659336; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 2932727040 { 0xaecddd00 -1362240256 -1.60830688e222 } : BV:32
=input.dst.llvm-%m2
1 : 41959432 { 0x2804008 +1.195407e134 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3383659332 { 0xc9ae8b44 -911307964 -1.36362504e20 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1965199184 { 0x75228f50 +1.26999855e107 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 45242394 , 1000 , 2932727040 ) -> 1663110789, () -> 1237607239, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3383659332 { 0xc9ae8b44 -911307964 -1.36362504e20 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda96 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 41959432 { 0x2804008 +1.195407e134 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
13 : eq(8, 12) : BOOL
14 : 174 { 0xae -82 } : BV:8
15 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
19 : eq(8, 18) : BOOL
20 : 8 { 0x8 } : BV:8
21 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
22 : eq(8, 21) : BOOL
23 : 128 { 0x80 -128 } : BV:8
24 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
25 : eq(8, 24) : BOOL
26 : 205 { 0xcd -51 } : BV:8
27 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
28 : eq(8, 27) : BOOL
29 : 221 { 0xdd -35 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : Lambda100 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2932727040 { 0xaecddd00 -1362240256 -1.60830688e222 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
13 : eq(8, 12) : BOOL
14 : 174 { 0xae -82 } : BV:8
15 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
19 : eq(8, 18) : BOOL
20 : 8 { 0x8 } : BV:8
21 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
22 : eq(8, 21) : BOOL
23 : 128 { 0x80 -128 } : BV:8
24 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
25 : eq(8, 24) : BOOL
26 : 205 { 0xcd -51 } : BV:8
27 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
28 : eq(8, 27) : BOOL
29 : 221 { 0xdd -35 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : Lambda102 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2932727040 { 0xaecddd00 -1362240256 -1.60830688e222 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
13 : eq(8, 12) : BOOL
14 : 174 { 0xae -82 } : BV:8
15 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
19 : eq(8, 18) : BOOL
20 : 8 { 0x8 } : BV:8
21 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
22 : eq(8, 21) : BOOL
23 : 128 { 0x80 -128 } : BV:8
24 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
25 : eq(8, 24) : BOOL
26 : 205 { 0xcd -51 } : BV:8
27 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
28 : eq(8, 27) : BOOL
29 : 221 { 0xdd -35 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : Lambda104 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 41959432 { 0x2804008 +1.195407e134 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 2665293601 { 0x9edd2721 -1629673695 -1.72775661e190 } : BV:32
10 : eq(8, 9) : BOOL
11 : 64 { 0x40 } : BV:8
12 : 3383659335 { 0xc9ae8b47 -911307961 -1.36362540e20 } : BV:32
13 : eq(8, 12) : BOOL
14 : 174 { 0xae -82 } : BV:8
15 : 2665293603 { 0x9edd2723 -1629673693 -1.72775685e190 } : BV:32
16 : eq(8, 15) : BOOL
17 : 2 { 0x2 } : BV:8
18 : 2665293600 { 0x9edd2720 -1629673696 -1.72775650e190 } : BV:32
19 : eq(8, 18) : BOOL
20 : 8 { 0x8 } : BV:8
21 : 2665293602 { 0x9edd2722 -1629673694 -1.72775673e190 } : BV:32
22 : eq(8, 21) : BOOL
23 : 128 { 0x80 -128 } : BV:8
24 : 3383659334 { 0xc9ae8b46 -911307962 -1.36362528e20 } : BV:32
25 : eq(8, 24) : BOOL
26 : 205 { 0xcd -51 } : BV:8
27 : 3383659333 { 0xc9ae8b45 -911307963 -1.36362516e20 } : BV:32
28 : eq(8, 27) : BOOL
29 : 221 { 0xdd -35 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4277703806
=counter_example_end
=global nodece 2 num_edges_traversed 2
=global nodece 2 nodece_visted_pcs: 
L3%1%fcallStart_Lentry%1%fcallStart -> L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 3
=global nodece 3 nodece z3v487.ce12.num_edges_traversed2
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart)*(L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce12 81c3fc315b7312717232ec85bf8c93fe
=nextpc_const.1
1 : 1829585933 { 0x6d0d440d +1.10363924e91 } : BV:32
=input.spec-%var-m1-1
1 : Lambda143 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda144 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 538976256 { 0x20202000 +1.25097656e193 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 8 { 0x8 +1.95e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 32 { 0x20 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda146 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda147 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 8 { 0x8 +1.95e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 32 { 0x20 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 853186023, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 853186023 { 0x32da95e7 +1.70769965e230 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 7 ] -> 32, [ 8; 8 ] -> 0, [ 9; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 91088095 { 0x56de4df +1.85854709e139 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 538976256 { 0x20202000 +1.25097656e193 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda143 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda144 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 538976256 { 0x20202000 +1.25097656e193 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 8 { 0x8 +1.95e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 32 { 0x20 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda152 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda153 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : 8 { 0x8 +1.95e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 32 { 0x20 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : 2 { 0x2 +1.23e129 } : BV:32
29 : bvadd(28, 20, 21) : BV:32
30 : eq(29, 23) : BOOL
31 : ite(30, 25, 26) : BV:8
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : bvadd(32, 20, 21) : BV:32
34 : eq(33, 23) : BOOL
35 : ite(34, 25, 26) : BV:8
36 : bvadd(20, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : ite(37, 25, 26) : BV:8
39 : bvconcat(27, 31, 35, 38) : BV:32
40 : lambda(17, 39) : FUNCTION[BV:32 -> BV:32]
41 : map(16, 40) : MAP[BV:32 -> BV:32]
42 : sym_const(41) : MAP[BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1841929073 { 0x6dc99b71 +1.57505619e92 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.llvm-mem
1 : ([ 0; 7 ] -> 32, [ 8; 8 ] -> 0, [ 9; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 12; 15 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 16; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 538976256 { 0x20202000 +1.25097656e193 } : BV:32
=input.dst.llvm-%m2
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1841929073 { 0x6dc99b71 +1.57505619e92 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 7 ] -> 32, [ 8; 15 ] -> 0, [ 16; 4294967295 ] -> 32, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1829585933 , 1000 , 538976256 ) -> 91088095, () -> 680655230, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 15 { 0xf +1.178e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda107 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 32 { 0x20 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : Lambda109 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 538976256 { 0x20202000 +1.25097656e193 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 32 { 0x20 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : Lambda111 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 538976256 { 0x20202000 +1.25097656e193 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 32 { 0x20 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : Lambda113 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 32 { 0x20 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
123546513
=counter_example_end
=global nodece 3 num_edges_traversed 2
=global nodece 3 nodece_visted_pcs: 
L3%1%fcallStart_Lentry%1%fcallStart -> L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 4
=global nodece 4 nodece z3.ce23.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart)*(L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce23 5fcc5a411083dcd9e28ccb1f7d9b017
=nextpc_const.1
1 : 120411242 { 0x72d546a +1.35413861e143 } : BV:32
=input.spec-%var-m1-1
1 : Lambda193 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda194 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3749575952 { 0xdf7dfd10 -545391344 -1.98428535e63 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
28 : eq(23, 27) : BOOL
29 : 55 { 0x37 } : BV:8
30 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
31 : eq(23, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
34 : eq(23, 33) : BOOL
35 : 191 { 0xbf -65 } : BV:8
36 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
37 : eq(23, 36) : BOOL
38 : 252 { 0xfc -4 } : BV:8
39 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
40 : eq(23, 39) : BOOL
41 : 125 { 0x7d } : BV:8
42 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda196 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda197 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3220977408 { 0xbffc3700 -1073989888 -1.97042846e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
28 : eq(23, 27) : BOOL
29 : 55 { 0x37 } : BV:8
30 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
31 : eq(23, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
34 : eq(23, 33) : BOOL
35 : 191 { 0xbf -65 } : BV:8
36 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
37 : eq(23, 36) : BOOL
38 : 252 { 0xfc -4 } : BV:8
39 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
40 : eq(23, 39) : BOOL
41 : 125 { 0x7d } : BV:8
42 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 14980399, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 14980399 { 0xe4952f +1.78580272e130 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 568971087 ] -> 0, [ 568971088; 568971088 ] -> 16, [ 568971089; 568971089 ] -> 253, [ 568971090; 568971090 ] -> 125, [ 568971091; 568971091 ] -> 223, [ 568971092; 2589961732 ] -> 0, [ 2589961733; 2589961733 ] -> 55, [ 2589961734; 2589961734 ] -> 252, [ 2589961735; 2589961735 ] -> 191, [ 2589961736; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 379822441 { 0x16a3a169 +1.27836334e174 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 3749575952 { 0xdf7dfd10 -545391344 -1.98428535e63 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda193 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda194 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3749575952 { 0xdf7dfd10 -545391344 -1.98428535e63 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
28 : eq(23, 27) : BOOL
29 : 55 { 0x37 } : BV:8
30 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
31 : eq(23, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
34 : eq(23, 33) : BOOL
35 : 191 { 0xbf -65 } : BV:8
36 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
37 : eq(23, 36) : BOOL
38 : 252 { 0xfc -4 } : BV:8
39 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
40 : eq(23, 39) : BOOL
41 : 125 { 0x7d } : BV:8
42 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda202 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda203 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3220977408 { 0xbffc3700 -1073989888 -1.97042846e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
25 : eq(23, 24) : BOOL
26 : 16 { 0x10 } : BV:8
27 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
28 : eq(23, 27) : BOOL
29 : 55 { 0x37 } : BV:8
30 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
31 : eq(23, 30) : BOOL
32 : 223 { 0xdf -33 } : BV:8
33 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
34 : eq(23, 33) : BOOL
35 : 191 { 0xbf -65 } : BV:8
36 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
37 : eq(23, 36) : BOOL
38 : 252 { 0xfc -4 } : BV:8
39 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
40 : eq(23, 39) : BOOL
41 : 125 { 0x7d } : BV:8
42 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : ite(18, 2, 101) : BV:32
103 : lambda(17, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(16, 103) : MAP[BV:32 -> BV:32]
105 : sym_const(104) : MAP[BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 516197107 { 0x1ec48af3 +1.53549039e190 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.llvm-mem
1 : ([ 0; 568971087 ] -> 0, [ 568971088; 568971088 ] -> 16, [ 568971089; 568971089 ] -> 253, [ 568971090; 568971090 ] -> 125, [ 568971091; 568971091 ] -> 223, [ 568971092; 2589961732 ] -> 0, [ 2589961733; 2589961733 ] -> 55, [ 2589961734; 2589961734 ] -> 252, [ 2589961735; 2589961735 ] -> 191, [ 2589961736; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 568971087 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 568971088; 568971091 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 568971092; 2589961731 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2589961732; 2589961735 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2589961736; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 3749575952 { 0xdf7dfd10 -545391344 -1.98428535e63 } : BV:32
=input.dst.llvm-%m2
1 : 3220977408 { 0xbffc3700 -1073989888 -1.97042846e0 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2589961732 { 0x9a5fae04 -1705005564 -1.74749803e181 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 516197107 { 0x1ec48af3 +1.53549039e190 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 120411242 , 1000 , 3749575952 ) -> 379822441, () -> 529337277, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2589961732 { 0x9a5fae04 -1705005564 -1.74749803e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda166 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3220977408 { 0xbffc3700 -1073989888 -1.97042846e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 55 { 0x37 } : BV:8
15 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
16 : eq(8, 15) : BOOL
17 : 223 { 0xdf -33 } : BV:8
18 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
19 : eq(8, 18) : BOOL
20 : 191 { 0xbf -65 } : BV:8
21 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
22 : eq(8, 21) : BOOL
23 : 252 { 0xfc -4 } : BV:8
24 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
25 : eq(8, 24) : BOOL
26 : 125 { 0x7d } : BV:8
27 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : Lambda170 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3749575952 { 0xdf7dfd10 -545391344 -1.98428535e63 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 55 { 0x37 } : BV:8
15 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
16 : eq(8, 15) : BOOL
17 : 223 { 0xdf -33 } : BV:8
18 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
19 : eq(8, 18) : BOOL
20 : 191 { 0xbf -65 } : BV:8
21 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
22 : eq(8, 21) : BOOL
23 : 252 { 0xfc -4 } : BV:8
24 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
25 : eq(8, 24) : BOOL
26 : 125 { 0x7d } : BV:8
27 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : Lambda172 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3749575952 { 0xdf7dfd10 -545391344 -1.98428535e63 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 55 { 0x37 } : BV:8
15 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
16 : eq(8, 15) : BOOL
17 : 223 { 0xdf -33 } : BV:8
18 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
19 : eq(8, 18) : BOOL
20 : 191 { 0xbf -65 } : BV:8
21 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
22 : eq(8, 21) : BOOL
23 : 252 { 0xfc -4 } : BV:8
24 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
25 : eq(8, 24) : BOOL
26 : 125 { 0x7d } : BV:8
27 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : Lambda174 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3220977408 { 0xbffc3700 -1073989888 -1.97042846e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 568971088 { 0x21e9cf50 +1.82663917e196 } : BV:32
10 : eq(8, 9) : BOOL
11 : 16 { 0x10 } : BV:8
12 : 2589961733 { 0x9a5fae05 -1705005563 -1.74749815e181 } : BV:32
13 : eq(8, 12) : BOOL
14 : 55 { 0x37 } : BV:8
15 : 568971091 { 0x21e9cf53 +1.82663953e196 } : BV:32
16 : eq(8, 15) : BOOL
17 : 223 { 0xdf -33 } : BV:8
18 : 2589961735 { 0x9a5fae07 -1705005561 -1.74749839e181 } : BV:32
19 : eq(8, 18) : BOOL
20 : 191 { 0xbf -65 } : BV:8
21 : 2589961734 { 0x9a5fae06 -1705005562 -1.74749827e181 } : BV:32
22 : eq(8, 21) : BOOL
23 : 252 { 0xfc -4 } : BV:8
24 : 568971090 { 0x21e9cf52 +1.82663941e196 } : BV:32
25 : eq(8, 24) : BOOL
26 : 125 { 0x7d } : BV:8
27 : 568971089 { 0x21e9cf51 +1.82663929e196 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
174629768
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L3%1%fcallStart_Lentry%1%fcallStart -> L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 5
=global nodece 5 nodece z3v487.ce24.num_edges_traversed2
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart)*(L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce24 98a6cd4654ae5663da34861dcea7130
=nextpc_const.1
1 : 54067572 { 0x3390174 +1.44535684e135 } : BV:32
=input.spec-%var-m1-1
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda214 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 19) : BV:32
22 : 64 { 0x40 +1.762e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 19) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 19) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 19) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda216 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda217 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 64 { 0x40 +1.762e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 1566671405, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 1566671405 { 0x5d61822d +1.76178514e59 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 63 ] -> 0, [ 64; 64 ] -> 4, [ 65; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 809440826 { 0x303f163a +1.49286580e225 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda213 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda214 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 19) : BV:32
22 : 64 { 0x40 +1.762e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 19) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 19) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 19) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda222 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda223 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : bvadd(18, 20, 2) : BV:32
22 : 64 { 0x40 +1.762e129 } : BV:32
23 : eq(21, 22) : BOOL
24 : 4 { 0x4 } : BV:8
25 : 0 { 0x0 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvadd(27, 20, 2) : BV:32
29 : eq(28, 22) : BOOL
30 : ite(29, 24, 25) : BV:8
31 : 1 { 0x1 +1.11e129 } : BV:32
32 : bvadd(31, 20, 2) : BV:32
33 : eq(32, 22) : BOOL
34 : ite(33, 24, 25) : BV:8
35 : bvadd(20, 2) : BV:32
36 : eq(35, 22) : BOOL
37 : ite(36, 24, 25) : BV:8
38 : bvconcat(26, 30, 34, 37) : BV:32
39 : lambda(17, 38) : FUNCTION[BV:32 -> BV:32]
40 : map(16, 39) : MAP[BV:32 -> BV:32]
41 : sym_const(40) : MAP[BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 2143351831 { 0x7fc0f417 +1.50744903e128 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.llvm-mem
1 : ([ 0; 63 ] -> 0, [ 64; 64 ] -> 4, [ 65; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 8; 63 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 64; 67 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 68; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2143351831 { 0x7fc0f417 +1.50744903e128 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 54067572 , 1000 , 4 ) -> 809440826, () -> 1029166799, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 67 { 0x43 +1.798e129 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda177 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 64 { 0x40 +1.762e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 4 { 0x4 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : Lambda179 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : bvadd(2, 4, 3) : BV:32
6 : 64 { 0x40 +1.762e129 } : BV:32
7 : eq(5, 6) : BOOL
8 : 4 { 0x4 } : BV:8
9 : 0 { 0x0 } : BV:8
10 : ite(7, 8, 9) : BV:8
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvadd(11, 4, 3) : BV:32
13 : eq(12, 6) : BOOL
14 : ite(13, 8, 9) : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : bvadd(15, 4, 3) : BV:32
17 : eq(16, 6) : BOOL
18 : ite(17, 8, 9) : BV:8
19 : bvadd(4, 3) : BV:32
20 : eq(19, 6) : BOOL
21 : ite(20, 8, 9) : BV:8
22 : bvconcat(10, 14, 18, 21) : BV:32
23 : lambda(1, 22) : FUNCTION[BV:32 -> BV:32]
24 : sym_const(23) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : Lambda181 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : bvadd(2, 4, 3) : BV:32
6 : 64 { 0x40 +1.762e129 } : BV:32
7 : eq(5, 6) : BOOL
8 : 4 { 0x4 } : BV:8
9 : 0 { 0x0 } : BV:8
10 : ite(7, 8, 9) : BV:8
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : bvadd(11, 4, 3) : BV:32
13 : eq(12, 6) : BOOL
14 : ite(13, 8, 9) : BV:8
15 : 1 { 0x1 +1.11e129 } : BV:32
16 : bvadd(15, 4, 3) : BV:32
17 : eq(16, 6) : BOOL
18 : ite(17, 8, 9) : BV:8
19 : bvadd(4, 3) : BV:32
20 : eq(19, 6) : BOOL
21 : ite(20, 8, 9) : BV:8
22 : bvconcat(10, 14, 18, 21) : BV:32
23 : lambda(1, 22) : FUNCTION[BV:32 -> BV:32]
24 : sym_const(23) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : Lambda183 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 64 { 0x40 +1.762e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 4 { 0x4 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4030939749
=counter_example_end
=global nodece 5 num_edges_traversed 2
=global nodece 5 nodece_visted_pcs: 
L3%1%fcallStart_Lentry%1%fcallStart -> L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 6
=global nodece 6 nodece z3.ce35.num_edges_traversed2
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart)*(L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce35 242cdc588eddd621af648830bde3c57f
=nextpc_const.1
1 : 1422107458 { 0x54c3a342 +1.52841973e42 } : BV:32
=input.spec-%var-m1-1
1 : Lambda263 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda264 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3621615872 { 0xd7dd7900 -673351424 -1.73025512e48 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
25 : eq(23, 24) : BOOL
26 : 190 { 0xbe -66 } : BV:8
27 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
28 : eq(23, 27) : BOOL
29 : 215 { 0xd7 -41 } : BV:8
30 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
37 : eq(23, 36) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
40 : eq(23, 39) : BOOL
41 : 221 { 0xdd -35 } : BV:8
42 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
43 : eq(23, 42) : BOOL
44 : 121 { 0x79 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda266 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda267 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853252 { 0xffdfbe04 -2114044 -1.74798631e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
25 : eq(23, 24) : BOOL
26 : 190 { 0xbe -66 } : BV:8
27 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
28 : eq(23, 27) : BOOL
29 : 215 { 0xd7 -41 } : BV:8
30 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
37 : eq(23, 36) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
40 : eq(23, 39) : BOOL
41 : 221 { 0xdd -35 } : BV:8
42 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
43 : eq(23, 42) : BOOL
44 : 121 { 0x79 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 1412369691, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 1412369691 { 0x542f0d1b +1.36758744e41 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 1763793747 ] -> 0, [ 1763793748; 1763793748 ] -> 4, [ 1763793749; 1763793749 ] -> 190, [ 1763793750; 1763793750 ] -> 223, [ 1763793751; 1763793751 ] -> 255, [ 1763793752; 3603815656 ] -> 0, [ 3603815657; 3603815657 ] -> 121, [ 3603815658; 3603815658 ] -> 221, [ 3603815659; 3603815659 ] -> 215, [ 3603815660; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 347859769 { 0x14bbeb39 +1.46811592e170 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 3621615872 { 0xd7dd7900 -673351424 -1.73025512e48 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda263 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda264 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3621615872 { 0xd7dd7900 -673351424 -1.73025512e48 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
25 : eq(23, 24) : BOOL
26 : 190 { 0xbe -66 } : BV:8
27 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
28 : eq(23, 27) : BOOL
29 : 215 { 0xd7 -41 } : BV:8
30 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
37 : eq(23, 36) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
40 : eq(23, 39) : BOOL
41 : 221 { 0xdd -35 } : BV:8
42 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
43 : eq(23, 42) : BOOL
44 : 121 { 0x79 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda272 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda273 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4292853252 { 0xffdfbe04 -2114044 -1.74798631e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
25 : eq(23, 24) : BOOL
26 : 190 { 0xbe -66 } : BV:8
27 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
28 : eq(23, 27) : BOOL
29 : 215 { 0xd7 -41 } : BV:8
30 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
31 : eq(23, 30) : BOOL
32 : 255 { 0xff -1 } : BV:8
33 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
37 : eq(23, 36) : BOOL
38 : 223 { 0xdf -33 } : BV:8
39 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
40 : eq(23, 39) : BOOL
41 : 221 { 0xdd -35 } : BV:8
42 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
43 : eq(23, 42) : BOOL
44 : 121 { 0x79 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : ite(18, 2, 101) : BV:32
103 : lambda(17, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(16, 103) : MAP[BV:32 -> BV:32]
105 : sym_const(104) : MAP[BV:32 -> BV:32]
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1790537150 { 0x6ab96dbe +1.44866156e86 } : COUNT
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.llvm-mem
1 : ([ 0; 1763793747 ] -> 0, [ 1763793748; 1763793748 ] -> 4, [ 1763793749; 1763793749 ] -> 190, [ 1763793750; 1763793750 ] -> 223, [ 1763793751; 1763793751 ] -> 255, [ 1763793752; 3603815656 ] -> 0, [ 3603815657; 3603815657 ] -> 121, [ 3603815658; 3603815658 ] -> 221, [ 3603815659; 3603815659 ] -> 215, [ 3603815660; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1763793747 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1763793748; 1763793751 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 1763793752; 3603815655 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3603815656; 3603815659 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3603815660; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 3621615872 { 0xd7dd7900 -673351424 -1.73025512e48 } : BV:32
=input.dst.llvm-%m2
1 : 4292853252 { 0xffdfbe04 -2114044 -1.74798631e128 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3603815656 { 0xd6cddce8 -691151640 -1.60830402e46 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1790537150 { 0x6ab96dbe +1.44866156e86 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1422107458 , 1000 , 3621615872 ) -> 347859769, () -> 1334393441, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3603815656 { 0xd6cddce8 -691151640 -1.60830402e46 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda236 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853252 { 0xffdfbe04 -2114044 -1.74798631e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 190 { 0xbe -66 } : BV:8
12 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
13 : eq(8, 12) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
22 : eq(8, 21) : BOOL
23 : 223 { 0xdf -33 } : BV:8
24 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
25 : eq(8, 24) : BOOL
26 : 221 { 0xdd -35 } : BV:8
27 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
28 : eq(8, 27) : BOOL
29 : 121 { 0x79 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : Lambda240 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3621615872 { 0xd7dd7900 -673351424 -1.73025512e48 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 190 { 0xbe -66 } : BV:8
12 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
13 : eq(8, 12) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
22 : eq(8, 21) : BOOL
23 : 223 { 0xdf -33 } : BV:8
24 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
25 : eq(8, 24) : BOOL
26 : 221 { 0xdd -35 } : BV:8
27 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
28 : eq(8, 27) : BOOL
29 : 121 { 0x79 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : Lambda242 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3621615872 { 0xd7dd7900 -673351424 -1.73025512e48 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 190 { 0xbe -66 } : BV:8
12 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
13 : eq(8, 12) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
22 : eq(8, 21) : BOOL
23 : 223 { 0xdf -33 } : BV:8
24 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
25 : eq(8, 24) : BOOL
26 : 221 { 0xdd -35 } : BV:8
27 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
28 : eq(8, 27) : BOOL
29 : 121 { 0x79 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : Lambda244 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4292853252 { 0xffdfbe04 -2114044 -1.74798631e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1763793749 { 0x69215b55 +1.26059973e83 } : BV:32
10 : eq(8, 9) : BOOL
11 : 190 { 0xbe -66 } : BV:8
12 : 3603815659 { 0xd6cddceb -691151637 -1.60830438e46 } : BV:32
13 : eq(8, 12) : BOOL
14 : 215 { 0xd7 -41 } : BV:8
15 : 1763793751 { 0x69215b57 +1.26059997e83 } : BV:32
16 : eq(8, 15) : BOOL
17 : 255 { 0xff -1 } : BV:8
18 : 1763793748 { 0x69215b54 +1.26059961e83 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 1763793750 { 0x69215b56 +1.26059985e83 } : BV:32
22 : eq(8, 21) : BOOL
23 : 223 { 0xdf -33 } : BV:8
24 : 3603815658 { 0xd6cddcea -691151638 -1.60830426e46 } : BV:32
25 : eq(8, 24) : BOOL
26 : 221 { 0xdd -35 } : BV:8
27 : 3603815657 { 0xd6cddce9 -691151639 -1.60830414e46 } : BV:32
28 : eq(8, 27) : BOOL
29 : 121 { 0x79 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2608064122
=counter_example_end
=global nodece 6 num_edges_traversed 2
=global nodece 6 nodece_visted_pcs: 
L3%1%fcallStart_Lentry%1%fcallStart -> L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 7
=global nodece 7 nodece z3.ce59.num_edges_traversed0
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce59 19bd045e38c2654ef56571777c5480
=input.spec-%var-m1-1
1 : Lambda440 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda441 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda444 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda445 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda448 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda449 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda452 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda453 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 283477787 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 283477788; 283477791 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 283477792; 3578109455 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3578109456; 3578109459 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3578109460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3578109456 { 0xd5459e10 -716857840 -1.54388618e43 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 283477788 { 0x10e5871c +1.79318571e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 283477788 { 0x10e5871c +1.79318571e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 283477791 { 0x10e5871f +1.79318606e162 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3578109456 { 0xd5459e10 -716857840 -1.54388618e43 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3578109459 { 0xd5459e13 -716857837 -1.54388654e43 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3038542473
=counter_example_end
=global nodece 7 num_edges_traversed 0
=global nodece 7 nodece_visted_pcs: 
L3%1%fcallStart_Lentry%1%fcallStart
=global nodece 8
=global nodece 8 nodece z3v487.ce60.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce60 c6e43fa345c8625d5535b25a28a6ab1a
=input.spec-%var-m1-1
1 : Lambda464 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda465 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda468 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda469 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda472 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda473 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda476 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda477 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 8; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
219491689
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L3%1%fcallStart_Lentry%1%fcallStart
=global nodece 9
=global nodece 9 nodece z3.ce149.num_edges_traversed0
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce149 8f788c233592c240feeed32cea9b6e5b
=input.spec-%var-m1-1
1 : Lambda718 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda719 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda722 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda723 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda726 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda727 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda730 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda731 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 492206615 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 492206616; 492206619 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 492206620; 800242251 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 800242252; 800242255 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 800242256; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 2478472568 { 0x93ba7d78 -1816494728 -1.45695400e168 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 800242252 { 0x2fb2ba4c +1.39631032e224 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 492206616 { 0x1d567a18 +1.67560100e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 492206616 { 0x1d567a18 +1.67560100e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 492206619 { 0x1d567a1b +1.67560136e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 800242252 { 0x2fb2ba4c +1.39631032e224 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 800242255 { 0x2fb2ba4f +1.39631068e224 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3866481027
=counter_example_end
=global nodece 9 num_edges_traversed 0
=global nodece 9 nodece_visted_pcs: 
L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 10
=global nodece 10 nodece z3v487.ce150.num_edges_traversed0
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(epsilon)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce150 e55bf764866d39574eed63393c71c5
=input.spec-%var-m1-1
1 : Lambda742 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda743 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda746 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda747 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda750 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda751 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda754 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda755 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 536870916; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3678050892
=counter_example_end
=global nodece 10 num_edges_traversed 0
=global nodece 10 nodece_visted_pcs: 
L3%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 11
=global nodece 11 nodece z3v487.ce159.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
((L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart)*(L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce159 8e22fc81c073df1712d7942702a83fe
=nextpc_const.1
1 : 298701306 { 0x11cdd1fa +1.60797047e164 } : BV:32
=input.spec-%var-m1-1
1 : Lambda804 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda805 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda808 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda809 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 1620425918, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 1264292678 { 0x4b5b9346 +1.71543192e23 } : BV:32
=input.spec-%tmpvar-25.L3%3%fcallEnd
1 : 1620425918 { 0x6095bcbe +1.16982245e66 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda812 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda813 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda808 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda809 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 26218527 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 26218528; 26218531 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 26218532; 2147484087 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2147484088; 2147484091 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2147484092; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 26218528 { 0x1901020 +1.12549209e132 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2147484088 { 0x800001b8 -2147483208 -1.5245e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 298701306 , 1000 , 0 ) -> 1264292678, () -> 1093492737, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2147484088 { 0x800001b8 -2147483208 -1.5245e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2147484091 { 0x800001bb -2147483205 -1.5280e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 26218528 { 0x1901020 +1.12549209e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 26218531 { 0x1901023 +1.12549245e132 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2956734267
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L3%3%fcallStart_Lentry%2%fcallStart -> L3%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 12
=global nodece 12 nodece z3.ce175.num_edges_traversed2
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
((L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart)*(L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce175 d3bc67f5956c82f2fb0c22fe1fbdc1e
=nextpc_const.1
1 : 200775352 { 0xbf796b8 +1.93428707e152 } : BV:32
=input.spec-%var-m1-1
1 : Lambda882 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda883 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda886 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda887 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 74611228, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 1483510104 { 0x586c9158 +1.84818553e49 } : BV:32
=input.spec-%tmpvar-25.L3%3%fcallEnd
1 : 74611228 { 0x4727a1c +1.89435148e137 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda890 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda891 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda886 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda887 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 308830955 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 308830956; 308830959 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 308830960; 2317396339 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2317396340; 2317396343 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2317396344; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2317396340 { 0x8a20a974 -1977570956 -1.25517129e149 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 308830956 { 0x126862ec +1.81551885e165 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 200775352 , 1000 , 0 ) -> 1483510104, () -> 442978261, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 308830956 { 0x126862ec +1.81551885e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 308830959 { 0x126862ef +1.81551921e165 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2317396340 { 0x8a20a974 -1977570956 -1.25517129e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2317396343 { 0x8a20a977 -1977570953 -1.25517165e149 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1769582355
=counter_example_end
=global nodece 12 num_edges_traversed 2
=global nodece 12 nodece_visted_pcs: 
L3%3%fcallStart_Lentry%2%fcallStart -> L3%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 13
=global nodece 13 nodece z3.ce191.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
((L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart)*(L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce191 4944b545272a3c9f44b653da3e71be5e
=nextpc_const.1
1 : 122670613 { 0x74fce15 +1.62347662e143 } : BV:32
=input.spec-%var-m1-1
1 : Lambda976 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda977 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda980 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda981 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 951148248, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 473693548 { 0x1c3bfd6c +1.46867132e185 } : BV:32
=input.spec-%tmpvar-25.L3%3%fcallEnd
1 : 951148248 { 0x38b15ed8 +1.38570690e242 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda984 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda985 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda980 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda981 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1655400623 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1655400624; 1655400627 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 1655400628; 3391651891 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3391651892; 3391651895 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 3391651896; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 1655400624 { 0x62ab68b0 +1.33913230e70 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 3391651892 { 0xca288034 -903315404 -1.31641244e21 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 122670613 , 1000 , 32768 ) -> 473693548, () -> 347686169, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 3391651892 { 0xca288034 -903315404 -1.31641244e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 3391651895 { 0xca288037 -903315401 -1.31641280e21 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 1655400624 { 0x62ab68b0 +1.33913230e70 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 1655400627 { 0x62ab68b3 +1.33913266e70 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1633991437
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L3%3%fcallStart_Lentry%2%fcallStart -> L3%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 14
=global nodece 14 nodece z3.ce207.num_edges_traversed2
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
((L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart)*(L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce207 127f659f99c8e10f2b9a3646235ed9b
=nextpc_const.1
1 : 1636650277 { 0x618d4d25 +1.10391676e68 } : BV:32
=input.spec-%var-m1-1
1 : Lambda1054 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1055 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1058 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1059 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 805389074, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 625466276 { 0x2547dba4 +1.56139039e203 } : BV:32
=input.spec-%tmpvar-25.L3%3%fcallEnd
1 : 805389074 { 0x30014312 +1.985932e225 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda1062 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1063 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda1058 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1059 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 875331711 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 875331712; 875331715 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 875331716; 2124480515 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2124480516; 2124480519 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2124480520; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 4096 { 0x1000 +1.48828e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2124480516 { 0x7ea10004 +1.25781297e126 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 875331712 { 0x342c8080 +1.34767150e233 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1636650277 , 1000 , 4096 ) -> 625466276, () -> 1382377183, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 875331712 { 0x342c8080 +1.34767150e233 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 875331715 { 0x342c8083 +1.34767186e233 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2124480516 { 0x7ea10004 +1.25781297e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2124480519 { 0x7ea10007 +1.25781333e126 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2036174816
=counter_example_end
=global nodece 14 num_edges_traversed 2
=global nodece 14 nodece_visted_pcs: 
L3%3%fcallStart_Lentry%2%fcallStart -> L3%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 15
=global nodece 15 nodece z3v487.ce208.num_edges_traversed1
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3v487.ce208 fdaeb18b9c3c876db6ce364c251fee
=input.spec-%var-m1-1
1 : Lambda1078 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1079 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1082 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1083 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda1086 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1087 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1091 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 8; 67108863 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 67108864; 67108867 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 67108868; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 67108867 { 0x4000003 +1.35e137 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2083089664
=counter_example_end
=global nodece 15 num_edges_traversed 1
=global nodece 15 nodece_visted_pcs: 
L3%3%fcallStart_Lentry%2%fcallStart
=global nodece 16
=global nodece 16 nodece z3.ce239.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce239 2f0c17078204a42954f6a6a14719749
=nextpc_const.1
1 : 68793045 { 0x419b2d5 +1.20077002e137 } : BV:32
=input.spec-%var-m1-1
1 : Lambda1210 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1211 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1214 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1215 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 397162872, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 1334296341 { 0x4f87bf15 +1.6051886e32 } : BV:32
=input.spec-%tmpvar-25.L3%3%fcallEnd
1 : 397162872 { 0x17ac3978 +1.34550380e176 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda1218 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1219 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda1214 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1215 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 492206615 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 492206616; 492206619 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 492206620; 800242251 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 800242252; 800242255 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 800242256; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 2478472568 { 0x93ba7d78 -1816494728 -1.45695400e168 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 800242252 { 0x2fb2ba4c +1.39631032e224 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 492206616 { 0x1d567a18 +1.67560100e187 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 68793045 , 1000 , 0 ) -> 1334296341, () -> 2007873404, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 492206616 { 0x1d567a18 +1.67560100e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 492206619 { 0x1d567a1b +1.67560136e187 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 800242252 { 0x2fb2ba4c +1.39631032e224 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 800242255 { 0x2fb2ba4f +1.39631068e224 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
806936491
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L3%3%fcallStart_Lentry%2%fcallStart -> L3%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 17
=global nodece 17 nodece z3v487.ce240.num_edges_traversed0
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3v487.ce240 7ccdd4730adc6d9e7a15e71ecddca0
=input.spec-%var-m1-1
1 : Lambda1234 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1235 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1238 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1239 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda1242 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1243 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda1246 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1247 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 536870916; 2147483651 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1448556510
=counter_example_end
=global nodece 17 num_edges_traversed 0
=global nodece 17 nodece_visted_pcs: 
L3%3%fcallStart_Lentry%2%fcallStart
=global nodece 18
=global nodece 18 nodece z3.ce326.num_edges_traversed0
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce326 faf9b46dd8b43ba48e6bceae23ff3cea
=input.spec-%var-m1-1
1 : Lambda1560 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1561 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1564 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1565 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda1568 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1569 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda1572 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1573 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2919907771 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2919907772; 2919907775 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2919907776; 3250422975 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3250422976; 3250422979 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3250422980; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 4158619642 { 0xf7df7ffa -136347654 -1.74609303e112 } : BV:32
=input.dst.llvm-%m2
1 : 3837689840 { 0xe4be7ff0 -457277456 -1.48827934e74 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2919907772 { 0xae0a41bc -1375059524 -1.8013105e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2919907772 { 0xae0a41bc -1375059524 -1.8013105e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2919907775 { 0xae0a41bf -1375059521 -1.8013141e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3250422976 { 0xc1bd84c0 -1044544320 -1.48061370e4 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3250422979 { 0xc1bd84c3 -1044544317 -1.48061406e4 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3146547259
=counter_example_end
=global nodece 18 num_edges_traversed 0
=global nodece 18 nodece_visted_pcs: 
L3%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 19
=global nodece 19 nodece z3v487.ce327.num_edges_traversed0
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce327 d12bfd9a9eb9a4f5b1d3052a8555a75
=input.spec-%var-m1-1
1 : Lambda1584 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1585 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1588 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1589 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L3%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-fi-0.L3%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd
1 : Lambda1592 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1593 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd
1 : Lambda1596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1597 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 8; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%m1
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.llvm-%m2
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1716263743
=counter_example_end
=global nodece 19 num_edges_traversed 0
=global nodece 19 nodece_visted_pcs: 
L3%3%fcallEnd_Lentry%2%fcallEnd
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.dst.llvm-%m1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 5
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 6
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 8
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 10
1 : spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=inductive-invariants point_set point_expr 12
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=inductive-invariants point_set point_expr 14
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 16
1 : spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 2 for input.dst.llvm-%m1
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
29477446
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1759522630
=inductive-invariants point_set point z3v487.ce4 expr point z3v487.ce4 done
=inductive-invariants point_set point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3.ce160 expr point z3.ce160 done
=inductive-invariants point_set point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
1620425918
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1264292678
=inductive-invariants point_set point z3v487.ce159 expr point z3v487.ce159 done
=inductive-invariants point_set point z3.ce11
=inductive-invariants point_set point z3.ce11 expr point z3.ce11
=inductive-invariants point_set point z3.ce11 expr point z3.ce11 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce11 expr point z3.ce11 val 2 for input.dst.llvm-%m1
2932727040
=inductive-invariants point_set point z3.ce11 expr point z3.ce11 val 3 for input.dst.llvm-%m2
41959432
=inductive-invariants point_set point z3.ce11 expr point z3.ce11 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
900203389
=inductive-invariants point_set point z3.ce11 expr point z3.ce11 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1663110789
=inductive-invariants point_set point z3.ce11 expr point z3.ce11 done
=inductive-invariants point_set point z3v487.ce12
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 2 for input.dst.llvm-%m1
538976256
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 3 for input.dst.llvm-%m2
538976288
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
853186023
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
91088095
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 done
=inductive-invariants point_set point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 2 for input.dst.llvm-%m1
3749575952
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 3 for input.dst.llvm-%m2
3220977408
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
14980399
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
379822441
=inductive-invariants point_set point z3.ce23 expr point z3.ce23 done
=inductive-invariants point_set point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 2 for input.dst.llvm-%m1
4
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
1566671405
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
809440826
=inductive-invariants point_set point z3v487.ce24 expr point z3v487.ce24 done
=inductive-invariants point_set point z3.ce35
=inductive-invariants point_set point z3.ce35 expr point z3.ce35
=inductive-invariants point_set point z3.ce35 expr point z3.ce35 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce35 expr point z3.ce35 val 2 for input.dst.llvm-%m1
3621615872
=inductive-invariants point_set point z3.ce35 expr point z3.ce35 val 3 for input.dst.llvm-%m2
4292853252
=inductive-invariants point_set point z3.ce35 expr point z3.ce35 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
1412369691
=inductive-invariants point_set point z3.ce35 expr point z3.ce35 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
347859769
=inductive-invariants point_set point z3.ce35 expr point z3.ce35 done
=inductive-invariants point_set point z3v487.ce36
=inductive-invariants point_set point z3v487.ce36 expr point z3v487.ce36
=inductive-invariants point_set point z3v487.ce36 expr point z3v487.ce36 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce36 expr point z3v487.ce36 val 2 for input.dst.llvm-%m1
67372032
=inductive-invariants point_set point z3v487.ce36 expr point z3v487.ce36 val 3 for input.dst.llvm-%m2
67372036
=inductive-invariants point_set point z3v487.ce36 expr point z3v487.ce36 done
=inductive-invariants point_set point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 2 for input.dst.llvm-%m1
1073667840
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 3 for input.dst.llvm-%m2
3706318336
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 done
=inductive-invariants point_set point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 2 for input.dst.llvm-%m1
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 done
=inductive-invariants point_set point z3.ce59
=inductive-invariants point_set point z3.ce59 expr point z3.ce59
=inductive-invariants point_set point z3.ce59 expr point z3.ce59 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce59 expr point z3.ce59 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce59 expr point z3.ce59 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
792032573
=inductive-invariants point_set point z3.ce59 expr point z3.ce59 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
228438945
=inductive-invariants point_set point z3.ce59 expr point z3.ce59 done
=inductive-invariants point_set point z3v487.ce60
=inductive-invariants point_set point z3v487.ce60 expr point z3v487.ce60
=inductive-invariants point_set point z3v487.ce60 expr point z3v487.ce60 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce60 expr point z3v487.ce60 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce60 expr point z3v487.ce60 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
1853891621
=inductive-invariants point_set point z3v487.ce60 expr point z3v487.ce60 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
903237936
=inductive-invariants point_set point z3v487.ce60 expr point z3v487.ce60 done
=inductive-invariants point_set point z3.ce117
=inductive-invariants point_set point z3.ce117 expr point z3.ce117
=inductive-invariants point_set point z3.ce117 expr point z3.ce117 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce117 expr point z3.ce117 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce117 expr point z3.ce117 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
1787606814
=inductive-invariants point_set point z3.ce117 expr point z3.ce117 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
379388800
=inductive-invariants point_set point z3.ce117 expr point z3.ce117 done
=inductive-invariants point_set point z3v487.ce118
=inductive-invariants point_set point z3v487.ce118 expr point z3v487.ce118
=inductive-invariants point_set point z3v487.ce118 expr point z3v487.ce118 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce118 expr point z3v487.ce118 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce118 expr point z3v487.ce118 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
694167380
=inductive-invariants point_set point z3v487.ce118 expr point z3v487.ce118 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2040931888
=inductive-invariants point_set point z3v487.ce118 expr point z3v487.ce118 done
=inductive-invariants point_set point z3.ce133
=inductive-invariants point_set point z3.ce133 expr point z3.ce133
=inductive-invariants point_set point z3.ce133 expr point z3.ce133 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce133 expr point z3.ce133 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce133 expr point z3.ce133 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
1284761902
=inductive-invariants point_set point z3.ce133 expr point z3.ce133 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
355887643
=inductive-invariants point_set point z3.ce133 expr point z3.ce133 done
=inductive-invariants point_set point z3v487.ce134
=inductive-invariants point_set point z3v487.ce134 expr point z3v487.ce134
=inductive-invariants point_set point z3v487.ce134 expr point z3v487.ce134 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce134 expr point z3v487.ce134 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce134 expr point z3v487.ce134 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
1512011853
=inductive-invariants point_set point z3v487.ce134 expr point z3v487.ce134 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
395752017
=inductive-invariants point_set point z3v487.ce134 expr point z3v487.ce134 done
=inductive-invariants point_set point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3.ce224 expr point z3.ce224 done
=inductive-invariants point_set point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce223 expr point z3v487.ce223 done
=inductive-invariants point_set point z3.ce175
=inductive-invariants point_set point z3.ce175 expr point z3.ce175
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
4294967295
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
4294967295
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
4294967295
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
74611228
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1483510104
=inductive-invariants point_set point z3.ce175 expr point z3.ce175 done
=inductive-invariants point_set point z3v487.ce176
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
4294967295
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
4294967295
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
4294967295
=inductive-invariants point_set point z3v487.ce176 expr point z3v487.ce176 done
=inductive-invariants point_set point z3.ce191
=inductive-invariants point_set point z3.ce191 expr point z3.ce191
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 3 for input.dst.llvm-%m2
32768
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
951148248
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
473693548
=inductive-invariants point_set point z3.ce191 expr point z3.ce191 done
=inductive-invariants point_set point z3v487.ce192
=inductive-invariants point_set point z3v487.ce192 expr point z3v487.ce192
=inductive-invariants point_set point z3v487.ce192 expr point z3v487.ce192 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce192 expr point z3v487.ce192 val 3 for input.dst.llvm-%m2
1073741824
=inductive-invariants point_set point z3v487.ce192 expr point z3v487.ce192 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce192 expr point z3v487.ce192 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce192 expr point z3v487.ce192 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce192 expr point z3v487.ce192 done
=inductive-invariants point_set point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 3 for input.dst.llvm-%m2
4096
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
805389074
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
625466276
=inductive-invariants point_set point z3.ce207 expr point z3.ce207 done
=inductive-invariants point_set point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 3 for input.dst.llvm-%m2
4
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
111309610
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1563374746
=inductive-invariants point_set point z3v487.ce208 expr point z3v487.ce208 done
=inductive-invariants point_set point z3.ce239
=inductive-invariants point_set point z3.ce239 expr point z3.ce239
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
397162872
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1334296341
=inductive-invariants point_set point z3.ce239 expr point z3.ce239 done
=inductive-invariants point_set point z3v487.ce240
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
1008685438
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
640355011
=inductive-invariants point_set point z3v487.ce240 expr point z3v487.ce240 done
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
1620425919
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1264292678
=inductive-invariants point_set point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 expr point bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1 done
=inductive-invariants point_set point z3.ce310
=inductive-invariants point_set point z3.ce310 expr point z3.ce310
=inductive-invariants point_set point z3.ce310 expr point z3.ce310 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce310 expr point z3.ce310 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3.ce310 expr point z3.ce310 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce310 expr point z3.ce310 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3.ce310 expr point z3.ce310 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
1670351212
=inductive-invariants point_set point z3.ce310 expr point z3.ce310 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
261886207
=inductive-invariants point_set point z3.ce310 expr point z3.ce310 done
=inductive-invariants point_set point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
1531032996
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1448274437
=inductive-invariants point_set point z3v487.ce311 expr point z3v487.ce311 done
=inductive-invariants point_set point z3.ce294
=inductive-invariants point_set point z3.ce294 expr point z3.ce294
=inductive-invariants point_set point z3.ce294 expr point z3.ce294 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3.ce294 expr point z3.ce294 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3.ce294 expr point z3.ce294 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce294 expr point z3.ce294 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3.ce294 expr point z3.ce294 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
124809774
=inductive-invariants point_set point z3.ce294 expr point z3.ce294 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
155758887
=inductive-invariants point_set point z3.ce294 expr point z3.ce294 done
=inductive-invariants point_set point z3v487.ce295
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295 val 1 for and(and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc, 0, 1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap))
1
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295 val 6 for input.spec-%tmpvar-24.L3%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295 val 11 for input.spec-%var-fi-0.L3%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295 val 12 for input.spec-%tmpvar-25.L3%3%fcallEnd
76493740
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295 val 13 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1022597848
=inductive-invariants point_set point z3v487.ce295 expr point z3v487.ce295 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%1%fcallStart_Lentry%1%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L3%1%fcallEnd_Lentry%1%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at L3%3%fcallStart_Lentry%2%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L3%3%fcallEnd_Lentry%2%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%1%fcallStart_Lentry%1%fcallStart for reason inductive-invariants
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state failcond.description

=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state failcond done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce4
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 2 exprs
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.dst.llvm-%m1 : BV:32
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.2
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m1 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce4
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce11
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce12
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce23
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce24
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce35
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=2; number of visited CEs=6; number of preds=2
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->1073741824; 3->0; 
3
-2147483648->0; 2->0; 3->1073741824; 
matrix done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 2 exprs
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 4
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 5
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce4
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=2; number of visited CEs=1; number of preds=2
=pc L3%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state done
=Invariant state at node L3%1%fcallEnd_Lentry%1%fcallEnd for reason inductive-invariants
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state failcond.description

=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state failcond done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce4
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 3 exprs
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce4
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce11
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce12
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce23
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce24
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce35
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=3; number of visited CEs=6; number of preds=1
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 3->1073741824; 6->0; 7->0; 
matrix done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 3 exprs
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 8
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 9
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 10
1 : spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce4
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=3; number of visited CEs=1; number of preds=2
=pc L3%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state done
=Invariant state at node L3%3%fcallStart_Lentry%2%fcallStart for reason inductive-invariants
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state failcond.description

=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state failcond done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce159
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 4 exprs
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 11
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.11
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=predicate done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=predicate done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce159
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce175
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce191
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce207
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce208
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=4; number of visited CEs=5; number of preds=3
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 3->1073741824; 6->0; 7->0; 11->0; 
7
-2147483648->0; 3->0; 6->4294967295; 7->1; 11->0; 
11
-2147483648->0; 3->0; 6->4294967295; 7->0; 11->1; 
matrix done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 2 exprs
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 8
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 9
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce159
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=2; number of visited CEs=1; number of preds=2
=pc L3%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state done
=Invariant state at node L3%3%fcallEnd_Lentry%2%fcallEnd for reason inductive-invariants
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state failcond.description

=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state failcond done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
49 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
52 : region_agrees_with_memlabel(49, 38, 50, 51) : BOOL
53 : and(48, 52) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce159
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 11
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 12
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 13
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.11
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=predicate done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=predicate done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce159
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce175
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce191
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce207
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce239
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 5: bvcover-weakening-point.fast.expr_idx12.coeff_rank32.bvlen32.orig_ce.z3v487.ce159.1
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=6; number of preds=2
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
7
-2147483648->0; 6->4294967295; 7->1; 11->0; 12->0; 13->0; 
11
-2147483648->0; 6->4294967295; 7->0; 11->1; 12->0; 13->0; 
matrix done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 3 exprs
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 14
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 15
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 16
1 : spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce159
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=3; number of visited CEs=1; number of preds=2
=pc L3%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart edge well-formedness condition done
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge well-formedness condition
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond cg_path
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond src_path
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond dst_path
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond pred.0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge well-formedness condition
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge-wf-cond cg_path
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge-wf-cond src_path
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge-wf-cond dst_path
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%1%fcallEnd_Lentry%1%fcallEnd.to_pcL3%3%fcallStart_Lentry%2%fcallStart-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : implies(3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart edge well-formedness condition done
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge well-formedness condition
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond cg_path
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond src_path
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond dst_path
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond pred.0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%3%fcallEnd_Lentry%2%fcallEnd.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : implies(3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%1%fcallStart_Lentry%1%fcallStart
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m1 : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%m2 : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%1%fcallEnd_Lentry%1%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%m2 : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%3%fcallStart_Lentry%2%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=SRC Tie Breaking expr 3
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%m2 : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%3%fcallEnd_Lentry%2%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
=SRC Ranking expr 1
1 : input.spec-%var-fi-0.L3%3%fcallStart : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
=SRC Tie Breaking expr 3
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 4
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140503 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140540 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
140508 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140484 : 0 { 0x0 } : BOOL
140541 : select(140503, 140504, 140540, 140508, 140483, 140484) : BV:32
=RhsExpr
140506 : input.dst.llvm-%m2 : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140503 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140542 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
140507 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140484 : 0 { 0x0 } : BOOL
140543 : select(140503, 140504, 140542, 140507, 140483, 140484) : BV:32
=RhsExpr
140505 : input.dst.llvm-%m1 : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #2.pred
=Comment
undef-behavioursome.edge.L0%0%d=>Lentry%1%fcallStart
=LhsExpr
140505 : input.dst.llvm-%m1 : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140514 : islangaligned(140505, 140483) : BOOL
140506 : input.dst.llvm-%m2 : BV:32
140515 : islangaligned(140506, 140483) : BOOL
140431 : and(140514, 140515) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #3.pred
=Comment
pointer-implements-map-arg0
=LhsExpr
140273 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
140477 : Lambda0 : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140478 : bvule(140290, 140477) : BOOL
140474 : 100 { 0x64 +1.1192e129 } : BV:32
140479 : bvult(140477, 140474) : BOOL
140480 : and(140478, 140479) : BOOL
140481 : lambda(140477, 140480) : FUNCTION[BV:32 -> BOOL]
140485 : Lambda1 : BV:32
140503 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140482 : memlabel-top : MEMLABEL
140486 : 4 { 0x4 +1.47e129 } : BV:32
140487 : bvmul(140485, 140486) : BV:32
140505 : input.dst.llvm-%m1 : BV:32
140815 : bvadd(140487, 140505) : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140484 : 0 { 0x0 } : BOOL
140816 : select(140503, 140504, 140482, 140815, 140483, 140484) : BV:32
140818 : lambda(140485, 140816) : FUNCTION[BV:32 -> BV:32]
140819 : map(140481, 140818) : MAP[BV:32 -> BV:32]
140822 : eq(140273, 140819) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #4.pred
=Comment
pointer-implements-map-arg1
=LhsExpr
140274 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
140477 : Lambda0 : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140478 : bvule(140290, 140477) : BOOL
140474 : 100 { 0x64 +1.1192e129 } : BV:32
140479 : bvult(140477, 140474) : BOOL
140480 : and(140478, 140479) : BOOL
140481 : lambda(140477, 140480) : FUNCTION[BV:32 -> BOOL]
140485 : Lambda1 : BV:32
140503 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140482 : memlabel-top : MEMLABEL
140486 : 4 { 0x4 +1.47e129 } : BV:32
140487 : bvmul(140485, 140486) : BV:32
140506 : input.dst.llvm-%m2 : BV:32
140792 : bvadd(140487, 140506) : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140484 : 0 { 0x0 } : BOOL
140793 : select(140503, 140504, 140482, 140792, 140483, 140484) : BV:32
140795 : lambda(140485, 140793) : FUNCTION[BV:32 -> BV:32]
140796 : map(140481, 140795) : MAP[BV:32 -> BV:32]
140800 : eq(140274, 140796) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart assume #5.pred
=Comment
precond-mlasserts
=LhsExpr
140723 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
140724 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
140725 : bvule(140723, 140724) : BOOL
140486 : 4 { 0x4 +1.47e129 } : BV:32
140297 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140727 : bvadd(140486, 140297) : BV:32
140728 : bvadd(140723, 140727) : BV:32
140729 : eq(140724, 140728) : BOOL
140730 : and(140725, 140729) : BOOL
140731 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
140732 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
140733 : bvule(140731, 140732) : BOOL
140734 : and(140730, 140733) : BOOL
140735 : bvadd(140731, 140727) : BV:32
140736 : eq(140732, 140735) : BOOL
140737 : and(140734, 140736) : BOOL
140738 : bvuge(140723, 140731) : BOOL
140739 : bvule(140723, 140732) : BOOL
140740 : and(140738, 140739) : BOOL
140742 : bvuge(140724, 140731) : BOOL
140744 : bvule(140724, 140732) : BOOL
140745 : and(140742, 140744) : BOOL
140746 : not(140745) : BOOL
140747 : andnot1(140740, 140746) : BOOL
140741 : bvuge(140731, 140723) : BOOL
140748 : bvule(140731, 140724) : BOOL
140749 : and(140741, 140748) : BOOL
140751 : bvuge(140732, 140723) : BOOL
140752 : bvule(140732, 140724) : BOOL
140753 : and(140751, 140752) : BOOL
140754 : not(140753) : BOOL
140755 : andnot1(140749, 140754) : BOOL
140750 : and(140747, 140755) : BOOL
140756 : and(140737, 140750) : BOOL
140508 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
140341 : 3 { 0x3 +1.35e129 } : BV:32
140757 : bvand(140508, 140341) : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140758 : eq(140757, 140290) : BOOL
140507 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
140759 : bvand(140507, 140341) : BV:32
140760 : eq(140759, 140290) : BOOL
140761 : and(140758, 140760) : BOOL
140762 : and(140756, 140761) : BOOL
140763 : eq(140508, 140723) : BOOL
140764 : eq(140507, 140731) : BOOL
140765 : and(140763, 140764) : BOOL
140766 : and(140762, 140765) : BOOL
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140304 : 1 { 0x1 +1.11e129 } : BV:32
140509 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140767 : region_agrees_with_memlabel(140504, 140290, 140304, 140509) : BOOL
140768 : and(140766, 140767) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%1%fcallStart_Lentry%1%fcallStart done
cg.assumes_around_edge at L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd
cg.assumes_around_edge at L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd assume #0
cg.assumes_around_edge at L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd assume #0.ec
cg.assumes_around_edge at L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140505 : input.dst.llvm-%m1 : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140514 : islangaligned(140505, 140483) : BOOL
140506 : input.dst.llvm-%m2 : BV:32
140515 : islangaligned(140506, 140483) : BOOL
140431 : and(140514, 140515) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%1%fcallStart_Lentry%1%fcallStart=>L3%1%fcallEnd_Lentry%1%fcallEnd done
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #0
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #0.ec
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140505 : input.dst.llvm-%m1 : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140514 : islangaligned(140505, 140483) : BOOL
140506 : input.dst.llvm-%m2 : BV:32
140515 : islangaligned(140506, 140483) : BOOL
140431 : and(140514, 140515) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #1
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #1.ec
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart assume #1.pred
=Comment
cg-edge-assume
=LhsExpr
140305 : input.spec-%tmpvar-24.L3%1%fcallEnd : BV:32
140402 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
151371 : eq(140305, 140402) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%1%fcallEnd_Lentry%1%fcallEnd=>L3%3%fcallStart_Lentry%2%fcallStart done
cg.assumes_around_edge at L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd
cg.assumes_around_edge at L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd assume #0
cg.assumes_around_edge at L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd assume #0.ec
cg.assumes_around_edge at L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140505 : input.dst.llvm-%m1 : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140514 : islangaligned(140505, 140483) : BOOL
140506 : input.dst.llvm-%m2 : BV:32
140515 : islangaligned(140506, 140483) : BOOL
140431 : and(140514, 140515) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%3%fcallStart_Lentry%2%fcallStart=>L3%3%fcallEnd_Lentry%2%fcallEnd done
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140505 : input.dst.llvm-%m1 : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140514 : islangaligned(140505, 140483) : BOOL
140506 : input.dst.llvm-%m2 : BV:32
140515 : islangaligned(140506, 140483) : BOOL
140431 : and(140514, 140515) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1.pred
=Comment
cg-edge-assume
=LhsExpr
140384 : input.spec-%tmpvar-25.L3%3%fcallEnd : BV:32
140403 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
157040 : eq(140384, 140403) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%1%fcallStart_Lentry%1%fcallStart
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%1%fcallEnd_Lentry%1%fcallEnd
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%3%fcallStart_Lentry%2%fcallStart
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%3%fcallEnd_Lentry%2%fcallEnd
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L2%3%d L2%4%bbentry L2%7%bbentry L2%9%bbentry L2%12%d L2%13%bbentry L2%16%bbentry L2%18%bbentry L2%21%d L2%22%bbentry L2%25%bbentry L2%27%bbentry L2%30%d L2%31%bbentry L2%34%bbentry L2%36%bbentry E0%0%d
=Edges:
L0%0%d => L2%3%d
L2%3%d => L2%7%bbentry
L2%3%d => L2%4%bbentry
L2%4%bbentry => L2%9%bbentry
L2%7%bbentry => L2%9%bbentry
L2%9%bbentry => L2%12%d
L2%12%d => L2%16%bbentry
L2%12%d => L2%13%bbentry
L2%13%bbentry => L2%18%bbentry
L2%16%bbentry => L2%18%bbentry
L2%18%bbentry => L2%21%d
L2%21%d => L2%25%bbentry
L2%21%d => L2%22%bbentry
L2%22%bbentry => L2%27%bbentry
L2%25%bbentry => L2%27%bbentry
L2%27%bbentry => L2%30%d
L2%30%d => L2%34%bbentry
L2%30%d => L2%31%bbentry
L2%31%bbentry => L2%36%bbentry
L2%34%bbentry => L2%36%bbentry
L2%36%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%3%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%4%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%7%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%9%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%12%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%13%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%16%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%18%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%21%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%22%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%25%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%27%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%30%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%31%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%34%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%36%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.src.spec.foo : memlabel-mem--heap
=Edge: L0%0%d => L2%3%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-1.L2%3%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((func_head*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%3%d => L2%7%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:8:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%3%d => L2%4%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%4%bbentry => L2%9%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-u-0.L2%9%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-3.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-2.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%7%bbentry => L2%9%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-val-0.L2%9%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-3.L2%9%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%9%bbentry => L2%12%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-m0-0.L2%12%d
1 : input.spec-%tmpvar-3.L2%9%bbentry : BV:32
=spec-%tmpvar-5.L2%12%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%tmpvar-4.L2%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*letin_def)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%12%d => L2%16%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:17:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%12%d => L2%13%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:14:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%13%bbentry => L2%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-6.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%16%bbentry => L2%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-1.L2%18%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%18%bbentry => L2%21%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-m1-0.L2%21%d
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=spec-%tmpvar-9.L2%21%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%tmpvar-8.L2%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*letin_def)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%21%d => L2%25%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:26:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%21%d => L2%22%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:23:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%22%bbentry => L2%27%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-u3-0.L2%27%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-11.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%25%bbentry => L2%27%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-val-2.L2%27%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-11.L2%27%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%27%bbentry => L2%30%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-12.L2%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=spec-%var-m2-0.L2%30%d
1 : input.spec-%tmpvar-11.L2%27%bbentry : BV:32
=spec-%tmpvar-13.L2%30%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*letin_def)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L2%30%d => L2%34%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:35:match_sum_cond_1
tfg_edge_comment end

=Edge: L2%30%d => L2%31%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:32:match_sum_cond_0
tfg_edge_comment end

=Edge: L2%31%bbentry => L2%36%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-u4-0.L2%36%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-15.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-14.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L2%34%bbentry => L2%36%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-val-3.L2%36%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-15.L2%36%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L2%36%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L2%21%d : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L2%21%d : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-19.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L2%21%d : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L2%21%d : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-m1-0.L2%21%d : BV:32
2 : input.spec-%var-m2-0.L2%30%d : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-m3-0.E0%0%d
1 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
=spec-%tmpvar-23.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L2%21%d : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-22.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L2%21%d : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*letin_def)*intrinsic_app_bvadd)*intrinsic_app_bvsub)*(((((intrinsic_app_bvadd*letin_body)*letin_body)*letin_body)*letin_body)*func_ret))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-m-0
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
=Loc 38 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 39 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L2%3%d
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L2%12%d
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L2%21%d
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
=Loc 43 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L2%30%d
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L2%3%d
1 : input.spec-%tmpvar-0.L2%3%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L2%9%bbentry
1 : input.spec-%tmpvar-3.L2%9%bbentry : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L2%12%d
1 : input.spec-%tmpvar-4.L2%12%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%var-m0-0.L2%12%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L2%21%d
1 : input.spec-%tmpvar-8.L2%21%d : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%var-m1-0.L2%21%d
1 : input.spec-%var-m1-0.L2%21%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L2%27%bbentry
1 : input.spec-%tmpvar-11.L2%27%bbentry : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L2%30%d
1 : input.spec-%tmpvar-12.L2%30%d : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-m2-0.L2%30%d
1 : input.spec-%var-m2-0.L2%30%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L2%36%bbentry
1 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-16.E0%0%d
1 : input.spec-%tmpvar-16.E0%0%d : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-18.E0%0%d
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-19.E0%0%d
1 : input.spec-%tmpvar-19.E0%0%d : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%tmpvar-22.E0%0%d
1 : input.spec-%tmpvar-22.E0%0%d : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%tmpvar-23.E0%0%d
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
=Loc 63 in src.spec.foo.
REGMEM
spec-%var-m3-0.E0%0%d
1 : input.spec-%var-m3-0.E0%0%d : BV:32
=Loc 64 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L2%9%bbentry
1 : input.spec-%tmpvar-2.L2%9%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%var-u-0.L2%9%bbentry
1 : input.spec-%var-u-0.L2%9%bbentry : UNIT
=Loc 66 in src.spec.foo.
REGMEM
spec-%var-val-0.L2%9%bbentry
1 : input.spec-%var-val-0.L2%9%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L2%18%bbentry
1 : input.spec-%tmpvar-6.L2%18%bbentry : BV:32
=Loc 68 in src.spec.foo.
REGMEM
spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%var-u2-0.L2%18%bbentry : UNIT
=Loc 69 in src.spec.foo.
REGMEM
spec-%var-val-1.L2%18%bbentry
1 : input.spec-%var-val-1.L2%18%bbentry : BV:32
=Loc 70 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L2%27%bbentry
1 : input.spec-%tmpvar-10.L2%27%bbentry : BV:32
=Loc 71 in src.spec.foo.
REGMEM
spec-%var-u3-0.L2%27%bbentry
1 : input.spec-%var-u3-0.L2%27%bbentry : UNIT
=Loc 72 in src.spec.foo.
REGMEM
spec-%var-val-2.L2%27%bbentry
1 : input.spec-%var-val-2.L2%27%bbentry : BV:32
=Loc 73 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L2%36%bbentry
1 : input.spec-%tmpvar-14.L2%36%bbentry : BV:32
=Loc 74 in src.spec.foo.
REGMEM
spec-%var-u4-0.L2%36%bbentry
1 : input.spec-%var-u4-0.L2%36%bbentry : UNIT
=Loc 75 in src.spec.foo.
REGMEM
spec-%var-val-3.L2%36%bbentry
1 : input.spec-%var-val-3.L2%36%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L2%3%d
1, 40, 
=live locs at L2%4%bbentry
1, 
=live locs at L2%7%bbentry
1, 40, 
=live locs at L2%9%bbentry
1, 45, 
=live locs at L2%12%d
1, 41, 47, 
=live locs at L2%13%bbentry
1, 47, 
=live locs at L2%16%bbentry
1, 41, 47, 
=live locs at L2%18%bbentry
1, 47, 48, 
=live locs at L2%21%d
1, 42, 47, 50, 
=live locs at L2%22%bbentry
1, 47, 50, 
=live locs at L2%25%bbentry
1, 42, 47, 50, 
=live locs at L2%27%bbentry
1, 47, 50, 51, 
=live locs at L2%30%d
43, 47, 50, 53, 
=live locs at L2%31%bbentry
47, 50, 53, 
=live locs at L2%34%bbentry
43, 47, 50, 53, 
=live locs at L2%36%bbentry
47, 50, 53, 54, 
=live locs at E0%0%d
62[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 38, 39
=loc definedness at L2%3%d
1, 38, 39, 40, 44
=loc definedness at L2%4%bbentry
1, 38, 39, 40, 44
=loc definedness at L2%7%bbentry
1, 38, 39, 40, 44
=loc definedness at L2%9%bbentry
1, 38, 39, 40, 44, 45
=loc definedness at L2%12%d
1, 38, 39, 40, 41, 44, 45, 46, 47
=loc definedness at L2%13%bbentry
1, 38, 39, 40, 41, 44, 45, 46, 47
=loc definedness at L2%16%bbentry
1, 38, 39, 40, 41, 44, 45, 46, 47
=loc definedness at L2%18%bbentry
1, 38, 39, 40, 41, 44, 45, 46, 47, 48
=loc definedness at L2%21%d
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50
=loc definedness at L2%22%bbentry
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50
=loc definedness at L2%25%bbentry
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50
=loc definedness at L2%27%bbentry
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51
=loc definedness at L2%30%d
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
=loc definedness at L2%31%bbentry
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
=loc definedness at L2%34%bbentry
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
=loc definedness at L2%36%bbentry
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54
=loc definedness at E0%0%d
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L2%3%d
1, 40
=branch affecting variable locs at L2%4%bbentry
1
=branch affecting variable locs at L2%7%bbentry
1
=branch affecting variable locs at L2%9%bbentry
1
=branch affecting variable locs at L2%12%d
1, 41
=branch affecting variable locs at L2%13%bbentry
1
=branch affecting variable locs at L2%16%bbentry
1
=branch affecting variable locs at L2%18%bbentry
1
=branch affecting variable locs at L2%21%d
1, 42
=branch affecting variable locs at L2%22%bbentry
1
=branch affecting variable locs at L2%25%bbentry
1
=branch affecting variable locs at L2%27%bbentry
1
=branch affecting variable locs at L2%30%d
43
=branch affecting variable locs at L2%31%bbentry

=branch affecting variable locs at L2%34%bbentry

=branch affecting variable locs at L2%36%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d for loc_id 40 {input.spec-%tmpvar-1.L2%3%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d for loc_id 44 {input.spec-%tmpvar-0.L2%3%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%3%d done
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%4%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%4%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%3%d=>L2%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%9%bbentry for loc_id 45 {input.spec-%tmpvar-3.L2%9%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%9%bbentry for loc_id 64 {input.spec-%tmpvar-2.L2%9%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%9%bbentry for loc_id 65 {input.spec-%var-u-0.L2%9%bbentry }
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%4%bbentry=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%9%bbentry for loc_id 45 {input.spec-%tmpvar-3.L2%9%bbentry }
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%9%bbentry for loc_id 66 {input.spec-%var-val-0.L2%9%bbentry }
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%7%bbentry=>L2%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%12%d
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%12%d for loc_id 41 {input.spec-%tmpvar-5.L2%12%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%12%d for loc_id 46 {input.spec-%tmpvar-4.L2%12%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%12%d for loc_id 47 {input.spec-%var-m0-0.L2%12%d }
1 : input.spec-%tmpvar-3.L2%9%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%9%bbentry=>L2%12%d done
=graph_with_edge_structures.loc_to_expr_map at L2%12%d=>L2%13%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%12%d=>L2%13%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%12%d=>L2%16%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%12%d=>L2%16%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%18%bbentry for loc_id 48 {input.spec-%tmpvar-7.L2%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%18%bbentry for loc_id 67 {input.spec-%tmpvar-6.L2%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%18%bbentry for loc_id 68 {input.spec-%var-u2-0.L2%18%bbentry }
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%13%bbentry=>L2%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry for loc_id 48 {input.spec-%tmpvar-7.L2%18%bbentry }
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry for loc_id 69 {input.spec-%var-val-1.L2%18%bbentry }
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%16%bbentry=>L2%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%21%d
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%21%d for loc_id 42 {input.spec-%tmpvar-9.L2%21%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%21%d for loc_id 49 {input.spec-%tmpvar-8.L2%21%d }
1 : 2 { 0x2 +1.23e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%21%d for loc_id 50 {input.spec-%var-m1-0.L2%21%d }
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%18%bbentry=>L2%21%d done
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%22%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%22%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%25%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%21%d=>L2%25%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%27%bbentry for loc_id 51 {input.spec-%tmpvar-11.L2%27%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%27%bbentry for loc_id 70 {input.spec-%tmpvar-10.L2%27%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%27%bbentry for loc_id 71 {input.spec-%var-u3-0.L2%27%bbentry }
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%22%bbentry=>L2%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%27%bbentry for loc_id 51 {input.spec-%tmpvar-11.L2%27%bbentry }
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%27%bbentry for loc_id 72 {input.spec-%var-val-2.L2%27%bbentry }
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%25%bbentry=>L2%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%27%bbentry=>L2%30%d
=graph_with_edge_structures.loc_to_expr_map at L2%27%bbentry=>L2%30%d for loc_id 43 {input.spec-%tmpvar-13.L2%30%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%27%bbentry=>L2%30%d for loc_id 52 {input.spec-%tmpvar-12.L2%30%d }
1 : 3 { 0x3 +1.35e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%27%bbentry=>L2%30%d for loc_id 53 {input.spec-%var-m2-0.L2%30%d }
1 : input.spec-%tmpvar-11.L2%27%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%27%bbentry=>L2%30%d done
=graph_with_edge_structures.loc_to_expr_map at L2%30%d=>L2%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%30%d=>L2%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%30%d=>L2%34%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%30%d=>L2%34%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%36%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%36%bbentry for loc_id 54 {input.spec-%tmpvar-15.L2%36%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%36%bbentry for loc_id 73 {input.spec-%tmpvar-14.L2%36%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%36%bbentry for loc_id 74 {input.spec-%var-u4-0.L2%36%bbentry }
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L2%31%bbentry=>L2%36%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%34%bbentry=>L2%36%bbentry
=graph_with_edge_structures.loc_to_expr_map at L2%34%bbentry=>L2%36%bbentry for loc_id 54 {input.spec-%tmpvar-15.L2%36%bbentry }
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%34%bbentry=>L2%36%bbentry for loc_id 75 {input.spec-%var-val-3.L2%36%bbentry }
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%34%bbentry=>L2%36%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 55 {input.spec-%tmpvar-16.E0%0%d }
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 56 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-m1-0.L2%21%d : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-m2-0.L2%30%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 57 {input.spec-%tmpvar-18.E0%0%d }
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 58 {input.spec-%tmpvar-19.E0%0%d }
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 59 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 60 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 61 {input.spec-%tmpvar-22.E0%0%d }
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 62 {input.spec-%tmpvar-23.E0%0%d }
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d for loc_id 63 {input.spec-%var-m3-0.E0%0%d }
1 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%36%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%3%d:
vacuous mls at L2%4%bbentry:
vacuous mls at L2%7%bbentry:
vacuous mls at L2%9%bbentry:
vacuous mls at L2%12%d:
vacuous mls at L2%13%bbentry:
vacuous mls at L2%16%bbentry:
vacuous mls at L2%18%bbentry:
vacuous mls at L2%21%d:
vacuous mls at L2%22%bbentry:
vacuous mls at L2%25%bbentry:
vacuous mls at L2%27%bbentry:
vacuous mls at L2%30%d:
vacuous mls at L2%31%bbentry:
vacuous mls at L2%34%bbentry:
vacuous mls at L2%36%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%3%d:
non-vacuous mls at L2%4%bbentry:
non-vacuous mls at L2%7%bbentry:
non-vacuous mls at L2%9%bbentry:
non-vacuous mls at L2%12%d:
non-vacuous mls at L2%13%bbentry:
non-vacuous mls at L2%16%bbentry:
non-vacuous mls at L2%18%bbentry:
non-vacuous mls at L2%21%d:
non-vacuous mls at L2%22%bbentry:
non-vacuous mls at L2%25%bbentry:
non-vacuous mls at L2%27%bbentry:
non-vacuous mls at L2%30%d:
non-vacuous mls at L2%31%bbentry:
non-vacuous mls at L2%34%bbentry:
non-vacuous mls at L2%36%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140306 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 40
=loc_expr
140436 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 41
=loc_expr
140446 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 42
=loc_expr
140456 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 43
=loc_expr
140459 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 44
=loc_expr
140573 : input.spec-%tmpvar-0.L2%3%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140574 : input.spec-%tmpvar-4.L2%12%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 49
=loc_expr
140575 : input.spec-%tmpvar-8.L2%21%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 2 { 0x2 +1.23e129 } : BV:32
=avail_exprs_val.end
=loc 52
=loc_expr
140576 : input.spec-%tmpvar-12.L2%30%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 3 { 0x3 +1.35e129 } : BV:32
=avail_exprs_val.end
=loc 64
=loc_expr
140585 : input.spec-%tmpvar-2.L2%9%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 65
=loc_expr
140586 : input.spec-%var-u-0.L2%9%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 66
=loc_expr
140588 : input.spec-%var-val-0.L2%9%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=loc 67
=loc_expr
140589 : input.spec-%tmpvar-6.L2%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 68
=loc_expr
140590 : input.spec-%var-u2-0.L2%18%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 69
=loc_expr
140591 : input.spec-%var-val-1.L2%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=loc 70
=loc_expr
140701 : input.spec-%tmpvar-10.L2%27%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 71
=loc_expr
140702 : input.spec-%var-u3-0.L2%27%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 72
=loc_expr
140703 : input.spec-%var-val-2.L2%27%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=loc 73
=loc_expr
140704 : input.spec-%tmpvar-14.L2%36%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 74
=loc_expr
140711 : input.spec-%var-u4-0.L2%36%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 75
=loc_expr
140713 : input.spec-%var-val-3.L2%36%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 44 expr
1 : input.spec-%tmpvar-0.L2%3%d : BV:32
=loc 44 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 46 expr
1 : input.spec-%tmpvar-4.L2%12%d : BV:32
=loc 46 spreled-expr
140304 : 1 { 0x1 +1.11e129 } : BV:32
=loc 49 expr
1 : input.spec-%tmpvar-8.L2%21%d : BV:32
=loc 49 spreled-expr
140330 : 2 { 0x2 +1.23e129 } : BV:32
=loc 52 expr
1 : input.spec-%tmpvar-12.L2%30%d : BV:32
=loc 52 spreled-expr
140341 : 3 { 0x3 +1.35e129 } : BV:32
=loc 64 expr
1 : input.spec-%tmpvar-2.L2%9%bbentry : BV:32
=loc 64 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 67 expr
1 : input.spec-%tmpvar-6.L2%18%bbentry : BV:32
=loc 67 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 70 expr
1 : input.spec-%tmpvar-10.L2%27%bbentry : BV:32
=loc 70 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 73 expr
1 : input.spec-%tmpvar-14.L2%36%bbentry : BV:32
=loc 73 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 70 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 71 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 72 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 73 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 74 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 75 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 44 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 49 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 64 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 70 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 73 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%3%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%3%d=>L2%4%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%3%d=>L2%7%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%4%bbentry=>L2%9%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%7%bbentry=>L2%9%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%9%bbentry=>L2%12%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%12%d=>L2%13%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%12%d=>L2%16%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%13%bbentry=>L2%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%16%bbentry=>L2%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%18%bbentry=>L2%21%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%21%d=>L2%22%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%21%d=>L2%25%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%22%bbentry=>L2%27%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%25%bbentry=>L2%27%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%27%bbentry=>L2%30%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%30%d=>L2%31%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%30%d=>L2%34%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%31%bbentry=>L2%36%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%34%bbentry=>L2%36%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%36%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%3%d
=spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-1.L2%3%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%3%d=>L2%4%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%3%d=>L2%7%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%4%bbentry=>L2%9%bbentry
=spec-%var-u-0.L2%9%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-3.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-2.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%7%bbentry=>L2%9%bbentry
=spec-%var-val-0.L2%9%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-3.L2%9%bbentry
1 : input.spec-%tmpvar-1.L2%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%9%bbentry=>L2%12%d
=spec-%var-m0-0.L2%12%d
1 : input.spec-%tmpvar-3.L2%9%bbentry : BV:32
=spec-%tmpvar-5.L2%12%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%tmpvar-4.L2%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%12%d=>L2%13%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%12%d=>L2%16%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%13%bbentry=>L2%18%bbentry
=spec-%tmpvar-7.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L2%18%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-6.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%16%bbentry=>L2%18%bbentry
=spec-%tmpvar-7.L2%18%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-1.L2%18%bbentry
1 : input.spec-%tmpvar-5.L2%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%18%bbentry=>L2%21%d
=spec-%var-m1-0.L2%21%d
1 : input.spec-%tmpvar-7.L2%18%bbentry : BV:32
=spec-%tmpvar-9.L2%21%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%tmpvar-8.L2%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%21%d=>L2%22%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%21%d=>L2%25%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%22%bbentry=>L2%27%bbentry
=spec-%var-u3-0.L2%27%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-11.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%25%bbentry=>L2%27%bbentry
=spec-%var-val-2.L2%27%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-11.L2%27%bbentry
1 : input.spec-%tmpvar-9.L2%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%27%bbentry=>L2%30%d
=spec-%tmpvar-12.L2%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=spec-%var-m2-0.L2%30%d
1 : input.spec-%tmpvar-11.L2%27%bbentry : BV:32
=spec-%tmpvar-13.L2%30%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%30%d=>L2%31%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%30%d=>L2%34%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%31%bbentry=>L2%36%bbentry
=spec-%var-u4-0.L2%36%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-15.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-14.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%34%bbentry=>L2%36%bbentry
=spec-%var-val-3.L2%36%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-15.L2%36%bbentry
1 : input.spec-%tmpvar-13.L2%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%36%bbentry=>E0%0%d
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-19.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-m1-0.L2%21%d : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-m2-0.L2%30%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-m3-0.E0%0%d
1 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
=spec-%tmpvar-23.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-22.E0%0%d
1 : input.spec-%var-m0-0.L2%12%d : BV:32
2 : input.spec-%tmpvar-15.L2%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L2%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L2%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%3%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%3%d done
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%4%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%4%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%3%d=>L2%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%4%bbentry=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%7%bbentry=>L2%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%12%d
=graph_with_simplified_assets.simplified_assumes at L2%9%bbentry=>L2%12%d done
=graph_with_simplified_assets.simplified_assumes at L2%12%d=>L2%13%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%12%d=>L2%13%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%12%d=>L2%16%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%12%d=>L2%16%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%13%bbentry=>L2%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%13%bbentry=>L2%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%16%bbentry=>L2%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%21%d
=graph_with_simplified_assets.simplified_assumes at L2%18%bbentry=>L2%21%d done
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%22%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%22%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%25%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%21%d=>L2%25%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%22%bbentry=>L2%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%22%bbentry=>L2%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%25%bbentry=>L2%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%25%bbentry=>L2%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%27%bbentry=>L2%30%d
=graph_with_simplified_assets.simplified_assumes at L2%27%bbentry=>L2%30%d done
=graph_with_simplified_assets.simplified_assumes at L2%30%d=>L2%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%30%d=>L2%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%30%d=>L2%34%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%30%d=>L2%34%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%31%bbentry=>L2%36%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%31%bbentry=>L2%36%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%34%bbentry=>L2%36%bbentry
=graph_with_simplified_assets.simplified_assumes at L2%34%bbentry=>L2%36%bbentry done
=graph_with_simplified_assets.simplified_assumes at L2%36%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%36%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%3%d for src.spec.foo
=suffixpath_at_L2%3%d.graph_edge_composition
(L0%0%d=>L2%3%d)
=suffixpath_at_L2%4%bbentry for src.spec.foo
=suffixpath_at_L2%4%bbentry.graph_edge_composition
((L0%0%d=>L2%3%d)*(L2%3%d=>L2%4%bbentry))
=suffixpath_at_L2%7%bbentry for src.spec.foo
=suffixpath_at_L2%7%bbentry.graph_edge_composition
((L0%0%d=>L2%3%d)*(L2%3%d=>L2%7%bbentry))
=suffixpath_at_L2%9%bbentry for src.spec.foo
=suffixpath_at_L2%9%bbentry.graph_edge_composition
(((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))
=suffixpath_at_L2%12%d for src.spec.foo
=suffixpath_at_L2%12%d.graph_edge_composition
((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*(L2%9%bbentry=>L2%12%d))
=suffixpath_at_L2%13%bbentry for src.spec.foo
=suffixpath_at_L2%13%bbentry.graph_edge_composition
((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*(L2%12%d=>L2%13%bbentry)))
=suffixpath_at_L2%16%bbentry for src.spec.foo
=suffixpath_at_L2%16%bbentry.graph_edge_composition
((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*(L2%12%d=>L2%16%bbentry)))
=suffixpath_at_L2%18%bbentry for src.spec.foo
=suffixpath_at_L2%18%bbentry.graph_edge_composition
(((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))
=suffixpath_at_L2%21%d for src.spec.foo
=suffixpath_at_L2%21%d.graph_edge_composition
((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*(L2%18%bbentry=>L2%21%d))
=suffixpath_at_L2%22%bbentry for src.spec.foo
=suffixpath_at_L2%22%bbentry.graph_edge_composition
((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*(L2%21%d=>L2%22%bbentry)))
=suffixpath_at_L2%25%bbentry for src.spec.foo
=suffixpath_at_L2%25%bbentry.graph_edge_composition
((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*(L2%21%d=>L2%25%bbentry)))
=suffixpath_at_L2%27%bbentry for src.spec.foo
=suffixpath_at_L2%27%bbentry.graph_edge_composition
(((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))
=suffixpath_at_L2%30%d for src.spec.foo
=suffixpath_at_L2%30%d.graph_edge_composition
((((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))*(L2%27%bbentry=>L2%30%d))
=suffixpath_at_L2%31%bbentry for src.spec.foo
=suffixpath_at_L2%31%bbentry.graph_edge_composition
((((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))*((L2%27%bbentry=>L2%30%d)*(L2%30%d=>L2%31%bbentry)))
=suffixpath_at_L2%34%bbentry for src.spec.foo
=suffixpath_at_L2%34%bbentry.graph_edge_composition
((((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))*((L2%27%bbentry=>L2%30%d)*(L2%30%d=>L2%34%bbentry)))
=suffixpath_at_L2%36%bbentry for src.spec.foo
=suffixpath_at_L2%36%bbentry.graph_edge_composition
(((((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))*((L2%27%bbentry=>L2%30%d)*((L2%30%d=>L2%31%bbentry)*(L2%31%bbentry=>L2%36%bbentry))))+((((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))*((L2%27%bbentry=>L2%30%d)*((L2%30%d=>L2%34%bbentry)*(L2%34%bbentry=>L2%36%bbentry)))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))*((L2%27%bbentry=>L2%30%d)*((L2%30%d=>L2%31%bbentry)*(L2%31%bbentry=>L2%36%bbentry))))+((((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%22%bbentry)*(L2%22%bbentry=>L2%27%bbentry))))+((((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%13%bbentry)*(L2%13%bbentry=>L2%18%bbentry))))+((((L0%0%d=>L2%3%d)*((L2%3%d=>L2%4%bbentry)*(L2%4%bbentry=>L2%9%bbentry)))+((L0%0%d=>L2%3%d)*((L2%3%d=>L2%7%bbentry)*(L2%7%bbentry=>L2%9%bbentry))))*((L2%9%bbentry=>L2%12%d)*((L2%12%d=>L2%16%bbentry)*(L2%16%bbentry=>L2%18%bbentry)))))*((L2%18%bbentry=>L2%21%d)*((L2%21%d=>L2%25%bbentry)*(L2%25%bbentry=>L2%27%bbentry)))))*((L2%27%bbentry=>L2%30%d)*((L2%30%d=>L2%34%bbentry)*(L2%34%bbentry=>L2%36%bbentry)))))*(L2%36%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%3%d
tfg.assumes_around_edge at L0%0%d=>L2%3%d done
tfg.assumes_around_edge at L2%3%d=>L2%4%bbentry
tfg.assumes_around_edge at L2%3%d=>L2%4%bbentry done
tfg.assumes_around_edge at L2%3%d=>L2%7%bbentry
tfg.assumes_around_edge at L2%3%d=>L2%7%bbentry done
tfg.assumes_around_edge at L2%4%bbentry=>L2%9%bbentry
tfg.assumes_around_edge at L2%4%bbentry=>L2%9%bbentry done
tfg.assumes_around_edge at L2%7%bbentry=>L2%9%bbentry
tfg.assumes_around_edge at L2%7%bbentry=>L2%9%bbentry done
tfg.assumes_around_edge at L2%9%bbentry=>L2%12%d
tfg.assumes_around_edge at L2%9%bbentry=>L2%12%d done
tfg.assumes_around_edge at L2%12%d=>L2%13%bbentry
tfg.assumes_around_edge at L2%12%d=>L2%13%bbentry done
tfg.assumes_around_edge at L2%12%d=>L2%16%bbentry
tfg.assumes_around_edge at L2%12%d=>L2%16%bbentry done
tfg.assumes_around_edge at L2%13%bbentry=>L2%18%bbentry
tfg.assumes_around_edge at L2%13%bbentry=>L2%18%bbentry done
tfg.assumes_around_edge at L2%16%bbentry=>L2%18%bbentry
tfg.assumes_around_edge at L2%16%bbentry=>L2%18%bbentry done
tfg.assumes_around_edge at L2%18%bbentry=>L2%21%d
tfg.assumes_around_edge at L2%18%bbentry=>L2%21%d done
tfg.assumes_around_edge at L2%21%d=>L2%22%bbentry
tfg.assumes_around_edge at L2%21%d=>L2%22%bbentry done
tfg.assumes_around_edge at L2%21%d=>L2%25%bbentry
tfg.assumes_around_edge at L2%21%d=>L2%25%bbentry done
tfg.assumes_around_edge at L2%22%bbentry=>L2%27%bbentry
tfg.assumes_around_edge at L2%22%bbentry=>L2%27%bbentry done
tfg.assumes_around_edge at L2%25%bbentry=>L2%27%bbentry
tfg.assumes_around_edge at L2%25%bbentry=>L2%27%bbentry done
tfg.assumes_around_edge at L2%27%bbentry=>L2%30%d
tfg.assumes_around_edge at L2%27%bbentry=>L2%30%d done
tfg.assumes_around_edge at L2%30%d=>L2%31%bbentry
tfg.assumes_around_edge at L2%30%d=>L2%31%bbentry done
tfg.assumes_around_edge at L2%30%d=>L2%34%bbentry
tfg.assumes_around_edge at L2%30%d=>L2%34%bbentry done
tfg.assumes_around_edge at L2%31%bbentry=>L2%36%bbentry
tfg.assumes_around_edge at L2%31%bbentry=>L2%36%bbentry done
tfg.assumes_around_edge at L2%34%bbentry=>L2%36%bbentry
tfg.assumes_around_edge at L2%34%bbentry=>L2%36%bbentry done
tfg.assumes_around_edge at L2%36%bbentry=>E0%0%d
tfg.assumes_around_edge at L2%36%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%add4.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlheap.dst.llvm.foo : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=memlabel_map.4 for call-context {*;foo}
mlvar.dst.llvm.foo.3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
13 : mlvar.dst.llvm.foo.1 : MEMLABEL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvmul(14, 6) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(4, 16) : BV:32
18 : select(1, 2, 13, 17, 10, 11) : BV:32
19 : bvadd(12, 18) : BV:32
20 : mlvar.dst.llvm.foo.2 : MEMLABEL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvmul(21, 6) : BV:32
23 : bvadd(5, 22) : BV:32
24 : bvadd(4, 23) : BV:32
25 : select(1, 2, 20, 24, 10, 11) : BV:32
26 : mlvar.dst.llvm.foo.3 : MEMLABEL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvmul(27, 6) : BV:32
29 : bvadd(5, 28) : BV:32
30 : bvadd(4, 29) : BV:32
31 : select(1, 2, 26, 30, 10, 11) : BV:32
32 : bvsub(25, 31) : BV:32
33 : bvadd(19, 32) : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : mlvar.dst.llvm.foo.3 : MEMLABEL
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvmul(15, 7) : BV:32
17 : bvadd(5, 16) : BV:32
18 : bvadd(4, 17) : BV:32
19 : select(1, 2, 14, 18, 11, 12) : BV:32
20 : bvsub(13, 19) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
=dst.llvm-%1.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%2.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%3.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.3 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
1 : 2 { 0x2 +1.23e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
13 : mlvar.dst.llvm.foo.1 : MEMLABEL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvmul(14, 6) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(4, 16) : BV:32
18 : select(1, 2, 13, 17, 10, 11) : BV:32
19 : bvadd(12, 18) : BV:32
=dst.llvm-%add4.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
13 : mlvar.dst.llvm.foo.1 : MEMLABEL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvmul(14, 6) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(4, 16) : BV:32
18 : select(1, 2, 13, 17, 10, 11) : BV:32
19 : bvadd(12, 18) : BV:32
20 : mlvar.dst.llvm.foo.2 : MEMLABEL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvmul(21, 6) : BV:32
23 : bvadd(5, 22) : BV:32
24 : bvadd(4, 23) : BV:32
25 : select(1, 2, 20, 24, 10, 11) : BV:32
26 : mlvar.dst.llvm.foo.3 : MEMLABEL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvmul(27, 6) : BV:32
29 : bvadd(5, 28) : BV:32
30 : bvadd(4, 29) : BV:32
31 : select(1, 2, 26, 30, 10, 11) : BV:32
32 : bvsub(25, 31) : BV:32
33 : bvadd(19, 32) : BV:32
=dst.llvm-%arrayidx.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
=dst.llvm-%arrayidx1.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx2.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx3.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
1 : 3 { 0x3 +1.35e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvslt(4, 4) : BOOL
6 : 32 { 0x20 +1.0e1025 } : INT
7 : bvsign_ext(4, 6) : BV:64
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvzero_ext(8, 6) : BV:64
10 : bvmul(7, 9) : BV:64
11 : 63 { 0x3f +1.0e1025 } : INT
12 : bvextract(10, 11, 6) : BV:32
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : eq(12, 4) : BOOL
16 : ite(5, 14, 15) : BOOL
17 : isindexforsize(16, 2) : BOOL
18 : bvmul(4, 8) : BV:32
19 : bvadd(4, 18) : BV:32
20 : bvadd(1, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(17, 21) : BOOL
23 : and(3, 22) : BOOL
24 : islangaligned(20, 2) : BOOL
25 : and(23, 24) : BOOL
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : bvslt(26, 4) : BOOL
28 : bvsign_ext(26, 6) : BV:64
29 : bvmul(28, 9) : BV:64
30 : bvextract(29, 11, 6) : BV:32
31 : eq(30, 13) : BOOL
32 : eq(30, 4) : BOOL
33 : ite(27, 31, 32) : BOOL
34 : isindexforsize(33, 2) : BOOL
35 : bvmul(26, 8) : BV:32
36 : bvadd(4, 35) : BV:32
37 : bvadd(1, 36) : BV:32
38 : isgepoffset(37, 35) : BOOL
39 : and(34, 38) : BOOL
40 : and(25, 39) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : bvslt(10, 2) : BOOL
12 : 32 { 0x20 +1.0e1025 } : INT
13 : bvsign_ext(10, 12) : BV:64
14 : bvzero_ext(4, 12) : BV:64
15 : bvmul(13, 14) : BV:64
16 : 63 { 0x3f +1.0e1025 } : INT
17 : bvextract(15, 16, 12) : BV:32
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : ite(11, 19, 20) : BOOL
22 : isindexforsize(21, 8) : BOOL
23 : bvmul(10, 4) : BV:32
24 : bvadd(2, 23) : BV:32
25 : bvadd(1, 24) : BV:32
26 : isgepoffset(25, 23) : BOOL
27 : and(22, 26) : BOOL
28 : and(9, 27) : BOOL
29 : islangaligned(25, 8) : BOOL
30 : and(28, 29) : BOOL
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvslt(31, 2) : BOOL
33 : bvsign_ext(31, 12) : BV:64
34 : bvmul(33, 14) : BV:64
35 : bvextract(34, 16, 12) : BV:32
36 : eq(35, 18) : BOOL
37 : eq(35, 2) : BOOL
38 : ite(32, 36, 37) : BOOL
39 : isindexforsize(38, 8) : BOOL
40 : bvmul(31, 4) : BV:32
41 : bvadd(2, 40) : BV:32
42 : bvadd(1, 41) : BV:32
43 : isgepoffset(42, 40) : BOOL
44 : and(39, 43) : BOOL
45 : and(30, 44) : BOOL
46 : islangaligned(42, 8) : BOOL
47 : and(45, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((start_pc_edge*  %arrayidx = getelementptr inbounds i32, i32* %m, i32 0, !dbg !16)*(  %arrayidx = getelementptr inbounds i32, i32* %m, i32 0, !dbg !16*  %arrayidx = getelementptr inbounds i32, i32* %m, i32 0, !dbg !16))*(  %0 = load i32, i32* %arrayidx, align 4, !dbg !16*  %0 = load i32, i32* %arrayidx, align 4, !dbg !16))*(  %arrayidx1 = getelementptr inbounds i32, i32* %m, i32 3, !dbg !17*(  %arrayidx1 = getelementptr inbounds i32, i32* %m, i32 3, !dbg !17*  %arrayidx1 = getelementptr inbounds i32, i32* %m, i32 3, !dbg !17)))*((((((  %1 = load i32, i32* %arrayidx1, align 4, !dbg !17*  %1 = load i32, i32* %arrayidx1, align 4, !dbg !17)*  %add = add i32 %0, %1, !dbg !18)*(  %arrayidx2 = getelementptr inbounds i32, i32* %m, i32 1, !dbg !19*(  %arrayidx2 = getelementptr inbounds i32, i32* %m, i32 1, !dbg !19*  %arrayidx2 = getelementptr inbounds i32, i32* %m, i32 1, !dbg !19)))*(  %2 = load i32, i32* %arrayidx2, align 4, !dbg !19*  %2 = load i32, i32* %arrayidx2, align 4, !dbg !19))*(  %arrayidx3 = getelementptr inbounds i32, i32* %m, i32 2, !dbg !20*(  %arrayidx3 = getelementptr inbounds i32, i32* %m, i32 2, !dbg !20*  %arrayidx3 = getelementptr inbounds i32, i32* %m, i32 2, !dbg !20)))*((((  %3 = load i32, i32* %arrayidx3, align 4, !dbg !20*  %3 = load i32, i32* %arrayidx3, align 4, !dbg !20)*  %sub = sub i32 %2, %3, !dbg !21)*  %add4 = add i32 %add, %sub, !dbg !22)*  ret i32 %add4, !dbg !23)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100003 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100025 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100036 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100037 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap
=Loc 100038 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%0.E0%0%d : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%1.E0%0%d
1 : input.dst.llvm-%1.E0%0%d : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%2.E0%0%d
1 : input.dst.llvm-%2.E0%0%d : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-%3.E0%0%d
1 : input.dst.llvm-%3.E0%0%d : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%add.E0%0%d
1 : input.dst.llvm-%add.E0%0%d : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%add4.E0%0%d
1 : input.dst.llvm-%add4.E0%0%d : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.E0%0%d
1 : input.dst.llvm-%arrayidx.E0%0%d : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx1.E0%0%d
1 : input.dst.llvm-%arrayidx1.E0%0%d : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx2.E0%0%d
1 : input.dst.llvm-%arrayidx2.E0%0%d : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx3.E0%0%d
1 : input.dst.llvm-%arrayidx3.E0%0%d : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.E0%0%d
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100003, 100037, 100038, 
=live locs at E0%0%d
100037, 100053[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100003, 100034, 100036, 100037, 100038
=loc definedness at E0%0%d
100003, 100034, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%0.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%1.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100041 {input.dst.llvm-%2.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100042 {input.dst.llvm-%3.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100043 {input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100044 {input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100045 {input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100046 {input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100047 {input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100048 {input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100049 {input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100050 {input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d }
1 : input.dst.llvm-%m : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100051 {input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100052 {input.dst.llvm-%add.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : bvadd(7, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100053 {input.dst.llvm-%add4.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100054 {input.dst.llvm-%arrayidx.E0%0%d }
1 : input.dst.llvm-%m : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100055 {input.dst.llvm-%arrayidx1.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100056 {input.dst.llvm-%arrayidx2.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100057 {input.dst.llvm-%arrayidx3.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100058 {input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d }
1 : 12 { 0xc +1.143e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100059 {input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100060 {input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d }
1 : 12 { 0xc +1.143e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100061 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100062 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100063 {input.dst.llvm-%sub.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : 8 { 0x8 +1.95e129 } : BV:32
12 : bvadd(5, 11) : BV:32
13 : select(1, 2, 3, 12, 7, 8) : BV:32
14 : bvmul(10, 13) : BV:32
15 : bvadd(9, 14) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100064 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100065 {input.dst.local_alloc_count.E0%0%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100066 {input.dst.cur_rounding_mode.E0%0%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100003
=loc_expr
140561 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100025
=loc_expr
140531 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140532 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140534 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140536 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100030
=loc_expr
140538 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140513 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140562 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100039
=loc_expr
141043 : input.dst.llvm-%0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
141044 : input.dst.llvm-%1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
141045 : input.dst.llvm-%2.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
141046 : input.dst.llvm-%3.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
141047 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100044
=loc_expr
141048 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100045
=loc_expr
141049 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
141050 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100047
=loc_expr
141051 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100048
=loc_expr
141052 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
141053 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
141054 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
141055 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
141056 : input.dst.llvm-%add.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : bvadd(7, 10) : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
141042 : input.dst.llvm-%add4.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
141057 : input.dst.llvm-%arrayidx.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
=avail_exprs_val.end
=loc 100055
=loc_expr
141058 : input.dst.llvm-%arrayidx1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
141059 : input.dst.llvm-%arrayidx2.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
141060 : input.dst.llvm-%arrayidx3.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100058
=loc_expr
141061 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
=avail_exprs_val.end
=loc 100059
=loc_expr
141062 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100060
=loc_expr
141063 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140410 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140411 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=avail_exprs_val.end
=loc 100063
=loc_expr
140407 : input.dst.llvm-%sub.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : 8 { 0x8 +1.95e129 } : BV:32
12 : bvadd(5, 11) : BV:32
13 : select(1, 2, 3, 12, 7, 8) : BV:32
14 : bvmul(10, 13) : BV:32
15 : bvadd(9, 14) : BV:32
=avail_exprs_val.end
=loc 100064
=loc_expr
140412 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
141064 : input.dst.local_alloc_count.E0%0%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100066
=loc_expr
141065 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100043 expr
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100043 spreled-expr
140696 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100045 expr
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100045 spreled-expr
140696 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100046 expr
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100046 spreled-expr
140486 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100048 expr
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100048 spreled-expr
140486 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100049 expr
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100049 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100051 expr
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100051 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100058 expr
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100058 spreled-expr
140691 : 12 { 0xc +1.143e129 } : BV:32
=loc 100060 expr
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100060 spreled-expr
140691 : 12 { 0xc +1.143e129 } : BV:32
=loc 100064 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100064 spreled-expr
140267 : retaddr_const : BV:32
=loc 100065 expr
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=loc 100065 spreled-expr
140513 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100066 expr
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=loc 100066 spreled-expr
140512 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100003 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100043 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : 8 { 0x8 +1.95e129 } : BV:32
12 : bvadd(5, 11) : BV:32
13 : select(1, 2, 3, 12, 7, 8) : BV:32
14 : bvmul(10, 13) : BV:32
15 : bvadd(9, 14) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%1.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%2.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%3.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : bvadd(7, 10) : BV:32
=dst.llvm-%add4.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=dst.llvm-%arrayidx.E0%0%d
1 : input.dst.llvm-%m : BV:32
=dst.llvm-%arrayidx1.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%arrayidx2.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%arrayidx3.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
1 : 12 { 0xc +1.143e129 } : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
1 : 12 { 0xc +1.143e129 } : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%m : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : isgepoffset(4, 3) : BOOL
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvadd(2, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(10, 2) : BV:32
12 : isgepoffset(11, 10) : BOOL
13 : and(1, 12) : BOOL
14 : and(9, 13) : BOOL
15 : islangaligned(11, 8) : BOOL
16 : and(1, 5, 14, 15) : BOOL
17 : islangaligned(4, 8) : BOOL
18 : and(16, 17) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d assume# 1
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%m : BV:32
3 : 4 { 0x4 +1.0e1025 } : INT
4 : islangaligned(2, 3) : BOOL
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(2, 5) : BV:32
7 : isgepoffset(6, 5) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : isgepoffset(2, 8) : BOOL
10 : and(1, 9) : BOOL
11 : and(4, 10) : BOOL
12 : and(1, 4, 7, 11) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.pred
=Comment
undef-behavioursome.edge.L0%0%d=>E0%0%d
=LhsExpr
140276 : 1 { 0x1 } : BOOL
140561 : input.dst.llvm-%m : BV:32
140696 : 8 { 0x8 +1.95e129 } : BV:32
140697 : bvadd(140561, 140696) : BV:32
140712 : isgepoffset(140697, 140696) : BOOL
140691 : 12 { 0xc +1.143e129 } : BV:32
140692 : bvadd(140561, 140691) : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
141135 : islangaligned(140692, 140483) : BOOL
140486 : 4 { 0x4 +1.47e129 } : BV:32
140720 : bvadd(140486, 140561) : BV:32
140743 : isgepoffset(140720, 140486) : BOOL
141146 : and(140276, 140743) : BOOL
141148 : and(141135, 141146) : BOOL
141150 : islangaligned(140720, 140483) : BOOL
141164 : and(140276, 140712, 141148, 141150) : BOOL
141166 : islangaligned(140697, 140483) : BOOL
141169 : and(141164, 141166) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1.ec
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1.pred
=Comment
undef-behavioursome.edge.L0%0%d=>E0%0%d
=LhsExpr
140276 : 1 { 0x1 } : BOOL
140561 : input.dst.llvm-%m : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140594 : islangaligned(140561, 140483) : BOOL
140691 : 12 { 0xc +1.143e129 } : BV:32
140692 : bvadd(140561, 140691) : BV:32
140710 : isgepoffset(140692, 140691) : BOOL
140290 : 0 { 0x0 +1.0e129 } : BV:32
140709 : isgepoffset(140561, 140290) : BOOL
141116 : and(140276, 140709) : BOOL
141118 : and(140594, 141116) : BOOL
141133 : and(140276, 140594, 140710, 141118) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 2
=pc
Lentry%2%d
=linename
line 2
=pc
Lentry%3%d
=linename
line 2
=pc
Lentry%4%d
=linename
line 2
=pc
Lentry%5%d
=linename
line 2
=pc
Lentry%6%d
=linename
line 2
=pc
Lentry%7%d
=linename
line 2
=pc
Lentry%8%d
=linename
line 2
=pc
Lentry%9%d
=linename
line 2
=pc
Lentry%10%d
=linename
line 2
=pc
Lentry%11%d
=linename
line 2
=pc
Lentry%12%d
=linename
line 2
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 11
=pc
Lentry%2%d
=column_name
 at column 11
=pc
Lentry%3%d
=column_name
 at column 18
=pc
Lentry%4%d
=column_name
 at column 18
=pc
Lentry%5%d
=column_name
 at column 16
=pc
Lentry%6%d
=column_name
 at column 27
=pc
Lentry%7%d
=column_name
 at column 27
=pc
Lentry%8%d
=column_name
 at column 34
=pc
Lentry%9%d
=column_name
 at column 34
=pc
Lentry%10%d
=column_name
 at column 32
=pc
Lentry%11%d
=column_name
 at column 24
=pc
Lentry%12%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 2 at column 11)
=pc
Lentry%2%d
=line_and_column
(line 2 at column 11)
=pc
Lentry%3%d
=line_and_column
(line 2 at column 18)
=pc
Lentry%4%d
=line_and_column
(line 2 at column 18)
=pc
Lentry%5%d
=line_and_column
(line 2 at column 16)
=pc
Lentry%6%d
=line_and_column
(line 2 at column 27)
=pc
Lentry%7%d
=line_and_column
(line 2 at column 27)
=pc
Lentry%8%d
=line_and_column
(line 2 at column 34)
=pc
Lentry%9%d
=line_and_column
(line 2 at column 34)
=pc
Lentry%10%d
=line_and_column
(line 2 at column 32)
=pc
Lentry%11%d
=line_and_column
(line 2 at column 24)
=pc
Lentry%12%d
=line_and_column
(line 2 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%sub.E0%0%d : L0%0%d : (DSTMEM[(4 + m')]_4 - DSTMEM[(m' + 8)]_4)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : (DSTMEM[m']_4 + DSTMEM[(m' + 12)]_4 + DSTMEM[(4 + m')]_4 - DSTMEM[(m' + 8)]_4)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%sub : L0%0%d : (input.dst.llvm-%2 - input.dst.llvm-%3)
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%add4
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%m : L0%0%d : m'
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%add4 : L0%0%d : (input.dst.llvm-%add + input.dst.llvm-%sub)
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset : L0%0%d : m'
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset : L0%0%d : 12
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset : L0%0%d : (m' + 12)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx1]_4
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset : L0%0%d : 4
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset : L0%0%d : (m' + 4)
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset : L0%0%d : 8
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset : L0%0%d : (m' + 8)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx2]_4
input.dst.llvm-%3 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx3]_4
input.dst.llvm-%add : L0%0%d : (input.dst.llvm-%0 + input.dst.llvm-%1)
input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset : L0%0%d : 12
input.dst.llvm-%arrayidx1 : L0%0%d : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset : L0%0%d : 4
input.dst.llvm-%arrayidx2 : L0%0%d : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset : L0%0%d : 8
input.dst.llvm-%arrayidx3 : L0%0%d : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset
input.dst.llvm-%add.E0%0%d : L0%0%d : (DSTMEM[m']_4 + DSTMEM[(m' + 12)]_4)
input.dst.llvm-%1.E0%0%d : L0%0%d : DSTMEM[(m' + 12)]_4
input.dst.llvm-%2.E0%0%d : L0%0%d : DSTMEM[(4 + m')]_4
input.dst.llvm-%arrayidx.E0%0%d : L0%0%d : m'
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : L0%0%d : 8
input.dst.llvm-%arrayidx1.E0%0%d : L0%0%d : (m' + 12)
input.dst.llvm-%0.E0%0%d : L0%0%d : DSTMEM[m']_4
input.dst.llvm-%3.E0%0%d : L0%0%d : DSTMEM[(m' + 8)]_4
input.dst.llvm-%arrayidx2.E0%0%d : L0%0%d : (4 + m')
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : L0%0%d : (m' + 8)
input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%arrayidx3.E0%0%d : L0%0%d : (m' + 8)
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 8
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : L0%0%d : 12
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : L0%0%d : (m' + 12)
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : L0%0%d : (4 + m')
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 12
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : L0%0%d : m'
input.dst.llvm-%add4.E0%0%d : L0%0%d : (DSTMEM[m']_4 + DSTMEM[(m' + 12)]_4 + DSTMEM[(4 + m')]_4 - DSTMEM[(m' + 8)]_4)
input.dst.local_alloc_count.E0%0%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.E0%0%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
19 : scev_op_add(18, 14) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
19 : scev_op_add(18, 14) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: L0%0%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
6 : input.dst.llvm-%m : BV32
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
6 : input.dst.llvm-%m : BV32
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev nullptr
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
7 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
7 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%arrayidx1
=dst.llvm-%arrayidx1 loop pc: L0%0%d
=dst.llvm-%arrayidx1 val_scevb
=dst.llvm-%arrayidx1 val_scevb scev
=dst.llvm-%arrayidx1 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx1 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx1 val_scevb scev scev_expr
8 : 00000000000000000000000000001100b
6 : input.dst.llvm-%m : BV32
9 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx1 val_scevb scev scev_expr done
=dst.llvm-%arrayidx1 val_scevb unsigned lower bound: 32:2147483660
=dst.llvm-%arrayidx1 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx1 val_scevb signed lower bound: 32:2147483660
=dst.llvm-%arrayidx1 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx1 atuse_scevb
=dst.llvm-%arrayidx1 atuse_scevb scev
=dst.llvm-%arrayidx1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx1 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx1 atuse_scevb scev scev_expr
8 : 00000000000000000000000000001100b
6 : input.dst.llvm-%m : BV32
9 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx1 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx1 atuse_scevb unsigned lower bound: 32:2147483660
=dst.llvm-%arrayidx1 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx1 atuse_scevb signed lower bound: 32:2147483660
=dst.llvm-%arrayidx1 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx1 atexit_scev nullptr
=dst.llvm-%1
=dst.llvm-%1 loop pc: L0%0%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev nullptr
=dst.llvm-%add
=dst.llvm-%add loop pc: L0%0%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev nullptr
=dst.llvm-%arrayidx2
=dst.llvm-%arrayidx2 loop pc: L0%0%d
=dst.llvm-%arrayidx2 val_scevb
=dst.llvm-%arrayidx2 val_scevb scev
=dst.llvm-%arrayidx2 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx2 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx2 val_scevb scev scev_expr
12 : 00000000000000000000000000000100b
6 : input.dst.llvm-%m : BV32
13 : scev_op_add(12, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx2 val_scevb scev scev_expr done
=dst.llvm-%arrayidx2 val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%arrayidx2 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx2 val_scevb signed lower bound: 32:2147483652
=dst.llvm-%arrayidx2 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx2 atuse_scevb
=dst.llvm-%arrayidx2 atuse_scevb scev
=dst.llvm-%arrayidx2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx2 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx2 atuse_scevb scev scev_expr
12 : 00000000000000000000000000000100b
6 : input.dst.llvm-%m : BV32
13 : scev_op_add(12, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx2 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx2 atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%arrayidx2 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx2 atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%arrayidx2 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx2 atexit_scev nullptr
=dst.llvm-%2
=dst.llvm-%2 loop pc: L0%0%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
14 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
14 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev nullptr
=dst.llvm-%arrayidx3
=dst.llvm-%arrayidx3 loop pc: L0%0%d
=dst.llvm-%arrayidx3 val_scevb
=dst.llvm-%arrayidx3 val_scevb scev
=dst.llvm-%arrayidx3 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx3 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx3 val_scevb scev scev_expr
15 : 00000000000000000000000000001000b
6 : input.dst.llvm-%m : BV32
16 : scev_op_add(15, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx3 val_scevb scev scev_expr done
=dst.llvm-%arrayidx3 val_scevb unsigned lower bound: 32:2147483656
=dst.llvm-%arrayidx3 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx3 val_scevb signed lower bound: 32:2147483656
=dst.llvm-%arrayidx3 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx3 atuse_scevb
=dst.llvm-%arrayidx3 atuse_scevb scev
=dst.llvm-%arrayidx3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx3 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx3 atuse_scevb scev scev_expr
15 : 00000000000000000000000000001000b
6 : input.dst.llvm-%m : BV32
16 : scev_op_add(15, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx3 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx3 atuse_scevb unsigned lower bound: 32:2147483656
=dst.llvm-%arrayidx3 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx3 atuse_scevb signed lower bound: 32:2147483656
=dst.llvm-%arrayidx3 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx3 atexit_scev nullptr
=dst.llvm-%3
=dst.llvm-%3 loop pc: L0%0%d
=dst.llvm-%3 val_scevb
=dst.llvm-%3 val_scevb scev
=dst.llvm-%3 val_scevb scev loop: L0%0%d
=dst.llvm-%3 val_scevb scev scev_overflow_flag: 
=dst.llvm-%3 val_scevb scev scev_expr
17 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 val_scevb scev scev_expr done
=dst.llvm-%3 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb
=dst.llvm-%3 atuse_scevb scev
=dst.llvm-%3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%3 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%3 atuse_scevb scev scev_expr
17 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atuse_scevb scev scev_expr done
=dst.llvm-%3 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atexit_scev nullptr
=dst.llvm-%add4
=dst.llvm-%add4 loop pc: L0%0%d
=dst.llvm-%add4 val_scevb
=dst.llvm-%add4 val_scevb scev
=dst.llvm-%add4 val_scevb scev loop: L0%0%d
=dst.llvm-%add4 val_scevb scev scev_overflow_flag: 
=dst.llvm-%add4 val_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
20 : scev_op_add(18, 14, 10, 7) : loop L0%0%d : 
=dst.llvm-%add4 val_scevb scev scev_expr done
=dst.llvm-%add4 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add4 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add4 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add4 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb
=dst.llvm-%add4 atuse_scevb scev
=dst.llvm-%add4 atuse_scevb scev loop: L0%0%d
=dst.llvm-%add4 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add4 atuse_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
20 : scev_op_add(18, 14, 10, 7) : loop L0%0%d : 
=dst.llvm-%add4 atuse_scevb scev scev_expr done
=dst.llvm-%add4 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add4 atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%add4.E0%0%d : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%0.E0%0%d : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%1.E0%0%d : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%2.E0%0%d : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%3.E0%0%d : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%add.E0%0%d : BV:32
=reaching defns for expr 22 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%arrayidx.E0%0%d : BV:32
=reaching defns for expr 23 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%arrayidx1.E0%0%d : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%arrayidx2.E0%0%d : BV:32
=reaching defns for expr 25 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%arrayidx3.E0%0%d : BV:32
=reaching defns for expr 26 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 27 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 28 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 29 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 29 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%sub.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%add.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%1.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%2.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%arrayidx.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx1.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%0.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%3.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%arrayidx2.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx3.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%add4.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.local_alloc_count.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.E0%0%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename fcall3.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: bar
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg1
=LhsExpr
1 : $spec-arg-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L2%3%d#{0,0})*((((L2%3%d#{0,0}=>L2%4%bbentry#{0,0})*(L2%4%bbentry#{0,0}=>L2%9%bbentry#{0,0}))+((L2%3%d#{0,0}=>L2%7%bbentry#{0,0})*(L2%7%bbentry#{0,0}=>L2%9%bbentry#{0,0})))*((L2%9%bbentry#{0,0}=>L2%12%d#{0,0})*((((L2%12%d#{0,0}=>L2%13%bbentry#{0,0})*(L2%13%bbentry#{0,0}=>L2%18%bbentry#{0,0}))+((L2%12%d#{0,0}=>L2%16%bbentry#{0,0})*(L2%16%bbentry#{0,0}=>L2%18%bbentry#{0,0})))*((L2%18%bbentry#{0,0}=>L2%21%d#{0,0})*((((L2%21%d#{0,0}=>L2%22%bbentry#{0,0})*(L2%22%bbentry#{0,0}=>L2%27%bbentry#{0,0}))+((L2%21%d#{0,0}=>L2%25%bbentry#{0,0})*(L2%25%bbentry#{0,0}=>L2%27%bbentry#{0,0})))*((L2%27%bbentry#{0,0}=>L2%30%d#{0,0})*((((L2%30%d#{0,0}=>L2%31%bbentry#{0,0})*(L2%31%bbentry#{0,0}=>L2%36%bbentry#{0,0}))+((L2%30%d#{0,0}=>L2%34%bbentry#{0,0})*(L2%34%bbentry#{0,0}=>L2%36%bbentry#{0,0})))*(L2%36%bbentry#{0,0}=>E0%0%d#{0,0})))))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
18 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
21 : region_agrees_with_memlabel(18, 13, 19, 20) : BOOL
22 : and(17, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce338.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce338 8ac8f94a5a38b3da48b82d704badd7
=input.spec-%var-m-0
1 : Lambda1708 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1709 : BV:32
18 : eq(17, 2) : BOOL
19 : 1 { 0x1 +1.11e129 } : BV:32
20 : eq(17, 19) : BOOL
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : eq(17, 21) : BOOL
23 : 3 { 0x3 +1.35e129 } : BV:32
24 : eq(17, 23) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 17) : BV:32
27 : 4294967281 { 0xfffffff1 -15 -1.99999821e128 } : BV:32
28 : bvadd(23, 26, 27) : BV:32
29 : 3221208998 { 0xbfffbfa6 -1073758298 -1.99803614e0 } : BV:32
30 : eq(28, 29) : BOOL
31 : 255 { 0xff -1 } : BV:8
32 : 3221208997 { 0xbfffbfa5 -1073758299 -1.99803602e0 } : BV:32
33 : eq(28, 32) : BOOL
34 : 3221208996 { 0xbfffbfa4 -1073758300 -1.99803590e0 } : BV:32
35 : eq(28, 34) : BOOL
36 : 241 { 0xf1 -15 } : BV:8
37 : 3221208999 { 0xbfffbfa7 -1073758297 -1.99803626e0 } : BV:32
38 : eq(28, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : ite(38, 31, 39) : BV:8
41 : ite(35, 36, 40) : BV:8
42 : ite(33, 31, 41) : BV:8
43 : ite(30, 31, 42) : BV:8
44 : bvadd(21, 26, 27) : BV:32
45 : eq(44, 29) : BOOL
46 : eq(44, 32) : BOOL
47 : eq(44, 34) : BOOL
48 : eq(44, 37) : BOOL
49 : ite(48, 31, 39) : BV:8
50 : ite(47, 36, 49) : BV:8
51 : ite(46, 31, 50) : BV:8
52 : ite(45, 31, 51) : BV:8
53 : bvadd(19, 26, 27) : BV:32
54 : eq(53, 29) : BOOL
55 : eq(53, 32) : BOOL
56 : eq(53, 34) : BOOL
57 : eq(53, 37) : BOOL
58 : ite(57, 31, 39) : BV:8
59 : ite(56, 36, 58) : BV:8
60 : ite(55, 31, 59) : BV:8
61 : ite(54, 31, 60) : BV:8
62 : bvadd(26, 27) : BV:32
63 : eq(62, 29) : BOOL
64 : eq(62, 32) : BOOL
65 : eq(62, 34) : BOOL
66 : eq(62, 37) : BOOL
67 : ite(66, 31, 39) : BV:8
68 : ite(65, 36, 67) : BV:8
69 : ite(64, 31, 68) : BV:8
70 : ite(63, 31, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(24, 2, 71) : BV:32
73 : ite(22, 2, 72) : BV:32
74 : ite(20, 2, 73) : BV:32
75 : ite(18, 2, 74) : BV:32
76 : lambda(17, 75) : FUNCTION[BV:32 -> BV:32]
77 : map(16, 76) : MAP[BV:32 -> BV:32]
78 : sym_const(77) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.L2%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-5.L2%12%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3221208995 ] -> 0, [ 3221208996; 3221208996 ] -> 241, [ 3221208997; 3221208999 ] -> 255, [ 3221209000; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3221208995 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, [ 3221208996; 3221208999 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 3221209000; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.spec-%tmpvar-9.L2%21%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967281 { 0xfffffff1 -15 -1.99999821e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 3221208996 { 0xbfffbfa4 -1073758300 -1.99803590e0 } : BV:32
=input.spec-%tmpvar-13.L2%30%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-13.L2%30%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3221208999 { 0xbfffbfa7 -1073758297 -1.99803626e0 } : BV:32
=input.spec-%tmpvar-4.L2%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 3221208996 { 0xbfffbfa4 -1073758300 -1.99803590e0 } : BV:32
=input.spec-%tmpvar-12.L2%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-0.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L2%30%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-14.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-2.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-1.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%12%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d.0
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-m-0.1.1
1 : Lambda1698 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : eq(1, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : eq(1, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : 4294967281 { 0xfffffff1 -15 -1.99999821e128 } : BV:32
13 : bvadd(8, 11, 12) : BV:32
14 : 3221208998 { 0xbfffbfa6 -1073758298 -1.99803614e0 } : BV:32
15 : eq(13, 14) : BOOL
16 : 255 { 0xff -1 } : BV:8
17 : 3221208997 { 0xbfffbfa5 -1073758299 -1.99803602e0 } : BV:32
18 : eq(13, 17) : BOOL
19 : 3221208996 { 0xbfffbfa4 -1073758300 -1.99803590e0 } : BV:32
20 : eq(13, 19) : BOOL
21 : 241 { 0xf1 -15 } : BV:8
22 : 3221208999 { 0xbfffbfa7 -1073758297 -1.99803626e0 } : BV:32
23 : eq(13, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : ite(23, 16, 24) : BV:8
26 : ite(20, 21, 25) : BV:8
27 : ite(18, 16, 26) : BV:8
28 : ite(15, 16, 27) : BV:8
29 : bvadd(6, 11, 12) : BV:32
30 : eq(29, 14) : BOOL
31 : eq(29, 17) : BOOL
32 : eq(29, 19) : BOOL
33 : eq(29, 22) : BOOL
34 : ite(33, 16, 24) : BV:8
35 : ite(32, 21, 34) : BV:8
36 : ite(31, 16, 35) : BV:8
37 : ite(30, 16, 36) : BV:8
38 : bvadd(4, 11, 12) : BV:32
39 : eq(38, 14) : BOOL
40 : eq(38, 17) : BOOL
41 : eq(38, 19) : BOOL
42 : eq(38, 22) : BOOL
43 : ite(42, 16, 24) : BV:8
44 : ite(41, 21, 43) : BV:8
45 : ite(40, 16, 44) : BV:8
46 : ite(39, 16, 45) : BV:8
47 : bvadd(11, 12) : BV:32
48 : eq(47, 14) : BOOL
49 : eq(47, 17) : BOOL
50 : eq(47, 19) : BOOL
51 : eq(47, 22) : BOOL
52 : ite(51, 16, 24) : BV:8
53 : ite(50, 21, 52) : BV:8
54 : ite(49, 16, 53) : BV:8
55 : ite(48, 16, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : ite(9, 2, 56) : BV:32
58 : ite(7, 2, 57) : BV:32
59 : ite(5, 2, 58) : BV:32
60 : ite(3, 2, 59) : BV:32
61 : lambda(1, 60) : FUNCTION[BV:32 -> BV:32]
62 : sym_const(61) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m-0.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-val-3.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
759686002
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce339.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce339 abfff63fd13f4b475cd7c48a37c7cd8c
=input.spec-%var-m-0
1 : Lambda1712 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : eq(1, 9) : BOOL
11 : 100 { 0x64 +1.1192e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : not(12) : BOOL
14 : ite(10, 4, 13) : BOOL
15 : ite(8, 4, 14) : BOOL
16 : ite(6, 4, 15) : BOOL
17 : ite(3, 4, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : Lambda1713 : BV:32
20 : eq(19, 2) : BOOL
21 : eq(19, 5) : BOOL
22 : eq(19, 7) : BOOL
23 : eq(19, 9) : BOOL
24 : 4 { 0x4 +1.47e129 } : BV:32
25 : bvmul(24, 19) : BV:32
26 : 4294967281 { 0xfffffff1 -15 -1.99999821e128 } : BV:32
27 : bvadd(9, 25, 26) : BV:32
28 : 2764692264 { 0xa4c9db28 -1530275032 -1.57700061e202 } : BV:32
29 : eq(27, 28) : BOOL
30 : 241 { 0xf1 -15 } : BV:8
31 : 2764692265 { 0xa4c9db29 -1530275031 -1.57700073e202 } : BV:32
32 : eq(27, 31) : BOOL
33 : 255 { 0xff -1 } : BV:8
34 : 2764692267 { 0xa4c9db2b -1530275029 -1.57700097e202 } : BV:32
35 : eq(27, 34) : BOOL
36 : 2764692266 { 0xa4c9db2a -1530275030 -1.57700085e202 } : BV:32
37 : eq(27, 36) : BOOL
38 : 0 { 0x0 } : BV:8
39 : ite(37, 33, 38) : BV:8
40 : ite(35, 33, 39) : BV:8
41 : ite(32, 33, 40) : BV:8
42 : ite(29, 30, 41) : BV:8
43 : bvadd(7, 25, 26) : BV:32
44 : eq(43, 28) : BOOL
45 : eq(43, 31) : BOOL
46 : eq(43, 34) : BOOL
47 : eq(43, 36) : BOOL
48 : ite(47, 33, 38) : BV:8
49 : ite(46, 33, 48) : BV:8
50 : ite(45, 33, 49) : BV:8
51 : ite(44, 30, 50) : BV:8
52 : bvadd(5, 25, 26) : BV:32
53 : eq(52, 28) : BOOL
54 : eq(52, 31) : BOOL
55 : eq(52, 34) : BOOL
56 : eq(52, 36) : BOOL
57 : ite(56, 33, 38) : BV:8
58 : ite(55, 33, 57) : BV:8
59 : ite(54, 33, 58) : BV:8
60 : ite(53, 30, 59) : BV:8
61 : bvadd(25, 26) : BV:32
62 : eq(61, 28) : BOOL
63 : eq(61, 31) : BOOL
64 : eq(61, 34) : BOOL
65 : eq(61, 36) : BOOL
66 : ite(65, 33, 38) : BV:8
67 : ite(64, 33, 66) : BV:8
68 : ite(63, 33, 67) : BV:8
69 : ite(62, 30, 68) : BV:8
70 : bvconcat(42, 51, 60, 69) : BV:32
71 : ite(23, 2, 70) : BV:32
72 : ite(22, 2, 71) : BV:32
73 : ite(21, 2, 72) : BV:32
74 : ite(20, 2, 73) : BV:32
75 : lambda(19, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(18, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.L2%12%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-5.L2%12%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 2764692263 ] -> 0, [ 2764692264; 2764692264 ] -> 241, [ 2764692265; 2764692267 ] -> 255, [ 2764692268; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2764692263 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, [ 2764692264; 2764692267 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2764692268; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.spec-%tmpvar-9.L2%21%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 4294967281 { 0xfffffff1 -15 -1.99999821e128 } : BV:32
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2764692264 { 0xa4c9db28 -1530275032 -1.57700061e202 } : BV:32
=input.spec-%tmpvar-13.L2%30%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-13.L2%30%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2764692267 { 0xa4c9db2b -1530275029 -1.57700097e202 } : BV:32
=input.spec-%tmpvar-4.L2%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L2%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-8.L2%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2764692264 { 0xa4c9db28 -1530275032 -1.57700061e202 } : BV:32
=input.spec-%tmpvar-12.L2%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-9.L2%21%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-6.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-0.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-2.L2%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L2%30%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-14.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-2.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L2%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-1.L2%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L2%12%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-1.L2%3%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-0.1.1
1 : Lambda1703 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : eq(1, 4) : BOOL
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : eq(1, 6) : BOOL
8 : 3 { 0x3 +1.35e129 } : BV:32
9 : eq(1, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : 4294967281 { 0xfffffff1 -15 -1.99999821e128 } : BV:32
13 : bvadd(8, 11, 12) : BV:32
14 : 2764692264 { 0xa4c9db28 -1530275032 -1.57700061e202 } : BV:32
15 : eq(13, 14) : BOOL
16 : 241 { 0xf1 -15 } : BV:8
17 : 2764692265 { 0xa4c9db29 -1530275031 -1.57700073e202 } : BV:32
18 : eq(13, 17) : BOOL
19 : 255 { 0xff -1 } : BV:8
20 : 2764692267 { 0xa4c9db2b -1530275029 -1.57700097e202 } : BV:32
21 : eq(13, 20) : BOOL
22 : 2764692266 { 0xa4c9db2a -1530275030 -1.57700085e202 } : BV:32
23 : eq(13, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : ite(23, 19, 24) : BV:8
26 : ite(21, 19, 25) : BV:8
27 : ite(18, 19, 26) : BV:8
28 : ite(15, 16, 27) : BV:8
29 : bvadd(6, 11, 12) : BV:32
30 : eq(29, 14) : BOOL
31 : eq(29, 17) : BOOL
32 : eq(29, 20) : BOOL
33 : eq(29, 22) : BOOL
34 : ite(33, 19, 24) : BV:8
35 : ite(32, 19, 34) : BV:8
36 : ite(31, 19, 35) : BV:8
37 : ite(30, 16, 36) : BV:8
38 : bvadd(4, 11, 12) : BV:32
39 : eq(38, 14) : BOOL
40 : eq(38, 17) : BOOL
41 : eq(38, 20) : BOOL
42 : eq(38, 22) : BOOL
43 : ite(42, 19, 24) : BV:8
44 : ite(41, 19, 43) : BV:8
45 : ite(40, 19, 44) : BV:8
46 : ite(39, 16, 45) : BV:8
47 : bvadd(11, 12) : BV:32
48 : eq(47, 14) : BOOL
49 : eq(47, 17) : BOOL
50 : eq(47, 20) : BOOL
51 : eq(47, 22) : BOOL
52 : ite(51, 19, 24) : BV:8
53 : ite(50, 19, 52) : BV:8
54 : ite(49, 19, 53) : BV:8
55 : ite(48, 16, 54) : BV:8
56 : bvconcat(28, 37, 46, 55) : BV:32
57 : ite(9, 2, 56) : BV:32
58 : ite(7, 2, 57) : BV:32
59 : ite(5, 2, 58) : BV:32
60 : ite(3, 2, 59) : BV:32
61 : lambda(1, 60) : FUNCTION[BV:32 -> BV:32]
62 : sym_const(61) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m-0.0.1
1 : Lambda1704 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 2 { 0x2 +1.23e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : eq(1, 9) : BOOL
11 : 100 { 0x64 +1.1192e129 } : BV:32
12 : bvule(11, 1) : BOOL
13 : not(12) : BOOL
14 : ite(10, 4, 13) : BOOL
15 : ite(8, 4, 14) : BOOL
16 : ite(6, 4, 15) : BOOL
17 : ite(3, 4, 16) : BOOL
18 : lambda(1, 17) : FUNCTION[BV:32 -> BOOL]
19 : sym_const(18) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-val-3.L2%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2243315700
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
2 : input.dst.llvm-%add4.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 0 { 0x0 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : map_get(3, 8) : SUM[UNIT,BV:32]
10 : sum_is(9, 6) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : map_get(3, 11) : SUM[UNIT,BV:32]
13 : sum_is(12, 6) : BOOL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : map_get(3, 14) : SUM[UNIT,BV:32]
16 : sum_is(15, 6) : BOOL
17 : 1 { 0x1 +1.0e1025 } : INT
18 : sum_is(15, 17) : BOOL
19 : or(16, 18) : BOOL
20 : and(13, 19) : BOOL
21 : sum_is(12, 17) : BOOL
22 : and(21, 19) : BOOL
23 : or(20, 22) : BOOL
24 : and(10, 23) : BOOL
25 : sum_is(9, 17) : BOOL
26 : and(25, 23) : BOOL
27 : or(24, 26) : BOOL
28 : and(7, 27) : BOOL
29 : sum_is(5, 17) : BOOL
30 : and(29, 27) : BOOL
31 : or(28, 30) : BOOL
32 : or(2, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
2 : input.dst.llvm-%add4.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140503 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140678 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140562 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140484 : 0 { 0x0 } : BOOL
140679 : select(140503, 140504, 140678, 140562, 140483, 140484) : BV:32
=RhsExpr
140561 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
merged-predicate
=LhsExpr
140276 : 1 { 0x1 } : BOOL
140561 : input.dst.llvm-%m : BV:32
140696 : 8 { 0x8 +1.95e129 } : BV:32
140697 : bvadd(140561, 140696) : BV:32
140712 : isgepoffset(140697, 140696) : BOOL
140691 : 12 { 0xc +1.143e129 } : BV:32
140692 : bvadd(140561, 140691) : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
141135 : islangaligned(140692, 140483) : BOOL
140486 : 4 { 0x4 +1.47e129 } : BV:32
140720 : bvadd(140486, 140561) : BV:32
140743 : isgepoffset(140720, 140486) : BOOL
141146 : and(140276, 140743) : BOOL
141148 : and(141135, 141146) : BOOL
141150 : islangaligned(140720, 140483) : BOOL
141164 : and(140276, 140712, 141148, 141150) : BOOL
141166 : islangaligned(140697, 140483) : BOOL
141169 : and(141164, 141166) : BOOL
140594 : islangaligned(140561, 140483) : BOOL
140710 : isgepoffset(140692, 140691) : BOOL
140290 : 0 { 0x0 +1.0e129 } : BV:32
140709 : isgepoffset(140561, 140290) : BOOL
141116 : and(140276, 140709) : BOOL
141118 : and(140594, 141116) : BOOL
141133 : and(140276, 140594, 140710, 141118) : BOOL
141476 : and(141169, 141133) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
pointer-implements-map-arg0
=LhsExpr
140306 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
140477 : Lambda0 : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140478 : bvule(140290, 140477) : BOOL
140474 : 100 { 0x64 +1.1192e129 } : BV:32
140479 : bvult(140477, 140474) : BOOL
140480 : and(140478, 140479) : BOOL
140481 : lambda(140477, 140480) : FUNCTION[BV:32 -> BOOL]
140485 : Lambda1 : BV:32
140503 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140482 : memlabel-top : MEMLABEL
140486 : 4 { 0x4 +1.47e129 } : BV:32
140487 : bvmul(140485, 140486) : BV:32
140561 : input.dst.llvm-%m : BV:32
141256 : bvadd(140487, 140561) : BV:32
140483 : 4 { 0x4 +1.0e1025 } : INT
140484 : 0 { 0x0 } : BOOL
141257 : select(140503, 140504, 140482, 141256, 140483, 140484) : BV:32
141259 : lambda(140485, 141257) : FUNCTION[BV:32 -> BV:32]
141261 : map(140481, 141259) : MAP[BV:32 -> BV:32]
141266 : eq(140306, 141261) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.pred
=Comment
precond-mlasserts
=LhsExpr
141223 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
141224 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
141226 : bvule(141223, 141224) : BOOL
140486 : 4 { 0x4 +1.47e129 } : BV:32
140297 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140727 : bvadd(140486, 140297) : BV:32
141228 : bvadd(141223, 140727) : BV:32
141229 : eq(141224, 141228) : BOOL
141230 : and(141226, 141229) : BOOL
140562 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140341 : 3 { 0x3 +1.35e129 } : BV:32
141231 : bvand(140562, 140341) : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
141232 : eq(141231, 140290) : BOOL
141233 : and(141230, 141232) : BOOL
141234 : eq(140562, 141223) : BOOL
141235 : and(141233, 141234) : BOOL
140504 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140304 : 1 { 0x1 +1.11e129 } : BV:32
140587 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
141236 : region_agrees_with_memlabel(140504, 140290, 140304, 140587) : BOOL
141237 : and(141235, 141236) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
