=FunctionName: bar
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph bar.A1.B1.C1.D1.E1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.bar:
=TFG:
=Nodes: L0%0%d L2%1%fcallStart L2%1%fcallEnd L2%3%fcallStart L2%3%fcallEnd E0%0%d
=Edges:
L0%0%d => L2%1%fcallStart
L2%1%fcallStart => L2%1%fcallEnd
L2%1%fcallEnd => L2%3%fcallStart
L2%3%fcallStart => L2%3%fcallEnd
L2%3%fcallEnd => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%1%fcallStart
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%1%fcallEnd
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%3%fcallStart
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L2%3%fcallEnd
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: bar
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=arg end
=Input: spec-method-arg.1
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;bar}
=Edge: L0%0%d => L2%1%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:(func_head*fcall_edge_start)
tfg_edge_comment end

=Edge: L2%1%fcallStart => L2%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-24.L2%1%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*fn_app)
tfg_edge_comment end

=Edge: L2%1%fcallEnd => L2%3%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-fi-0.L2%3%fcallStart
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*(letin_def*fcall_edge_start))
tfg_edge_comment end

=Edge: L2%3%fcallStart => L2%3%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-25.L2%3%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*fn_app)
tfg_edge_comment end

=Edge: L2%3%fcallEnd => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-26.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-27.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-28.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-29.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%var-se-0.E0%0%d
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((fcall_edge_end*letin_def)*intrinsic_app_bvsub)*letin_body)*letin_body)*func_ret)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.bar
=Loc 1 in src.spec.bar.
REGMEM
spec-%var-m1-1
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=Loc 2 in src.spec.bar.
REGMEM
spec-%var-m2-1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=Loc 13 in src.spec.bar.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 14 in src.spec.bar.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 15 in src.spec.bar.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 16 in src.spec.bar.
REGMEM
spec-%tmpvar-24.L2%1%fcallEnd
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=Loc 17 in src.spec.bar.
REGMEM
spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
=Loc 18 in src.spec.bar.
REGMEM
spec-%var-fi-0.L2%3%fcallStart
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=Loc 19 in src.spec.bar.
REGMEM
spec-%tmpvar-25.L2%3%fcallEnd
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
=Loc 20 in src.spec.bar.
REGMEM
spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
=Loc 21 in src.spec.bar.
REGMEM
spec-%tmpvar-26.E0%0%d
1 : input.spec-%tmpvar-26.E0%0%d : BV:32
=Loc 22 in src.spec.bar.
REGMEM
spec-%tmpvar-27.E0%0%d
1 : input.spec-%tmpvar-27.E0%0%d : BV:32
=Loc 23 in src.spec.bar.
REGMEM
spec-%tmpvar-28.E0%0%d
1 : input.spec-%tmpvar-28.E0%0%d : BV:32
=Loc 24 in src.spec.bar.
REGMEM
spec-%tmpvar-29.E0%0%d
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
=Loc 25 in src.spec.bar.
REGMEM
spec-%var-se-0.E0%0%d
1 : input.spec-%var-se-0.E0%0%d : BV:32
=Locs end
=Liveness in src.spec.bar
=live locs at L0%0%d
1, 2, 
=live locs at L2%1%fcallStart
1, 2, 
=live locs at L2%1%fcallEnd
2, 16, 
=live locs at L2%3%fcallStart
2, 18, 
=live locs at L2%3%fcallEnd
18, 19, 
=live locs at E0%0%d
24[f], 

=Definedness in src.spec.bar
=loc definedness at L0%0%d
1, 2, 13, 14, 15
=loc definedness at L2%1%fcallStart
1, 2, 13, 14, 15
=loc definedness at L2%1%fcallEnd
1, 2, 13, 14, 15, 16, 17
=loc definedness at L2%3%fcallStart
1, 2, 13, 14, 15, 16, 17, 18
=loc definedness at L2%3%fcallEnd
1, 2, 13, 14, 15, 16, 17, 18, 19, 20
=loc definedness at E0%0%d
1, 2, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25

=Branch affecting variable locs in src.spec.bar
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at L2%1%fcallStart

=branch affecting variable locs at L2%1%fcallEnd

=branch affecting variable locs at L2%3%fcallStart

=branch affecting variable locs at L2%3%fcallEnd

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.bar
=relevant memlabels
=function: bar
memlabel-mem--heap
memlabel-mem--arg.0
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L2%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at L2%1%fcallStart=>L2%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at L2%1%fcallStart=>L2%1%fcallEnd for loc_id 16 {input.spec-%tmpvar-24.L2%1%fcallEnd }
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%1%fcallStart=>L2%1%fcallEnd for loc_id 17 {input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd }
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%1%fcallStart=>L2%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at L2%1%fcallEnd=>L2%3%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L2%1%fcallEnd=>L2%3%fcallStart for loc_id 18 {input.spec-%var-fi-0.L2%3%fcallStart }
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%1%fcallEnd=>L2%3%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallStart=>L2%3%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallStart=>L2%3%fcallEnd for loc_id 19 {input.spec-%tmpvar-25.L2%3%fcallEnd }
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallStart=>L2%3%fcallEnd for loc_id 20 {input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd }
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallStart=>L2%3%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallEnd=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallEnd=>E0%0%d for loc_id 21 {input.spec-%tmpvar-26.E0%0%d }
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallEnd=>E0%0%d for loc_id 22 {input.spec-%tmpvar-27.E0%0%d }
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallEnd=>E0%0%d for loc_id 23 {input.spec-%tmpvar-28.E0%0%d }
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallEnd=>E0%0%d for loc_id 24 {input.spec-%tmpvar-29.E0%0%d }
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallEnd=>E0%0%d for loc_id 25 {input.spec-%var-se-0.E0%0%d }
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
=graph_with_edge_structures.loc_to_expr_map at L2%3%fcallEnd=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L2%1%fcallStart:
vacuous mls at L2%1%fcallEnd:
vacuous mls at L2%3%fcallStart:
vacuous mls at L2%3%fcallEnd:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L2%1%fcallStart:
non-vacuous mls at L2%1%fcallEnd:
non-vacuous mls at L2%3%fcallStart:
non-vacuous mls at L2%3%fcallEnd:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.bar
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 2
=loc_expr
140274 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 17
=loc_expr
140387 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 20
=loc_expr
140388 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.bar
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;bar}
=loc_id 1 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 2 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 13 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 14 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 15 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 16 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 17 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 18 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 19 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 20 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 22 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 23 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 24 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 25 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L2%1%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%1%fcallStart=>L2%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%1%fcallEnd=>L2%3%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%3%fcallStart=>L2%3%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L2%3%fcallEnd=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L2%1%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%1%fcallStart=>L2%1%fcallEnd
=spec-%tmpvar-24.L2%1%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%1%fcallEnd=>L2%3%fcallStart
=spec-%var-fi-0.L2%3%fcallStart
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%3%fcallStart=>L2%3%fcallEnd
=spec-%tmpvar-25.L2%3%fcallEnd
1 : spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6 : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
2 : nextpc_const.1 : BV:32
3 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
4 : spec_function_call(1, 2, 3) : BV:32
=spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L2%3%fcallEnd=>E0%0%d
=spec-%tmpvar-26.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-27.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-28.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-29.E0%0%d
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%var-se-0.E0%0%d
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L2%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at L2%1%fcallStart=>L2%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at L2%1%fcallStart=>L2%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at L2%1%fcallEnd=>L2%3%fcallStart
=graph_with_simplified_assets.simplified_assumes at L2%1%fcallEnd=>L2%3%fcallStart done
=graph_with_simplified_assets.simplified_assumes at L2%3%fcallStart=>L2%3%fcallEnd
=graph_with_simplified_assets.simplified_assumes at L2%3%fcallStart=>L2%3%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at L2%3%fcallEnd=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L2%3%fcallEnd=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
C_NEXTPC1 : foo
=Nextpc-map done
=suffixpaths for src.spec.bar
=suffixpath_at_L0%0%d for src.spec.bar
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L2%1%fcallStart for src.spec.bar
=suffixpath_at_L2%1%fcallStart.graph_edge_composition
(L0%0%d=>L2%1%fcallStart)
=suffixpath_at_L2%1%fcallEnd for src.spec.bar
=suffixpath_at_L2%1%fcallEnd.graph_edge_composition
((L0%0%d=>L2%1%fcallStart)*(L2%1%fcallStart=>L2%1%fcallEnd))
=suffixpath_at_L2%3%fcallStart for src.spec.bar
=suffixpath_at_L2%3%fcallStart.graph_edge_composition
((L0%0%d=>L2%1%fcallStart)*((L2%1%fcallStart=>L2%1%fcallEnd)*(L2%1%fcallEnd=>L2%3%fcallStart)))
=suffixpath_at_L2%3%fcallEnd for src.spec.bar
=suffixpath_at_L2%3%fcallEnd.graph_edge_composition
((L0%0%d=>L2%1%fcallStart)*((L2%1%fcallStart=>L2%1%fcallEnd)*((L2%1%fcallEnd=>L2%3%fcallStart)*(L2%3%fcallStart=>L2%3%fcallEnd))))
=suffixpath_at_E0%0%d for src.spec.bar
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L2%1%fcallStart)*((L2%1%fcallStart=>L2%1%fcallEnd)*((L2%1%fcallEnd=>L2%3%fcallStart)*((L2%3%fcallStart=>L2%3%fcallEnd)*(L2%3%fcallEnd=>E0%0%d)))))
=suffixpaths for src.spec.bar done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L2%1%fcallStart
tfg.assumes_around_edge at L0%0%d=>L2%1%fcallStart done
tfg.assumes_around_edge at L2%1%fcallStart=>L2%1%fcallEnd
tfg.assumes_around_edge at L2%1%fcallStart=>L2%1%fcallEnd done
tfg.assumes_around_edge at L2%1%fcallEnd=>L2%3%fcallStart
tfg.assumes_around_edge at L2%1%fcallEnd=>L2%3%fcallStart done
tfg.assumes_around_edge at L2%3%fcallStart=>L2%3%fcallEnd
tfg.assumes_around_edge at L2%3%fcallStart=>L2%3%fcallEnd done
tfg.assumes_around_edge at L2%3%fcallEnd=>E0%0%d
tfg.assumes_around_edge at L2%3%fcallEnd=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.bar:
=TFG:
=Nodes: L0%0%d Lentry%1%fcallStart Lentry%1%fcallEnd Lentry%2%fcallStart Lentry%2%fcallEnd E0%0%d
=Edges:
L0%0%d => Lentry%1%fcallStart
Lentry%1%fcallStart => Lentry%1%fcallEnd
Lentry%1%fcallEnd => Lentry%2%fcallStart
Lentry%2%fcallStart => Lentry%2%fcallEnd
Lentry%2%fcallEnd => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lentry%2%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: bar
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m1 : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%m2 : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m1 : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%m2 : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;bar}
=memlabel_map.0 for call-context {*;bar}
mlcall.dst.llvm.bar.0 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=memlabel_map.1 for call-context {*;bar}
mlcall.dst.llvm.bar.1 : memlabel-mem-
=memlabel_map.2 for call-context {*;bar}
mlcall.dst.llvm.bar.2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=memlabel_map.3 for call-context {*;bar}
mlcall.dst.llvm.bar.3 : memlabel-mem-
=Edge: L0%0%d => Lentry%1%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%m2 : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : input.dst.llvm-%m1 : BV:32
5 : islangaligned(4, 2) : BOOL
6 : and(3, 5) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(start_pc_edge*fcall_edge_start)
tfg_edge_comment end

=Edge: Lentry%1%fcallStart => Lentry%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-mem.Lentry%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.bar.0 : MEMLABEL
3 : mlcall.dst.llvm.bar.1 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : input.dst.llvm-%m1 : BV:32
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.bar.0 : MEMLABEL
3 : mlcall.dst.llvm.bar.1 : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i32 @foo(i32* %m1), !dbg !17)
tfg_edge_comment end

=Edge: Lentry%1%fcallEnd => Lentry%2%fcallStart
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*fcall_edge_start)
tfg_edge_comment end

=Edge: Lentry%2%fcallStart => Lentry%2%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call1.Lentry%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.bar.2 : MEMLABEL
3 : mlcall.dst.llvm.bar.3 : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lentry%2%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.bar.2 : MEMLABEL
3 : mlcall.dst.llvm.bar.3 : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : input.dst.llvm-%m2 : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call1 = call i32 @foo(i32* %m2), !dbg !18)
tfg_edge_comment end

=Edge: Lentry%2%fcallEnd => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : bvsub(1, 2) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((fcall_edge_end*  %sub = sub i32 %call, %call1, !dbg !19)*  ret i32 %sub, !dbg !20)
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m1 : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.bar
=Loc 100004 in dst.llvm.bar.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100006 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100007 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100008 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100009 in dst.llvm.bar.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100011 in dst.llvm.bar.
REGMEM
dst.llvm-%m1
1 : input.dst.llvm-%m1 : BV:32
=Loc 100012 in dst.llvm.bar.
REGMEM
dst.llvm-%m2
1 : input.dst.llvm-%m2 : BV:32
=Loc 100016 in dst.llvm.bar.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100017 in dst.llvm.bar.
REGMEM
dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=Loc 100018 in dst.llvm.bar.
REGMEM
dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=Loc 100020 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100021 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100022 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
=Loc 100023 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=Loc 100024 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=Loc 100025 in dst.llvm.bar.
REGMEM
dst.llvm-%call.Lentry%1%fcallEnd
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=Loc 100026 in dst.llvm.bar.
REGMEM
llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=Loc 100027 in dst.llvm.bar.
REGMEM
dst.llvm-%call1.Lentry%2%fcallEnd
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=Loc 100028 in dst.llvm.bar.
REGMEM
llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=Loc 100029 in dst.llvm.bar.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100030 in dst.llvm.bar.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100031 in dst.llvm.bar.
REGMEM
dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Loc 100032 in dst.llvm.bar.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100033 in dst.llvm.bar.
REGMEM
dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=Loc 100034 in dst.llvm.bar.
REGMEM
dst.cur_rounding_mode.Lentry%1%fcallStart
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=Loc 100035 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100036 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100037 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=Loc 100038 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
=Loc 100039 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=Loc 100040 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100041 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100042 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
=Loc 100043 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
=Loc 100044 in dst.llvm.bar.
MASKED
=mem
1 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=Locs end
=Liveness in dst.llvm.bar
=live locs at L0%0%d
100011, 100012, 100022, 100023, 100024, 
=live locs at Lentry%1%fcallStart
100011, 100012, 100022, 100023, 100024, 
=live locs at Lentry%1%fcallEnd
100012, 100025, 100037, 100038, 100039, 
=live locs at Lentry%2%fcallStart
100012, 100025, 100037, 100038, 100039, 
=live locs at Lentry%2%fcallEnd
100025, 100027, 100042, 
=live locs at E0%0%d
100031[f], 100042, 

=Definedness in dst.llvm.bar
=loc definedness at L0%0%d
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024
=loc definedness at Lentry%1%fcallStart
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100033, 100034
=loc definedness at Lentry%1%fcallEnd
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100033, 100034, 100035, 100036, 100037, 100038, 100039
=loc definedness at Lentry%2%fcallStart
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100033, 100034, 100035, 100036, 100037, 100038, 100039
=loc definedness at Lentry%2%fcallEnd
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100027, 100028, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044
=loc definedness at E0%0%d
100011, 100012, 100017, 100018, 100020, 100021, 100022, 100023, 100024, 100025, 100026, 100027, 100028, 100029, 100030, 100031, 100032, 100033, 100034, 100035, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044

=Branch affecting variable locs in dst.llvm.bar
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at Lentry%1%fcallStart

=branch affecting variable locs at Lentry%1%fcallEnd

=branch affecting variable locs at Lentry%2%fcallStart

=branch affecting variable locs at Lentry%2%fcallEnd

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.bar
=relevant memlabels
=function: bar
memlabel-mem--arg.0
memlabel-mem--arg.1
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100033 {input.dst.local_alloc_count.Lentry%1%fcallStart }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart for loc_id 100034 {input.dst.cur_rounding_mode.Lentry%1%fcallStart }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lentry%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100025 {input.dst.llvm-%call.Lentry%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100026 {input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd }
1 : input.dst.llvm-%m1 : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100035 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100036 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100037 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100038 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd for loc_id 100039 {memmask(input.dst.llvm-mem.Lentry%1%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%2%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lentry%1%fcallEnd=>Lentry%2%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100027 {input.dst.llvm-%call1.Lentry%2%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100028 {input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd }
1 : input.dst.llvm-%m2 : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100040 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100041 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100042 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100043 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd for loc_id 100044 {memmask(input.dst.llvm-mem.Lentry%2%fcallEnd, input.dst.llvm-mem.alloc, memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallStart=>Lentry%2%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100029 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100030 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100031 {input.dst.llvm-%sub.E0%0%d }
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d for loc_id 100032 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lentry%2%fcallEnd=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lentry%1%fcallStart:
vacuous mls at Lentry%1%fcallEnd:
vacuous mls at Lentry%2%fcallStart:
vacuous mls at Lentry%2%fcallEnd:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lentry%1%fcallStart:
non-vacuous mls at Lentry%1%fcallEnd:
non-vacuous mls at Lentry%2%fcallStart:
non-vacuous mls at Lentry%2%fcallEnd:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.bar
=avail_exprs begin
=loc 100004
=loc_expr
140468 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100006
=loc_expr
140469 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100007
=loc_expr
140471 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140473 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100009
=loc_expr
140475 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100011
=loc_expr
140443 : input.dst.llvm-%m1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100012
=loc_expr
140445 : input.dst.llvm-%m2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100016
=loc_expr
140450 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100017
=loc_expr
140442 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100018
=loc_expr
140444 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100026
=loc_expr
140496 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m1 : BV:32
=avail_exprs_val.end
=loc 100028
=loc_expr
140497 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m2 : BV:32
=avail_exprs_val.end
=loc 100029
=loc_expr
140500 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100030
=loc_expr
140501 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100031
=loc_expr
140409 : input.dst.llvm-%sub.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100032
=loc_expr
140502 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100033
=loc_expr
140503 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100034
=loc_expr
140504 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=loc 100035
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140293 : memlabel-mem--arg.0 : MEMLABEL
140505 : memmask(140399, 140441, 140293) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100036
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140295 : memlabel-mem--arg.1 : MEMLABEL
140506 : memmask(140399, 140441, 140295) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100037
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140446 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140507 : memmask(140399, 140441, 140446) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100038
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140477 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
140508 : memmask(140399, 140441, 140477) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100039
=loc_expr
140399 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140479 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
140509 : memmask(140399, 140441, 140479) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100040
=loc_expr
140407 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140293 : memlabel-mem--arg.0 : MEMLABEL
140510 : memmask(140407, 140441, 140293) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100041
=loc_expr
140407 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140295 : memlabel-mem--arg.1 : MEMLABEL
140511 : memmask(140407, 140441, 140295) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100042
=loc_expr
140407 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140446 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140408 : memmask(140407, 140441, 140446) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100043
=loc_expr
140407 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140477 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
140512 : memmask(140407, 140441, 140477) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=loc 100044
=loc_expr
140407 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140479 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
140513 : memmask(140407, 140441, 140479) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.bar
=loc 100032 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100032 spreled-expr
140267 : retaddr_const : BV:32
=loc 100033 expr
1 : input.dst.local_alloc_count.Lentry%1%fcallStart : COUNT
=loc 100033 spreled-expr
140450 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100034 expr
1 : input.dst.cur_rounding_mode.Lentry%1%fcallStart : ROUNDING_MODE
=loc 100034 spreled-expr
140449 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;bar}
=loc_id 100004 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100006 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100007 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100008 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100009 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100011 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100012 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100016 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100017 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100018 lr-status in lr-status-map at call-context {*;bar}
lr_status_top
=loc_id 100020 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100021 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100022 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100023 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100024 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100026 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100027 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100028 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100029 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100030 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=loc_id 100032 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-map at call-context {*;bar}
lr_status_linearly_related(; )
=loc_id 100035 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100036 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100043 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=loc_id 100044 lr-status in lr-status-map at call-context {*;bar}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100032 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100033 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100034 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lentry%1%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallStart=>Lentry%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%1%fcallEnd=>Lentry%2%fcallStart
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%fcallStart=>Lentry%2%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lentry%2%fcallEnd=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lentry%1%fcallStart
=dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.local_alloc_count.Lentry%1%fcallStart
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=dst.llvm-mem.Lentry%1%fcallEnd
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : input.dst.llvm-%m1 : BV:32
=dst.llvm-%call.Lentry%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m1 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%1%fcallEnd=>Lentry%2%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%fcallStart=>Lentry%2%fcallEnd
=dst.llvm-%call1.Lentry%2%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
3 : memlabel-mem- : MEMLABEL
4 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : input.dst.llvm-%m2 : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-mem.Lentry%2%fcallEnd
1 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : input.dst.llvm-%m2 : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lentry%2%fcallEnd=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart assume# 0
1 : input.dst.llvm-%m1 : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : input.dst.llvm-%m2 : BV:32
5 : islangaligned(4, 2) : BOOL
6 : and(3, 5) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lentry%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%2%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lentry%1%fcallEnd=>Lentry%2%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallStart=>Lentry%2%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallStart=>Lentry%2%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallEnd=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lentry%2%fcallEnd=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
C_NEXTPC1 : foo
=Nextpc-map done
=suffixpaths for dst.llvm.bar
=suffixpath_at_L0%0%d for dst.llvm.bar
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lentry%1%fcallStart for dst.llvm.bar
=suffixpath_at_Lentry%1%fcallStart.graph_edge_composition
(L0%0%d=>Lentry%1%fcallStart)
=suffixpath_at_Lentry%1%fcallEnd for dst.llvm.bar
=suffixpath_at_Lentry%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*(Lentry%1%fcallStart=>Lentry%1%fcallEnd))
=suffixpath_at_Lentry%2%fcallStart for dst.llvm.bar
=suffixpath_at_Lentry%2%fcallStart.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*(Lentry%1%fcallEnd=>Lentry%2%fcallStart)))
=suffixpath_at_Lentry%2%fcallEnd for dst.llvm.bar
=suffixpath_at_Lentry%2%fcallEnd.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%2%fcallStart)*(Lentry%2%fcallStart=>Lentry%2%fcallEnd))))
=suffixpath_at_E0%0%d for dst.llvm.bar
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lentry%1%fcallStart)*((Lentry%1%fcallStart=>Lentry%1%fcallEnd)*((Lentry%1%fcallEnd=>Lentry%2%fcallStart)*((Lentry%2%fcallStart=>Lentry%2%fcallEnd)*(Lentry%2%fcallEnd=>E0%0%d)))))
=suffixpaths for dst.llvm.bar done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart assume #0.pred
=Comment
undef-behavioursome.edge.L0%0%d=>Lentry%1%fcallStart
=LhsExpr
140443 : input.dst.llvm-%m1 : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140451 : islangaligned(140443, 140420) : BOOL
140445 : input.dst.llvm-%m2 : BV:32
140452 : islangaligned(140445, 140420) : BOOL
140521 : and(140451, 140452) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lentry%1%fcallStart done
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd
tfg.assumes_around_edge at Lentry%1%fcallStart=>Lentry%1%fcallEnd done
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%2%fcallStart
tfg.assumes_around_edge at Lentry%1%fcallEnd=>Lentry%2%fcallStart done
tfg.assumes_around_edge at Lentry%2%fcallStart=>Lentry%2%fcallEnd
tfg.assumes_around_edge at Lentry%2%fcallStart=>Lentry%2%fcallEnd done
tfg.assumes_around_edge at Lentry%2%fcallEnd=>E0%0%d
tfg.assumes_around_edge at Lentry%2%fcallEnd=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 6
=pc
Lentry%2%d
=linename
line 6
=pc
Lentry%3%d
=linename
line 6
=pc
Lentry%4%d
=linename
line 6
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 10
=pc
Lentry%2%d
=column_name
 at column 20
=pc
Lentry%3%d
=column_name
 at column 18
=pc
Lentry%4%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 6 at column 10)
=pc
Lentry%2%d
=line_and_column
(line 6 at column 20)
=pc
Lentry%3%d
=line_and_column
(line 6 at column 18)
=pc
Lentry%4%d
=line_and_column
(line 6 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___bar__x__=L0%0%argnum0=/
input.dst.llvm-%m1 : L0%0%d : m1'
input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___bar__x__=L0%0%argnum1=/
input.dst.llvm-%m2 : L0%0%d : m2'
input.dst.llvm-%sub : L0%0%d : (input.dst.llvm-%call - input.dst.llvm-%call1)
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%sub
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.llvm-fcall_arg_copy.0.dst.llvm-%m1 : L0%0%d : m1'
input.llvm-fcall_arg_copy.0.dst.llvm-%m2 : L0%0%d : m2'
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%sub.E0%0%d : L0%0%d : (input.dst.llvm-%call.Lentry%1%fcallEnd - input.dst.llvm-%call1.Lentry%2%fcallEnd)
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : L0%0%d : m1'
input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : L0%0%d : m2'
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : (input.dst.llvm-%call.Lentry%1%fcallEnd - input.dst.llvm-%call1.Lentry%2%fcallEnd)
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.cur_rounding_mode.Lentry%1%fcallStart : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.local_alloc_count.Lentry%1%fcallStart : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%call
=dst.llvm-%call loop pc: L0%0%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
4 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
4 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev nullptr
=dst.llvm-%call1
=dst.llvm-%call1 loop pc: L0%0%d
=dst.llvm-%call1 val_scevb
=dst.llvm-%call1 val_scevb scev
=dst.llvm-%call1 val_scevb scev loop: L0%0%d
=dst.llvm-%call1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%call1 val_scevb scev scev_expr
2 : input.dst.llvm-%call1 : BV32
=dst.llvm-%call1 val_scevb scev scev_expr done
=dst.llvm-%call1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb
=dst.llvm-%call1 atuse_scevb scev
=dst.llvm-%call1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%call1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call1 atuse_scevb scev scev_expr
2 : input.dst.llvm-%call1 : BV32
=dst.llvm-%call1 atuse_scevb scev scev_expr done
=dst.llvm-%call1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call1 atexit_scev nullptr
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
1 : 11111111111111111111111111111111b
2 : input.dst.llvm-%call1 : BV32
3 : scev_op_mul(1, 2) : loop L0%0%d : 
4 : input.dst.llvm-%call : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
1 : 11111111111111111111111111111111b
2 : input.dst.llvm-%call1 : BV32
3 : scev_op_mul(1, 2) : loop L0%0%d : 
4 : input.dst.llvm-%call : BV32
5 : scev_op_add(3, 4) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns done
=Reaching Definitions at Lentry%1%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 8 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 8 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lentry%2%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 8 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 9 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 10 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 10 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%m1 : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m2 : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 7 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 8 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=reaching defns for expr 9 edges
  Lentry%2%fcallStart=>Lentry%2%fcallEnd
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=reaching defns for expr 10 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd : BV:32
=reaching defns for expr 11 edges
  Lentry%1%fcallStart=>Lentry%1%fcallEnd
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 12 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 13 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 14 edges
  Lentry%2%fcallEnd=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.local./*___y___bar__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%m1
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local./*___y___bar__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.llvm-%m2
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%sub.E0%0%d
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lentry%1%fcallEnd
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%call1.Lentry%2%fcallEnd
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
lr_status_bottom(; memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, memlabel-mem--arg.1, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, memlabel-mem--symbol.2, memlabel-mem--symbol.1, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.Lentry%1%fcallStart
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lentry%1%fcallStart
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename fcall3.proof
=function_name bar
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: bar
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg1
=LhsExpr
1 : $spec-arg-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L2%1%fcallStart_Lentry%1%fcallStart L2%1%fcallEnd_Lentry%1%fcallEnd L2%3%fcallStart_Lentry%2%fcallStart L2%3%fcallEnd_Lentry%2%fcallEnd E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L2%1%fcallStart_Lentry%1%fcallStart
L2%1%fcallStart_Lentry%1%fcallStart => L2%1%fcallEnd_Lentry%1%fcallEnd
L2%1%fcallEnd_Lentry%1%fcallEnd => L2%3%fcallStart_Lentry%2%fcallStart
L2%3%fcallStart_Lentry%2%fcallStart => L2%3%fcallEnd_Lentry%2%fcallEnd
L2%3%fcallEnd_Lentry%2%fcallEnd => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: bar
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m1 : BV:32
=arg end
=Input: llvm-method-arg.1
=arg addr
1 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%m2 : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m1 : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%m2 : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L2%1%fcallStart_Lentry%1%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L2%1%fcallStart at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L2%1%fcallStart#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lentry%1%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lentry%1%fcallStart#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%1%fcallStart_Lentry%1%fcallStart => L2%1%fcallEnd_Lentry%1%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%1%fcallStart to L2%1%fcallEnd at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L2%1%fcallStart#{0,0}=>L2%1%fcallEnd#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%1%fcallStart to Lentry%1%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%1%fcallStart#{0,0}=>Lentry%1%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%1%fcallEnd_Lentry%1%fcallEnd => L2%3%fcallStart_Lentry%2%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%1%fcallEnd to L2%3%fcallStart at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L2%1%fcallEnd#{0,0}=>L2%3%fcallStart#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%1%fcallEnd to Lentry%2%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%1%fcallEnd#{0,0}=>Lentry%2%fcallStart#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumesAssume.0
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%3%fcallStart_Lentry%2%fcallStart => L2%3%fcallEnd_Lentry%2%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%3%fcallStart to L2%3%fcallEnd at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L2%3%fcallStart#{0,0}=>L2%3%fcallEnd#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%2%fcallStart to Lentry%2%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%2%fcallStart#{0,0}=>Lentry%2%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L2%3%fcallEnd_Lentry%2%fcallEnd => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L2%3%fcallEnd to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L2%3%fcallEnd#{0,0}=>E0%0%d#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lentry%2%fcallEnd to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lentry%2%fcallEnd#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumesAssume.0
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-map-arg1
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
=predicate done
=start_pc_precondition.4
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m1 : BV:32
=predicate done
=graph_with_precondition_done

=Locs in bar.A1.B1.C1.D1.E1
=Locs end
=Liveness in bar.A1.B1.C1.D1.E1
=live locs at L0%0%d_L0%0%d

=live locs at L2%1%fcallStart_Lentry%1%fcallStart

=live locs at L2%1%fcallEnd_Lentry%1%fcallEnd

=live locs at L2%3%fcallStart_Lentry%2%fcallStart

=live locs at L2%3%fcallEnd_Lentry%2%fcallEnd

=live locs at E0%0%d_E0%0%d


=Definedness in bar.A1.B1.C1.D1.E1

=Branch affecting variable locs in bar.A1.B1.C1.D1.E1

=Relevant Memlabels in bar.A1.B1.C1.D1.E1
=relevant memlabels
=function: bar
memlabel-mem--arg.0
memlabel-mem--arg.1
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap
memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in bar.A1.B1.C1.D1.E1
=avail_exprs begin
=avail_exprs end
=sprel_map in bar.A1.B1.C1.D1.E1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce3.num_edges_traversed2
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)*(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce3 595ea75c85bdddd8ae1cd66cad6081e7
=nextpc_const.1
1 : 490034011 { 0x1d35535b +1.41660630e187 } : BV:32
=input.spec-%var-m1-1
1 : Lambda92Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda93Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294835196 { 0xfffdfbfc -132100 -1.98425245e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
25 : eq(23, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
28 : eq(23, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
31 : eq(23, 30) : BOOL
32 : 127 { 0x7f } : BV:8
33 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
34 : eq(23, 33) : BOOL
35 : 63 { 0x3f } : BV:8
36 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
37 : eq(23, 36) : BOOL
38 : 253 { 0xfd -3 } : BV:8
39 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
40 : eq(23, 39) : BOOL
41 : 251 { 0xfb -5 } : BV:8
42 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
43 : eq(23, 42) : BOOL
44 : 191 { 0xbf -65 } : BV:8
45 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
46 : eq(23, 45) : BOOL
47 : 152 { 0x98 -104 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda97Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda98Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1069514648 { 0x3fbf7f98 +1.49608135e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
25 : eq(23, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
28 : eq(23, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
31 : eq(23, 30) : BOOL
32 : 127 { 0x7f } : BV:8
33 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
34 : eq(23, 33) : BOOL
35 : 63 { 0x3f } : BV:8
36 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
37 : eq(23, 36) : BOOL
38 : 253 { 0xfd -3 } : BV:8
39 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
40 : eq(23, 39) : BOOL
41 : 251 { 0xfb -5 } : BV:8
42 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
43 : eq(23, 42) : BOOL
44 : 191 { 0xbf -65 } : BV:8
45 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
46 : eq(23, 45) : BOOL
47 : 152 { 0x98 -104 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 296778211, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 296778211 { 0x11b079e3 +1.37871968e164 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda92Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda93Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294835196 { 0xfffdfbfc -132100 -1.98425245e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
25 : eq(23, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
28 : eq(23, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
31 : eq(23, 30) : BOOL
32 : 127 { 0x7f } : BV:8
33 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
34 : eq(23, 33) : BOOL
35 : 63 { 0x3f } : BV:8
36 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
37 : eq(23, 36) : BOOL
38 : 253 { 0xfd -3 } : BV:8
39 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
40 : eq(23, 39) : BOOL
41 : 251 { 0xfb -5 } : BV:8
42 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
43 : eq(23, 42) : BOOL
44 : 191 { 0xbf -65 } : BV:8
45 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
46 : eq(23, 45) : BOOL
47 : 152 { 0x98 -104 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : lambda(17, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(16, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda107Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda108Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1069514648 { 0x3fbf7f98 +1.49608135e0 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
25 : eq(23, 24) : BOOL
26 : 255 { 0xff -1 } : BV:8
27 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
28 : eq(23, 27) : BOOL
29 : 252 { 0xfc -4 } : BV:8
30 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
31 : eq(23, 30) : BOOL
32 : 127 { 0x7f } : BV:8
33 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
34 : eq(23, 33) : BOOL
35 : 63 { 0x3f } : BV:8
36 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
37 : eq(23, 36) : BOOL
38 : 253 { 0xfd -3 } : BV:8
39 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
40 : eq(23, 39) : BOOL
41 : 251 { 0xfb -5 } : BV:8
42 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
43 : eq(23, 42) : BOOL
44 : 191 { 0xbf -65 } : BV:8
45 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
46 : eq(23, 45) : BOOL
47 : 152 { 0x98 -104 } : BV:8
48 : 0 { 0x0 } : BV:8
49 : ite(46, 47, 48) : BV:8
50 : ite(43, 44, 49) : BV:8
51 : ite(40, 41, 50) : BV:8
52 : ite(37, 38, 51) : BV:8
53 : ite(34, 35, 52) : BV:8
54 : ite(31, 32, 53) : BV:8
55 : ite(28, 29, 54) : BV:8
56 : ite(25, 26, 55) : BV:8
57 : 2 { 0x2 +1.23e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : eq(58, 39) : BOOL
65 : eq(58, 42) : BOOL
66 : eq(58, 45) : BOOL
67 : ite(66, 47, 48) : BV:8
68 : ite(65, 44, 67) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(63, 38, 69) : BV:8
71 : ite(62, 35, 70) : BV:8
72 : ite(61, 32, 71) : BV:8
73 : ite(60, 29, 72) : BV:8
74 : ite(59, 26, 73) : BV:8
75 : 1 { 0x1 +1.11e129 } : BV:32
76 : bvadd(75, 21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 39) : BOOL
83 : eq(76, 42) : BOOL
84 : eq(76, 45) : BOOL
85 : ite(84, 47, 48) : BV:8
86 : ite(83, 44, 85) : BV:8
87 : ite(82, 41, 86) : BV:8
88 : ite(81, 38, 87) : BV:8
89 : ite(80, 35, 88) : BV:8
90 : ite(79, 32, 89) : BV:8
91 : ite(78, 29, 90) : BV:8
92 : ite(77, 26, 91) : BV:8
93 : bvadd(21, 22) : BV:32
94 : eq(93, 24) : BOOL
95 : eq(93, 27) : BOOL
96 : eq(93, 30) : BOOL
97 : eq(93, 33) : BOOL
98 : eq(93, 36) : BOOL
99 : eq(93, 39) : BOOL
100 : eq(93, 42) : BOOL
101 : eq(93, 45) : BOOL
102 : ite(101, 47, 48) : BV:8
103 : ite(100, 44, 102) : BV:8
104 : ite(99, 41, 103) : BV:8
105 : ite(98, 38, 104) : BV:8
106 : ite(97, 35, 105) : BV:8
107 : ite(96, 32, 106) : BV:8
108 : ite(95, 29, 107) : BV:8
109 : ite(94, 26, 108) : BV:8
110 : bvconcat(56, 74, 92, 109) : BV:32
111 : ite(18, 2, 110) : BV:32
112 : ite(18, 2, 111) : BV:32
113 : lambda(17, 112) : FUNCTION[BV:32 -> BV:32]
114 : map(16, 113) : MAP[BV:32 -> BV:32]
115 : sym_const(114) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2165826631 ] -> 0, [ 2165826632; 2165826632 ] -> 152, [ 2165826633; 2165826633 ] -> 127, [ 2165826634; 2165826634 ] -> 191, [ 2165826635; 2165826635 ] -> 63, [ 2165826636; 3671970979 ] -> 0, [ 3671970980; 3671970980 ] -> 252, [ 3671970981; 3671970981 ] -> 251, [ 3671970982; 3671970982 ] -> 253, [ 3671970983; 3671970983 ] -> 255, [ 3671970984; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2165826631 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2165826632; 2165826635 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2165826636; 3671970979 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3671970980; 3671970983 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3671970984; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
=input.dst.llvm-%m1
1 : 4294835196 { 0xfffdfbfc -132100 -1.98425245e128 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
=input.dst.llvm-%m2
1 : 1069514648 { 0x3fbf7f98 +1.49608135e0 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1265591362 { 0x4b6f6442 +1.87024712e23 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 490034011 , 1000 , 4294835196 ) -> 15058894, () -> 271969334, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 2165826631 ] -> 0, [ 2165826632; 2165826632 ] -> 152, [ 2165826633; 2165826633 ] -> 127, [ 2165826634; 2165826634 ] -> 191, [ 2165826635; 2165826635 ] -> 63, [ 2165826636; 3671970979 ] -> 0, [ 3671970980; 3671970980 ] -> 252, [ 3671970981; 3671970981 ] -> 251, [ 3671970982; 3671970982 ] -> 253, [ 3671970983; 3671970983 ] -> 255, [ 3671970984; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 15058894 { 0xe5c7ce +1.79516005e130 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 4294835196 { 0xfffdfbfc -132100 -1.98425245e128 } : BV:32
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1265591362 { 0x4b6f6442 +1.87024712e23 } : COUNT
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda48Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294835196 { 0xfffdfbfc -132100 -1.98425245e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
13 : eq(8, 12) : BOOL
14 : 252 { 0xfc -4 } : BV:8
15 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
16 : eq(8, 15) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
19 : eq(8, 18) : BOOL
20 : 63 { 0x3f } : BV:8
21 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
22 : eq(8, 21) : BOOL
23 : 253 { 0xfd -3 } : BV:8
24 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
25 : eq(8, 24) : BOOL
26 : 251 { 0xfb -5 } : BV:8
27 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
28 : eq(8, 27) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
31 : eq(8, 30) : BOOL
32 : 152 { 0x98 -104 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda53Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294835196 { 0xfffdfbfc -132100 -1.98425245e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
13 : eq(8, 12) : BOOL
14 : 252 { 0xfc -4 } : BV:8
15 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
16 : eq(8, 15) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
19 : eq(8, 18) : BOOL
20 : 63 { 0x3f } : BV:8
21 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
22 : eq(8, 21) : BOOL
23 : 253 { 0xfd -3 } : BV:8
24 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
25 : eq(8, 24) : BOOL
26 : 251 { 0xfb -5 } : BV:8
27 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
28 : eq(8, 27) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
31 : eq(8, 30) : BOOL
32 : 152 { 0x98 -104 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : ite(3, 2, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda58Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1069514648 { 0x3fbf7f98 +1.49608135e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
13 : eq(8, 12) : BOOL
14 : 252 { 0xfc -4 } : BV:8
15 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
16 : eq(8, 15) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
19 : eq(8, 18) : BOOL
20 : 63 { 0x3f } : BV:8
21 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
22 : eq(8, 21) : BOOL
23 : 253 { 0xfd -3 } : BV:8
24 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
25 : eq(8, 24) : BOOL
26 : 251 { 0xfb -5 } : BV:8
27 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
28 : eq(8, 27) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
31 : eq(8, 30) : BOOL
32 : 152 { 0x98 -104 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : lambda(1, 96) : FUNCTION[BV:32 -> BV:32]
98 : sym_const(97) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda59Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1069514648 { 0x3fbf7f98 +1.49608135e0 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3671970983 { 0xdaddd4a7 -622996313 -1.73305213e54 } : BV:32
10 : eq(8, 9) : BOOL
11 : 255 { 0xff -1 } : BV:8
12 : 3671970980 { 0xdaddd4a4 -622996316 -1.73305177e54 } : BV:32
13 : eq(8, 12) : BOOL
14 : 252 { 0xfc -4 } : BV:8
15 : 2165826633 { 0x8117e449 -2129140663 -1.18665421e131 } : BV:32
16 : eq(8, 15) : BOOL
17 : 127 { 0x7f } : BV:8
18 : 2165826635 { 0x8117e44b -2129140661 -1.18665444e131 } : BV:32
19 : eq(8, 18) : BOOL
20 : 63 { 0x3f } : BV:8
21 : 3671970982 { 0xdaddd4a6 -622996314 -1.73305201e54 } : BV:32
22 : eq(8, 21) : BOOL
23 : 253 { 0xfd -3 } : BV:8
24 : 3671970981 { 0xdaddd4a5 -622996315 -1.73305189e54 } : BV:32
25 : eq(8, 24) : BOOL
26 : 251 { 0xfb -5 } : BV:8
27 : 2165826634 { 0x8117e44a -2129140662 -1.18665432e131 } : BV:32
28 : eq(8, 27) : BOOL
29 : 191 { 0xbf -65 } : BV:8
30 : 2165826632 { 0x8117e448 -2129140664 -1.18665409e131 } : BV:32
31 : eq(8, 30) : BOOL
32 : 152 { 0x98 -104 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(19, 20, 37) : BV:8
39 : ite(16, 17, 38) : BV:8
40 : ite(13, 14, 39) : BV:8
41 : ite(10, 11, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : eq(43, 24) : BOOL
50 : eq(43, 27) : BOOL
51 : eq(43, 30) : BOOL
52 : ite(51, 32, 33) : BV:8
53 : ite(50, 29, 52) : BV:8
54 : ite(49, 26, 53) : BV:8
55 : ite(48, 23, 54) : BV:8
56 : ite(47, 20, 55) : BV:8
57 : ite(46, 17, 56) : BV:8
58 : ite(45, 14, 57) : BV:8
59 : ite(44, 11, 58) : BV:8
60 : 1 { 0x1 +1.11e129 } : BV:32
61 : bvadd(60, 6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 24) : BOOL
68 : eq(61, 27) : BOOL
69 : eq(61, 30) : BOOL
70 : ite(69, 32, 33) : BV:8
71 : ite(68, 29, 70) : BV:8
72 : ite(67, 26, 71) : BV:8
73 : ite(66, 23, 72) : BV:8
74 : ite(65, 20, 73) : BV:8
75 : ite(64, 17, 74) : BV:8
76 : ite(63, 14, 75) : BV:8
77 : ite(62, 11, 76) : BV:8
78 : bvadd(6, 7) : BV:32
79 : eq(78, 9) : BOOL
80 : eq(78, 12) : BOOL
81 : eq(78, 15) : BOOL
82 : eq(78, 18) : BOOL
83 : eq(78, 21) : BOOL
84 : eq(78, 24) : BOOL
85 : eq(78, 27) : BOOL
86 : eq(78, 30) : BOOL
87 : ite(86, 32, 33) : BV:8
88 : ite(85, 29, 87) : BV:8
89 : ite(84, 26, 88) : BV:8
90 : ite(83, 23, 89) : BV:8
91 : ite(82, 20, 90) : BV:8
92 : ite(81, 17, 91) : BV:8
93 : ite(80, 14, 92) : BV:8
94 : ite(79, 11, 93) : BV:8
95 : bvconcat(41, 59, 77, 94) : BV:32
96 : ite(3, 2, 95) : BV:32
97 : ite(3, 2, 96) : BV:32
98 : lambda(1, 97) : FUNCTION[BV:32 -> BV:32]
99 : sym_const(98) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
261823206
=counter_example_end
=global nodece 0 num_edges_traversed 2
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d -> L2%1%fcallStart_Lentry%1%fcallStart -> L2%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 1
=global nodece 1 nodece z3v487.ce4.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce4 92e9304599f154524e4f5e7470eac92c
=input.spec-%var-m1-1
1 : Lambda128Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda129Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 2550169600 { 0x98008000 -1744797696 -1.390625e177 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 524289 { 0x80001 +1.6250011e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 128 { 0x80 -128 } : BV:8
27 : 5 { 0x5 +1.59e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 6 { 0x6 +1.71e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 157 { 0x9d -99 } : BV:8
33 : 524291 { 0x80003 +1.6250035e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 152 { 0x98 -104 } : BV:8
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 44 { 0x2c } : BV:8
39 : eq(23, 18) : BOOL
40 : 237 { 0xed -19 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 21, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 33) : BOOL
54 : eq(49, 36) : BOOL
55 : eq(49, 18) : BOOL
56 : ite(55, 40, 41) : BV:8
57 : ite(54, 38, 56) : BV:8
58 : ite(53, 35, 57) : BV:8
59 : ite(52, 32, 58) : BV:8
60 : ite(51, 29, 59) : BV:8
61 : ite(50, 26, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 21, 22) : BV:32
64 : eq(63, 24) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 30) : BOOL
67 : eq(63, 33) : BOOL
68 : eq(63, 36) : BOOL
69 : eq(63, 18) : BOOL
70 : ite(69, 40, 41) : BV:8
71 : ite(68, 38, 70) : BV:8
72 : ite(67, 35, 71) : BV:8
73 : ite(66, 32, 72) : BV:8
74 : ite(65, 29, 73) : BV:8
75 : ite(64, 26, 74) : BV:8
76 : bvadd(21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 18) : BOOL
83 : ite(82, 40, 41) : BV:8
84 : ite(81, 38, 83) : BV:8
85 : ite(80, 35, 84) : BV:8
86 : ite(79, 32, 85) : BV:8
87 : ite(78, 29, 86) : BV:8
88 : ite(77, 26, 87) : BV:8
89 : bvconcat(47, 61, 75, 88) : BV:32
90 : ite(19, 2, 89) : BV:32
91 : lambda(17, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(16, 91) : MAP[BV:32 -> BV:32]
93 : sym_const(92) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda133Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda134Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 748552173 { 0x2c9dffed +1.23437273e218 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 524289 { 0x80001 +1.6250011e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 128 { 0x80 -128 } : BV:8
27 : 5 { 0x5 +1.59e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 6 { 0x6 +1.71e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 157 { 0x9d -99 } : BV:8
33 : 524291 { 0x80003 +1.6250035e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 152 { 0x98 -104 } : BV:8
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 44 { 0x2c } : BV:8
39 : eq(23, 18) : BOOL
40 : 237 { 0xed -19 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 21, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 33) : BOOL
54 : eq(49, 36) : BOOL
55 : eq(49, 18) : BOOL
56 : ite(55, 40, 41) : BV:8
57 : ite(54, 38, 56) : BV:8
58 : ite(53, 35, 57) : BV:8
59 : ite(52, 32, 58) : BV:8
60 : ite(51, 29, 59) : BV:8
61 : ite(50, 26, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 21, 22) : BV:32
64 : eq(63, 24) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 30) : BOOL
67 : eq(63, 33) : BOOL
68 : eq(63, 36) : BOOL
69 : eq(63, 18) : BOOL
70 : ite(69, 40, 41) : BV:8
71 : ite(68, 38, 70) : BV:8
72 : ite(67, 35, 71) : BV:8
73 : ite(66, 32, 72) : BV:8
74 : ite(65, 29, 73) : BV:8
75 : ite(64, 26, 74) : BV:8
76 : bvadd(21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 18) : BOOL
83 : ite(82, 40, 41) : BV:8
84 : ite(81, 38, 83) : BV:8
85 : ite(80, 35, 84) : BV:8
86 : ite(79, 32, 85) : BV:8
87 : ite(78, 29, 86) : BV:8
88 : ite(77, 26, 87) : BV:8
89 : bvconcat(47, 61, 75, 88) : BV:32
90 : ite(19, 2, 89) : BV:32
91 : lambda(17, 90) : FUNCTION[BV:32 -> BV:32]
92 : map(16, 91) : MAP[BV:32 -> BV:32]
93 : sym_const(92) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda138Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda139Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 2550169600 { 0x98008000 -1744797696 -1.390625e177 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 524289 { 0x80001 +1.6250011e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 128 { 0x80 -128 } : BV:8
27 : 5 { 0x5 +1.59e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 6 { 0x6 +1.71e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 157 { 0x9d -99 } : BV:8
33 : 524291 { 0x80003 +1.6250035e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 152 { 0x98 -104 } : BV:8
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 44 { 0x2c } : BV:8
39 : eq(23, 18) : BOOL
40 : 237 { 0xed -19 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 21, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 33) : BOOL
54 : eq(49, 36) : BOOL
55 : eq(49, 18) : BOOL
56 : ite(55, 40, 41) : BV:8
57 : ite(54, 38, 56) : BV:8
58 : ite(53, 35, 57) : BV:8
59 : ite(52, 32, 58) : BV:8
60 : ite(51, 29, 59) : BV:8
61 : ite(50, 26, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 21, 22) : BV:32
64 : eq(63, 24) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 30) : BOOL
67 : eq(63, 33) : BOOL
68 : eq(63, 36) : BOOL
69 : eq(63, 18) : BOOL
70 : ite(69, 40, 41) : BV:8
71 : ite(68, 38, 70) : BV:8
72 : ite(67, 35, 71) : BV:8
73 : ite(66, 32, 72) : BV:8
74 : ite(65, 29, 73) : BV:8
75 : ite(64, 26, 74) : BV:8
76 : bvadd(21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 18) : BOOL
83 : ite(82, 40, 41) : BV:8
84 : ite(81, 38, 83) : BV:8
85 : ite(80, 35, 84) : BV:8
86 : ite(79, 32, 85) : BV:8
87 : ite(78, 29, 86) : BV:8
88 : ite(77, 26, 87) : BV:8
89 : bvconcat(47, 61, 75, 88) : BV:32
90 : ite(19, 2, 89) : BV:32
91 : ite(19, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda143Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda144Var : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3 { 0x3 +1.35e129 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : 748552173 { 0x2c9dffed +1.23437273e218 } : BV:32
23 : bvadd(20, 21, 22) : BV:32
24 : 524289 { 0x80001 +1.6250011e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 128 { 0x80 -128 } : BV:8
27 : 5 { 0x5 +1.59e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 255 { 0xff -1 } : BV:8
30 : 6 { 0x6 +1.71e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 157 { 0x9d -99 } : BV:8
33 : 524291 { 0x80003 +1.6250035e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 152 { 0x98 -104 } : BV:8
36 : 7 { 0x7 +1.83e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 44 { 0x2c } : BV:8
39 : eq(23, 18) : BOOL
40 : 237 { 0xed -19 } : BV:8
41 : 0 { 0x0 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 38, 42) : BV:8
44 : ite(34, 35, 43) : BV:8
45 : ite(31, 32, 44) : BV:8
46 : ite(28, 29, 45) : BV:8
47 : ite(25, 26, 46) : BV:8
48 : 2 { 0x2 +1.23e129 } : BV:32
49 : bvadd(48, 21, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 30) : BOOL
53 : eq(49, 33) : BOOL
54 : eq(49, 36) : BOOL
55 : eq(49, 18) : BOOL
56 : ite(55, 40, 41) : BV:8
57 : ite(54, 38, 56) : BV:8
58 : ite(53, 35, 57) : BV:8
59 : ite(52, 32, 58) : BV:8
60 : ite(51, 29, 59) : BV:8
61 : ite(50, 26, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 21, 22) : BV:32
64 : eq(63, 24) : BOOL
65 : eq(63, 27) : BOOL
66 : eq(63, 30) : BOOL
67 : eq(63, 33) : BOOL
68 : eq(63, 36) : BOOL
69 : eq(63, 18) : BOOL
70 : ite(69, 40, 41) : BV:8
71 : ite(68, 38, 70) : BV:8
72 : ite(67, 35, 71) : BV:8
73 : ite(66, 32, 72) : BV:8
74 : ite(65, 29, 73) : BV:8
75 : ite(64, 26, 74) : BV:8
76 : bvadd(21, 22) : BV:32
77 : eq(76, 24) : BOOL
78 : eq(76, 27) : BOOL
79 : eq(76, 30) : BOOL
80 : eq(76, 33) : BOOL
81 : eq(76, 36) : BOOL
82 : eq(76, 18) : BOOL
83 : ite(82, 40, 41) : BV:8
84 : ite(81, 38, 83) : BV:8
85 : ite(80, 35, 84) : BV:8
86 : ite(79, 32, 85) : BV:8
87 : ite(78, 29, 86) : BV:8
88 : ite(77, 26, 87) : BV:8
89 : bvconcat(47, 61, 75, 88) : BV:32
90 : ite(19, 2, 89) : BV:32
91 : ite(19, 2, 90) : BV:32
92 : lambda(17, 91) : FUNCTION[BV:32 -> BV:32]
93 : map(16, 92) : MAP[BV:32 -> BV:32]
94 : sym_const(93) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3 ] -> 0, [ 4; 4 ] -> 237, [ 5; 5 ] -> 255, [ 6; 6 ] -> 157, [ 7; 7 ] -> 44, [ 8; 524288 ] -> 0, [ 524289; 524289 ] -> 128, [ 524290; 524290 ] -> 0, [ 524291; 524291 ] -> 152, [ 524292; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 8; 524287 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 524288; 524291 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 524292; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.llvm-%m1
1 : 2550169600 { 0x98008000 -1744797696 -1.390625e177 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%m2
1 : 748552173 { 0x2c9dffed +1.23437273e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 524291 { 0x80003 +1.6250035e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda61Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2550169600 { 0x98008000 -1744797696 -1.390625e177 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 524289 { 0x80001 +1.6250011e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 6 { 0x6 +1.71e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 157 { 0x9d -99 } : BV:8
18 : 524291 { 0x80003 +1.6250035e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 152 { 0x98 -104 } : BV:8
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 44 { 0x2c } : BV:8
24 : eq(8, 2) : BOOL
25 : 237 { 0xed -19 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 23, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : ite(10, 11, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 15) : BOOL
38 : eq(34, 18) : BOOL
39 : eq(34, 21) : BOOL
40 : eq(34, 2) : BOOL
41 : ite(40, 25, 26) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 20, 42) : BV:8
44 : ite(37, 17, 43) : BV:8
45 : ite(36, 14, 44) : BV:8
46 : ite(35, 11, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 6, 7) : BV:32
49 : eq(48, 9) : BOOL
50 : eq(48, 12) : BOOL
51 : eq(48, 15) : BOOL
52 : eq(48, 18) : BOOL
53 : eq(48, 21) : BOOL
54 : eq(48, 2) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 23, 55) : BV:8
57 : ite(52, 20, 56) : BV:8
58 : ite(51, 17, 57) : BV:8
59 : ite(50, 14, 58) : BV:8
60 : ite(49, 11, 59) : BV:8
61 : bvadd(6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 2) : BOOL
68 : ite(67, 25, 26) : BV:8
69 : ite(66, 23, 68) : BV:8
70 : ite(65, 20, 69) : BV:8
71 : ite(64, 17, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 11, 72) : BV:8
74 : bvconcat(32, 46, 60, 73) : BV:32
75 : ite(3, 4, 74) : BV:32
76 : lambda(1, 75) : FUNCTION[BV:32 -> BV:32]
77 : sym_const(76) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda66Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 2550169600 { 0x98008000 -1744797696 -1.390625e177 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 524289 { 0x80001 +1.6250011e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 6 { 0x6 +1.71e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 157 { 0x9d -99 } : BV:8
18 : 524291 { 0x80003 +1.6250035e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 152 { 0x98 -104 } : BV:8
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 44 { 0x2c } : BV:8
24 : eq(8, 2) : BOOL
25 : 237 { 0xed -19 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 23, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : ite(10, 11, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 15) : BOOL
38 : eq(34, 18) : BOOL
39 : eq(34, 21) : BOOL
40 : eq(34, 2) : BOOL
41 : ite(40, 25, 26) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 20, 42) : BV:8
44 : ite(37, 17, 43) : BV:8
45 : ite(36, 14, 44) : BV:8
46 : ite(35, 11, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 6, 7) : BV:32
49 : eq(48, 9) : BOOL
50 : eq(48, 12) : BOOL
51 : eq(48, 15) : BOOL
52 : eq(48, 18) : BOOL
53 : eq(48, 21) : BOOL
54 : eq(48, 2) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 23, 55) : BV:8
57 : ite(52, 20, 56) : BV:8
58 : ite(51, 17, 57) : BV:8
59 : ite(50, 14, 58) : BV:8
60 : ite(49, 11, 59) : BV:8
61 : bvadd(6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 2) : BOOL
68 : ite(67, 25, 26) : BV:8
69 : ite(66, 23, 68) : BV:8
70 : ite(65, 20, 69) : BV:8
71 : ite(64, 17, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 11, 72) : BV:8
74 : bvconcat(32, 46, 60, 73) : BV:32
75 : ite(3, 4, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda71Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 748552173 { 0x2c9dffed +1.23437273e218 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 524289 { 0x80001 +1.6250011e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 6 { 0x6 +1.71e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 157 { 0x9d -99 } : BV:8
18 : 524291 { 0x80003 +1.6250035e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 152 { 0x98 -104 } : BV:8
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 44 { 0x2c } : BV:8
24 : eq(8, 2) : BOOL
25 : 237 { 0xed -19 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 23, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : ite(10, 11, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 15) : BOOL
38 : eq(34, 18) : BOOL
39 : eq(34, 21) : BOOL
40 : eq(34, 2) : BOOL
41 : ite(40, 25, 26) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 20, 42) : BV:8
44 : ite(37, 17, 43) : BV:8
45 : ite(36, 14, 44) : BV:8
46 : ite(35, 11, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 6, 7) : BV:32
49 : eq(48, 9) : BOOL
50 : eq(48, 12) : BOOL
51 : eq(48, 15) : BOOL
52 : eq(48, 18) : BOOL
53 : eq(48, 21) : BOOL
54 : eq(48, 2) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 23, 55) : BV:8
57 : ite(52, 20, 56) : BV:8
58 : ite(51, 17, 57) : BV:8
59 : ite(50, 14, 58) : BV:8
60 : ite(49, 11, 59) : BV:8
61 : bvadd(6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 2) : BOOL
68 : ite(67, 25, 26) : BV:8
69 : ite(66, 23, 68) : BV:8
70 : ite(65, 20, 69) : BV:8
71 : ite(64, 17, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 11, 72) : BV:8
74 : bvconcat(32, 46, 60, 73) : BV:32
75 : ite(3, 4, 74) : BV:32
76 : lambda(1, 75) : FUNCTION[BV:32 -> BV:32]
77 : sym_const(76) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda72Var : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : 748552173 { 0x2c9dffed +1.23437273e218 } : BV:32
8 : bvadd(5, 6, 7) : BV:32
9 : 524289 { 0x80001 +1.6250011e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 128 { 0x80 -128 } : BV:8
12 : 5 { 0x5 +1.59e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 255 { 0xff -1 } : BV:8
15 : 6 { 0x6 +1.71e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 157 { 0x9d -99 } : BV:8
18 : 524291 { 0x80003 +1.6250035e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 152 { 0x98 -104 } : BV:8
21 : 7 { 0x7 +1.83e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 44 { 0x2c } : BV:8
24 : eq(8, 2) : BOOL
25 : 237 { 0xed -19 } : BV:8
26 : 0 { 0x0 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 23, 27) : BV:8
29 : ite(19, 20, 28) : BV:8
30 : ite(16, 17, 29) : BV:8
31 : ite(13, 14, 30) : BV:8
32 : ite(10, 11, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 6, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 15) : BOOL
38 : eq(34, 18) : BOOL
39 : eq(34, 21) : BOOL
40 : eq(34, 2) : BOOL
41 : ite(40, 25, 26) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 20, 42) : BV:8
44 : ite(37, 17, 43) : BV:8
45 : ite(36, 14, 44) : BV:8
46 : ite(35, 11, 45) : BV:8
47 : 1 { 0x1 +1.11e129 } : BV:32
48 : bvadd(47, 6, 7) : BV:32
49 : eq(48, 9) : BOOL
50 : eq(48, 12) : BOOL
51 : eq(48, 15) : BOOL
52 : eq(48, 18) : BOOL
53 : eq(48, 21) : BOOL
54 : eq(48, 2) : BOOL
55 : ite(54, 25, 26) : BV:8
56 : ite(53, 23, 55) : BV:8
57 : ite(52, 20, 56) : BV:8
58 : ite(51, 17, 57) : BV:8
59 : ite(50, 14, 58) : BV:8
60 : ite(49, 11, 59) : BV:8
61 : bvadd(6, 7) : BV:32
62 : eq(61, 9) : BOOL
63 : eq(61, 12) : BOOL
64 : eq(61, 15) : BOOL
65 : eq(61, 18) : BOOL
66 : eq(61, 21) : BOOL
67 : eq(61, 2) : BOOL
68 : ite(67, 25, 26) : BV:8
69 : ite(66, 23, 68) : BV:8
70 : ite(65, 20, 69) : BV:8
71 : ite(64, 17, 70) : BV:8
72 : ite(63, 14, 71) : BV:8
73 : ite(62, 11, 72) : BV:8
74 : bvconcat(32, 46, 60, 73) : BV:32
75 : ite(3, 4, 74) : BV:32
76 : ite(3, 4, 75) : BV:32
77 : lambda(1, 76) : FUNCTION[BV:32 -> BV:32]
78 : sym_const(77) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
579370649
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3v487.ce12.num_edges_traversed2
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)*(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3v487.ce12 f5c9825e967f4c5c999edeadc3b0efdb
=nextpc_const.1
1 : 1829585933 { 0x6d0d440d +1.10363924e91 } : BV:32
=input.spec-%var-m1-1
1 : Lambda282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda283Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2282449920 { 0x880b6c00 -2012517376 -1.8923339e145 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 11 { 0xb } : BV:8
27 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 108 { 0x6c } : BV:8
30 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 136 { 0x88 -120 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 21, 22) : BV:32
39 : eq(38, 24) : BOOL
40 : eq(38, 27) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 26, 43) : BV:8
45 : 1 { 0x1 +1.11e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : bvadd(21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : ite(54, 26, 58) : BV:8
60 : bvconcat(36, 44, 52, 59) : BV:32
61 : ite(18, 2, 60) : BV:32
62 : lambda(17, 61) : FUNCTION[BV:32 -> BV:32]
63 : map(16, 62) : MAP[BV:32 -> BV:32]
64 : sym_const(63) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda287Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda288Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 11 { 0xb } : BV:8
26 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
27 : eq(22, 26) : BOOL
28 : 108 { 0x6c } : BV:8
29 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
30 : eq(22, 29) : BOOL
31 : 136 { 0x88 -120 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 21, 2) : BV:32
38 : eq(37, 23) : BOOL
39 : eq(37, 26) : BOOL
40 : eq(37, 29) : BOOL
41 : ite(40, 31, 32) : BV:8
42 : ite(39, 28, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 21, 2) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 29) : BOOL
49 : ite(48, 31, 32) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : bvadd(21, 2) : BV:32
53 : eq(52, 23) : BOOL
54 : eq(52, 26) : BOOL
55 : eq(52, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : ite(53, 25, 57) : BV:8
59 : bvconcat(35, 43, 51, 58) : BV:32
60 : ite(18, 2, 59) : BV:32
61 : lambda(17, 60) : FUNCTION[BV:32 -> BV:32]
62 : map(16, 61) : MAP[BV:32 -> BV:32]
63 : sym_const(62) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 853186023, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 853186023 { 0x32da95e7 +1.70769965e230 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda282Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda283Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2282449920 { 0x880b6c00 -2012517376 -1.8923339e145 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 11 { 0xb } : BV:8
27 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 108 { 0x6c } : BV:8
30 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 136 { 0x88 -120 } : BV:8
33 : 0 { 0x0 } : BV:8
34 : ite(31, 32, 33) : BV:8
35 : ite(28, 29, 34) : BV:8
36 : ite(25, 26, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 21, 22) : BV:32
39 : eq(38, 24) : BOOL
40 : eq(38, 27) : BOOL
41 : eq(38, 30) : BOOL
42 : ite(41, 32, 33) : BV:8
43 : ite(40, 29, 42) : BV:8
44 : ite(39, 26, 43) : BV:8
45 : 1 { 0x1 +1.11e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : ite(49, 32, 33) : BV:8
51 : ite(48, 29, 50) : BV:8
52 : ite(47, 26, 51) : BV:8
53 : bvadd(21, 22) : BV:32
54 : eq(53, 24) : BOOL
55 : eq(53, 27) : BOOL
56 : eq(53, 30) : BOOL
57 : ite(56, 32, 33) : BV:8
58 : ite(55, 29, 57) : BV:8
59 : ite(54, 26, 58) : BV:8
60 : bvconcat(36, 44, 52, 59) : BV:32
61 : ite(18, 2, 60) : BV:32
62 : lambda(17, 61) : FUNCTION[BV:32 -> BV:32]
63 : map(16, 62) : MAP[BV:32 -> BV:32]
64 : sym_const(63) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda297Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda298Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21, 2) : BV:32
23 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
24 : eq(22, 23) : BOOL
25 : 11 { 0xb } : BV:8
26 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
27 : eq(22, 26) : BOOL
28 : 108 { 0x6c } : BV:8
29 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
30 : eq(22, 29) : BOOL
31 : 136 { 0x88 -120 } : BV:8
32 : 0 { 0x0 } : BV:8
33 : ite(30, 31, 32) : BV:8
34 : ite(27, 28, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : 2 { 0x2 +1.23e129 } : BV:32
37 : bvadd(36, 21, 2) : BV:32
38 : eq(37, 23) : BOOL
39 : eq(37, 26) : BOOL
40 : eq(37, 29) : BOOL
41 : ite(40, 31, 32) : BV:8
42 : ite(39, 28, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : 1 { 0x1 +1.11e129 } : BV:32
45 : bvadd(44, 21, 2) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 29) : BOOL
49 : ite(48, 31, 32) : BV:8
50 : ite(47, 28, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : bvadd(21, 2) : BV:32
53 : eq(52, 23) : BOOL
54 : eq(52, 26) : BOOL
55 : eq(52, 29) : BOOL
56 : ite(55, 31, 32) : BV:8
57 : ite(54, 28, 56) : BV:8
58 : ite(53, 25, 57) : BV:8
59 : bvconcat(35, 43, 51, 58) : BV:32
60 : ite(18, 2, 59) : BV:32
61 : ite(18, 2, 60) : BV:32
62 : lambda(17, 61) : FUNCTION[BV:32 -> BV:32]
63 : map(16, 62) : MAP[BV:32 -> BV:32]
64 : sym_const(63) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4270404 ] -> 0, [ 4270405; 4270405 ] -> 108, [ 4270406; 4270406 ] -> 11, [ 4270407; 4270407 ] -> 136, [ 4270408; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 4270403 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4270404; 4270407 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 4270408; 2281788679 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2281788680; 2281788683 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2281788684; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 4270404 { 0x412944 +1.50907182e129 } : BV:32
=input.dst.llvm-%m1
1 : 2282449920 { 0x880b6c00 -2012517376 -1.8923339e145 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2281788680 { 0x88015508 -2013178616 -1.1040744e145 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1841929073 { 0x6dc99b71 +1.57505619e92 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1829585933 , 1000 , 2282449920 ) -> 91088095, () -> 680655230, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4270404 ] -> 0, [ 4270405; 4270405 ] -> 108, [ 4270406; 4270406 ] -> 11, [ 4270407; 4270407 ] -> 136, [ 4270408; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 91088095 { 0x56de4df +1.85854709e139 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 2282449920 { 0x880b6c00 -2012517376 -1.8923339e145 } : BV:32
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1841929073 { 0x6dc99b71 +1.57505619e92 } : COUNT
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2281788680 { 0x88015508 -2013178616 -1.1040744e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2281788683 { 0x8801550b -2013178613 -1.1040780e145 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 4270404 { 0x412944 +1.50907182e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda238Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2282449920 { 0x880b6c00 -2012517376 -1.8923339e145 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 11 { 0xb } : BV:8
12 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 108 { 0x6c } : BV:8
15 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 136 { 0x88 -120 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : lambda(1, 46) : FUNCTION[BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda243Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2282449920 { 0x880b6c00 -2012517376 -1.8923339e145 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 11 { 0xb } : BV:8
12 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 108 { 0x6c } : BV:8
15 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 136 { 0x88 -120 } : BV:8
18 : 0 { 0x0 } : BV:8
19 : ite(16, 17, 18) : BV:8
20 : ite(13, 14, 19) : BV:8
21 : ite(10, 11, 20) : BV:8
22 : 2 { 0x2 +1.23e129 } : BV:32
23 : bvadd(22, 6, 7) : BV:32
24 : eq(23, 9) : BOOL
25 : eq(23, 12) : BOOL
26 : eq(23, 15) : BOOL
27 : ite(26, 17, 18) : BV:8
28 : ite(25, 14, 27) : BV:8
29 : ite(24, 11, 28) : BV:8
30 : 1 { 0x1 +1.11e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : ite(34, 17, 18) : BV:8
36 : ite(33, 14, 35) : BV:8
37 : ite(32, 11, 36) : BV:8
38 : bvadd(6, 7) : BV:32
39 : eq(38, 9) : BOOL
40 : eq(38, 12) : BOOL
41 : eq(38, 15) : BOOL
42 : ite(41, 17, 18) : BV:8
43 : ite(40, 14, 42) : BV:8
44 : ite(39, 11, 43) : BV:8
45 : bvconcat(21, 29, 37, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : ite(3, 2, 46) : BV:32
48 : lambda(1, 47) : FUNCTION[BV:32 -> BV:32]
49 : sym_const(48) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda248Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 11 { 0xb } : BV:8
11 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
12 : eq(7, 11) : BOOL
13 : 108 { 0x6c } : BV:8
14 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
15 : eq(7, 14) : BOOL
16 : 136 { 0x88 -120 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6, 2) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6, 2) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : bvadd(6, 2) : BV:32
38 : eq(37, 8) : BOOL
39 : eq(37, 11) : BOOL
40 : eq(37, 14) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 10, 42) : BV:8
44 : bvconcat(20, 28, 36, 43) : BV:32
45 : ite(3, 2, 44) : BV:32
46 : lambda(1, 45) : FUNCTION[BV:32 -> BV:32]
47 : sym_const(46) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda249Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6, 2) : BV:32
8 : 4270406 { 0x412946 +1.50907206e129 } : BV:32
9 : eq(7, 8) : BOOL
10 : 11 { 0xb } : BV:8
11 : 4270405 { 0x412945 +1.50907194e129 } : BV:32
12 : eq(7, 11) : BOOL
13 : 108 { 0x6c } : BV:8
14 : 4270407 { 0x412947 +1.50907218e129 } : BV:32
15 : eq(7, 14) : BOOL
16 : 136 { 0x88 -120 } : BV:8
17 : 0 { 0x0 } : BV:8
18 : ite(15, 16, 17) : BV:8
19 : ite(12, 13, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 6, 2) : BV:32
23 : eq(22, 8) : BOOL
24 : eq(22, 11) : BOOL
25 : eq(22, 14) : BOOL
26 : ite(25, 16, 17) : BV:8
27 : ite(24, 13, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : 1 { 0x1 +1.11e129 } : BV:32
30 : bvadd(29, 6, 2) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 14) : BOOL
34 : ite(33, 16, 17) : BV:8
35 : ite(32, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : bvadd(6, 2) : BV:32
38 : eq(37, 8) : BOOL
39 : eq(37, 11) : BOOL
40 : eq(37, 14) : BOOL
41 : ite(40, 16, 17) : BV:8
42 : ite(39, 13, 41) : BV:8
43 : ite(38, 10, 42) : BV:8
44 : bvconcat(20, 28, 36, 43) : BV:32
45 : ite(3, 2, 44) : BV:32
46 : ite(3, 2, 45) : BV:32
47 : lambda(1, 46) : FUNCTION[BV:32 -> BV:32]
48 : sym_const(47) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
123546513
=counter_example_end
=global nodece 2 num_edges_traversed 2
=global nodece 2 nodece_visted_pcs: 
L2%1%fcallStart_Lentry%1%fcallStart -> L2%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 3
=global nodece 3 nodece z3.ce13.num_edges_traversed2
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)*(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3.ce13 f3d0e9c63360156111fc835c7fd7f31
=nextpc_const.1
1 : 583138863 { 0x22c1fe2f +1.51556956e198 } : BV:32
=input.spec-%var-m1-1
1 : Lambda318Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda319Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4250858240 { 0xfd5ef300 -44109056 -1.74179077e123 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
25 : eq(23, 24) : BOOL
26 : 253 { 0xfd -3 } : BV:8
27 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
31 : eq(23, 30) : BOOL
32 : 94 { 0x5e } : BV:8
33 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
34 : eq(23, 33) : BOOL
35 : 243 { 0xf3 -13 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda323Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda324Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 67108864 { 0x4000000 +1.0e137 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
25 : eq(23, 24) : BOOL
26 : 253 { 0xfd -3 } : BV:8
27 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
31 : eq(23, 30) : BOOL
32 : 94 { 0x5e } : BV:8
33 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
34 : eq(23, 33) : BOOL
35 : 243 { 0xf3 -13 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 1552888285, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 1552888285 { 0x5c8f31dd +1.11870920e58 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda318Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda319Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4250858240 { 0xfd5ef300 -44109056 -1.74179077e123 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
25 : eq(23, 24) : BOOL
26 : 253 { 0xfd -3 } : BV:8
27 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
31 : eq(23, 30) : BOOL
32 : 94 { 0x5e } : BV:8
33 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
34 : eq(23, 33) : BOOL
35 : 243 { 0xf3 -13 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : lambda(17, 71) : FUNCTION[BV:32 -> BV:32]
73 : map(16, 72) : MAP[BV:32 -> BV:32]
74 : sym_const(73) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda333Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda334Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 67108864 { 0x4000000 +1.0e137 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
25 : eq(23, 24) : BOOL
26 : 253 { 0xfd -3 } : BV:8
27 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
31 : eq(23, 30) : BOOL
32 : 94 { 0x5e } : BV:8
33 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
34 : eq(23, 33) : BOOL
35 : 243 { 0xf3 -13 } : BV:8
36 : 0 { 0x0 } : BV:8
37 : ite(34, 35, 36) : BV:8
38 : ite(31, 32, 37) : BV:8
39 : ite(28, 29, 38) : BV:8
40 : ite(25, 26, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 21, 22) : BV:32
43 : eq(42, 24) : BOOL
44 : eq(42, 27) : BOOL
45 : eq(42, 30) : BOOL
46 : eq(42, 33) : BOOL
47 : ite(46, 35, 36) : BV:8
48 : ite(45, 32, 47) : BV:8
49 : ite(44, 29, 48) : BV:8
50 : ite(43, 26, 49) : BV:8
51 : 1 { 0x1 +1.11e129 } : BV:32
52 : bvadd(51, 21, 22) : BV:32
53 : eq(52, 24) : BOOL
54 : eq(52, 27) : BOOL
55 : eq(52, 30) : BOOL
56 : eq(52, 33) : BOOL
57 : ite(56, 35, 36) : BV:8
58 : ite(55, 32, 57) : BV:8
59 : ite(54, 29, 58) : BV:8
60 : ite(53, 26, 59) : BV:8
61 : bvadd(21, 22) : BV:32
62 : eq(61, 24) : BOOL
63 : eq(61, 27) : BOOL
64 : eq(61, 30) : BOOL
65 : eq(61, 33) : BOOL
66 : ite(65, 35, 36) : BV:8
67 : ite(64, 32, 66) : BV:8
68 : ite(63, 29, 67) : BV:8
69 : ite(62, 26, 68) : BV:8
70 : bvconcat(40, 50, 60, 69) : BV:32
71 : ite(18, 2, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : lambda(17, 72) : FUNCTION[BV:32 -> BV:32]
74 : map(16, 73) : MAP[BV:32 -> BV:32]
75 : sym_const(74) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 1190804216 ] -> 0, [ 1190804217; 1190804217 ] -> 243, [ 1190804218; 1190804218 ] -> 94, [ 1190804219; 1190804219 ] -> 253, [ 1190804220; 1257636606 ] -> 0, [ 1257636607; 1257636607 ] -> 4, [ 1257636608; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1190804215 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1190804216; 1190804219 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 1190804220; 1257636603 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1257636604; 1257636607 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 1257636608; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 1190804216 { 0x46fa3af8 +1.95492458e14 } : BV:32
=input.dst.llvm-%m1
1 : 4250858240 { 0xfd5ef300 -44109056 -1.74179077e123 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 1257636604 { 0x4af602fc +1.92196607e22 } : BV:32
=input.dst.llvm-%m2
1 : 67108864 { 0x4000000 +1.0e137 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1515442523 { 0x5a53d15b +1.65482652e53 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 583138863 , 1000 , 4250858240 ) -> 164675230, () -> 49329969, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 1190804216 ] -> 0, [ 1190804217; 1190804217 ] -> 243, [ 1190804218; 1190804218 ] -> 94, [ 1190804219; 1190804219 ] -> 253, [ 1190804220; 1257636606 ] -> 0, [ 1257636607; 1257636607 ] -> 4, [ 1257636608; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 164675230 { 0x9d0be9e +1.63081717e148 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 4250858240 { 0xfd5ef300 -44109056 -1.74179077e123 } : BV:32
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1515442523 { 0x5a53d15b +1.65482652e53 } : COUNT
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 1257636604 { 0x4af602fc +1.92196607e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 1190804216 { 0x46fa3af8 +1.95492458e14 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda251Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4250858240 { 0xfd5ef300 -44109056 -1.74179077e123 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
10 : eq(8, 9) : BOOL
11 : 253 { 0xfd -3 } : BV:8
12 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
16 : eq(8, 15) : BOOL
17 : 94 { 0x5e } : BV:8
18 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
19 : eq(8, 18) : BOOL
20 : 243 { 0xf3 -13 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda256Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4250858240 { 0xfd5ef300 -44109056 -1.74179077e123 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
10 : eq(8, 9) : BOOL
11 : 253 { 0xfd -3 } : BV:8
12 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
16 : eq(8, 15) : BOOL
17 : 94 { 0x5e } : BV:8
18 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
19 : eq(8, 18) : BOOL
20 : 243 { 0xf3 -13 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda261Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
10 : eq(8, 9) : BOOL
11 : 253 { 0xfd -3 } : BV:8
12 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
16 : eq(8, 15) : BOOL
17 : 94 { 0x5e } : BV:8
18 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
19 : eq(8, 18) : BOOL
20 : 243 { 0xf3 -13 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : lambda(1, 56) : FUNCTION[BV:32 -> BV:32]
58 : sym_const(57) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda262Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 67108864 { 0x4000000 +1.0e137 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 1190804219 { 0x46fa3afb +1.95492494e14 } : BV:32
10 : eq(8, 9) : BOOL
11 : 253 { 0xfd -3 } : BV:8
12 : 1257636607 { 0x4af602ff +1.92196643e22 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4 { 0x4 } : BV:8
15 : 1190804218 { 0x46fa3afa +1.95492482e14 } : BV:32
16 : eq(8, 15) : BOOL
17 : 94 { 0x5e } : BV:8
18 : 1190804217 { 0x46fa3af9 +1.95492470e14 } : BV:32
19 : eq(8, 18) : BOOL
20 : 243 { 0xf3 -13 } : BV:8
21 : 0 { 0x0 } : BV:8
22 : ite(19, 20, 21) : BV:8
23 : ite(16, 17, 22) : BV:8
24 : ite(13, 14, 23) : BV:8
25 : ite(10, 11, 24) : BV:8
26 : 2 { 0x2 +1.23e129 } : BV:32
27 : bvadd(26, 6, 7) : BV:32
28 : eq(27, 9) : BOOL
29 : eq(27, 12) : BOOL
30 : eq(27, 15) : BOOL
31 : eq(27, 18) : BOOL
32 : ite(31, 20, 21) : BV:8
33 : ite(30, 17, 32) : BV:8
34 : ite(29, 14, 33) : BV:8
35 : ite(28, 11, 34) : BV:8
36 : 1 { 0x1 +1.11e129 } : BV:32
37 : bvadd(36, 6, 7) : BV:32
38 : eq(37, 9) : BOOL
39 : eq(37, 12) : BOOL
40 : eq(37, 15) : BOOL
41 : eq(37, 18) : BOOL
42 : ite(41, 20, 21) : BV:8
43 : ite(40, 17, 42) : BV:8
44 : ite(39, 14, 43) : BV:8
45 : ite(38, 11, 44) : BV:8
46 : bvadd(6, 7) : BV:32
47 : eq(46, 9) : BOOL
48 : eq(46, 12) : BOOL
49 : eq(46, 15) : BOOL
50 : eq(46, 18) : BOOL
51 : ite(50, 20, 21) : BV:8
52 : ite(49, 17, 51) : BV:8
53 : ite(48, 14, 52) : BV:8
54 : ite(47, 11, 53) : BV:8
55 : bvconcat(25, 35, 45, 54) : BV:32
56 : ite(3, 2, 55) : BV:32
57 : ite(3, 2, 56) : BV:32
58 : lambda(1, 57) : FUNCTION[BV:32 -> BV:32]
59 : sym_const(58) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3310340622
=counter_example_end
=global nodece 3 num_edges_traversed 2
=global nodece 3 nodece_visted_pcs: 
L2%1%fcallStart_Lentry%1%fcallStart -> L2%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 4
=global nodece 4 nodece z3v487.ce26.num_edges_traversed2
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)*(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3v487.ce26 9d3cb2ea1e1a56b37552360eeac95e5
=nextpc_const.1
1 : 942239276 { 0x38296e2c +1.32367467e241 } : BV:32
=input.spec-%var-m1-1
1 : Lambda426Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda427Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 48103444 { 0x2de0014 +1.73437738e134 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 540738 { 0x84042 +1.6446099e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 222 { 0xde -34 } : BV:8
27 : 540736 { 0x84040 +1.6446075e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 20 { 0x14 } : BV:8
30 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 225 { 0xe1 -31 } : BV:8
33 : 540739 { 0x84043 +1.6446111e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2 { 0x2 } : BV:8
36 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda431Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda432Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2145452032 { 0x7fe10000 +1.75781250e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 540738 { 0x84042 +1.6446099e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 222 { 0xde -34 } : BV:8
27 : 540736 { 0x84040 +1.6446075e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 20 { 0x14 } : BV:8
30 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 225 { 0xe1 -31 } : BV:8
33 : 540739 { 0x84043 +1.6446111e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2 { 0x2 } : BV:8
36 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 1968286926, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 1968286926 { 0x7551acce +1.63808608e107 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda426Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda427Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 48103444 { 0x2de0014 +1.73437738e134 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 540738 { 0x84042 +1.6446099e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 222 { 0xde -34 } : BV:8
27 : 540736 { 0x84040 +1.6446075e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 20 { 0x14 } : BV:8
30 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 225 { 0xe1 -31 } : BV:8
33 : 540739 { 0x84043 +1.6446111e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2 { 0x2 } : BV:8
36 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : lambda(17, 81) : FUNCTION[BV:32 -> BV:32]
83 : map(16, 82) : MAP[BV:32 -> BV:32]
84 : sym_const(83) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda441Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda442Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 2145452032 { 0x7fe10000 +1.75781250e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 540738 { 0x84042 +1.6446099e129 } : BV:32
25 : eq(23, 24) : BOOL
26 : 222 { 0xde -34 } : BV:8
27 : 540736 { 0x84040 +1.6446075e129 } : BV:32
28 : eq(23, 27) : BOOL
29 : 20 { 0x14 } : BV:8
30 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
31 : eq(23, 30) : BOOL
32 : 225 { 0xe1 -31 } : BV:8
33 : 540739 { 0x84043 +1.6446111e129 } : BV:32
34 : eq(23, 33) : BOOL
35 : 2 { 0x2 } : BV:8
36 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
37 : eq(23, 36) : BOOL
38 : 127 { 0x7f } : BV:8
39 : 0 { 0x0 } : BV:8
40 : ite(37, 38, 39) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(31, 32, 41) : BV:8
43 : ite(28, 29, 42) : BV:8
44 : ite(25, 26, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 21, 22) : BV:32
47 : eq(46, 24) : BOOL
48 : eq(46, 27) : BOOL
49 : eq(46, 30) : BOOL
50 : eq(46, 33) : BOOL
51 : eq(46, 36) : BOOL
52 : ite(51, 38, 39) : BV:8
53 : ite(50, 35, 52) : BV:8
54 : ite(49, 32, 53) : BV:8
55 : ite(48, 29, 54) : BV:8
56 : ite(47, 26, 55) : BV:8
57 : 1 { 0x1 +1.11e129 } : BV:32
58 : bvadd(57, 21, 22) : BV:32
59 : eq(58, 24) : BOOL
60 : eq(58, 27) : BOOL
61 : eq(58, 30) : BOOL
62 : eq(58, 33) : BOOL
63 : eq(58, 36) : BOOL
64 : ite(63, 38, 39) : BV:8
65 : ite(62, 35, 64) : BV:8
66 : ite(61, 32, 65) : BV:8
67 : ite(60, 29, 66) : BV:8
68 : ite(59, 26, 67) : BV:8
69 : bvadd(21, 22) : BV:32
70 : eq(69, 24) : BOOL
71 : eq(69, 27) : BOOL
72 : eq(69, 30) : BOOL
73 : eq(69, 33) : BOOL
74 : eq(69, 36) : BOOL
75 : ite(74, 38, 39) : BV:8
76 : ite(73, 35, 75) : BV:8
77 : ite(72, 32, 76) : BV:8
78 : ite(71, 29, 77) : BV:8
79 : ite(70, 26, 78) : BV:8
80 : bvconcat(44, 56, 68, 79) : BV:32
81 : ite(18, 2, 80) : BV:32
82 : ite(18, 2, 81) : BV:32
83 : lambda(17, 82) : FUNCTION[BV:32 -> BV:32]
84 : map(16, 83) : MAP[BV:32 -> BV:32]
85 : sym_const(84) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 540735 ] -> 0, [ 540736; 540736 ] -> 20, [ 540737; 540737 ] -> 0, [ 540738; 540738 ] -> 222, [ 540739; 540739 ] -> 2, [ 540740; 2148204549 ] -> 0, [ 2148204550; 2148204550 ] -> 225, [ 2148204551; 2148204551 ] -> 127, [ 2148204552; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 540735 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 540736; 540739 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 540740; 2148204547 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2148204548; 2148204551 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2148204552; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 540736 { 0x84040 +1.6446075e129 } : BV:32
=input.dst.llvm-%m1
1 : 48103444 { 0x2de0014 +1.73437738e134 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2148204548 { 0x800b0004 -2146762748 -1.8593797e129 } : BV:32
=input.dst.llvm-%m2
1 : 2145452032 { 0x7fe10000 +1.75781250e128 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1337951289 { 0x4fbf8439 +1.49622261e32 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 942239276 , 1000 , 48103444 ) -> 1938659769, () -> 1023645260, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 540735 ] -> 0, [ 540736; 540736 ] -> 20, [ 540737; 540737 ] -> 0, [ 540738; 540738 ] -> 222, [ 540739; 540739 ] -> 2, [ 540740; 2148204549 ] -> 0, [ 2148204550; 2148204550 ] -> 225, [ 2148204551; 2148204551 ] -> 127, [ 2148204552; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 1938659769 { 0x738d99b9 +1.10625374e104 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 48103444 { 0x2de0014 +1.73437738e134 } : BV:32
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 1337951289 { 0x4fbf8439 +1.49622261e32 } : COUNT
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2148204548 { 0x800b0004 -2146762748 -1.8593797e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 540736 { 0x84040 +1.6446075e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 540739 { 0x84043 +1.6446111e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda382Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 48103444 { 0x2de0014 +1.73437738e134 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 540738 { 0x84042 +1.6446099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 222 { 0xde -34 } : BV:8
12 : 540736 { 0x84040 +1.6446075e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 20 { 0x14 } : BV:8
15 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 225 { 0xe1 -31 } : BV:8
18 : 540739 { 0x84043 +1.6446111e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2 { 0x2 } : BV:8
21 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda387Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 48103444 { 0x2de0014 +1.73437738e134 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 540738 { 0x84042 +1.6446099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 222 { 0xde -34 } : BV:8
12 : 540736 { 0x84040 +1.6446075e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 20 { 0x14 } : BV:8
15 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 225 { 0xe1 -31 } : BV:8
18 : 540739 { 0x84043 +1.6446111e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2 { 0x2 } : BV:8
21 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : ite(3, 2, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda392Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2145452032 { 0x7fe10000 +1.75781250e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 540738 { 0x84042 +1.6446099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 222 { 0xde -34 } : BV:8
12 : 540736 { 0x84040 +1.6446075e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 20 { 0x14 } : BV:8
15 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 225 { 0xe1 -31 } : BV:8
18 : 540739 { 0x84043 +1.6446111e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2 { 0x2 } : BV:8
21 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : lambda(1, 66) : FUNCTION[BV:32 -> BV:32]
68 : sym_const(67) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda393Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 2145452032 { 0x7fe10000 +1.75781250e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 540738 { 0x84042 +1.6446099e129 } : BV:32
10 : eq(8, 9) : BOOL
11 : 222 { 0xde -34 } : BV:8
12 : 540736 { 0x84040 +1.6446075e129 } : BV:32
13 : eq(8, 12) : BOOL
14 : 20 { 0x14 } : BV:8
15 : 2148204550 { 0x800b0006 -2146762746 -1.8593821e129 } : BV:32
16 : eq(8, 15) : BOOL
17 : 225 { 0xe1 -31 } : BV:8
18 : 540739 { 0x84043 +1.6446111e129 } : BV:32
19 : eq(8, 18) : BOOL
20 : 2 { 0x2 } : BV:8
21 : 2148204551 { 0x800b0007 -2146762745 -1.8593833e129 } : BV:32
22 : eq(8, 21) : BOOL
23 : 127 { 0x7f } : BV:8
24 : 0 { 0x0 } : BV:8
25 : ite(22, 23, 24) : BV:8
26 : ite(19, 20, 25) : BV:8
27 : ite(16, 17, 26) : BV:8
28 : ite(13, 14, 27) : BV:8
29 : ite(10, 11, 28) : BV:8
30 : 2 { 0x2 +1.23e129 } : BV:32
31 : bvadd(30, 6, 7) : BV:32
32 : eq(31, 9) : BOOL
33 : eq(31, 12) : BOOL
34 : eq(31, 15) : BOOL
35 : eq(31, 18) : BOOL
36 : eq(31, 21) : BOOL
37 : ite(36, 23, 24) : BV:8
38 : ite(35, 20, 37) : BV:8
39 : ite(34, 17, 38) : BV:8
40 : ite(33, 14, 39) : BV:8
41 : ite(32, 11, 40) : BV:8
42 : 1 { 0x1 +1.11e129 } : BV:32
43 : bvadd(42, 6, 7) : BV:32
44 : eq(43, 9) : BOOL
45 : eq(43, 12) : BOOL
46 : eq(43, 15) : BOOL
47 : eq(43, 18) : BOOL
48 : eq(43, 21) : BOOL
49 : ite(48, 23, 24) : BV:8
50 : ite(47, 20, 49) : BV:8
51 : ite(46, 17, 50) : BV:8
52 : ite(45, 14, 51) : BV:8
53 : ite(44, 11, 52) : BV:8
54 : bvadd(6, 7) : BV:32
55 : eq(54, 9) : BOOL
56 : eq(54, 12) : BOOL
57 : eq(54, 15) : BOOL
58 : eq(54, 18) : BOOL
59 : eq(54, 21) : BOOL
60 : ite(59, 23, 24) : BV:8
61 : ite(58, 20, 60) : BV:8
62 : ite(57, 17, 61) : BV:8
63 : ite(56, 14, 62) : BV:8
64 : ite(55, 11, 63) : BV:8
65 : bvconcat(29, 41, 53, 64) : BV:32
66 : ite(3, 2, 65) : BV:32
67 : ite(3, 2, 66) : BV:32
68 : lambda(1, 67) : FUNCTION[BV:32 -> BV:32]
69 : sym_const(68) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
478808189
=counter_example_end
=global nodece 4 num_edges_traversed 2
=global nodece 4 nodece_visted_pcs: 
L2%1%fcallStart_Lentry%1%fcallStart -> L2%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 5
=global nodece 5 nodece z3.ce40.num_edges_traversed2
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
((L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart)*(L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd))
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3.ce40 3282ae9ee4f03e6c169c192cf8869517
=nextpc_const.1
1 : 196411012 { 0xbb4fe84 +1.41401720e152 } : BV:32
=input.spec-%var-m1-1
1 : Lambda570Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda571Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3954932480 { 0xebbb7b00 -340034816 -1.46469116e88 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
25 : eq(23, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
28 : eq(23, 27) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
31 : eq(23, 30) : BOOL
32 : 181 { 0xb5 -75 } : BV:8
33 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
37 : eq(23, 36) : BOOL
38 : 187 { 0xbb -69 } : BV:8
39 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
40 : eq(23, 39) : BOOL
41 : 123 { 0x7b } : BV:8
42 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda575Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda576Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3053313796 { 0xb5fddf04 -1241653500 -1.98336839e236 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
25 : eq(23, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
28 : eq(23, 27) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
31 : eq(23, 30) : BOOL
32 : 181 { 0xb5 -75 } : BV:8
33 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
37 : eq(23, 36) : BOOL
38 : 187 { 0xbb -69 } : BV:8
39 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
40 : eq(23, 39) : BOOL
41 : 123 { 0x7b } : BV:8
42 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 319143848, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 319143848 { 0x1305bfa8 +1.4491138e167 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda570Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda571Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3954932480 { 0xebbb7b00 -340034816 -1.46469116e88 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
25 : eq(23, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
28 : eq(23, 27) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
31 : eq(23, 30) : BOOL
32 : 181 { 0xb5 -75 } : BV:8
33 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
37 : eq(23, 36) : BOOL
38 : 187 { 0xbb -69 } : BV:8
39 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
40 : eq(23, 39) : BOOL
41 : 123 { 0x7b } : BV:8
42 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : lambda(17, 101) : FUNCTION[BV:32 -> BV:32]
103 : map(16, 102) : MAP[BV:32 -> BV:32]
104 : sym_const(103) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda585Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda586Var : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3053313796 { 0xb5fddf04 -1241653500 -1.98336839e236 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
25 : eq(23, 24) : BOOL
26 : 235 { 0xeb -21 } : BV:8
27 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
28 : eq(23, 27) : BOOL
29 : 223 { 0xdf -33 } : BV:8
30 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
31 : eq(23, 30) : BOOL
32 : 181 { 0xb5 -75 } : BV:8
33 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
34 : eq(23, 33) : BOOL
35 : 4 { 0x4 } : BV:8
36 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
37 : eq(23, 36) : BOOL
38 : 187 { 0xbb -69 } : BV:8
39 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
40 : eq(23, 39) : BOOL
41 : 123 { 0x7b } : BV:8
42 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
43 : eq(23, 42) : BOOL
44 : 253 { 0xfd -3 } : BV:8
45 : 0 { 0x0 } : BV:8
46 : ite(43, 44, 45) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(37, 38, 47) : BV:8
49 : ite(34, 35, 48) : BV:8
50 : ite(31, 32, 49) : BV:8
51 : ite(28, 29, 50) : BV:8
52 : ite(25, 26, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 24) : BOOL
56 : eq(54, 27) : BOOL
57 : eq(54, 30) : BOOL
58 : eq(54, 33) : BOOL
59 : eq(54, 36) : BOOL
60 : eq(54, 39) : BOOL
61 : eq(54, 42) : BOOL
62 : ite(61, 44, 45) : BV:8
63 : ite(60, 41, 62) : BV:8
64 : ite(59, 38, 63) : BV:8
65 : ite(58, 35, 64) : BV:8
66 : ite(57, 32, 65) : BV:8
67 : ite(56, 29, 66) : BV:8
68 : ite(55, 26, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 21, 22) : BV:32
71 : eq(70, 24) : BOOL
72 : eq(70, 27) : BOOL
73 : eq(70, 30) : BOOL
74 : eq(70, 33) : BOOL
75 : eq(70, 36) : BOOL
76 : eq(70, 39) : BOOL
77 : eq(70, 42) : BOOL
78 : ite(77, 44, 45) : BV:8
79 : ite(76, 41, 78) : BV:8
80 : ite(75, 38, 79) : BV:8
81 : ite(74, 35, 80) : BV:8
82 : ite(73, 32, 81) : BV:8
83 : ite(72, 29, 82) : BV:8
84 : ite(71, 26, 83) : BV:8
85 : bvadd(21, 22) : BV:32
86 : eq(85, 24) : BOOL
87 : eq(85, 27) : BOOL
88 : eq(85, 30) : BOOL
89 : eq(85, 33) : BOOL
90 : eq(85, 36) : BOOL
91 : eq(85, 39) : BOOL
92 : eq(85, 42) : BOOL
93 : ite(92, 44, 45) : BV:8
94 : ite(91, 41, 93) : BV:8
95 : ite(90, 38, 94) : BV:8
96 : ite(89, 35, 95) : BV:8
97 : ite(88, 32, 96) : BV:8
98 : ite(87, 29, 97) : BV:8
99 : ite(86, 26, 98) : BV:8
100 : bvconcat(52, 68, 84, 99) : BV:32
101 : ite(18, 2, 100) : BV:32
102 : ite(18, 2, 101) : BV:32
103 : lambda(17, 102) : FUNCTION[BV:32 -> BV:32]
104 : map(16, 103) : MAP[BV:32 -> BV:32]
105 : sym_const(104) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 3165513263 ] -> 0, [ 3165513264; 3165513264 ] -> 4, [ 3165513265; 3165513265 ] -> 223, [ 3165513266; 3165513266 ] -> 253, [ 3165513267; 3165513267 ] -> 181, [ 3165513268; 3231259444 ] -> 0, [ 3231259445; 3231259445 ] -> 123, [ 3231259446; 3231259446 ] -> 187, [ 3231259447; 3231259447 ] -> 235, [ 3231259448; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3165513263 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3165513264; 3165513267 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 3165513268; 3231259443 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3231259444; 3231259447 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3231259448; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3231259444 { 0xc0991b34 -1063707852 -1.19614267e2 } : BV:32
=input.dst.llvm-%m1
1 : 3954932480 { 0xebbb7b00 -340034816 -1.46469116e88 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
=input.dst.llvm-%m2
1 : 3053313796 { 0xb5fddf04 -1241653500 -1.98336839e236 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 286835451 { 0x1118c2fb +1.19345033e163 } : COUNT
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 196411012 , 1000 , 3954932480 ) -> 2113103272, () -> 2043388027, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 3165513263 ] -> 0, [ 3165513264; 3165513264 ] -> 4, [ 3165513265; 3165513265 ] -> 223, [ 3165513266; 3165513266 ] -> 253, [ 3165513267; 3165513267 ] -> 181, [ 3165513268; 3231259444 ] -> 0, [ 3231259445; 3231259445 ] -> 123, [ 3231259446; 3231259446 ] -> 187, [ 3231259447; 3231259447 ] -> 235, [ 3231259448; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 2113103272 { 0x7df365a8 +1.90153980e124 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m1.Lentry%1%fcallEnd
1 : 3954932480 { 0xebbb7b00 -340034816 -1.46469116e88 } : BV:32
=input.dst.cur_rounding_mode.Lentry%1%fcallStart
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.local_alloc_count.Lentry%1%fcallStart
1 : 286835451 { 0x1118c2fb +1.19345033e163 } : COUNT
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3231259444 { 0xc0991b34 -1063707852 -1.19614267e2 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda526Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3954932480 { 0xebbb7b00 -340034816 -1.46469116e88 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
10 : eq(8, 9) : BOOL
11 : 235 { 0xeb -21 } : BV:8
12 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
13 : eq(8, 12) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
16 : eq(8, 15) : BOOL
17 : 181 { 0xb5 -75 } : BV:8
18 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
22 : eq(8, 21) : BOOL
23 : 187 { 0xbb -69 } : BV:8
24 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
25 : eq(8, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda531Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3954932480 { 0xebbb7b00 -340034816 -1.46469116e88 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
10 : eq(8, 9) : BOOL
11 : 235 { 0xeb -21 } : BV:8
12 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
13 : eq(8, 12) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
16 : eq(8, 15) : BOOL
17 : 181 { 0xb5 -75 } : BV:8
18 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
22 : eq(8, 21) : BOOL
23 : 187 { 0xbb -69 } : BV:8
24 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
25 : eq(8, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda536Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3053313796 { 0xb5fddf04 -1241653500 -1.98336839e236 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
10 : eq(8, 9) : BOOL
11 : 235 { 0xeb -21 } : BV:8
12 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
13 : eq(8, 12) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
16 : eq(8, 15) : BOOL
17 : 181 { 0xb5 -75 } : BV:8
18 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
22 : eq(8, 21) : BOOL
23 : 187 { 0xbb -69 } : BV:8
24 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
25 : eq(8, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : lambda(1, 86) : FUNCTION[BV:32 -> BV:32]
88 : sym_const(87) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda537Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3053313796 { 0xb5fddf04 -1241653500 -1.98336839e236 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : 3231259447 { 0xc0991b37 -1063707849 -1.19614303e2 } : BV:32
10 : eq(8, 9) : BOOL
11 : 235 { 0xeb -21 } : BV:8
12 : 3165513265 { 0xbcade631 -1129454031 -1.35858738e250 } : BV:32
13 : eq(8, 12) : BOOL
14 : 223 { 0xdf -33 } : BV:8
15 : 3165513267 { 0xbcade633 -1129454029 -1.35858762e250 } : BV:32
16 : eq(8, 15) : BOOL
17 : 181 { 0xb5 -75 } : BV:8
18 : 3165513264 { 0xbcade630 -1129454032 -1.35858726e250 } : BV:32
19 : eq(8, 18) : BOOL
20 : 4 { 0x4 } : BV:8
21 : 3231259446 { 0xc0991b36 -1063707850 -1.19614291e2 } : BV:32
22 : eq(8, 21) : BOOL
23 : 187 { 0xbb -69 } : BV:8
24 : 3231259445 { 0xc0991b35 -1063707851 -1.19614279e2 } : BV:32
25 : eq(8, 24) : BOOL
26 : 123 { 0x7b } : BV:8
27 : 3165513266 { 0xbcade632 -1129454030 -1.35858750e250 } : BV:32
28 : eq(8, 27) : BOOL
29 : 253 { 0xfd -3 } : BV:8
30 : 0 { 0x0 } : BV:8
31 : ite(28, 29, 30) : BV:8
32 : ite(25, 26, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : ite(19, 20, 33) : BV:8
35 : ite(16, 17, 34) : BV:8
36 : ite(13, 14, 35) : BV:8
37 : ite(10, 11, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 9) : BOOL
41 : eq(39, 12) : BOOL
42 : eq(39, 15) : BOOL
43 : eq(39, 18) : BOOL
44 : eq(39, 21) : BOOL
45 : eq(39, 24) : BOOL
46 : eq(39, 27) : BOOL
47 : ite(46, 29, 30) : BV:8
48 : ite(45, 26, 47) : BV:8
49 : ite(44, 23, 48) : BV:8
50 : ite(43, 20, 49) : BV:8
51 : ite(42, 17, 50) : BV:8
52 : ite(41, 14, 51) : BV:8
53 : ite(40, 11, 52) : BV:8
54 : 1 { 0x1 +1.11e129 } : BV:32
55 : bvadd(54, 6, 7) : BV:32
56 : eq(55, 9) : BOOL
57 : eq(55, 12) : BOOL
58 : eq(55, 15) : BOOL
59 : eq(55, 18) : BOOL
60 : eq(55, 21) : BOOL
61 : eq(55, 24) : BOOL
62 : eq(55, 27) : BOOL
63 : ite(62, 29, 30) : BV:8
64 : ite(61, 26, 63) : BV:8
65 : ite(60, 23, 64) : BV:8
66 : ite(59, 20, 65) : BV:8
67 : ite(58, 17, 66) : BV:8
68 : ite(57, 14, 67) : BV:8
69 : ite(56, 11, 68) : BV:8
70 : bvadd(6, 7) : BV:32
71 : eq(70, 9) : BOOL
72 : eq(70, 12) : BOOL
73 : eq(70, 15) : BOOL
74 : eq(70, 18) : BOOL
75 : eq(70, 21) : BOOL
76 : eq(70, 24) : BOOL
77 : eq(70, 27) : BOOL
78 : ite(77, 29, 30) : BV:8
79 : ite(76, 26, 78) : BV:8
80 : ite(75, 23, 79) : BV:8
81 : ite(74, 20, 80) : BV:8
82 : ite(73, 17, 81) : BV:8
83 : ite(72, 14, 82) : BV:8
84 : ite(71, 11, 83) : BV:8
85 : bvconcat(37, 53, 69, 84) : BV:32
86 : ite(3, 2, 85) : BV:32
87 : ite(3, 2, 86) : BV:32
88 : lambda(1, 87) : FUNCTION[BV:32 -> BV:32]
89 : sym_const(88) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2653410048
=counter_example_end
=global nodece 5 num_edges_traversed 2
=global nodece 5 nodece_visted_pcs: 
L2%1%fcallStart_Lentry%1%fcallStart -> L2%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 6
=global nodece 6 nodece z3v487.ce68.num_edges_traversed0
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(epsilon)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3v487.ce68 611d7abd8c29f6d0ee4ec6f4ad3ea8be
=input.spec-%var-m1-1
1 : Lambda1045Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1046Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1051Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1052Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda1057Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1058Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda1063Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1064Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 16; 19 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 20; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 19 { 0x13 +1.226e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3701487241
=counter_example_end
=global nodece 6 num_edges_traversed 0
=global nodece 6 nodece_visted_pcs: 
L2%1%fcallStart_Lentry%1%fcallStart
=global nodece 7
=global nodece 7 nodece z3.ce69.num_edges_traversed0
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(epsilon)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3.ce69 eb04ecaab410319e3673e3a990d31b
=input.spec-%var-m1-1
1 : Lambda1085Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1086Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1091Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1092Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda1097Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1098Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda1103Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1104Var : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 175294363 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 175294364; 175294367 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 175294368; 3506595719 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3506595720; 3506595723 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3506595724; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3506595720 { 0xd1026788 -788371576 -1.1878452e35 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 175294364 { 0xa72c79c +1.89671659e149 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 175294364 { 0xa72c79c +1.89671659e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 175294367 { 0xa72c79f +1.89671695e149 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3506595720 { 0xd1026788 -788371576 -1.1878452e35 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3506595723 { 0xd102678b -788371573 -1.1878488e35 } : BV:32
=input.spec-%var-m1-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
451606825
=counter_example_end
=global nodece 7 num_edges_traversed 0
=global nodece 7 nodece_visted_pcs: 
L2%1%fcallStart_Lentry%1%fcallStart
=global nodece 8
=global nodece 8 nodece z3v487.ce234.num_edges_traversed0
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(epsilon)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce234 303845584b3b33291c7a22edea3ccad
=input.spec-%var-m1-1
1 : Lambda1804Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1805Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1809Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1810Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda1814Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1815Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda1819Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1820Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : ite(19, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 59 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 60; 63 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 64; 1074004223 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1074004224; 1074004227 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 1074004228; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 1074004224 { 0x40040100 +1.3128051e1 } : BV:32
=input.dst.llvm-%m1
1 : 71440384 { 0x4421800 +1.51635742e137 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 60 { 0x3c +1.715e129 } : BV:32
=input.dst.llvm-%m2
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 60 { 0x3c +1.715e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 63 { 0x3f +1.751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 1074004224 { 0x40040100 +1.3128051e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 1074004227 { 0x40040103 +1.3128087e1 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda1757Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda1763Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda1768Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda1769Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
37906386
=counter_example_end
=global nodece 8 num_edges_traversed 0
=global nodece 8 nodece_visted_pcs: 
L2%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 9
=global nodece 9 nodece z3.ce235.num_edges_traversed0
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(epsilon)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce235 1f40fd1ca19e7fbc28d2e7b8a35795e
=input.spec-%var-m1-1
1 : Lambda1840Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1841Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda1845Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1846Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda1850Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1851Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda1855Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda1856Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(18, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1152656967 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1152656968; 1152656971 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 1152656972; 2480284455 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2480284456; 2480284459 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2480284460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 1152656968 { 0x44b42648 +1.40741825e10 } : BV:32
=input.dst.llvm-%m1
1 : 2213208008 { 0x83eadfc8 -2081759288 -1.83495426e136 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2480284456 { 0x93d62328 -1814682840 -1.67294788e168 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2480284456 { 0x93d62328 -1814682840 -1.67294788e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2480284459 { 0x93d6232b -1814682837 -1.67294824e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 1152656968 { 0x44b42648 +1.40741825e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 1152656971 { 0x44b4264b +1.40741860e10 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda1772Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda1776Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda1783Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda1784Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2623885634
=counter_example_end
=global nodece 9 num_edges_traversed 0
=global nodece 9 nodece_visted_pcs: 
L2%1%fcallEnd_Lentry%1%fcallEnd
=global nodece 10
=global nodece 10 nodece z3v487.ce243.num_edges_traversed2
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
((L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)*(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3v487.ce243 2b50b96de5f39b76af2fbf7e25d492
=nextpc_const.1
1 : 1592460210 { 0x5eeb03b2 +1.83605027e62 } : BV:32
=input.spec-%var-m1-1
1 : Lambda2034Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2035Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2039Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2040Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 355202532, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-25.L2%3%fcallEnd
1 : 355202532 { 0x152bf5e4 +1.34344148e171 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda2044Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2045Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda2039Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2040Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1592460210 , 1000 , 0 ) -> 2046479295, () -> 1777699902, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 2046479295 { 0x79facbbf +1.95934283e116 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda1987Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda1993Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda1998Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda1999Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3819127420
=counter_example_end
=global nodece 10 num_edges_traversed 2
=global nodece 10 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart -> L2%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 11
=global nodece 11 nodece z3v487.ce261.num_edges_traversed2
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
((L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)*(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce261 991ef11c6ae3f95d7cf6c4ded52e8fe
=nextpc_const.1
1 : 238049515 { 0xe3058eb +1.37771356e157 } : BV:32
=input.spec-%var-m1-1
1 : Lambda2200Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2201Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2205Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2206Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 558794560, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%tmpvar-25.L2%3%fcallEnd
1 : 558794560 { 0x214e8740 +1.61350250e195 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda2210Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2211Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda2205Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2206Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 8; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 238049515 , 1000 , 0 ) -> 1096433619, () -> 407823310, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 1096433619 { 0x415a3fd3 +1.70507276e3 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda2153Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda2159Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda2164Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda2165Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1997365057
=counter_example_end
=global nodece 11 num_edges_traversed 2
=global nodece 11 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart -> L2%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 12
=global nodece 12 nodece z3.ce279.num_edges_traversed2
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
((L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)*(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce279 5569d5b8b7224d19d11e289e89c7b
=nextpc_const.1
1 : 882183842 { 0x34950ea2 +1.16450905e234 } : BV:32
=input.spec-%var-m1-1
1 : Lambda2494Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2495Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2500Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 1357494010, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-25.L2%3%fcallEnd
1 : 1357494010 { 0x50e9b6fa +1.82589650e34 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda2504Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2505Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda2499Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2500Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1668602163 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1668602164; 1668602167 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 1668602168; 3177372015 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3177372016; 3177372019 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3177372020; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3177372016 { 0xbd62d970 -1117595280 -1.77226066e251 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 1668602164 { 0x6374d934 +1.91287851e71 } : BV:32
=input.dst.llvm-%m2
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 882183842 , 1000 , 1073741824 ) -> 1567886199, () -> 24809276, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 1567886199 { 0x5d740b77 +1.90659987e59 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 1668602164 { 0x6374d934 +1.91287851e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 1668602167 { 0x6374d937 +1.91287887e71 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3177372016 { 0xbd62d970 -1117595280 -1.77226066e251 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3177372019 { 0xbd62d973 -1117595277 -1.77226102e251 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda2447Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda2451Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda2458Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda2459Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1746439475
=counter_example_end
=global nodece 12 num_edges_traversed 2
=global nodece 12 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart -> L2%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 13
=global nodece 13 nodece z3v487.ce297.num_edges_traversed2
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
((L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)*(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3v487.ce297 8e3e61f7177c3875dd81529a5f9dbb3
=nextpc_const.1
1 : 1395822885 { 0x53329125 +1.39505445e39 } : BV:32
=input.spec-%var-m1-1
1 : Lambda2660Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2661Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2665Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2666Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 1133366665, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-25.L2%3%fcallEnd
1 : 1133366665 { 0x438dcd89 +1.10783493e8 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda2670Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2671Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda2665Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2666Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 8; 2097151 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2097152; 2097155 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2097156; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%m2
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1395822885 , 1000 , 536870912 ) -> 2143922037, () -> 1827479522, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 2143922037 { 0x7fc9a775 +1.57542288e128 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2097152 { 0x200000 +1.25000000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2097155 { 0x200003 +1.25000035e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda2613Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda2619Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda2624Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda2625Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
848716869
=counter_example_end
=global nodece 13 num_edges_traversed 2
=global nodece 13 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart -> L2%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 14
=global nodece 14 nodece z3.ce298.num_edges_traversed1
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3.ce298 8f17e35e41021ea86854d3d24924e
=input.spec-%var-m1-1
1 : Lambda2696Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2697Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2701Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2702Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda2706Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2707Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda2711Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2712Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(18, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2013771783 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2013771784; 2013771787 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2013771788; 3555973739 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3555973740; 3555973743 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 3555973744; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2013771784 { 0x7807b808 +1.6030368e113 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 3555973740 { 0xd3f3da6c -738993556 -1.90510320e40 } : BV:32
=input.dst.llvm-%m2
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 3555973740 { 0xd3f3da6c -738993556 -1.90510320e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 3555973743 { 0xd3f3da6f -738993553 -1.90510356e40 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2013771784 { 0x7807b808 +1.6030368e113 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2013771787 { 0x7807b80b +1.6030404e113 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda2628Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda2632Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda2639Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda2640Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2212586101
=counter_example_end
=global nodece 14 num_edges_traversed 1
=global nodece 14 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart
=global nodece 15
=global nodece 15 nodece z3.ce315.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
((L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)*(L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd))
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce315 a0a771d0729ea9c49391416a5cd72ed
=nextpc_const.1
1 : 542016457 { 0x204e83c9 +1.61339676e193 } : BV:32
=input.spec-%var-m1-1
1 : Lambda2826Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2827Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2831Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2832Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=spec.func.call9cd42b1076fceba317d6fbd1c9d1dd6
1 : (() -> 487564701, ) : FUNCTION[MAP[BV:32 -> BV:32] -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-25.L2%3%fcallEnd
1 : 487564701 { 0x1d0fa59d +1.12224161e187 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda2836Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2837Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda2831Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2832Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 662375095 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 662375096; 662375099 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 662375100; 2459465779 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2459465780; 2459465783 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2459465784; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 662375096 { 0x277b0ab8 +1.96126461e207 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2459465780 { 0x92987834 -1835501516 -1.19116830e166 } : BV:32
=input.dst.llvm-%m2
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ([ 0; 4294967295 ] -> 0, ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 542016457 , 1000 , 2048 ) -> 1821559810, () -> 1713792450, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call1.Lentry%2%fcallEnd
1 : 1821559810 { 0x6c92cc02 +1.14685082e90 } : BV:32
=input.llvm-fcall_arg_copy.0.dst.llvm-%m2.Lentry%2%fcallEnd
1 : 2048 { 0x800 +1.24414e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2459465780 { 0x92987834 -1835501516 -1.19116830e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2459465783 { 0x92987837 -1835501513 -1.19116866e166 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 662375096 { 0x277b0ab8 +1.96126461e207 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 662375099 { 0x277b0abb +1.96126496e207 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda2779Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda2783Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda2790Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda2791Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2129705194
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart -> L2%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 16
=global nodece 16 nodece z3v487.ce316.num_edges_traversed1
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3v487.ce316 71d48fc76e803bfb79654b0f3672e4
=input.spec-%var-m1-1
1 : Lambda2862Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2863Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2867Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2868Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda2872Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2873Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda2877Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2878Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(18, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2051 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2052; 2055 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2056; 3221225487 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3221225488; 3221225491 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 3221225492; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 3221225488 { 0xc0000010 -1073741808 -1.190e1 } : BV:32
=input.dst.llvm-%m2
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 3221225488 { 0xc0000010 -1073741808 -1.190e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 3221225491 { 0xc0000013 -1073741805 -1.226e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2052 { 0x804 +1.24461e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2055 { 0x807 +1.24497e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda2794Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda2800Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda2805Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda2806Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3800698255
=counter_example_end
=global nodece 16 num_edges_traversed 1
=global nodece 16 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart
=global nodece 17
=global nodece 17 nodece z3.ce333.num_edges_traversed1
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce333 1a3d8ce317fc72b1566469dd45323ee
=input.spec-%var-m1-1
1 : Lambda2992Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2993Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda2997Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda2998Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda3002Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3003Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda3007Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3008Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(18, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1932750183 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1932750184; 1932750187 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 1932750188; 3063613519 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3063613520; 3063613523 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 3063613524; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 1932750184 { 0x73336d68 +1.40177631e103 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 3063613520 { 0xb69b0850 -1231353776 -1.21119117e238 } : BV:32
=input.dst.llvm-%m2
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 3063613520 { 0xb69b0850 -1231353776 -1.21119117e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 3063613523 { 0xb69b0853 -1231353773 -1.21119153e238 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 1932750184 { 0x73336d68 +1.40177631e103 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 1932750187 { 0x73336d6b +1.40177667e103 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda2945Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda2949Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda2956Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda2957Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1716263743
=counter_example_end
=global nodece 17 num_edges_traversed 1
=global nodece 17 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart
=global nodece 18
=global nodece 18 nodece z3.ce351.num_edges_traversed1
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3.ce351 4f1ab4e322c57a08129eb728b6e4e4
=input.spec-%var-m1-1
1 : Lambda3158Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3159Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda3163Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3164Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda3168Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3169Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda3173Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda3174Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(18, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1786482263 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1786482264; 1786482267 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 1786482268; 3547615067 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 3547615068; 3547615071 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 3547615072; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 3547615068 { 0xd3744f5c -747352228 -1.90867185e39 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 1786482264 { 0x6a7b8e58 +1.96528148e85 } : BV:32
=input.dst.llvm-%m2
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 1786482264 { 0x6a7b8e58 +1.96528148e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 1786482267 { 0x6a7b8e5b +1.96528184e85 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 3547615068 { 0xd3744f5c -747352228 -1.90867185e39 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 3547615071 { 0xd3744f5f -747352225 -1.90867221e39 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda3111Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda3115Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda3122Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda3123Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2402517065
=counter_example_end
=global nodece 18 num_edges_traversed 1
=global nodece 18 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart
=global nodece 19
=global nodece 19 nodece z3v487.ce567.num_edges_traversed0
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce567 2c32e21a2e564516a22f666db186be
=input.spec-%var-m1-1
1 : Lambda5044Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5045Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda5049Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5050Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda5054Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5055Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : ite(27, 2, 29) : BV:32
31 : ite(19, 2, 30) : BV:32
32 : lambda(17, 31) : FUNCTION[BV:32 -> BV:32]
33 : map(16, 32) : MAP[BV:32 -> BV:32]
34 : sym_const(33) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda5059Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5060Var : BV:32
18 : 60 { 0x3c +1.715e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(19, 2, 28) : BV:32
30 : ite(19, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 59 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 60; 63 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 64; 1074004223 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1074004224; 1074004227 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 1074004228; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 1074004224 { 0x40040100 +1.3128051e1 } : BV:32
=input.dst.llvm-%m1
1 : 71440384 { 0x4421800 +1.51635742e137 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 60 { 0x3c +1.715e129 } : BV:32
=input.dst.llvm-%m2
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 60 { 0x3c +1.715e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 63 { 0x3f +1.751e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 1074004224 { 0x40040100 +1.3128051e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 1074004227 { 0x40040103 +1.3128087e1 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda4997Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda5003Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : ite(17, 4, 19) : BV:32
21 : ite(3, 4, 20) : BV:32
22 : lambda(1, 21) : FUNCTION[BV:32 -> BV:32]
23 : sym_const(22) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda5008Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda5009Var : BV:32
2 : 60 { 0x3c +1.715e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 99 { 0x63 +1.1180e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 100 { 0x64 +1.1192e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : ite(17, 4, 4) : BV:32
19 : ite(3, 4, 18) : BV:32
20 : ite(3, 4, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2578858344
=counter_example_end
=global nodece 19 num_edges_traversed 0
=global nodece 19 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart
=global nodece 20
=global nodece 20 nodece z3.ce568.num_edges_traversed0
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce568 e5d7f0c8c47b7f7b685ddca9d7fd6b8
=input.spec-%var-m1-1
1 : Lambda5080Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5081Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda5085Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5086Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda5090Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5091Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda5095Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda5096Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(18, 2, 28) : BV:32
30 : lambda(17, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(16, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1152656967 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 1152656968; 1152656971 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 1152656972; 2480284455 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2480284456; 2480284459 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 2480284460; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 1152656968 { 0x44b42648 +1.40741825e10 } : BV:32
=input.dst.llvm-%m1
1 : 2213208008 { 0x83eadfc8 -2081759288 -1.83495426e136 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 2480284456 { 0x93d62328 -1814682840 -1.67294788e168 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 2480284456 { 0x93d62328 -1814682840 -1.67294788e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 2480284459 { 0x93d6232b -1814682837 -1.67294824e168 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 1152656968 { 0x44b42648 +1.40741825e10 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 1152656971 { 0x44b4264b +1.40741860e10 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda5012Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda5016Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda5023Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda5024Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
3286512202
=counter_example_end
=global nodece 20 num_edges_traversed 0
=global nodece 20 nodece_visted_pcs: 
L2%3%fcallStart_Lentry%2%fcallStart
=global nodece 21
=global nodece 21 nodece z3v487.ce918.num_edges_traversed0
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3v487.ce918 f5d9e1329686b5c52387fe957269f9
=input.spec-%var-m1-1
1 : Lambda7376Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7377Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda7381Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7382Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda7386Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7387Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda7391Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7392Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 8; 770047 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 770048; 770051 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 770052; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 770048 { 0xbc000 +1.9179687e129 } : BV:32
=input.dst.llvm-%m1
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%m2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 770048 { 0xbc000 +1.9179687e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 770051 { 0xbc003 +1.9179723e129 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda7326Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda7332Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda7338Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda7339Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
703913694
=counter_example_end
=global nodece 21 num_edges_traversed 0
=global nodece 21 nodece_visted_pcs: 
L2%3%fcallEnd_Lentry%2%fcallEnd
=global nodece 22
=global nodece 22 nodece z3.ce919.num_edges_traversed0
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(epsilon)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce919 83f9e09c8049822783d8483f8988690
=input.spec-%var-m1-1
1 : Lambda7412Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7413Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-m2-1
1 : Lambda7417Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7418Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-24.L2%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-fi-0.L2%3%fcallStart
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd
1 : Lambda7422Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7423Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : lambda(17, 28) : FUNCTION[BV:32 -> BV:32]
30 : map(16, 29) : MAP[BV:32 -> BV:32]
31 : sym_const(30) : MAP[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd
1 : Lambda7427Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda7428Var : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(18, 2, 27) : BV:32
29 : ite(26, 2, 28) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 949744623 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 949744624; 949744627 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/, [ 949744628; 2217469623 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, [ 2217469624; 2217469627 ] -> memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/, [ 2217469628; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___foo__x__=L0%0%argnum0=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___bar__x__=L0%0%argnum0=/
1 : 2217469624 { 0x842be6b8 -2077497672 -1.34297847e137 } : BV:32
=input.dst.llvm-%m1
1 : 3085942015 { 0xb7efbcff -1209025281 -1.87295520e240 } : BV:32
=input.dst.local./*___y___bar__x__=L0%0%argnum1=/
1 : 949744624 { 0x389bf3f0 +1.21838188e242 } : BV:32
=input.dst.llvm-%m2
1 : 1055871957 { 0x3eef53d5 +1.86974585e254 } : BV:32
=input.dst.llvm-mem.Lentry%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%call.Lentry%1%fcallEnd
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lentry%2%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin
1 : 949744624 { 0x389bf3f0 +1.21838188e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end
1 : 949744627 { 0x389bf3f3 +1.21838223e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin
1 : 2217469624 { 0x842be6b8 -2077497672 -1.34297847e137 } : BV:32
=input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end
1 : 2217469627 { 0x842be6bb -2077497669 -1.34297883e137 } : BV:32
=input.spec-%var-m1-1.1.1
1 : Lambda7343Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m1-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd.1.1
1 : Lambda7347Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-m2-1.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m2-1.1.1
1 : Lambda7355Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : lambda(1, 18) : FUNCTION[BV:32 -> BV:32]
20 : sym_const(19) : FUNCTION[BV:32 -> BV:32]
=input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd.1.1
1 : Lambda7356Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 99 { 0x63 +1.1180e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 100 { 0x64 +1.1192e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(3, 2, 17) : BV:32
19 : ite(16, 2, 18) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
1858239925
=counter_example_end
=global nodece 22 num_edges_traversed 0
=global nodece 22 nodece_visted_pcs: 
L2%3%fcallEnd_Lentry%2%fcallEnd
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.dst.llvm-%m1 : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=inductive-invariants point_set point_expr 4
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 5
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 6
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 8
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=inductive-invariants point_set point_expr 21
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
=inductive-invariants point_set point_expr 24
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=inductive-invariants point_set point_expr 25
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 38
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 39
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 40
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 41
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 2 for input.dst.llvm-%m1
4294835196
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 3 for input.dst.llvm-%m2
1069514648
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
296778211
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
15058894
=inductive-invariants point_set point z3.ce3 expr point z3.ce3 done
=inductive-invariants point_set point z3.ce54
=inductive-invariants point_set point z3.ce54 expr point z3.ce54
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 2 for input.dst.llvm-%m1
4026464256
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 val 3 for input.dst.llvm-%m2
1844787968
=inductive-invariants point_set point z3.ce54 expr point z3.ce54 done
=inductive-invariants point_set point z3v487.ce41
=inductive-invariants point_set point z3v487.ce41 expr point z3v487.ce41
=inductive-invariants point_set point z3v487.ce41 expr point z3v487.ce41 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce41 expr point z3v487.ce41 val 2 for input.dst.llvm-%m1
2359296
=inductive-invariants point_set point z3v487.ce41 expr point z3v487.ce41 val 3 for input.dst.llvm-%m2
135550212
=inductive-invariants point_set point z3v487.ce41 expr point z3v487.ce41 done
=inductive-invariants point_set point z3v487.ce12
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 2 for input.dst.llvm-%m1
2282449920
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
853186023
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
91088095
=inductive-invariants point_set point z3v487.ce12 expr point z3v487.ce12 done
=inductive-invariants point_set point z3.ce13
=inductive-invariants point_set point z3.ce13 expr point z3.ce13
=inductive-invariants point_set point z3.ce13 expr point z3.ce13 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce13 expr point z3.ce13 val 2 for input.dst.llvm-%m1
4250858240
=inductive-invariants point_set point z3.ce13 expr point z3.ce13 val 3 for input.dst.llvm-%m2
67108864
=inductive-invariants point_set point z3.ce13 expr point z3.ce13 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1552888285
=inductive-invariants point_set point z3.ce13 expr point z3.ce13 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
164675230
=inductive-invariants point_set point z3.ce13 expr point z3.ce13 done
=inductive-invariants point_set point z3.ce40
=inductive-invariants point_set point z3.ce40 expr point z3.ce40
=inductive-invariants point_set point z3.ce40 expr point z3.ce40 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce40 expr point z3.ce40 val 2 for input.dst.llvm-%m1
3954932480
=inductive-invariants point_set point z3.ce40 expr point z3.ce40 val 3 for input.dst.llvm-%m2
3053313796
=inductive-invariants point_set point z3.ce40 expr point z3.ce40 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
319143848
=inductive-invariants point_set point z3.ce40 expr point z3.ce40 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2113103272
=inductive-invariants point_set point z3.ce40 expr point z3.ce40 done
=inductive-invariants point_set point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 2 for input.dst.llvm-%m1
48103444
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 3 for input.dst.llvm-%m2
2145452032
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1968286926
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1938659769
=inductive-invariants point_set point z3v487.ce26 expr point z3v487.ce26 done
=inductive-invariants point_set point z3.ce27
=inductive-invariants point_set point z3.ce27 expr point z3.ce27
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 2 for input.dst.llvm-%m1
1668612096
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 val 3 for input.dst.llvm-%m2
3555655808
=inductive-invariants point_set point z3.ce27 expr point z3.ce27 done
=inductive-invariants point_set point z3v487.ce243
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
355202532
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
2046479295
=inductive-invariants point_set point z3v487.ce243 expr point z3v487.ce243 done
=inductive-invariants point_set point z3.ce244
=inductive-invariants point_set point z3.ce244 expr point z3.ce244
=inductive-invariants point_set point z3.ce244 expr point z3.ce244 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce244 expr point z3.ce244 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce244 expr point z3.ce244 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce244 expr point z3.ce244 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce244 expr point z3.ce244 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce244 expr point z3.ce244 done
=inductive-invariants point_set point z3v487.ce261
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
4294967295
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
4294967295
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
4294967295
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
558794560
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1096433619
=inductive-invariants point_set point z3v487.ce261 expr point z3v487.ce261 done
=inductive-invariants point_set point z3.ce262
=inductive-invariants point_set point z3.ce262 expr point z3.ce262
=inductive-invariants point_set point z3.ce262 expr point z3.ce262 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce262 expr point z3.ce262 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce262 expr point z3.ce262 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
4294967295
=inductive-invariants point_set point z3.ce262 expr point z3.ce262 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
4294967295
=inductive-invariants point_set point z3.ce262 expr point z3.ce262 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
4294967295
=inductive-invariants point_set point z3.ce262 expr point z3.ce262 done
=inductive-invariants point_set point z3v487.ce55
=inductive-invariants point_set point z3v487.ce55 expr point z3v487.ce55
=inductive-invariants point_set point z3v487.ce55 expr point z3v487.ce55 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce55 expr point z3v487.ce55 val 2 for input.dst.llvm-%m1
3676881152
=inductive-invariants point_set point z3v487.ce55 expr point z3v487.ce55 val 3 for input.dst.llvm-%m2
406202368
=inductive-invariants point_set point z3v487.ce55 expr point z3v487.ce55 done
=inductive-invariants point_set point z3v487.ce68
=inductive-invariants point_set point z3v487.ce68 expr point z3v487.ce68
=inductive-invariants point_set point z3v487.ce68 expr point z3v487.ce68 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce68 expr point z3v487.ce68 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce68 expr point z3v487.ce68 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1087767945
=inductive-invariants point_set point z3v487.ce68 expr point z3v487.ce68 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1822182681
=inductive-invariants point_set point z3v487.ce68 expr point z3v487.ce68 done
=inductive-invariants point_set point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
315626070
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1377408397
=inductive-invariants point_set point z3.ce69 expr point z3.ce69 done
=inductive-invariants point_set point z3v487.ce126
=inductive-invariants point_set point z3v487.ce126 expr point z3v487.ce126
=inductive-invariants point_set point z3v487.ce126 expr point z3v487.ce126 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce126 expr point z3v487.ce126 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce126 expr point z3v487.ce126 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
66250016
=inductive-invariants point_set point z3v487.ce126 expr point z3v487.ce126 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
16777216
=inductive-invariants point_set point z3v487.ce126 expr point z3v487.ce126 done
=inductive-invariants point_set point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 3 for input.dst.llvm-%m2
271666440
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
426774041
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1126875894
=inductive-invariants point_set point z3v487.ce135 expr point z3v487.ce135 done
=inductive-invariants point_set point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 3 for input.dst.llvm-%m2
3978819460
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
882407409
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
532138401
=inductive-invariants point_set point z3.ce136 expr point z3.ce136 done
=inductive-invariants point_set point z3v487.ce153
=inductive-invariants point_set point z3v487.ce153 expr point z3v487.ce153
=inductive-invariants point_set point z3v487.ce153 expr point z3v487.ce153 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce153 expr point z3v487.ce153 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce153 expr point z3v487.ce153 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
66250016
=inductive-invariants point_set point z3v487.ce153 expr point z3v487.ce153 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
16777216
=inductive-invariants point_set point z3v487.ce153 expr point z3v487.ce153 done
=inductive-invariants point_set point z3v487.ce162
=inductive-invariants point_set point z3v487.ce162 expr point z3v487.ce162
=inductive-invariants point_set point z3v487.ce162 expr point z3v487.ce162 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce162 expr point z3v487.ce162 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce162 expr point z3v487.ce162 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
480680441
=inductive-invariants point_set point z3v487.ce162 expr point z3v487.ce162 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
67108864
=inductive-invariants point_set point z3v487.ce162 expr point z3v487.ce162 done
=inductive-invariants point_set point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 3 for input.dst.llvm-%m2
271666440
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
426774041
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1126875894
=inductive-invariants point_set point z3v487.ce180 expr point z3v487.ce180 done
=inductive-invariants point_set point z3v487.ce171
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
480680441
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
67108864
=inductive-invariants point_set point z3v487.ce171 expr point z3v487.ce171 done
=inductive-invariants point_set point z3.ce208
=inductive-invariants point_set point z3.ce208 expr point z3.ce208
=inductive-invariants point_set point z3.ce208 expr point z3.ce208 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce208 expr point z3.ce208 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce208 expr point z3.ce208 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1277662529
=inductive-invariants point_set point z3.ce208 expr point z3.ce208 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
133983145
=inductive-invariants point_set point z3.ce208 expr point z3.ce208 done
=inductive-invariants point_set point z3v487.ce207
=inductive-invariants point_set point z3v487.ce207 expr point z3v487.ce207
=inductive-invariants point_set point z3v487.ce207 expr point z3v487.ce207 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce207 expr point z3v487.ce207 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce207 expr point z3v487.ce207 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1340170845
=inductive-invariants point_set point z3v487.ce207 expr point z3v487.ce207 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
913046208
=inductive-invariants point_set point z3v487.ce207 expr point z3v487.ce207 done
=inductive-invariants point_set point z3.ce181
=inductive-invariants point_set point z3.ce181 expr point z3.ce181
=inductive-invariants point_set point z3.ce181 expr point z3.ce181 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce181 expr point z3.ce181 val 3 for input.dst.llvm-%m2
3978819460
=inductive-invariants point_set point z3.ce181 expr point z3.ce181 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
882407409
=inductive-invariants point_set point z3.ce181 expr point z3.ce181 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
532138401
=inductive-invariants point_set point z3.ce181 expr point z3.ce181 done
=inductive-invariants point_set point z3v487.ce198
=inductive-invariants point_set point z3v487.ce198 expr point z3v487.ce198
=inductive-invariants point_set point z3v487.ce198 expr point z3v487.ce198 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce198 expr point z3v487.ce198 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce198 expr point z3v487.ce198 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
480680441
=inductive-invariants point_set point z3v487.ce198 expr point z3v487.ce198 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
67108864
=inductive-invariants point_set point z3v487.ce198 expr point z3v487.ce198 done
=inductive-invariants point_set point z3v487.ce225
=inductive-invariants point_set point z3v487.ce225 expr point z3v487.ce225
=inductive-invariants point_set point z3v487.ce225 expr point z3v487.ce225 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce225 expr point z3v487.ce225 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce225 expr point z3v487.ce225 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
480680441
=inductive-invariants point_set point z3v487.ce225 expr point z3v487.ce225 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
67108864
=inductive-invariants point_set point z3v487.ce225 expr point z3v487.ce225 done
=inductive-invariants point_set point z3v487.ce442
=inductive-invariants point_set point z3v487.ce442 expr point z3v487.ce442
=inductive-invariants point_set point z3v487.ce442 expr point z3v487.ce442 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce442 expr point z3v487.ce442 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce442 expr point z3v487.ce442 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
532608
=inductive-invariants point_set point z3v487.ce442 expr point z3v487.ce442 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
532608
=inductive-invariants point_set point z3v487.ce442 expr point z3v487.ce442 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
532608
=inductive-invariants point_set point z3v487.ce442 expr point z3v487.ce442 done
=inductive-invariants point_set point z3.ce406
=inductive-invariants point_set point z3.ce406 expr point z3.ce406
=inductive-invariants point_set point z3.ce406 expr point z3.ce406 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce406 expr point z3.ce406 val 3 for input.dst.llvm-%m2
2147483632
=inductive-invariants point_set point z3.ce406 expr point z3.ce406 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce406 expr point z3.ce406 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce406 expr point z3.ce406 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce406 expr point z3.ce406 done
=inductive-invariants point_set point z3v487.ce423
=inductive-invariants point_set point z3v487.ce423 expr point z3v487.ce423
=inductive-invariants point_set point z3v487.ce423 expr point z3v487.ce423 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce423 expr point z3v487.ce423 val 3 for input.dst.llvm-%m2
1073741832
=inductive-invariants point_set point z3v487.ce423 expr point z3v487.ce423 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce423 expr point z3v487.ce423 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce423 expr point z3v487.ce423 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce423 expr point z3v487.ce423 done
=inductive-invariants point_set point z3.ce424
=inductive-invariants point_set point z3.ce424 expr point z3.ce424
=inductive-invariants point_set point z3.ce424 expr point z3.ce424 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce424 expr point z3.ce424 val 3 for input.dst.llvm-%m2
3904782664
=inductive-invariants point_set point z3.ce424 expr point z3.ce424 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce424 expr point z3.ce424 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce424 expr point z3.ce424 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce424 expr point z3.ce424 done
=inductive-invariants point_set point z3.ce370
=inductive-invariants point_set point z3.ce370 expr point z3.ce370
=inductive-invariants point_set point z3.ce370 expr point z3.ce370 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce370 expr point z3.ce370 val 3 for input.dst.llvm-%m2
134217728
=inductive-invariants point_set point z3.ce370 expr point z3.ce370 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
2084569092
=inductive-invariants point_set point z3.ce370 expr point z3.ce370 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2084569092
=inductive-invariants point_set point z3.ce370 expr point z3.ce370 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
2084569092
=inductive-invariants point_set point z3.ce370 expr point z3.ce370 done
=inductive-invariants point_set point z3v487.ce280
=inductive-invariants point_set point z3v487.ce280 expr point z3v487.ce280
=inductive-invariants point_set point z3v487.ce280 expr point z3v487.ce280 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce280 expr point z3v487.ce280 val 3 for input.dst.llvm-%m2
1073741824
=inductive-invariants point_set point z3v487.ce280 expr point z3v487.ce280 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce280 expr point z3v487.ce280 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce280 expr point z3v487.ce280 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce280 expr point z3v487.ce280 done
=inductive-invariants point_set point z3.ce279
=inductive-invariants point_set point z3.ce279 expr point z3.ce279
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 val 3 for input.dst.llvm-%m2
1073741824
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1357494010
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1567886199
=inductive-invariants point_set point z3.ce279 expr point z3.ce279 done
=inductive-invariants point_set point z3.ce315
=inductive-invariants point_set point z3.ce315 expr point z3.ce315
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 3 for input.dst.llvm-%m2
2048
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
487564701
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1821559810
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 done
=inductive-invariants point_set point z3v487.ce369
=inductive-invariants point_set point z3v487.ce369 expr point z3v487.ce369
=inductive-invariants point_set point z3v487.ce369 expr point z3v487.ce369 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce369 expr point z3v487.ce369 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce369 expr point z3v487.ce369 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
2286028032
=inductive-invariants point_set point z3v487.ce369 expr point z3v487.ce369 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2286028032
=inductive-invariants point_set point z3v487.ce369 expr point z3v487.ce369 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
2286028032
=inductive-invariants point_set point z3v487.ce369 expr point z3v487.ce369 done
=inductive-invariants point_set point z3.ce333
=inductive-invariants point_set point z3.ce333 expr point z3.ce333
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 val 3 for input.dst.llvm-%m2
8
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1270805498
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
601193580
=inductive-invariants point_set point z3.ce333 expr point z3.ce333 done
=inductive-invariants point_set point z3v487.ce297
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 val 3 for input.dst.llvm-%m2
536870912
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1133366665
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
2143922037
=inductive-invariants point_set point z3v487.ce297 expr point z3v487.ce297 done
=inductive-invariants point_set point z3.ce298
=inductive-invariants point_set point z3.ce298 expr point z3.ce298
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 val 3 for input.dst.llvm-%m2
1048576
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
770894873
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1999265101
=inductive-invariants point_set point z3.ce298 expr point z3.ce298 done
=inductive-invariants point_set point z3.ce351
=inductive-invariants point_set point z3.ce351 expr point z3.ce351
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 val 3 for input.dst.llvm-%m2
4
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1313731898
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
724704710
=inductive-invariants point_set point z3.ce351 expr point z3.ce351 done
=inductive-invariants point_set point z3v487.ce316
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 3 for input.dst.llvm-%m2
64
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1670351212
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
261886207
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 done
=inductive-invariants point_set point z3v487.ce334
=inductive-invariants point_set point z3v487.ce334 expr point z3v487.ce334
=inductive-invariants point_set point z3v487.ce334 expr point z3v487.ce334 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce334 expr point z3v487.ce334 val 3 for input.dst.llvm-%m2
8
=inductive-invariants point_set point z3v487.ce334 expr point z3v487.ce334 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce334 expr point z3v487.ce334 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce334 expr point z3v487.ce334 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce334 expr point z3v487.ce334 done
=inductive-invariants point_set point z3v487.ce352
=inductive-invariants point_set point z3v487.ce352 expr point z3v487.ce352
=inductive-invariants point_set point z3v487.ce352 expr point z3v487.ce352 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce352 expr point z3v487.ce352 val 3 for input.dst.llvm-%m2
4
=inductive-invariants point_set point z3v487.ce352 expr point z3v487.ce352 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce352 expr point z3v487.ce352 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce352 expr point z3v487.ce352 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce352 expr point z3v487.ce352 done
=inductive-invariants point_set point z3v487.ce387
=inductive-invariants point_set point z3v487.ce387 expr point z3v487.ce387
=inductive-invariants point_set point z3v487.ce387 expr point z3v487.ce387 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce387 expr point z3v487.ce387 val 3 for input.dst.llvm-%m2
35127296
=inductive-invariants point_set point z3v487.ce387 expr point z3v487.ce387 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce387 expr point z3v487.ce387 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce387 expr point z3v487.ce387 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce387 expr point z3v487.ce387 done
=inductive-invariants point_set point z3.ce388
=inductive-invariants point_set point z3.ce388 expr point z3.ce388
=inductive-invariants point_set point z3.ce388 expr point z3.ce388 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce388 expr point z3.ce388 val 3 for input.dst.llvm-%m2
2147483632
=inductive-invariants point_set point z3.ce388 expr point z3.ce388 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce388 expr point z3.ce388 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce388 expr point z3.ce388 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce388 expr point z3.ce388 done
=inductive-invariants point_set point z3v487.ce405
=inductive-invariants point_set point z3v487.ce405 expr point z3v487.ce405
=inductive-invariants point_set point z3v487.ce405 expr point z3v487.ce405 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce405 expr point z3v487.ce405 val 3 for input.dst.llvm-%m2
2160599552
=inductive-invariants point_set point z3v487.ce405 expr point z3v487.ce405 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce405 expr point z3v487.ce405 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce405 expr point z3v487.ce405 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce405 expr point z3v487.ce405 done
=inductive-invariants point_set point z3v487.ce459
=inductive-invariants point_set point z3v487.ce459 expr point z3v487.ce459
=inductive-invariants point_set point z3v487.ce459 expr point z3v487.ce459 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce459 expr point z3v487.ce459 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce459 expr point z3v487.ce459 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
134283264
=inductive-invariants point_set point z3v487.ce459 expr point z3v487.ce459 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
134283264
=inductive-invariants point_set point z3v487.ce459 expr point z3v487.ce459 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
134283264
=inductive-invariants point_set point z3v487.ce459 expr point z3v487.ce459 done
=inductive-invariants point_set point z3v487.ce514
=inductive-invariants point_set point z3v487.ce514 expr point z3v487.ce514
=inductive-invariants point_set point z3v487.ce514 expr point z3v487.ce514 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce514 expr point z3v487.ce514 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce514 expr point z3v487.ce514 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
532608
=inductive-invariants point_set point z3v487.ce514 expr point z3v487.ce514 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
532608
=inductive-invariants point_set point z3v487.ce514 expr point z3v487.ce514 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
532608
=inductive-invariants point_set point z3v487.ce514 expr point z3v487.ce514 done
=inductive-invariants point_set point z3.ce460
=inductive-invariants point_set point z3.ce460 expr point z3.ce460
=inductive-invariants point_set point z3.ce460 expr point z3.ce460 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce460 expr point z3.ce460 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce460 expr point z3.ce460 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
2952789892
=inductive-invariants point_set point z3.ce460 expr point z3.ce460 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2952789892
=inductive-invariants point_set point z3.ce460 expr point z3.ce460 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
2952789892
=inductive-invariants point_set point z3.ce460 expr point z3.ce460 done
=inductive-invariants point_set point z3.ce496
=inductive-invariants point_set point z3.ce496 expr point z3.ce496
=inductive-invariants point_set point z3.ce496 expr point z3.ce496 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce496 expr point z3.ce496 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce496 expr point z3.ce496 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce496 expr point z3.ce496 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce496 expr point z3.ce496 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce496 expr point z3.ce496 done
=inductive-invariants point_set point z3v487.ce477
=inductive-invariants point_set point z3v487.ce477 expr point z3v487.ce477
=inductive-invariants point_set point z3v487.ce477 expr point z3v487.ce477 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce477 expr point z3v487.ce477 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce477 expr point z3v487.ce477 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
2286028032
=inductive-invariants point_set point z3v487.ce477 expr point z3v487.ce477 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2286028032
=inductive-invariants point_set point z3v487.ce477 expr point z3v487.ce477 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
2286028032
=inductive-invariants point_set point z3v487.ce477 expr point z3v487.ce477 done
=inductive-invariants point_set point z3.ce478
=inductive-invariants point_set point z3.ce478 expr point z3.ce478
=inductive-invariants point_set point z3.ce478 expr point z3.ce478 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce478 expr point z3.ce478 val 3 for input.dst.llvm-%m2
134217728
=inductive-invariants point_set point z3.ce478 expr point z3.ce478 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
2084569092
=inductive-invariants point_set point z3.ce478 expr point z3.ce478 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2084569092
=inductive-invariants point_set point z3.ce478 expr point z3.ce478 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
2084569092
=inductive-invariants point_set point z3.ce478 expr point z3.ce478 done
=inductive-invariants point_set point z3.ce513
=inductive-invariants point_set point z3.ce513 expr point z3.ce513
=inductive-invariants point_set point z3.ce513 expr point z3.ce513 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce513 expr point z3.ce513 val 3 for input.dst.llvm-%m2
134217728
=inductive-invariants point_set point z3.ce513 expr point z3.ce513 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
204
=inductive-invariants point_set point z3.ce513 expr point z3.ce513 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
204
=inductive-invariants point_set point z3.ce513 expr point z3.ce513 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
204
=inductive-invariants point_set point z3.ce513 expr point z3.ce513 done
=inductive-invariants point_set point z3v487.ce495
=inductive-invariants point_set point z3v487.ce495 expr point z3v487.ce495
=inductive-invariants point_set point z3v487.ce495 expr point z3v487.ce495 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce495 expr point z3v487.ce495 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce495 expr point z3v487.ce495 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce495 expr point z3v487.ce495 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce495 expr point z3v487.ce495 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce495 expr point z3v487.ce495 done
=inductive-invariants point_set point z3.ce441
=inductive-invariants point_set point z3.ce441 expr point z3.ce441
=inductive-invariants point_set point z3.ce441 expr point z3.ce441 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce441 expr point z3.ce441 val 3 for input.dst.llvm-%m2
134217728
=inductive-invariants point_set point z3.ce441 expr point z3.ce441 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
204
=inductive-invariants point_set point z3.ce441 expr point z3.ce441 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
204
=inductive-invariants point_set point z3.ce441 expr point z3.ce441 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
204
=inductive-invariants point_set point z3.ce441 expr point z3.ce441 done
=inductive-invariants point_set point z3v487.ce549
=inductive-invariants point_set point z3v487.ce549 expr point z3v487.ce549
=inductive-invariants point_set point z3v487.ce549 expr point z3v487.ce549 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce549 expr point z3v487.ce549 val 3 for input.dst.llvm-%m2
671127680
=inductive-invariants point_set point z3v487.ce549 expr point z3v487.ce549 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce549 expr point z3v487.ce549 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce549 expr point z3v487.ce549 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce549 expr point z3v487.ce549 done
=inductive-invariants point_set point z3.ce550
=inductive-invariants point_set point z3.ce550 expr point z3.ce550
=inductive-invariants point_set point z3.ce550 expr point z3.ce550 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce550 expr point z3.ce550 val 3 for input.dst.llvm-%m2
3904782664
=inductive-invariants point_set point z3.ce550 expr point z3.ce550 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce550 expr point z3.ce550 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce550 expr point z3.ce550 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce550 expr point z3.ce550 done
=inductive-invariants point_set point z3v487.ce567
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1942263560
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1403564338
=inductive-invariants point_set point z3v487.ce567 expr point z3v487.ce567 done
=inductive-invariants point_set point z3.ce568
=inductive-invariants point_set point z3.ce568 expr point z3.ce568
=inductive-invariants point_set point z3.ce568 expr point z3.ce568 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce568 expr point z3.ce568 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce568 expr point z3.ce568 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce568 expr point z3.ce568 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce568 expr point z3.ce568 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
112909546
=inductive-invariants point_set point z3.ce568 expr point z3.ce568 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
527975818
=inductive-invariants point_set point z3.ce568 expr point z3.ce568 done
=inductive-invariants point_set point z3v487.ce657
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
159383552
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
159383552
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
159383552
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
2123033178
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
921732547
=inductive-invariants point_set point z3v487.ce657 expr point z3v487.ce657 done
=inductive-invariants point_set point z3.ce658
=inductive-invariants point_set point z3.ce658 expr point z3.ce658
=inductive-invariants point_set point z3.ce658 expr point z3.ce658 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce658 expr point z3.ce658 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
645559956
=inductive-invariants point_set point z3.ce658 expr point z3.ce658 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
645559956
=inductive-invariants point_set point z3.ce658 expr point z3.ce658 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
645559956
=inductive-invariants point_set point z3.ce658 expr point z3.ce658 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1505483769
=inductive-invariants point_set point z3.ce658 expr point z3.ce658 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
566989206
=inductive-invariants point_set point z3.ce658 expr point z3.ce658 done
=inductive-invariants point_set point z3.ce532
=inductive-invariants point_set point z3.ce532 expr point z3.ce532
=inductive-invariants point_set point z3.ce532 expr point z3.ce532 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce532 expr point z3.ce532 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3.ce532 expr point z3.ce532 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
2952789892
=inductive-invariants point_set point z3.ce532 expr point z3.ce532 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
2952789892
=inductive-invariants point_set point z3.ce532 expr point z3.ce532 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
2952789892
=inductive-invariants point_set point z3.ce532 expr point z3.ce532 done
=inductive-invariants point_set point z3v487.ce531
=inductive-invariants point_set point z3v487.ce531 expr point z3v487.ce531
=inductive-invariants point_set point z3v487.ce531 expr point z3v487.ce531 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce531 expr point z3v487.ce531 val 3 for input.dst.llvm-%m2
0
=inductive-invariants point_set point z3v487.ce531 expr point z3v487.ce531 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
134283264
=inductive-invariants point_set point z3v487.ce531 expr point z3v487.ce531 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
134283264
=inductive-invariants point_set point z3v487.ce531 expr point z3v487.ce531 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
134283264
=inductive-invariants point_set point z3v487.ce531 expr point z3v487.ce531 done
=inductive-invariants point_set point z3v487.ce676
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
16
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
16
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
16
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
669931611
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
944172185
=inductive-invariants point_set point z3v487.ce676 expr point z3v487.ce676 done
=inductive-invariants point_set point z3.ce675
=inductive-invariants point_set point z3.ce675 expr point z3.ce675
=inductive-invariants point_set point z3.ce675 expr point z3.ce675 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce675 expr point z3.ce675 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
3221225476
=inductive-invariants point_set point z3.ce675 expr point z3.ce675 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
3221225476
=inductive-invariants point_set point z3.ce675 expr point z3.ce675 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
3221225476
=inductive-invariants point_set point z3.ce675 expr point z3.ce675 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
366364640
=inductive-invariants point_set point z3.ce675 expr point z3.ce675 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1949912645
=inductive-invariants point_set point z3.ce675 expr point z3.ce675 done
=inductive-invariants point_set point z3v487.ce756
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
203686944
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
203686944
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
203686944
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
2071965199
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1188253265
=inductive-invariants point_set point z3v487.ce756 expr point z3v487.ce756 done
=inductive-invariants point_set point z3.ce757
=inductive-invariants point_set point z3.ce757 expr point z3.ce757
=inductive-invariants point_set point z3.ce757 expr point z3.ce757 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce757 expr point z3.ce757 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1509739256
=inductive-invariants point_set point z3.ce757 expr point z3.ce757 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1509739256
=inductive-invariants point_set point z3.ce757 expr point z3.ce757 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
1509739256
=inductive-invariants point_set point z3.ce757 expr point z3.ce757 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1355627801
=inductive-invariants point_set point z3.ce757 expr point z3.ce757 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
958060475
=inductive-invariants point_set point z3.ce757 expr point z3.ce757 done
=inductive-invariants point_set point z3.ce783
=inductive-invariants point_set point z3.ce783 expr point z3.ce783
=inductive-invariants point_set point z3.ce783 expr point z3.ce783 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce783 expr point z3.ce783 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
3221225476
=inductive-invariants point_set point z3.ce783 expr point z3.ce783 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
3221225476
=inductive-invariants point_set point z3.ce783 expr point z3.ce783 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
3221225476
=inductive-invariants point_set point z3.ce783 expr point z3.ce783 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
366364640
=inductive-invariants point_set point z3.ce783 expr point z3.ce783 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1949912645
=inductive-invariants point_set point z3.ce783 expr point z3.ce783 done
=inductive-invariants point_set point z3v487.ce774
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
92893930
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
335560738
=inductive-invariants point_set point z3v487.ce774 expr point z3v487.ce774 done
=inductive-invariants point_set point z3v487.ce784
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
16
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
16
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
16
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
669931611
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
944172185
=inductive-invariants point_set point z3v487.ce784 expr point z3v487.ce784 done
=inductive-invariants point_set point z3v487.ce801
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1472999667
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
0
=inductive-invariants point_set point z3v487.ce801 expr point z3v487.ce801 done
=inductive-invariants point_set point z3v487.ce810
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
2030782876
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
134217728
=inductive-invariants point_set point z3v487.ce810 expr point z3v487.ce810 done
=inductive-invariants point_set point z3v487.ce819
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1496602711
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
541068304
=inductive-invariants point_set point z3v487.ce819 expr point z3v487.ce819 done
=inductive-invariants point_set point z3.ce721
=inductive-invariants point_set point z3.ce721 expr point z3.ce721
=inductive-invariants point_set point z3.ce721 expr point z3.ce721 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce721 expr point z3.ce721 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
645559956
=inductive-invariants point_set point z3.ce721 expr point z3.ce721 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
645559956
=inductive-invariants point_set point z3.ce721 expr point z3.ce721 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
645559956
=inductive-invariants point_set point z3.ce721 expr point z3.ce721 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
534348239
=inductive-invariants point_set point z3.ce721 expr point z3.ce721 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1496041205
=inductive-invariants point_set point z3.ce721 expr point z3.ce721 done
=inductive-invariants point_set point z3v487.ce738
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
203686944
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
203686944
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
203686944
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
2071965199
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1188253265
=inductive-invariants point_set point z3v487.ce738 expr point z3v487.ce738 done
=inductive-invariants point_set point z3.ce739
=inductive-invariants point_set point z3.ce739 expr point z3.ce739
=inductive-invariants point_set point z3.ce739 expr point z3.ce739 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce739 expr point z3.ce739 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1509739256
=inductive-invariants point_set point z3.ce739 expr point z3.ce739 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1509739256
=inductive-invariants point_set point z3.ce739 expr point z3.ce739 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
1509739256
=inductive-invariants point_set point z3.ce739 expr point z3.ce739 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1355627801
=inductive-invariants point_set point z3.ce739 expr point z3.ce739 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
958060475
=inductive-invariants point_set point z3.ce739 expr point z3.ce739 done
=inductive-invariants point_set point z3v487.ce828
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1921977548
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1119998325
=inductive-invariants point_set point z3v487.ce828 expr point z3v487.ce828 done
=inductive-invariants point_set point z3.ce829
=inductive-invariants point_set point z3.ce829 expr point z3.ce829
=inductive-invariants point_set point z3.ce829 expr point z3.ce829 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce829 expr point z3.ce829 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce829 expr point z3.ce829 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce829 expr point z3.ce829 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce829 expr point z3.ce829 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
809115367
=inductive-invariants point_set point z3.ce829 expr point z3.ce829 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
637338545
=inductive-invariants point_set point z3.ce829 expr point z3.ce829 done
=inductive-invariants point_set point z3v487.ce693
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
92893930
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
335560738
=inductive-invariants point_set point z3v487.ce693 expr point z3v487.ce693 done
=inductive-invariants point_set point z3.ce702
=inductive-invariants point_set point z3.ce702 expr point z3.ce702
=inductive-invariants point_set point z3.ce702 expr point z3.ce702 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce702 expr point z3.ce702 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce702 expr point z3.ce702 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce702 expr point z3.ce702 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce702 expr point z3.ce702 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1413680312
=inductive-invariants point_set point z3.ce702 expr point z3.ce702 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
452984837
=inductive-invariants point_set point z3.ce702 expr point z3.ce702 done
=inductive-invariants point_set point z3v487.ce720
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
159383552
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
159383552
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
159383552
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
873350808
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1321958760
=inductive-invariants point_set point z3v487.ce720 expr point z3v487.ce720 done
=inductive-invariants point_set point z3.ce711
=inductive-invariants point_set point z3.ce711 expr point z3.ce711
=inductive-invariants point_set point z3.ce711 expr point z3.ce711 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce711 expr point z3.ce711 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3.ce711 expr point z3.ce711 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3.ce711 expr point z3.ce711 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3.ce711 expr point z3.ce711 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1413680312
=inductive-invariants point_set point z3.ce711 expr point z3.ce711 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
452984837
=inductive-invariants point_set point z3.ce711 expr point z3.ce711 done
=inductive-invariants point_set point z3v487.ce846
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1431297090
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
196609
=inductive-invariants point_set point z3v487.ce846 expr point z3v487.ce846 done
=inductive-invariants point_set point z3v487.ce856
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
203686944
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
203686944
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
203686944
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
558934856
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
291799036
=inductive-invariants point_set point z3v487.ce856 expr point z3v487.ce856 done
=inductive-invariants point_set point z3.ce855
=inductive-invariants point_set point z3.ce855 expr point z3.ce855
=inductive-invariants point_set point z3.ce855 expr point z3.ce855 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce855 expr point z3.ce855 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
1509739256
=inductive-invariants point_set point z3.ce855 expr point z3.ce855 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
1509739256
=inductive-invariants point_set point z3.ce855 expr point z3.ce855 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
1509739256
=inductive-invariants point_set point z3.ce855 expr point z3.ce855 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
404086775
=inductive-invariants point_set point z3.ce855 expr point z3.ce855 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
404013659
=inductive-invariants point_set point z3.ce855 expr point z3.ce855 done
=inductive-invariants point_set point z3.ce873
=inductive-invariants point_set point z3.ce873 expr point z3.ce873
=inductive-invariants point_set point z3.ce873 expr point z3.ce873 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce873 expr point z3.ce873 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
3221225476
=inductive-invariants point_set point z3.ce873 expr point z3.ce873 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
3221225476
=inductive-invariants point_set point z3.ce873 expr point z3.ce873 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
3221225476
=inductive-invariants point_set point z3.ce873 expr point z3.ce873 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1986153561
=inductive-invariants point_set point z3.ce873 expr point z3.ce873 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1500043854
=inductive-invariants point_set point z3.ce873 expr point z3.ce873 done
=inductive-invariants point_set point z3v487.ce874
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
16
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
16
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
16
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1348961608
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
1850704075
=inductive-invariants point_set point z3v487.ce874 expr point z3v487.ce874 done
=inductive-invariants point_set point z3v487.ce891
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
159383552
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
159383552
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
159383552
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
2123033178
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
921732547
=inductive-invariants point_set point z3v487.ce891 expr point z3v487.ce891 done
=inductive-invariants point_set point z3.ce892
=inductive-invariants point_set point z3.ce892 expr point z3.ce892
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
645559956
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
645559956
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
645559956
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1505483769
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
566989206
=inductive-invariants point_set point z3.ce892 expr point z3.ce892 done
=inductive-invariants point_set point z3v487.ce909
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))), andnot1(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)), not(and(bvuge(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), bvule(input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))))), and(eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___bar__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___bar__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
1
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909 val 6 for input.spec-%tmpvar-24.L2%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909 val 7 for input.dst.llvm-%call.Lentry%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909 val 20 for input.spec-%var-fi-0.L2%3%fcallStart
0
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909 val 23 for input.spec-%tmpvar-25.L2%3%fcallEnd
1431297090
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909 val 24 for input.dst.llvm-%call1.Lentry%2%fcallEnd
196609
=inductive-invariants point_set point z3v487.ce909 expr point z3v487.ce909 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L2%1%fcallStart_Lentry%1%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L2%1%fcallEnd_Lentry%1%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at L2%3%fcallStart_Lentry%2%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L2%3%fcallEnd_Lentry%2%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L2%1%fcallStart_Lentry%1%fcallStart for reason inductive-invariants
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state failcond.description

=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state failcond done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 2 exprs
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.dst.llvm-%m1 : BV:32
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.2
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m1 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce12
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce13
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce40
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce26
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=2; number of visited CEs=5; number of preds=2
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->1073741824; 3->0; 
3
-2147483648->0; 2->0; 3->1073741824; 
matrix done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 2 exprs
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 4
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 5
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3.ce3
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=2; number of visited CEs=1; number of preds=2
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini name local-sizes-are-equal
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini predicate_set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini is assumed eqclass : 0
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini visited ce 0: z3.ce3
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini visited ces set done
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants smallest_point_cover 3 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%1%fcallStart_Lentry%1%fcallStart inductive-invariants invariant_state done
=Invariant state at node L2%1%fcallEnd_Lentry%1%fcallEnd for reason inductive-invariants
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state failcond.description

=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state failcond done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce3
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 3 exprs
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce3
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce12
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce13
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce40
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce26
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=3; number of visited CEs=5; number of preds=1
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 3->1073741824; 6->0; 7->0; 
matrix done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 14 exprs
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 4
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 5
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 8
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 9
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 10
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 11
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 12
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 13
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 14
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 15
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 16
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 17
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 18
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 19
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 5
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3.ce3
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=14; number of visited CEs=1; number of preds=6
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini name local-sizes-are-equal
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini predicate_set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini is assumed eqclass : 0
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini visited ce 0: z3.ce3
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini visited ces set done
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants smallest_point_cover 3 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%1%fcallEnd_Lentry%1%fcallEnd inductive-invariants invariant_state done
=Invariant state at node L2%3%fcallStart_Lentry%2%fcallStart for reason inductive-invariants
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state failcond.description

=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state failcond done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce243
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 4 exprs
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%m2 : BV:32
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 20
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.20
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%m2 : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce243
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce261
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce279
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce315
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3.ce333
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce297
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce298
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce351
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce316
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=4; number of visited CEs=9; number of preds=3
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 3->1073741824; 6->0; 7->0; 20->0; 
7
-2147483648->0; 3->0; 6->4294967295; 7->1; 20->0; 
20
-2147483648->0; 3->0; 6->4294967295; 7->0; 20->1; 
matrix done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 16 exprs
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 4
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 5
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 8
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 9
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 10
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 11
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 12
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 13
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 14
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 15
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 16
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 17
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 18
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 19
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 21
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 22
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 5
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce243
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=16; number of visited CEs=1; number of preds=6
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini name local-sizes-are-equal
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini predicate_set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini is assumed eqclass : 0
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini visited ce 0: z3v487.ce243
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini visited ces set done
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants smallest_point_cover 3 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%3%fcallStart_Lentry%2%fcallStart inductive-invariants invariant_state done
=Invariant state at node L2%3%fcallEnd_Lentry%2%fcallEnd for reason inductive-invariants
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state failcond.description

=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state failcond done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : bvuge(1, 10) : BOOL
18 : bvule(1, 11) : BOOL
19 : and(17, 18) : BOOL
20 : bvuge(2, 10) : BOOL
21 : bvule(2, 11) : BOOL
22 : and(20, 21) : BOOL
23 : not(22) : BOOL
24 : andnot1(19, 23) : BOOL
25 : bvuge(10, 1) : BOOL
26 : bvule(10, 2) : BOOL
27 : and(25, 26) : BOOL
28 : bvuge(11, 1) : BOOL
29 : bvule(11, 2) : BOOL
30 : and(28, 29) : BOOL
31 : not(30) : BOOL
32 : andnot1(27, 31) : BOOL
33 : and(24, 32) : BOOL
34 : and(16, 33) : BOOL
35 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
36 : 3 { 0x3 +1.35e129 } : BV:32
37 : bvand(35, 36) : BV:32
38 : 0 { 0x0 +1.0e129 } : BV:32
39 : eq(37, 38) : BOOL
40 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
41 : bvand(40, 36) : BV:32
42 : eq(41, 38) : BOOL
43 : and(39, 42) : BOOL
44 : and(34, 43) : BOOL
45 : eq(35, 1) : BOOL
46 : eq(40, 10) : BOOL
47 : and(45, 46) : BOOL
48 : and(44, 47) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3v487.ce243
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 7
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 20
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 23
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 24
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear2-32-free_var_idx.20
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.7
=LhsExpr
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
2 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce243
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce261
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce279
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce315
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce297
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=5; number of preds=2
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
7
-2147483648->0; 6->4294967295; 7->1; 20->0; 23->0; 24->0; 
20
-2147483648->0; 6->4294967295; 7->0; 20->1; 23->0; 24->0; 
matrix done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based name spec-coupling-invariants
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 29 exprs
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 4
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 5
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 8
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 9
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 10
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 11
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 12
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 13
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 15
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 16
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 17
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 18
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 25
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 26
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 27
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 28
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 29
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 30
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 31
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 32
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 33
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 34
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 35
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 36
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 37
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 38
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 39
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 40
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based point_expr 41
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 4
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 5
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 6
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 7
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 8
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%2%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 9
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based pred 10
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based predicate_set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based is assumed eqclass : 0
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ce 0: z3v487.ce243
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based visited ces set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 2 type houdini-axiom-based summary: number of exprs=29; number of visited CEs=1; number of preds=11
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini name local-sizes-are-equal
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini expr_group_type HOUDINI with 0 exprs
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini predicate_set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini is assumed eqclass : 0
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini visited ce 0: z3v487.ce243
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini visited ces set done
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants smallest_point_cover 3 type houdini summary: number of exprs=0; number of visited CEs=1; number of preds=0
=pc L2%3%fcallEnd_Lentry%2%fcallEnd inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart edge well-formedness condition done
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge well-formedness condition
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond cg_path
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond src_path
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond dst_path
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge-wf-cond pred.0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m1 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge well-formedness condition
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge-wf-cond cg_path
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge-wf-cond src_path
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge-wf-cond dst_path
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%1%fcallEnd_Lentry%1%fcallEnd.to_pcL2%3%fcallStart_Lentry%2%fcallStart-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : implies(3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart edge well-formedness condition done
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge well-formedness condition
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond cg_path
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond src_path
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond dst_path
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge-wf-cond pred.0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem.Lentry%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m2 : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL2%3%fcallEnd_Lentry%2%fcallEnd.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
2 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : implies(3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d)
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-29.E0%0%d : BV:32
2 : input.dst.llvm-%sub.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L2%1%fcallStart_Lentry%1%fcallStart
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m1 : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%m2 : BV:32
=bv_rank_exprs done
=Ranking exprs at node L2%1%fcallEnd_Lentry%1%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m2 : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=bv_rank_exprs done
=Ranking exprs at node L2%3%fcallStart_Lentry%2%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=SRC Tie Breaking expr 3
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%m2 : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=bv_rank_exprs done
=Ranking exprs at node L2%3%fcallEnd_Lentry%2%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%var-fi-0.L2%3%fcallStart : BV:32
=SRC Ranking expr 1
1 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
=SRC Tie Breaking expr 3
1 : input.spec-fcall_arg_copy.0.spec-%var-m1-1.L2%1%fcallEnd : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 4
1 : input.spec-fcall_arg_copy.0.spec-%var-m2-1.L2%3%fcallEnd : MAP[BV:32 -> BV:32]
=DST Ranking expr 0
1 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140440 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140477 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/ : MEMLABEL
140444 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140421 : 0 { 0x0 } : BOOL
140478 : select(140440, 140441, 140477, 140444, 140420, 140421) : BV:32
=RhsExpr
140445 : input.dst.llvm-%m2 : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #1.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140440 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140479 : memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/ : MEMLABEL
140442 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140421 : 0 { 0x0 } : BOOL
140480 : select(140440, 140441, 140479, 140442, 140420, 140421) : BV:32
=RhsExpr
140443 : input.dst.llvm-%m1 : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #2.pred
=Comment
pointer-implements-map-arg1
=LhsExpr
140274 : input.spec-%var-m2-1 : MAP[BV:32 -> BV:32]
140414 : Lambda0Var : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140415 : bvule(140290, 140414) : BOOL
140411 : 100 { 0x64 +1.1192e129 } : BV:32
140416 : bvult(140414, 140411) : BOOL
140417 : and(140415, 140416) : BOOL
140418 : lambda(140414, 140417) : FUNCTION[BV:32 -> BOOL]
140422 : Lambda1Var : BV:32
140440 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140688 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140423 : 4 { 0x4 +1.47e129 } : BV:32
140424 : bvmul(140422, 140423) : BV:32
140445 : input.dst.llvm-%m2 : BV:32
140789 : bvadd(140424, 140445) : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140421 : 0 { 0x0 } : BOOL
140799 : select(140440, 140441, 140688, 140789, 140420, 140421) : BV:32
140800 : lambda(140422, 140799) : FUNCTION[BV:32 -> BV:32]
140801 : map(140418, 140800) : MAP[BV:32 -> BV:32]
140802 : eq(140274, 140801) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #3.pred
=Comment
pointer-implements-map-arg0
=LhsExpr
140273 : input.spec-%var-m1-1 : MAP[BV:32 -> BV:32]
140414 : Lambda0Var : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140415 : bvule(140290, 140414) : BOOL
140411 : 100 { 0x64 +1.1192e129 } : BV:32
140416 : bvult(140414, 140411) : BOOL
140417 : and(140415, 140416) : BOOL
140418 : lambda(140414, 140417) : FUNCTION[BV:32 -> BOOL]
140422 : Lambda1Var : BV:32
140440 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140688 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140423 : 4 { 0x4 +1.47e129 } : BV:32
140424 : bvmul(140422, 140423) : BV:32
140443 : input.dst.llvm-%m1 : BV:32
140808 : bvadd(140424, 140443) : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140421 : 0 { 0x0 } : BOOL
140817 : select(140440, 140441, 140688, 140808, 140420, 140421) : BV:32
140818 : lambda(140422, 140817) : FUNCTION[BV:32 -> BV:32]
140819 : map(140418, 140818) : MAP[BV:32 -> BV:32]
140820 : eq(140273, 140819) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #4
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #4.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #4.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #4.pred
=Comment
undef-behavioursome.edge.L0%0%d=>Lentry%1%fcallStart
=LhsExpr
140443 : input.dst.llvm-%m1 : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140451 : islangaligned(140443, 140420) : BOOL
140445 : input.dst.llvm-%m2 : BV:32
140452 : islangaligned(140445, 140420) : BOOL
140521 : and(140451, 140452) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #5
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #5.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #5.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart assume #5.pred
=Comment
precond-mlasserts
=LhsExpr
140725 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin : BV:32
140726 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end : BV:32
140727 : bvule(140725, 140726) : BOOL
140423 : 4 { 0x4 +1.47e129 } : BV:32
140297 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140728 : bvadd(140423, 140297) : BV:32
140729 : bvadd(140725, 140728) : BV:32
140730 : eq(140726, 140729) : BOOL
140731 : and(140727, 140730) : BOOL
140732 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin : BV:32
140733 : input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end : BV:32
140734 : bvule(140732, 140733) : BOOL
140735 : and(140731, 140734) : BOOL
140736 : bvadd(140732, 140728) : BV:32
140737 : eq(140733, 140736) : BOOL
140738 : and(140735, 140737) : BOOL
140739 : bvuge(140725, 140732) : BOOL
140740 : bvule(140725, 140733) : BOOL
140741 : and(140739, 140740) : BOOL
140743 : bvuge(140726, 140732) : BOOL
140744 : bvule(140726, 140733) : BOOL
140745 : and(140743, 140744) : BOOL
140746 : not(140745) : BOOL
140747 : andnot1(140741, 140746) : BOOL
140742 : bvuge(140732, 140725) : BOOL
140748 : bvule(140732, 140726) : BOOL
140749 : and(140742, 140748) : BOOL
140751 : bvuge(140733, 140725) : BOOL
140752 : bvule(140733, 140726) : BOOL
140753 : and(140751, 140752) : BOOL
140754 : not(140753) : BOOL
140755 : andnot1(140749, 140754) : BOOL
140750 : and(140747, 140755) : BOOL
140756 : and(140738, 140750) : BOOL
140444 : input.dst.local./*___y___bar__x__=L0%0%argnum1=/ : BV:32
140341 : 3 { 0x3 +1.35e129 } : BV:32
140757 : bvand(140444, 140341) : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140758 : eq(140757, 140290) : BOOL
140442 : input.dst.local./*___y___bar__x__=L0%0%argnum0=/ : BV:32
140759 : bvand(140442, 140341) : BV:32
140760 : eq(140759, 140290) : BOOL
140761 : and(140758, 140760) : BOOL
140762 : and(140756, 140761) : BOOL
140763 : eq(140444, 140725) : BOOL
140764 : eq(140442, 140732) : BOOL
140765 : and(140763, 140764) : BOOL
140766 : and(140762, 140765) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L2%1%fcallStart_Lentry%1%fcallStart done
cg.assumes_around_edge at L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd
cg.assumes_around_edge at L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd assume #0
cg.assumes_around_edge at L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd assume #0.ec
cg.assumes_around_edge at L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140443 : input.dst.llvm-%m1 : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140451 : islangaligned(140443, 140420) : BOOL
140445 : input.dst.llvm-%m2 : BV:32
140452 : islangaligned(140445, 140420) : BOOL
140521 : and(140451, 140452) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%1%fcallStart_Lentry%1%fcallStart=>L2%1%fcallEnd_Lentry%1%fcallEnd done
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #0
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #0.ec
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140443 : input.dst.llvm-%m1 : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140451 : islangaligned(140443, 140420) : BOOL
140445 : input.dst.llvm-%m2 : BV:32
140452 : islangaligned(140445, 140420) : BOOL
140521 : and(140451, 140452) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #1
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #1.ec
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart assume #1.pred
=Comment
cg-edge-assume
=LhsExpr
140305 : input.spec-%tmpvar-24.L2%1%fcallEnd : BV:32
140404 : input.dst.llvm-%call.Lentry%1%fcallEnd : BV:32
156150 : eq(140305, 140404) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%1%fcallEnd_Lentry%1%fcallEnd=>L2%3%fcallStart_Lentry%2%fcallStart done
cg.assumes_around_edge at L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd
cg.assumes_around_edge at L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd assume #0
cg.assumes_around_edge at L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd assume #0.ec
cg.assumes_around_edge at L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140443 : input.dst.llvm-%m1 : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140451 : islangaligned(140443, 140420) : BOOL
140445 : input.dst.llvm-%m2 : BV:32
140452 : islangaligned(140445, 140420) : BOOL
140521 : and(140451, 140452) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%3%fcallStart_Lentry%2%fcallStart=>L2%3%fcallEnd_Lentry%2%fcallEnd done
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140443 : input.dst.llvm-%m1 : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140451 : islangaligned(140443, 140420) : BOOL
140445 : input.dst.llvm-%m2 : BV:32
140452 : islangaligned(140445, 140420) : BOOL
140521 : and(140451, 140452) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d assume #1.pred
=Comment
cg-edge-assume
=LhsExpr
140384 : input.spec-%tmpvar-25.L2%3%fcallEnd : BV:32
140405 : input.dst.llvm-%call1.Lentry%2%fcallEnd : BV:32
205488 : eq(140384, 140405) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L2%3%fcallEnd_Lentry%2%fcallEnd=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%1%fcallStart_Lentry%1%fcallStart
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%1%fcallEnd_Lentry%1%fcallEnd
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%3%fcallStart_Lentry%2%fcallStart
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L2%3%fcallEnd_Lentry%2%fcallEnd
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
=FunctionName: foo
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph foo.A1
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.foo:
=TFG:
=Nodes: L0%0%d L1%3%d L1%4%bbentry L1%7%bbentry L1%9%bbentry L1%12%d L1%13%bbentry L1%16%bbentry L1%18%bbentry L1%21%d L1%22%bbentry L1%25%bbentry L1%27%bbentry L1%30%d L1%31%bbentry L1%34%bbentry L1%36%bbentry E0%0%d
=Edges:
L0%0%d => L1%3%d
L1%3%d => L1%7%bbentry
L1%3%d => L1%4%bbentry
L1%4%bbentry => L1%9%bbentry
L1%7%bbentry => L1%9%bbentry
L1%9%bbentry => L1%12%d
L1%12%d => L1%16%bbentry
L1%12%d => L1%13%bbentry
L1%13%bbentry => L1%18%bbentry
L1%16%bbentry => L1%18%bbentry
L1%18%bbentry => L1%21%d
L1%21%d => L1%25%bbentry
L1%21%d => L1%22%bbentry
L1%22%bbentry => L1%27%bbentry
L1%25%bbentry => L1%27%bbentry
L1%27%bbentry => L1%30%d
L1%30%d => L1%34%bbentry
L1%30%d => L1%31%bbentry
L1%31%bbentry => L1%36%bbentry
L1%34%bbentry => L1%36%bbentry
L1%36%bbentry => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%3%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%4%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%7%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%9%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%12%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%13%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%16%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%18%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%21%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%22%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%25%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%27%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%30%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%31%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%34%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at L1%36%bbentry
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: spec-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=Edge: L0%0%d => L1%3%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L1%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-1.L1%3%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((func_head*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L1%3%d => L1%7%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:8:match_sum_cond_1
tfg_edge_comment end

=Edge: L1%3%d => L1%4%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:5:match_sum_cond_0
tfg_edge_comment end

=Edge: L1%4%bbentry => L1%9%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-2.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-3.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L1%9%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L1%7%bbentry => L1%9%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-3.L1%9%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-0.L1%9%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L1%9%bbentry => L1%12%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-m0-0.L1%12%d
1 : input.spec-%tmpvar-3.L1%9%bbentry : BV:32
=spec-%tmpvar-4.L1%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-5.L1%12%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*letin_def)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L1%12%d => L1%16%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:17:match_sum_cond_1
tfg_edge_comment end

=Edge: L1%12%d => L1%13%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:14:match_sum_cond_0
tfg_edge_comment end

=Edge: L1%13%bbentry => L1%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-6.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-7.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L1%18%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L1%16%bbentry => L1%18%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%var-val-1.L1%18%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-7.L1%18%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L1%18%bbentry => L1%21%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-8.L1%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=spec-%var-m1-0.L1%21%d
1 : input.spec-%tmpvar-7.L1%18%bbentry : BV:32
=spec-%tmpvar-9.L1%21%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*letin_def)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L1%21%d => L1%25%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:26:match_sum_cond_1
tfg_edge_comment end

=Edge: L1%21%d => L1%22%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:23:match_sum_cond_0
tfg_edge_comment end

=Edge: L1%22%bbentry => L1%27%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u3-0.L1%27%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-10.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L1%25%bbentry => L1%27%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.L1%27%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-2.L1%27%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L1%27%bbentry => L1%30%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-12.L1%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=spec-%tmpvar-13.L1%30%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%var-m2-0.L1%30%d
1 : input.spec-%tmpvar-11.L1%27%bbentry : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*letin_def)*ctor_bv)*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L1%30%d => L1%34%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:35:match_sum_cond_1
tfg_edge_comment end

=Edge: L1%30%d => L1%31%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:32:match_sum_cond_0
tfg_edge_comment end

=Edge: L1%31%bbentry => L1%36%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-14.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-15.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u4-0.L1%36%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_0)*ctor_bv)*match_sum_merge_0)
tfg_edge_comment end

=Edge: L1%34%bbentry => L1%36%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-15.L1%36%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-3.L1%36%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((bb_entry*match_sum_val_1)*match_sum_merge_1)
tfg_edge_comment end

=Edge: L1%36%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-m1-0.L1%21%d : BV:32
2 : input.spec-%var-m2-0.L1%30%d : BV:32
3 : bvsub(1, 2) : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L1%21%d : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L1%21%d : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-19.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L1%21%d : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-22.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L1%21%d : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L1%21%d : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=spec-%var-m3-0.E0%0%d
1 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
=spec-%tmpvar-23.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
4 : input.spec-%var-m1-0.L1%21%d : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvsub(4, 5) : BV:32
7 : bvadd(3, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*letin_def)*intrinsic_app_bvadd)*intrinsic_app_bvsub)*(((((intrinsic_app_bvadd*letin_body)*letin_body)*letin_body)*letin_body)*func_ret))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.foo
=Loc 1 in src.spec.foo.
REGMEM
spec-%var-m-0
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
=Loc 38 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 39 in src.spec.foo.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:64 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:64 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 40 in src.spec.foo.
REGMEM
spec-%tmpvar-1.L1%3%d
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
=Loc 41 in src.spec.foo.
REGMEM
spec-%tmpvar-5.L1%12%d
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
=Loc 42 in src.spec.foo.
REGMEM
spec-%tmpvar-9.L1%21%d
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
=Loc 43 in src.spec.foo.
REGMEM
spec-%tmpvar-13.L1%30%d
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
=Loc 44 in src.spec.foo.
REGMEM
spec-%tmpvar-0.L1%3%d
1 : input.spec-%tmpvar-0.L1%3%d : BV:32
=Loc 45 in src.spec.foo.
REGMEM
spec-%tmpvar-3.L1%9%bbentry
1 : input.spec-%tmpvar-3.L1%9%bbentry : BV:32
=Loc 46 in src.spec.foo.
REGMEM
spec-%tmpvar-4.L1%12%d
1 : input.spec-%tmpvar-4.L1%12%d : BV:32
=Loc 47 in src.spec.foo.
REGMEM
spec-%var-m0-0.L1%12%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
=Loc 48 in src.spec.foo.
REGMEM
spec-%tmpvar-7.L1%18%bbentry
1 : input.spec-%tmpvar-7.L1%18%bbentry : BV:32
=Loc 49 in src.spec.foo.
REGMEM
spec-%tmpvar-8.L1%21%d
1 : input.spec-%tmpvar-8.L1%21%d : BV:32
=Loc 50 in src.spec.foo.
REGMEM
spec-%var-m1-0.L1%21%d
1 : input.spec-%var-m1-0.L1%21%d : BV:32
=Loc 51 in src.spec.foo.
REGMEM
spec-%tmpvar-11.L1%27%bbentry
1 : input.spec-%tmpvar-11.L1%27%bbentry : BV:32
=Loc 52 in src.spec.foo.
REGMEM
spec-%tmpvar-12.L1%30%d
1 : input.spec-%tmpvar-12.L1%30%d : BV:32
=Loc 53 in src.spec.foo.
REGMEM
spec-%var-m2-0.L1%30%d
1 : input.spec-%var-m2-0.L1%30%d : BV:32
=Loc 54 in src.spec.foo.
REGMEM
spec-%tmpvar-15.L1%36%bbentry
1 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
=Loc 55 in src.spec.foo.
REGMEM
spec-%tmpvar-16.E0%0%d
1 : input.spec-%tmpvar-16.E0%0%d : BV:32
=Loc 56 in src.spec.foo.
REGMEM
spec-%tmpvar-17.E0%0%d
1 : input.spec-%tmpvar-17.E0%0%d : BV:32
=Loc 57 in src.spec.foo.
REGMEM
spec-%tmpvar-18.E0%0%d
1 : input.spec-%tmpvar-18.E0%0%d : BV:32
=Loc 58 in src.spec.foo.
REGMEM
spec-%tmpvar-19.E0%0%d
1 : input.spec-%tmpvar-19.E0%0%d : BV:32
=Loc 59 in src.spec.foo.
REGMEM
spec-%tmpvar-20.E0%0%d
1 : input.spec-%tmpvar-20.E0%0%d : BV:32
=Loc 60 in src.spec.foo.
REGMEM
spec-%tmpvar-21.E0%0%d
1 : input.spec-%tmpvar-21.E0%0%d : BV:32
=Loc 61 in src.spec.foo.
REGMEM
spec-%tmpvar-22.E0%0%d
1 : input.spec-%tmpvar-22.E0%0%d : BV:32
=Loc 62 in src.spec.foo.
REGMEM
spec-%tmpvar-23.E0%0%d
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
=Loc 63 in src.spec.foo.
REGMEM
spec-%var-m3-0.E0%0%d
1 : input.spec-%var-m3-0.E0%0%d : BV:32
=Loc 64 in src.spec.foo.
REGMEM
spec-%tmpvar-2.L1%9%bbentry
1 : input.spec-%tmpvar-2.L1%9%bbentry : BV:32
=Loc 65 in src.spec.foo.
REGMEM
spec-%var-u-0.L1%9%bbentry
1 : input.spec-%var-u-0.L1%9%bbentry : UNIT
=Loc 66 in src.spec.foo.
REGMEM
spec-%var-val-0.L1%9%bbentry
1 : input.spec-%var-val-0.L1%9%bbentry : BV:32
=Loc 67 in src.spec.foo.
REGMEM
spec-%tmpvar-6.L1%18%bbentry
1 : input.spec-%tmpvar-6.L1%18%bbentry : BV:32
=Loc 68 in src.spec.foo.
REGMEM
spec-%var-u2-0.L1%18%bbentry
1 : input.spec-%var-u2-0.L1%18%bbentry : UNIT
=Loc 69 in src.spec.foo.
REGMEM
spec-%var-val-1.L1%18%bbentry
1 : input.spec-%var-val-1.L1%18%bbentry : BV:32
=Loc 70 in src.spec.foo.
REGMEM
spec-%tmpvar-10.L1%27%bbentry
1 : input.spec-%tmpvar-10.L1%27%bbentry : BV:32
=Loc 71 in src.spec.foo.
REGMEM
spec-%var-u3-0.L1%27%bbentry
1 : input.spec-%var-u3-0.L1%27%bbentry : UNIT
=Loc 72 in src.spec.foo.
REGMEM
spec-%var-val-2.L1%27%bbentry
1 : input.spec-%var-val-2.L1%27%bbentry : BV:32
=Loc 73 in src.spec.foo.
REGMEM
spec-%tmpvar-14.L1%36%bbentry
1 : input.spec-%tmpvar-14.L1%36%bbentry : BV:32
=Loc 74 in src.spec.foo.
REGMEM
spec-%var-u4-0.L1%36%bbentry
1 : input.spec-%var-u4-0.L1%36%bbentry : UNIT
=Loc 75 in src.spec.foo.
REGMEM
spec-%var-val-3.L1%36%bbentry
1 : input.spec-%var-val-3.L1%36%bbentry : BV:32
=Locs end
=Liveness in src.spec.foo
=live locs at L0%0%d
1, 
=live locs at L1%3%d
1, 40, 
=live locs at L1%4%bbentry
1, 
=live locs at L1%7%bbentry
1, 40, 
=live locs at L1%9%bbentry
1, 45, 
=live locs at L1%12%d
1, 41, 47, 
=live locs at L1%13%bbentry
1, 47, 
=live locs at L1%16%bbentry
1, 41, 47, 
=live locs at L1%18%bbentry
1, 47, 48, 
=live locs at L1%21%d
1, 42, 47, 50, 
=live locs at L1%22%bbentry
1, 47, 50, 
=live locs at L1%25%bbentry
1, 42, 47, 50, 
=live locs at L1%27%bbentry
1, 47, 50, 51, 
=live locs at L1%30%d
43, 47, 50, 53, 
=live locs at L1%31%bbentry
47, 50, 53, 
=live locs at L1%34%bbentry
43, 47, 50, 53, 
=live locs at L1%36%bbentry
47, 50, 53, 54, 
=live locs at E0%0%d
62[f], 

=Definedness in src.spec.foo
=loc definedness at L0%0%d
1, 38, 39
=loc definedness at L1%3%d
1, 38, 39, 40, 44
=loc definedness at L1%4%bbentry
1, 38, 39, 40, 44
=loc definedness at L1%7%bbentry
1, 38, 39, 40, 44
=loc definedness at L1%9%bbentry
1, 38, 39, 40, 44, 45
=loc definedness at L1%12%d
1, 38, 39, 40, 41, 44, 45, 46, 47
=loc definedness at L1%13%bbentry
1, 38, 39, 40, 41, 44, 45, 46, 47
=loc definedness at L1%16%bbentry
1, 38, 39, 40, 41, 44, 45, 46, 47
=loc definedness at L1%18%bbentry
1, 38, 39, 40, 41, 44, 45, 46, 47, 48
=loc definedness at L1%21%d
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50
=loc definedness at L1%22%bbentry
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50
=loc definedness at L1%25%bbentry
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50
=loc definedness at L1%27%bbentry
1, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51
=loc definedness at L1%30%d
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
=loc definedness at L1%31%bbentry
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
=loc definedness at L1%34%bbentry
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53
=loc definedness at L1%36%bbentry
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54
=loc definedness at E0%0%d
1, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63

=Branch affecting variable locs in src.spec.foo
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L1%3%d
1, 40
=branch affecting variable locs at L1%4%bbentry
1
=branch affecting variable locs at L1%7%bbentry
1
=branch affecting variable locs at L1%9%bbentry
1
=branch affecting variable locs at L1%12%d
1, 41
=branch affecting variable locs at L1%13%bbentry
1
=branch affecting variable locs at L1%16%bbentry
1
=branch affecting variable locs at L1%18%bbentry
1
=branch affecting variable locs at L1%21%d
1, 42
=branch affecting variable locs at L1%22%bbentry
1
=branch affecting variable locs at L1%25%bbentry
1
=branch affecting variable locs at L1%27%bbentry
1
=branch affecting variable locs at L1%30%d
43
=branch affecting variable locs at L1%31%bbentry

=branch affecting variable locs at L1%34%bbentry

=branch affecting variable locs at L1%36%bbentry

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.foo
=relevant memlabels
=function: foo
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L1%3%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L1%3%d for loc_id 40 {input.spec-%tmpvar-1.L1%3%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L1%3%d for loc_id 44 {input.spec-%tmpvar-0.L1%3%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L1%3%d done
=graph_with_edge_structures.loc_to_expr_map at L1%3%d=>L1%4%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%3%d=>L1%4%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%3%d=>L1%7%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%3%d=>L1%7%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 45 {input.spec-%tmpvar-3.L1%9%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 64 {input.spec-%tmpvar-2.L1%9%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry for loc_id 65 {input.spec-%var-u-0.L1%9%bbentry }
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L1%4%bbentry=>L1%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%7%bbentry=>L1%9%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%7%bbentry=>L1%9%bbentry for loc_id 45 {input.spec-%tmpvar-3.L1%9%bbentry }
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%7%bbentry=>L1%9%bbentry for loc_id 66 {input.spec-%var-val-0.L1%9%bbentry }
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%7%bbentry=>L1%9%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>L1%12%d
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>L1%12%d for loc_id 41 {input.spec-%tmpvar-5.L1%12%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>L1%12%d for loc_id 46 {input.spec-%tmpvar-4.L1%12%d }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>L1%12%d for loc_id 47 {input.spec-%var-m0-0.L1%12%d }
1 : input.spec-%tmpvar-3.L1%9%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%9%bbentry=>L1%12%d done
=graph_with_edge_structures.loc_to_expr_map at L1%12%d=>L1%13%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%12%d=>L1%13%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%12%d=>L1%16%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%12%d=>L1%16%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%13%bbentry=>L1%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%13%bbentry=>L1%18%bbentry for loc_id 48 {input.spec-%tmpvar-7.L1%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%13%bbentry=>L1%18%bbentry for loc_id 67 {input.spec-%tmpvar-6.L1%18%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%13%bbentry=>L1%18%bbentry for loc_id 68 {input.spec-%var-u2-0.L1%18%bbentry }
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L1%13%bbentry=>L1%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%16%bbentry=>L1%18%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%16%bbentry=>L1%18%bbentry for loc_id 48 {input.spec-%tmpvar-7.L1%18%bbentry }
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%16%bbentry=>L1%18%bbentry for loc_id 69 {input.spec-%var-val-1.L1%18%bbentry }
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%16%bbentry=>L1%18%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%18%bbentry=>L1%21%d
=graph_with_edge_structures.loc_to_expr_map at L1%18%bbentry=>L1%21%d for loc_id 42 {input.spec-%tmpvar-9.L1%21%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L1%18%bbentry=>L1%21%d for loc_id 49 {input.spec-%tmpvar-8.L1%21%d }
1 : 2 { 0x2 +1.23e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%18%bbentry=>L1%21%d for loc_id 50 {input.spec-%var-m1-0.L1%21%d }
1 : input.spec-%tmpvar-7.L1%18%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%18%bbentry=>L1%21%d done
=graph_with_edge_structures.loc_to_expr_map at L1%21%d=>L1%22%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%21%d=>L1%22%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%21%d=>L1%25%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%21%d=>L1%25%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%22%bbentry=>L1%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%22%bbentry=>L1%27%bbentry for loc_id 51 {input.spec-%tmpvar-11.L1%27%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%22%bbentry=>L1%27%bbentry for loc_id 70 {input.spec-%tmpvar-10.L1%27%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%22%bbentry=>L1%27%bbentry for loc_id 71 {input.spec-%var-u3-0.L1%27%bbentry }
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L1%22%bbentry=>L1%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%25%bbentry=>L1%27%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%25%bbentry=>L1%27%bbentry for loc_id 51 {input.spec-%tmpvar-11.L1%27%bbentry }
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%25%bbentry=>L1%27%bbentry for loc_id 72 {input.spec-%var-val-2.L1%27%bbentry }
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%25%bbentry=>L1%27%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%27%bbentry=>L1%30%d
=graph_with_edge_structures.loc_to_expr_map at L1%27%bbentry=>L1%30%d for loc_id 43 {input.spec-%tmpvar-13.L1%30%d }
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L1%27%bbentry=>L1%30%d for loc_id 52 {input.spec-%tmpvar-12.L1%30%d }
1 : 3 { 0x3 +1.35e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%27%bbentry=>L1%30%d for loc_id 53 {input.spec-%var-m2-0.L1%30%d }
1 : input.spec-%tmpvar-11.L1%27%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%27%bbentry=>L1%30%d done
=graph_with_edge_structures.loc_to_expr_map at L1%30%d=>L1%31%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%30%d=>L1%31%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%30%d=>L1%34%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%30%d=>L1%34%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%31%bbentry=>L1%36%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%31%bbentry=>L1%36%bbentry for loc_id 54 {input.spec-%tmpvar-15.L1%36%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%31%bbentry=>L1%36%bbentry for loc_id 73 {input.spec-%tmpvar-14.L1%36%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%31%bbentry=>L1%36%bbentry for loc_id 74 {input.spec-%var-u4-0.L1%36%bbentry }
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L1%31%bbentry=>L1%36%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%34%bbentry=>L1%36%bbentry
=graph_with_edge_structures.loc_to_expr_map at L1%34%bbentry=>L1%36%bbentry for loc_id 54 {input.spec-%tmpvar-15.L1%36%bbentry }
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%34%bbentry=>L1%36%bbentry for loc_id 75 {input.spec-%var-val-3.L1%36%bbentry }
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%34%bbentry=>L1%36%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 55 {input.spec-%tmpvar-16.E0%0%d }
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 56 {input.spec-%tmpvar-17.E0%0%d }
1 : input.spec-%var-m1-0.L1%21%d : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-m2-0.L1%30%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 57 {input.spec-%tmpvar-18.E0%0%d }
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 58 {input.spec-%tmpvar-19.E0%0%d }
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 59 {input.spec-%tmpvar-20.E0%0%d }
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 60 {input.spec-%tmpvar-21.E0%0%d }
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 61 {input.spec-%tmpvar-22.E0%0%d }
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 62 {input.spec-%tmpvar-23.E0%0%d }
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d for loc_id 63 {input.spec-%var-m3-0.E0%0%d }
1 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at L1%36%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L1%3%d:
vacuous mls at L1%4%bbentry:
vacuous mls at L1%7%bbentry:
vacuous mls at L1%9%bbentry:
vacuous mls at L1%12%d:
vacuous mls at L1%13%bbentry:
vacuous mls at L1%16%bbentry:
vacuous mls at L1%18%bbentry:
vacuous mls at L1%21%d:
vacuous mls at L1%22%bbentry:
vacuous mls at L1%25%bbentry:
vacuous mls at L1%27%bbentry:
vacuous mls at L1%30%d:
vacuous mls at L1%31%bbentry:
vacuous mls at L1%34%bbentry:
vacuous mls at L1%36%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L1%3%d:
non-vacuous mls at L1%4%bbentry:
non-vacuous mls at L1%7%bbentry:
non-vacuous mls at L1%9%bbentry:
non-vacuous mls at L1%12%d:
non-vacuous mls at L1%13%bbentry:
non-vacuous mls at L1%16%bbentry:
non-vacuous mls at L1%18%bbentry:
non-vacuous mls at L1%21%d:
non-vacuous mls at L1%22%bbentry:
non-vacuous mls at L1%25%bbentry:
non-vacuous mls at L1%27%bbentry:
non-vacuous mls at L1%30%d:
non-vacuous mls at L1%31%bbentry:
non-vacuous mls at L1%34%bbentry:
non-vacuous mls at L1%36%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.foo
=avail_exprs begin
=loc 1
=loc_expr
140306 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 40
=loc_expr
140527 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 41
=loc_expr
140653 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 42
=loc_expr
140665 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 43
=loc_expr
140668 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=avail_exprs_val.end
=loc 44
=loc_expr
140694 : input.spec-%tmpvar-0.L1%3%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 46
=loc_expr
140695 : input.spec-%tmpvar-4.L1%12%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=loc 49
=loc_expr
140696 : input.spec-%tmpvar-8.L1%21%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 2 { 0x2 +1.23e129 } : BV:32
=avail_exprs_val.end
=loc 52
=loc_expr
140697 : input.spec-%tmpvar-12.L1%30%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 3 { 0x3 +1.35e129 } : BV:32
=avail_exprs_val.end
=loc 64
=loc_expr
140706 : input.spec-%tmpvar-2.L1%9%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 65
=loc_expr
140707 : input.spec-%var-u-0.L1%9%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 66
=loc_expr
140708 : input.spec-%var-val-0.L1%9%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=loc 67
=loc_expr
140709 : input.spec-%tmpvar-6.L1%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 68
=loc_expr
140710 : input.spec-%var-u2-0.L1%18%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 69
=loc_expr
140711 : input.spec-%var-val-1.L1%18%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=loc 70
=loc_expr
140712 : input.spec-%tmpvar-10.L1%27%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 71
=loc_expr
140713 : input.spec-%var-u3-0.L1%27%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 72
=loc_expr
140714 : input.spec-%var-val-2.L1%27%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=loc 73
=loc_expr
140715 : input.spec-%tmpvar-14.L1%36%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 74
=loc_expr
140716 : input.spec-%var-u4-0.L1%36%bbentry : UNIT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 0 { 0x0 +1.0e1025 } : INT
5 : sum_get(3, 4) : UNIT
=avail_exprs_val.end
=loc 75
=loc_expr
140717 : input.spec-%var-val-3.L1%36%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
4 : 1 { 0x1 +1.0e1025 } : INT
5 : sum_get(3, 4) : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.foo
=loc 44 expr
1 : input.spec-%tmpvar-0.L1%3%d : BV:32
=loc 44 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 46 expr
1 : input.spec-%tmpvar-4.L1%12%d : BV:32
=loc 46 spreled-expr
140304 : 1 { 0x1 +1.11e129 } : BV:32
=loc 49 expr
1 : input.spec-%tmpvar-8.L1%21%d : BV:32
=loc 49 spreled-expr
140330 : 2 { 0x2 +1.23e129 } : BV:32
=loc 52 expr
1 : input.spec-%tmpvar-12.L1%30%d : BV:32
=loc 52 spreled-expr
140341 : 3 { 0x3 +1.35e129 } : BV:32
=loc 64 expr
1 : input.spec-%tmpvar-2.L1%9%bbentry : BV:32
=loc 64 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 67 expr
1 : input.spec-%tmpvar-6.L1%18%bbentry : BV:32
=loc 67 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 70 expr
1 : input.spec-%tmpvar-10.L1%27%bbentry : BV:32
=loc 70 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 73 expr
1 : input.spec-%tmpvar-14.L1%36%bbentry : BV:32
=loc 73 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 1 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 38 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 39 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 40 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 41 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 42 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 43 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 44 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 45 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 46 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 47 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 48 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 49 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 50 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 51 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 52 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 53 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 54 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 55 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 56 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 57 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 58 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 59 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 60 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 61 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 62 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 63 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 64 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 65 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 66 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 67 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 68 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 69 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 70 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 71 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 72 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 73 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 74 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 75 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 44 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 46 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 49 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 52 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 64 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 67 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 70 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 73 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L1%3%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%3%d=>L1%4%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%3%d=>L1%7%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%4%bbentry=>L1%9%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%7%bbentry=>L1%9%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%9%bbentry=>L1%12%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%12%d=>L1%13%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%12%d=>L1%16%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%13%bbentry=>L1%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%16%bbentry=>L1%18%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%18%bbentry=>L1%21%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%21%d=>L1%22%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%21%d=>L1%25%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%22%bbentry=>L1%27%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%25%bbentry=>L1%27%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%27%bbentry=>L1%30%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%30%d=>L1%31%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%30%d=>L1%34%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%31%bbentry=>L1%36%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%34%bbentry=>L1%36%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L1%36%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L1%3%d
=spec-%tmpvar-0.L1%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-1.L1%3%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%3%d=>L1%4%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%3%d=>L1%7%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%4%bbentry=>L1%9%bbentry
=spec-%tmpvar-2.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-3.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u-0.L1%9%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%7%bbentry=>L1%9%bbentry
=spec-%tmpvar-3.L1%9%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-0.L1%9%bbentry
1 : input.spec-%tmpvar-1.L1%3%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%9%bbentry=>L1%12%d
=spec-%var-m0-0.L1%12%d
1 : input.spec-%tmpvar-3.L1%9%bbentry : BV:32
=spec-%tmpvar-4.L1%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-5.L1%12%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%12%d=>L1%13%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%12%d=>L1%16%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%13%bbentry=>L1%18%bbentry
=spec-%tmpvar-6.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-7.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u2-0.L1%18%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%16%bbentry=>L1%18%bbentry
=spec-%var-val-1.L1%18%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-7.L1%18%bbentry
1 : input.spec-%tmpvar-5.L1%12%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%18%bbentry=>L1%21%d
=spec-%tmpvar-8.L1%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=spec-%var-m1-0.L1%21%d
1 : input.spec-%tmpvar-7.L1%18%bbentry : BV:32
=spec-%tmpvar-9.L1%21%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%21%d=>L1%22%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%21%d=>L1%25%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%22%bbentry=>L1%27%bbentry
=spec-%tmpvar-11.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u3-0.L1%27%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-10.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%25%bbentry=>L1%27%bbentry
=spec-%tmpvar-11.L1%27%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-2.L1%27%bbentry
1 : input.spec-%tmpvar-9.L1%21%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%27%bbentry=>L1%30%d
=spec-%tmpvar-12.L1%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=spec-%tmpvar-13.L1%30%d
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=spec-%var-m2-0.L1%30%d
1 : input.spec-%tmpvar-11.L1%27%bbentry : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%30%d=>L1%31%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%30%d=>L1%34%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%31%bbentry=>L1%36%bbentry
=spec-%tmpvar-14.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-15.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-u4-0.L1%36%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%34%bbentry=>L1%36%bbentry
=spec-%tmpvar-15.L1%36%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%var-val-3.L1%36%bbentry
1 : input.spec-%tmpvar-13.L1%30%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at L1%36%bbentry=>E0%0%d
=spec-%tmpvar-16.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%tmpvar-17.E0%0%d
1 : input.spec-%var-m1-0.L1%21%d : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : input.spec-%var-m2-0.L1%30%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=spec-%tmpvar-18.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-20.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-19.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-22.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%tmpvar-21.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=spec-%var-m3-0.E0%0%d
1 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
=spec-%tmpvar-23.E0%0%d
1 : input.spec-%var-m0-0.L1%12%d : BV:32
2 : input.spec-%tmpvar-15.L1%36%bbentry : BV:32
3 : input.spec-%var-m1-0.L1%21%d : BV:32
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : input.spec-%var-m2-0.L1%30%d : BV:32
6 : bvmul(4, 5) : BV:32
7 : bvadd(1, 2, 3, 6) : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L1%3%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L1%3%d done
=graph_with_simplified_assets.simplified_assumes at L1%3%d=>L1%4%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%3%d=>L1%4%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%3%d=>L1%7%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%3%d=>L1%7%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%4%bbentry=>L1%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%4%bbentry=>L1%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%7%bbentry=>L1%9%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%7%bbentry=>L1%9%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%9%bbentry=>L1%12%d
=graph_with_simplified_assets.simplified_assumes at L1%9%bbentry=>L1%12%d done
=graph_with_simplified_assets.simplified_assumes at L1%12%d=>L1%13%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%12%d=>L1%13%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%12%d=>L1%16%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%12%d=>L1%16%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%13%bbentry=>L1%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%13%bbentry=>L1%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%16%bbentry=>L1%18%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%16%bbentry=>L1%18%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%18%bbentry=>L1%21%d
=graph_with_simplified_assets.simplified_assumes at L1%18%bbentry=>L1%21%d done
=graph_with_simplified_assets.simplified_assumes at L1%21%d=>L1%22%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%21%d=>L1%22%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%21%d=>L1%25%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%21%d=>L1%25%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%22%bbentry=>L1%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%22%bbentry=>L1%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%25%bbentry=>L1%27%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%25%bbentry=>L1%27%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%27%bbentry=>L1%30%d
=graph_with_simplified_assets.simplified_assumes at L1%27%bbentry=>L1%30%d done
=graph_with_simplified_assets.simplified_assumes at L1%30%d=>L1%31%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%30%d=>L1%31%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%30%d=>L1%34%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%30%d=>L1%34%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%31%bbentry=>L1%36%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%31%bbentry=>L1%36%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%34%bbentry=>L1%36%bbentry
=graph_with_simplified_assets.simplified_assumes at L1%34%bbentry=>L1%36%bbentry done
=graph_with_simplified_assets.simplified_assumes at L1%36%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L1%36%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.foo
=suffixpath_at_L0%0%d for src.spec.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L1%3%d for src.spec.foo
=suffixpath_at_L1%3%d.graph_edge_composition
(L0%0%d=>L1%3%d)
=suffixpath_at_L1%4%bbentry for src.spec.foo
=suffixpath_at_L1%4%bbentry.graph_edge_composition
((L0%0%d=>L1%3%d)*(L1%3%d=>L1%4%bbentry))
=suffixpath_at_L1%7%bbentry for src.spec.foo
=suffixpath_at_L1%7%bbentry.graph_edge_composition
((L0%0%d=>L1%3%d)*(L1%3%d=>L1%7%bbentry))
=suffixpath_at_L1%9%bbentry for src.spec.foo
=suffixpath_at_L1%9%bbentry.graph_edge_composition
(((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))
=suffixpath_at_L1%12%d for src.spec.foo
=suffixpath_at_L1%12%d.graph_edge_composition
((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*(L1%9%bbentry=>L1%12%d))
=suffixpath_at_L1%13%bbentry for src.spec.foo
=suffixpath_at_L1%13%bbentry.graph_edge_composition
((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*(L1%12%d=>L1%13%bbentry)))
=suffixpath_at_L1%16%bbentry for src.spec.foo
=suffixpath_at_L1%16%bbentry.graph_edge_composition
((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*(L1%12%d=>L1%16%bbentry)))
=suffixpath_at_L1%18%bbentry for src.spec.foo
=suffixpath_at_L1%18%bbentry.graph_edge_composition
(((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))
=suffixpath_at_L1%21%d for src.spec.foo
=suffixpath_at_L1%21%d.graph_edge_composition
((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*(L1%18%bbentry=>L1%21%d))
=suffixpath_at_L1%22%bbentry for src.spec.foo
=suffixpath_at_L1%22%bbentry.graph_edge_composition
((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*(L1%21%d=>L1%22%bbentry)))
=suffixpath_at_L1%25%bbentry for src.spec.foo
=suffixpath_at_L1%25%bbentry.graph_edge_composition
((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*(L1%21%d=>L1%25%bbentry)))
=suffixpath_at_L1%27%bbentry for src.spec.foo
=suffixpath_at_L1%27%bbentry.graph_edge_composition
(((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))
=suffixpath_at_L1%30%d for src.spec.foo
=suffixpath_at_L1%30%d.graph_edge_composition
((((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))*(L1%27%bbentry=>L1%30%d))
=suffixpath_at_L1%31%bbentry for src.spec.foo
=suffixpath_at_L1%31%bbentry.graph_edge_composition
((((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))*((L1%27%bbentry=>L1%30%d)*(L1%30%d=>L1%31%bbentry)))
=suffixpath_at_L1%34%bbentry for src.spec.foo
=suffixpath_at_L1%34%bbentry.graph_edge_composition
((((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))*((L1%27%bbentry=>L1%30%d)*(L1%30%d=>L1%34%bbentry)))
=suffixpath_at_L1%36%bbentry for src.spec.foo
=suffixpath_at_L1%36%bbentry.graph_edge_composition
(((((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))*((L1%27%bbentry=>L1%30%d)*((L1%30%d=>L1%31%bbentry)*(L1%31%bbentry=>L1%36%bbentry))))+((((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))*((L1%27%bbentry=>L1%30%d)*((L1%30%d=>L1%34%bbentry)*(L1%34%bbentry=>L1%36%bbentry)))))
=suffixpath_at_E0%0%d for src.spec.foo
=suffixpath_at_E0%0%d.graph_edge_composition
((((((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))*((L1%27%bbentry=>L1%30%d)*((L1%30%d=>L1%31%bbentry)*(L1%31%bbentry=>L1%36%bbentry))))+((((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%22%bbentry)*(L1%22%bbentry=>L1%27%bbentry))))+((((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%13%bbentry)*(L1%13%bbentry=>L1%18%bbentry))))+((((L0%0%d=>L1%3%d)*((L1%3%d=>L1%4%bbentry)*(L1%4%bbentry=>L1%9%bbentry)))+((L0%0%d=>L1%3%d)*((L1%3%d=>L1%7%bbentry)*(L1%7%bbentry=>L1%9%bbentry))))*((L1%9%bbentry=>L1%12%d)*((L1%12%d=>L1%16%bbentry)*(L1%16%bbentry=>L1%18%bbentry)))))*((L1%18%bbentry=>L1%21%d)*((L1%21%d=>L1%25%bbentry)*(L1%25%bbentry=>L1%27%bbentry)))))*((L1%27%bbentry=>L1%30%d)*((L1%30%d=>L1%34%bbentry)*(L1%34%bbentry=>L1%36%bbentry)))))*(L1%36%bbentry=>E0%0%d))
=suffixpaths for src.spec.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L1%3%d
tfg.assumes_around_edge at L0%0%d=>L1%3%d done
tfg.assumes_around_edge at L1%3%d=>L1%4%bbentry
tfg.assumes_around_edge at L1%3%d=>L1%4%bbentry done
tfg.assumes_around_edge at L1%3%d=>L1%7%bbentry
tfg.assumes_around_edge at L1%3%d=>L1%7%bbentry done
tfg.assumes_around_edge at L1%4%bbentry=>L1%9%bbentry
tfg.assumes_around_edge at L1%4%bbentry=>L1%9%bbentry done
tfg.assumes_around_edge at L1%7%bbentry=>L1%9%bbentry
tfg.assumes_around_edge at L1%7%bbentry=>L1%9%bbentry done
tfg.assumes_around_edge at L1%9%bbentry=>L1%12%d
tfg.assumes_around_edge at L1%9%bbentry=>L1%12%d done
tfg.assumes_around_edge at L1%12%d=>L1%13%bbentry
tfg.assumes_around_edge at L1%12%d=>L1%13%bbentry done
tfg.assumes_around_edge at L1%12%d=>L1%16%bbentry
tfg.assumes_around_edge at L1%12%d=>L1%16%bbentry done
tfg.assumes_around_edge at L1%13%bbentry=>L1%18%bbentry
tfg.assumes_around_edge at L1%13%bbentry=>L1%18%bbentry done
tfg.assumes_around_edge at L1%16%bbentry=>L1%18%bbentry
tfg.assumes_around_edge at L1%16%bbentry=>L1%18%bbentry done
tfg.assumes_around_edge at L1%18%bbentry=>L1%21%d
tfg.assumes_around_edge at L1%18%bbentry=>L1%21%d done
tfg.assumes_around_edge at L1%21%d=>L1%22%bbentry
tfg.assumes_around_edge at L1%21%d=>L1%22%bbentry done
tfg.assumes_around_edge at L1%21%d=>L1%25%bbentry
tfg.assumes_around_edge at L1%21%d=>L1%25%bbentry done
tfg.assumes_around_edge at L1%22%bbentry=>L1%27%bbentry
tfg.assumes_around_edge at L1%22%bbentry=>L1%27%bbentry done
tfg.assumes_around_edge at L1%25%bbentry=>L1%27%bbentry
tfg.assumes_around_edge at L1%25%bbentry=>L1%27%bbentry done
tfg.assumes_around_edge at L1%27%bbentry=>L1%30%d
tfg.assumes_around_edge at L1%27%bbentry=>L1%30%d done
tfg.assumes_around_edge at L1%30%d=>L1%31%bbentry
tfg.assumes_around_edge at L1%30%d=>L1%31%bbentry done
tfg.assumes_around_edge at L1%30%d=>L1%34%bbentry
tfg.assumes_around_edge at L1%30%d=>L1%34%bbentry done
tfg.assumes_around_edge at L1%31%bbentry=>L1%36%bbentry
tfg.assumes_around_edge at L1%31%bbentry=>L1%36%bbentry done
tfg.assumes_around_edge at L1%34%bbentry=>L1%36%bbentry
tfg.assumes_around_edge at L1%34%bbentry=>L1%36%bbentry done
tfg.assumes_around_edge at L1%36%bbentry=>E0%0%d
tfg.assumes_around_edge at L1%36%bbentry=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.foo:
=TFG:
=Nodes: L0%0%d E0%0%d
=Edges:
L0%0%d => E0%0%d
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%add4.E0%0%d : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;foo}
=memlabel_map.0 for call-context {*;foo}
mlvar.dst.llvm.foo.0 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=memlabel_map.1 for call-context {*;foo}
mlvar.dst.llvm.foo.1 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=memlabel_map.2 for call-context {*;foo}
mlvar.dst.llvm.foo.2 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=memlabel_map.3 for call-context {*;foo}
mlvar.dst.llvm.foo.3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0
=Edge: L0%0%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
13 : mlvar.dst.llvm.foo.1 : MEMLABEL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvmul(14, 6) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(4, 16) : BV:32
18 : select(1, 2, 13, 17, 10, 11) : BV:32
19 : bvadd(12, 18) : BV:32
20 : mlvar.dst.llvm.foo.2 : MEMLABEL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvmul(21, 6) : BV:32
23 : bvadd(5, 22) : BV:32
24 : bvadd(4, 23) : BV:32
25 : select(1, 2, 20, 24, 10, 11) : BV:32
26 : mlvar.dst.llvm.foo.3 : MEMLABEL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvmul(27, 6) : BV:32
29 : bvadd(5, 28) : BV:32
30 : bvadd(4, 29) : BV:32
31 : select(1, 2, 26, 30, 10, 11) : BV:32
32 : bvsub(25, 31) : BV:32
33 : bvadd(19, 32) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
14 : mlvar.dst.llvm.foo.3 : MEMLABEL
15 : 2 { 0x2 +1.23e129 } : BV:32
16 : bvmul(15, 7) : BV:32
17 : bvadd(5, 16) : BV:32
18 : bvadd(4, 17) : BV:32
19 : select(1, 2, 14, 18, 11, 12) : BV:32
20 : bvsub(13, 19) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
=dst.llvm-%1.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.1 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 3 { 0x3 +1.35e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%2.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.2 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 1 { 0x1 +1.11e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%3.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.3 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 2 { 0x2 +1.23e129 } : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 2 { 0x2 +1.23e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
1 : 2 { 0x2 +1.23e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%add.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
13 : mlvar.dst.llvm.foo.1 : MEMLABEL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvmul(14, 6) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(4, 16) : BV:32
18 : select(1, 2, 13, 17, 10, 11) : BV:32
19 : bvadd(12, 18) : BV:32
=dst.llvm-%add4.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.foo.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(4, 8) : BV:32
10 : 4 { 0x4 +1.0e1025 } : INT
11 : 0 { 0x0 } : BOOL
12 : select(1, 2, 3, 9, 10, 11) : BV:32
13 : mlvar.dst.llvm.foo.1 : MEMLABEL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : bvmul(14, 6) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(4, 16) : BV:32
18 : select(1, 2, 13, 17, 10, 11) : BV:32
19 : bvadd(12, 18) : BV:32
20 : mlvar.dst.llvm.foo.2 : MEMLABEL
21 : 1 { 0x1 +1.11e129 } : BV:32
22 : bvmul(21, 6) : BV:32
23 : bvadd(5, 22) : BV:32
24 : bvadd(4, 23) : BV:32
25 : select(1, 2, 20, 24, 10, 11) : BV:32
26 : mlvar.dst.llvm.foo.3 : MEMLABEL
27 : 2 { 0x2 +1.23e129 } : BV:32
28 : bvmul(27, 6) : BV:32
29 : bvadd(5, 28) : BV:32
30 : bvadd(4, 29) : BV:32
31 : select(1, 2, 26, 30, 10, 11) : BV:32
32 : bvsub(25, 31) : BV:32
33 : bvadd(19, 32) : BV:32
=dst.llvm-%arrayidx.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(1, 5) : BV:32
=dst.llvm-%arrayidx1.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx2.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 1 { 0x1 +1.11e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%arrayidx3.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 2 { 0x2 +1.23e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
1 : 3 { 0x3 +1.35e129 } : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%m : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvslt(4, 4) : BOOL
6 : 32 { 0x20 +1.0e1025 } : INT
7 : bvsign_ext(4, 6) : BV:64
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvzero_ext(8, 6) : BV:64
10 : bvmul(7, 9) : BV:64
11 : 63 { 0x3f +1.0e1025 } : INT
12 : bvextract(10, 11, 6) : BV:32
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : eq(12, 13) : BOOL
15 : eq(12, 4) : BOOL
16 : ite(5, 14, 15) : BOOL
17 : isindexforsize(16, 2) : BOOL
18 : bvmul(4, 8) : BV:32
19 : bvadd(4, 18) : BV:32
20 : bvadd(1, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(17, 21) : BOOL
23 : and(3, 22) : BOOL
24 : islangaligned(20, 2) : BOOL
25 : and(23, 24) : BOOL
26 : 3 { 0x3 +1.35e129 } : BV:32
27 : bvslt(26, 4) : BOOL
28 : bvsign_ext(26, 6) : BV:64
29 : bvmul(28, 9) : BV:64
30 : bvextract(29, 11, 6) : BV:32
31 : eq(30, 13) : BOOL
32 : eq(30, 4) : BOOL
33 : ite(27, 31, 32) : BOOL
34 : isindexforsize(33, 2) : BOOL
35 : bvmul(26, 8) : BV:32
36 : bvadd(4, 35) : BV:32
37 : bvadd(1, 36) : BV:32
38 : isgepoffset(37, 35) : BOOL
39 : and(34, 38) : BOOL
40 : and(25, 39) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%m : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
10 : 1 { 0x1 +1.11e129 } : BV:32
11 : bvslt(10, 2) : BOOL
12 : 32 { 0x20 +1.0e1025 } : INT
13 : bvsign_ext(10, 12) : BV:64
14 : bvzero_ext(4, 12) : BV:64
15 : bvmul(13, 14) : BV:64
16 : 63 { 0x3f +1.0e1025 } : INT
17 : bvextract(15, 16, 12) : BV:32
18 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
19 : eq(17, 18) : BOOL
20 : eq(17, 2) : BOOL
21 : ite(11, 19, 20) : BOOL
22 : isindexforsize(21, 8) : BOOL
23 : bvmul(10, 4) : BV:32
24 : bvadd(2, 23) : BV:32
25 : bvadd(1, 24) : BV:32
26 : isgepoffset(25, 23) : BOOL
27 : and(22, 26) : BOOL
28 : and(9, 27) : BOOL
29 : islangaligned(25, 8) : BOOL
30 : and(28, 29) : BOOL
31 : 2 { 0x2 +1.23e129 } : BV:32
32 : bvslt(31, 2) : BOOL
33 : bvsign_ext(31, 12) : BV:64
34 : bvmul(33, 14) : BV:64
35 : bvextract(34, 16, 12) : BV:32
36 : eq(35, 18) : BOOL
37 : eq(35, 2) : BOOL
38 : ite(32, 36, 37) : BOOL
39 : isindexforsize(38, 8) : BOOL
40 : bvmul(31, 4) : BV:32
41 : bvadd(2, 40) : BV:32
42 : bvadd(1, 41) : BV:32
43 : isgepoffset(42, 40) : BOOL
44 : and(39, 43) : BOOL
45 : and(30, 44) : BOOL
46 : islangaligned(42, 8) : BOOL
47 : and(45, 46) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((((start_pc_edge*  %arrayidx = getelementptr inbounds i32, i32* %m, i32 0, !dbg !16)*(  %arrayidx = getelementptr inbounds i32, i32* %m, i32 0, !dbg !16*  %arrayidx = getelementptr inbounds i32, i32* %m, i32 0, !dbg !16))*(  %0 = load i32, i32* %arrayidx, align 4, !dbg !16*  %0 = load i32, i32* %arrayidx, align 4, !dbg !16))*(  %arrayidx1 = getelementptr inbounds i32, i32* %m, i32 3, !dbg !17*(  %arrayidx1 = getelementptr inbounds i32, i32* %m, i32 3, !dbg !17*  %arrayidx1 = getelementptr inbounds i32, i32* %m, i32 3, !dbg !17)))*((((((  %1 = load i32, i32* %arrayidx1, align 4, !dbg !17*  %1 = load i32, i32* %arrayidx1, align 4, !dbg !17)*  %add = add i32 %0, %1, !dbg !18)*(  %arrayidx2 = getelementptr inbounds i32, i32* %m, i32 1, !dbg !19*(  %arrayidx2 = getelementptr inbounds i32, i32* %m, i32 1, !dbg !19*  %arrayidx2 = getelementptr inbounds i32, i32* %m, i32 1, !dbg !19)))*(  %2 = load i32, i32* %arrayidx2, align 4, !dbg !19*  %2 = load i32, i32* %arrayidx2, align 4, !dbg !19))*(  %arrayidx3 = getelementptr inbounds i32, i32* %m, i32 2, !dbg !20*(  %arrayidx3 = getelementptr inbounds i32, i32* %m, i32 2, !dbg !20*  %arrayidx3 = getelementptr inbounds i32, i32* %m, i32 2, !dbg !20)))*((((  %3 = load i32, i32* %arrayidx3, align 4, !dbg !20*  %3 = load i32, i32* %arrayidx3, align 4, !dbg !20)*  %sub = sub i32 %2, %3, !dbg !21)*  %add4 = add i32 %add, %sub, !dbg !22)*  ret i32 %add4, !dbg !23)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.foo
=Loc 100003 in dst.llvm.foo.
REGMEM
dst.llvm-%m
1 : input.dst.llvm-%m : BV:32
=Loc 100025 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100027 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100028 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100029 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100030 in dst.llvm.foo.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100033 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100034 in dst.llvm.foo.
REGMEM
dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=Loc 100036 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100037 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap
=Loc 100038 in dst.llvm.foo.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
=Loc 100039 in dst.llvm.foo.
REGMEM
dst.llvm-%0.E0%0%d
1 : input.dst.llvm-%0.E0%0%d : BV:32
=Loc 100040 in dst.llvm.foo.
REGMEM
dst.llvm-%1.E0%0%d
1 : input.dst.llvm-%1.E0%0%d : BV:32
=Loc 100041 in dst.llvm.foo.
REGMEM
dst.llvm-%2.E0%0%d
1 : input.dst.llvm-%2.E0%0%d : BV:32
=Loc 100042 in dst.llvm.foo.
REGMEM
dst.llvm-%3.E0%0%d
1 : input.dst.llvm-%3.E0%0%d : BV:32
=Loc 100043 in dst.llvm.foo.
REGMEM
dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100044 in dst.llvm.foo.
REGMEM
dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100045 in dst.llvm.foo.
REGMEM
dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100046 in dst.llvm.foo.
REGMEM
dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100047 in dst.llvm.foo.
REGMEM
dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100048 in dst.llvm.foo.
REGMEM
dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100049 in dst.llvm.foo.
REGMEM
dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100050 in dst.llvm.foo.
REGMEM
dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100051 in dst.llvm.foo.
REGMEM
dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100052 in dst.llvm.foo.
REGMEM
dst.llvm-%add.E0%0%d
1 : input.dst.llvm-%add.E0%0%d : BV:32
=Loc 100053 in dst.llvm.foo.
REGMEM
dst.llvm-%add4.E0%0%d
1 : input.dst.llvm-%add4.E0%0%d : BV:32
=Loc 100054 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx.E0%0%d
1 : input.dst.llvm-%arrayidx.E0%0%d : BV:32
=Loc 100055 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx1.E0%0%d
1 : input.dst.llvm-%arrayidx1.E0%0%d : BV:32
=Loc 100056 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx2.E0%0%d
1 : input.dst.llvm-%arrayidx2.E0%0%d : BV:32
=Loc 100057 in dst.llvm.foo.
REGMEM
dst.llvm-%arrayidx3.E0%0%d
1 : input.dst.llvm-%arrayidx3.E0%0%d : BV:32
=Loc 100058 in dst.llvm.foo.
REGMEM
dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=Loc 100059 in dst.llvm.foo.
REGMEM
dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : BV:32
=Loc 100060 in dst.llvm.foo.
REGMEM
dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=Loc 100061 in dst.llvm.foo.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100062 in dst.llvm.foo.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100063 in dst.llvm.foo.
REGMEM
dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=Loc 100064 in dst.llvm.foo.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100065 in dst.llvm.foo.
REGMEM
dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=Loc 100066 in dst.llvm.foo.
REGMEM
dst.cur_rounding_mode.E0%0%d
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=Locs end
=Liveness in dst.llvm.foo
=live locs at L0%0%d
100003, 100037, 100038, 
=live locs at E0%0%d
100037, 100053[f], 

=Definedness in dst.llvm.foo
=loc definedness at L0%0%d
100003, 100034, 100036, 100037, 100038
=loc definedness at E0%0%d
100003, 100034, 100036, 100037, 100038, 100039, 100040, 100041, 100042, 100043, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066

=Branch affecting variable locs in dst.llvm.foo
=branch affecting variable locs at L0%0%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.foo
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100039 {input.dst.llvm-%0.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100040 {input.dst.llvm-%1.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100041 {input.dst.llvm-%2.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100042 {input.dst.llvm-%3.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100043 {input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100044 {input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100045 {input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100046 {input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100047 {input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100048 {input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100049 {input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100050 {input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d }
1 : input.dst.llvm-%m : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100051 {input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100052 {input.dst.llvm-%add.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : bvadd(7, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100053 {input.dst.llvm-%add4.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100054 {input.dst.llvm-%arrayidx.E0%0%d }
1 : input.dst.llvm-%m : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100055 {input.dst.llvm-%arrayidx1.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100056 {input.dst.llvm-%arrayidx2.E0%0%d }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100057 {input.dst.llvm-%arrayidx3.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100058 {input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d }
1 : 12 { 0xc +1.143e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100059 {input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d }
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100060 {input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d }
1 : 12 { 0xc +1.143e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100061 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100062 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100063 {input.dst.llvm-%sub.E0%0%d }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : 8 { 0x8 +1.95e129 } : BV:32
12 : bvadd(5, 11) : BV:32
13 : select(1, 2, 3, 12, 7, 8) : BV:32
14 : bvmul(10, 13) : BV:32
15 : bvadd(9, 14) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100064 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100065 {input.dst.local_alloc_count.E0%0%d }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d for loc_id 100066 {input.dst.cur_rounding_mode.E0%0%d }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.foo
=avail_exprs begin
=loc 100003
=loc_expr
140499 : input.dst.llvm-%m : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100025
=loc_expr
140468 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100027
=loc_expr
140469 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100028
=loc_expr
140471 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100029
=loc_expr
140473 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100030
=loc_expr
140475 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140450 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140498 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100039
=loc_expr
140976 : input.dst.llvm-%0.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=avail_exprs_val.end
=loc 100040
=loc_expr
140977 : input.dst.llvm-%1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100041
=loc_expr
140978 : input.dst.llvm-%2.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100042
=loc_expr
140979 : input.dst.llvm-%3.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=avail_exprs_val.end
=loc 100043
=loc_expr
140980 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100044
=loc_expr
140981 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100045
=loc_expr
140982 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100046
=loc_expr
140983 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100047
=loc_expr
140984 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100048
=loc_expr
140985 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100049
=loc_expr
140986 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100050
=loc_expr
140987 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
=avail_exprs_val.end
=loc 100051
=loc_expr
140988 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100052
=loc_expr
140989 : input.dst.llvm-%add.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : bvadd(7, 10) : BV:32
=avail_exprs_val.end
=loc 100053
=loc_expr
140947 : input.dst.llvm-%add4.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140990 : input.dst.llvm-%arrayidx.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
=avail_exprs_val.end
=loc 100055
=loc_expr
140991 : input.dst.llvm-%arrayidx1.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100056
=loc_expr
140992 : input.dst.llvm-%arrayidx2.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100057
=loc_expr
140993 : input.dst.llvm-%arrayidx3.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100058
=loc_expr
140994 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
=avail_exprs_val.end
=loc 100059
=loc_expr
140995 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100060
=loc_expr
140996 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 12 { 0xc +1.143e129 } : BV:32
=avail_exprs_val.end
=loc 100061
=loc_expr
140500 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100062
=loc_expr
140501 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=avail_exprs_val.end
=loc 100063
=loc_expr
140409 : input.dst.llvm-%sub.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : 8 { 0x8 +1.95e129 } : BV:32
12 : bvadd(5, 11) : BV:32
13 : select(1, 2, 3, 12, 7, 8) : BV:32
14 : bvmul(10, 13) : BV:32
15 : bvadd(9, 14) : BV:32
=avail_exprs_val.end
=loc 100064
=loc_expr
140502 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140997 : input.dst.local_alloc_count.E0%0%d : COUNT
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.end
=loc 100066
=loc_expr
140998 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.foo
=loc 100043 expr
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100043 spreled-expr
140633 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100045 expr
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100045 spreled-expr
140633 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100046 expr
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100046 spreled-expr
140423 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100048 expr
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100048 spreled-expr
140423 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100049 expr
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100049 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100051 expr
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100051 spreled-expr
140290 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100058 expr
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=loc 100058 spreled-expr
140628 : 12 { 0xc +1.143e129 } : BV:32
=loc 100060 expr
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=loc 100060 spreled-expr
140628 : 12 { 0xc +1.143e129 } : BV:32
=loc 100064 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100064 spreled-expr
140267 : retaddr_const : BV:32
=loc 100065 expr
1 : input.dst.local_alloc_count.E0%0%d : COUNT
=loc 100065 spreled-expr
140450 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=loc 100066 expr
1 : input.dst.cur_rounding_mode.E0%0%d : ROUNDING_MODE
=loc 100066 spreled-expr
140449 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;foo}
=loc_id 100003 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100025 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100027 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100028 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100029 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100030 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;foo}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100037 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100038 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100039 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100040 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100041 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100042 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100043 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100044 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100047 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100050 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100052 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100054 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100055 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100056 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100057 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100058 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100060 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100063 lr-status in lr-status-map at call-context {*;foo}
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;foo}
lr_status_linearly_related(; )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100043 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100045 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100046 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100048 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100049 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100051 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100060 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100064 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=dst.llvm-%sub.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : 8 { 0x8 +1.95e129 } : BV:32
12 : bvadd(5, 11) : BV:32
13 : select(1, 2, 3, 12, 7, 8) : BV:32
14 : bvmul(10, 13) : BV:32
15 : bvadd(9, 14) : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=dst.cur_rounding_mode.E0%0%d
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%0.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=dst.llvm-%1.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%2.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : input.dst.llvm-%m : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%3.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : 4 { 0x4 +1.0e1025 } : INT
8 : 0 { 0x0 } : BOOL
9 : select(1, 2, 3, 6, 7, 8) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
=dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%add.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : bvadd(7, 10) : BV:32
=dst.llvm-%add4.E0%0%d
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%m : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
8 : 12 { 0xc +1.143e129 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : select(1, 2, 3, 9, 5, 6) : BV:32
11 : 4 { 0x4 +1.47e129 } : BV:32
12 : bvadd(11, 4) : BV:32
13 : select(1, 2, 3, 12, 5, 6) : BV:32
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : bvadd(4, 15) : BV:32
17 : select(1, 2, 3, 16, 5, 6) : BV:32
18 : bvmul(14, 17) : BV:32
19 : bvadd(7, 10, 13, 18) : BV:32
=dst.llvm-%arrayidx.E0%0%d
1 : input.dst.llvm-%m : BV:32
=dst.llvm-%arrayidx1.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%arrayidx2.E0%0%d
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%m : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%arrayidx3.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
1 : 12 { 0xc +1.143e129 } : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
1 : input.dst.llvm-%m : BV:32
2 : 12 { 0xc +1.143e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
1 : 12 { 0xc +1.143e129 } : BV:32
=dst.local_alloc_count.E0%0%d
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%m : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvadd(2, 3) : BV:32
5 : isgepoffset(4, 3) : BOOL
6 : 12 { 0xc +1.143e129 } : BV:32
7 : bvadd(2, 6) : BV:32
8 : 4 { 0x4 +1.0e1025 } : INT
9 : islangaligned(7, 8) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvadd(10, 2) : BV:32
12 : isgepoffset(11, 10) : BOOL
13 : and(1, 12) : BOOL
14 : and(9, 13) : BOOL
15 : islangaligned(11, 8) : BOOL
16 : and(1, 5, 14, 15) : BOOL
17 : islangaligned(4, 8) : BOOL
18 : and(16, 17) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d assume# 1
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%m : BV:32
3 : 4 { 0x4 +1.0e1025 } : INT
4 : islangaligned(2, 3) : BOOL
5 : 12 { 0xc +1.143e129 } : BV:32
6 : bvadd(2, 5) : BV:32
7 : isgepoffset(6, 5) : BOOL
8 : 0 { 0x0 +1.0e129 } : BV:32
9 : isgepoffset(2, 8) : BOOL
10 : and(1, 9) : BOOL
11 : and(4, 10) : BOOL
12 : and(1, 4, 7, 11) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
4
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for dst.llvm.foo
=suffixpath_at_L0%0%d for dst.llvm.foo
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_E0%0%d for dst.llvm.foo
=suffixpath_at_E0%0%d.graph_edge_composition
(L0%0%d=>E0%0%d)
=suffixpaths for dst.llvm.foo done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>E0%0%d
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.ec
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #0.pred
=Comment
undef-behavioursome.edge.L0%0%d=>E0%0%d
=LhsExpr
140276 : 1 { 0x1 } : BOOL
140499 : input.dst.llvm-%m : BV:32
140633 : 8 { 0x8 +1.95e129 } : BV:32
140634 : bvadd(140499, 140633) : BV:32
140649 : isgepoffset(140634, 140633) : BOOL
140628 : 12 { 0xc +1.143e129 } : BV:32
140629 : bvadd(140499, 140628) : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
141068 : islangaligned(140629, 140420) : BOOL
140423 : 4 { 0x4 +1.47e129 } : BV:32
140657 : bvadd(140423, 140499) : BV:32
140680 : isgepoffset(140657, 140423) : BOOL
141079 : and(140276, 140680) : BOOL
141081 : and(141068, 141079) : BOOL
141083 : islangaligned(140657, 140420) : BOOL
141097 : and(140276, 140649, 141081, 141083) : BOOL
141099 : islangaligned(140634, 140420) : BOOL
141102 : and(141097, 141099) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1.ec
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>E0%0%d assume #1.pred
=Comment
undef-behavioursome.edge.L0%0%d=>E0%0%d
=LhsExpr
140276 : 1 { 0x1 } : BOOL
140499 : input.dst.llvm-%m : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140531 : islangaligned(140499, 140420) : BOOL
140628 : 12 { 0xc +1.143e129 } : BV:32
140629 : bvadd(140499, 140628) : BV:32
140647 : isgepoffset(140629, 140628) : BOOL
140290 : 0 { 0x0 +1.0e129 } : BV:32
140646 : isgepoffset(140499, 140290) : BOOL
141049 : and(140276, 140646) : BOOL
141051 : and(140531, 141049) : BOOL
141066 : and(140276, 140531, 140647, 141051) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 2
=pc
Lentry%2%d
=linename
line 2
=pc
Lentry%3%d
=linename
line 2
=pc
Lentry%4%d
=linename
line 2
=pc
Lentry%5%d
=linename
line 2
=pc
Lentry%6%d
=linename
line 2
=pc
Lentry%7%d
=linename
line 2
=pc
Lentry%8%d
=linename
line 2
=pc
Lentry%9%d
=linename
line 2
=pc
Lentry%10%d
=linename
line 2
=pc
Lentry%11%d
=linename
line 2
=pc
Lentry%12%d
=linename
line 2
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 11
=pc
Lentry%2%d
=column_name
 at column 11
=pc
Lentry%3%d
=column_name
 at column 18
=pc
Lentry%4%d
=column_name
 at column 18
=pc
Lentry%5%d
=column_name
 at column 16
=pc
Lentry%6%d
=column_name
 at column 27
=pc
Lentry%7%d
=column_name
 at column 27
=pc
Lentry%8%d
=column_name
 at column 34
=pc
Lentry%9%d
=column_name
 at column 34
=pc
Lentry%10%d
=column_name
 at column 32
=pc
Lentry%11%d
=column_name
 at column 24
=pc
Lentry%12%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 2 at column 11)
=pc
Lentry%2%d
=line_and_column
(line 2 at column 11)
=pc
Lentry%3%d
=line_and_column
(line 2 at column 18)
=pc
Lentry%4%d
=line_and_column
(line 2 at column 18)
=pc
Lentry%5%d
=line_and_column
(line 2 at column 16)
=pc
Lentry%6%d
=line_and_column
(line 2 at column 27)
=pc
Lentry%7%d
=line_and_column
(line 2 at column 27)
=pc
Lentry%8%d
=line_and_column
(line 2 at column 34)
=pc
Lentry%9%d
=line_and_column
(line 2 at column 34)
=pc
Lentry%10%d
=line_and_column
(line 2 at column 32)
=pc
Lentry%11%d
=line_and_column
(line 2 at column 24)
=pc
Lentry%12%d
=line_and_column
(line 2 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%sub : L0%0%d : (input.dst.llvm-%2 - input.dst.llvm-%3)
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%add4
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.local_alloc_count : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%sub.E0%0%d : L0%0%d : (DSTMEM[(4 + m')]_4 - DSTMEM[(m' + 8)]_4)
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : (DSTMEM[m']_4 + DSTMEM[(m' + 12)]_4 + DSTMEM[(4 + m')]_4 - DSTMEM[(m' + 8)]_4)
input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___foo__x__=L0%0%argnum0=/
input.dst.llvm-%m : L0%0%d : m'
input.dst.llvm-%add4 : L0%0%d : (input.dst.llvm-%add + input.dst.llvm-%sub)
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset : L0%0%d : m'
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset : L0%0%d : 12
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset : L0%0%d : (m' + 12)
input.dst.llvm-%0 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx1]_4
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset : L0%0%d : 4
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset : L0%0%d : (m' + 4)
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset : L0%0%d : 8
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset : L0%0%d : (m' + 8)
input.dst.llvm-%2 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx2]_4
input.dst.llvm-%3 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx3]_4
input.dst.llvm-%add : L0%0%d : (input.dst.llvm-%0 + input.dst.llvm-%1)
input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset : L0%0%d : 12
input.dst.llvm-%arrayidx1 : L0%0%d : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset : L0%0%d : 4
input.dst.llvm-%arrayidx2 : L0%0%d : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset : L0%0%d : 8
input.dst.llvm-%arrayidx3 : L0%0%d : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%add.E0%0%d : L0%0%d : (DSTMEM[m']_4 + DSTMEM[(m' + 12)]_4)
input.dst.llvm-%1.E0%0%d : L0%0%d : DSTMEM[(m' + 12)]_4
input.dst.llvm-%2.E0%0%d : L0%0%d : DSTMEM[(4 + m')]_4
input.dst.llvm-%arrayidx.E0%0%d : L0%0%d : m'
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : L0%0%d : 8
input.dst.llvm-%arrayidx1.E0%0%d : L0%0%d : (m' + 12)
input.dst.llvm-%0.E0%0%d : L0%0%d : DSTMEM[m']_4
input.dst.llvm-%3.E0%0%d : L0%0%d : DSTMEM[(m' + 8)]_4
input.dst.llvm-%arrayidx2.E0%0%d : L0%0%d : (4 + m')
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : L0%0%d : (m' + 8)
input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%arrayidx3.E0%0%d : L0%0%d : (m' + 8)
input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 8
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : L0%0%d : 12
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : L0%0%d : 0
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : L0%0%d : (m' + 12)
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : L0%0%d : (4 + m')
input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 4
input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : L0%0%d : 12
input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : L0%0%d : m'
input.dst.llvm-%add4.E0%0%d : L0%0%d : (DSTMEM[m']_4 + DSTMEM[(m' + 12)]_4 + DSTMEM[(4 + m')]_4 - DSTMEM[(m' + 8)]_4)
input.dst.local_alloc_count.E0%0%d : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.cur_rounding_mode.E0%0%d : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%sub
=dst.llvm-%sub loop pc: L0%0%d
=dst.llvm-%sub val_scevb
=dst.llvm-%sub val_scevb scev
=dst.llvm-%sub val_scevb scev loop: L0%0%d
=dst.llvm-%sub val_scevb scev scev_overflow_flag: 
=dst.llvm-%sub val_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
19 : scev_op_add(18, 14) : loop L0%0%d : 
=dst.llvm-%sub val_scevb scev scev_expr done
=dst.llvm-%sub val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub val_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub val_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb
=dst.llvm-%sub atuse_scevb scev
=dst.llvm-%sub atuse_scevb scev loop: L0%0%d
=dst.llvm-%sub atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%sub atuse_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
19 : scev_op_add(18, 14) : loop L0%0%d : 
=dst.llvm-%sub atuse_scevb scev scev_expr done
=dst.llvm-%sub atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%sub atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%sub atexit_scev nullptr
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: L0%0%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
6 : input.dst.llvm-%m : BV32
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
6 : input.dst.llvm-%m : BV32
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev nullptr
=dst.llvm-%0
=dst.llvm-%0 loop pc: L0%0%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
7 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
7 : input.dst.llvm-%0 : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev nullptr
=dst.llvm-%arrayidx1
=dst.llvm-%arrayidx1 loop pc: L0%0%d
=dst.llvm-%arrayidx1 val_scevb
=dst.llvm-%arrayidx1 val_scevb scev
=dst.llvm-%arrayidx1 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx1 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx1 val_scevb scev scev_expr
8 : 00000000000000000000000000001100b
6 : input.dst.llvm-%m : BV32
9 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx1 val_scevb scev scev_expr done
=dst.llvm-%arrayidx1 val_scevb unsigned lower bound: 32:2147483660
=dst.llvm-%arrayidx1 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx1 val_scevb signed lower bound: 32:2147483660
=dst.llvm-%arrayidx1 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx1 atuse_scevb
=dst.llvm-%arrayidx1 atuse_scevb scev
=dst.llvm-%arrayidx1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx1 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx1 atuse_scevb scev scev_expr
8 : 00000000000000000000000000001100b
6 : input.dst.llvm-%m : BV32
9 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx1 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx1 atuse_scevb unsigned lower bound: 32:2147483660
=dst.llvm-%arrayidx1 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx1 atuse_scevb signed lower bound: 32:2147483660
=dst.llvm-%arrayidx1 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx1 atexit_scev nullptr
=dst.llvm-%1
=dst.llvm-%1 loop pc: L0%0%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev nullptr
=dst.llvm-%add
=dst.llvm-%add loop pc: L0%0%d
=dst.llvm-%add val_scevb
=dst.llvm-%add val_scevb scev
=dst.llvm-%add val_scevb scev loop: L0%0%d
=dst.llvm-%add val_scevb scev scev_overflow_flag: 
=dst.llvm-%add val_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=dst.llvm-%add val_scevb scev scev_expr done
=dst.llvm-%add val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb
=dst.llvm-%add atuse_scevb scev
=dst.llvm-%add atuse_scevb scev loop: L0%0%d
=dst.llvm-%add atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add atuse_scevb scev scev_expr
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=dst.llvm-%add atuse_scevb scev scev_expr done
=dst.llvm-%add atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add atexit_scev nullptr
=dst.llvm-%arrayidx2
=dst.llvm-%arrayidx2 loop pc: L0%0%d
=dst.llvm-%arrayidx2 val_scevb
=dst.llvm-%arrayidx2 val_scevb scev
=dst.llvm-%arrayidx2 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx2 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx2 val_scevb scev scev_expr
12 : 00000000000000000000000000000100b
6 : input.dst.llvm-%m : BV32
13 : scev_op_add(12, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx2 val_scevb scev scev_expr done
=dst.llvm-%arrayidx2 val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%arrayidx2 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx2 val_scevb signed lower bound: 32:2147483652
=dst.llvm-%arrayidx2 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx2 atuse_scevb
=dst.llvm-%arrayidx2 atuse_scevb scev
=dst.llvm-%arrayidx2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx2 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx2 atuse_scevb scev scev_expr
12 : 00000000000000000000000000000100b
6 : input.dst.llvm-%m : BV32
13 : scev_op_add(12, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx2 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx2 atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%arrayidx2 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx2 atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%arrayidx2 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx2 atexit_scev nullptr
=dst.llvm-%2
=dst.llvm-%2 loop pc: L0%0%d
=dst.llvm-%2 val_scevb
=dst.llvm-%2 val_scevb scev
=dst.llvm-%2 val_scevb scev loop: L0%0%d
=dst.llvm-%2 val_scevb scev scev_overflow_flag: 
=dst.llvm-%2 val_scevb scev scev_expr
14 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 val_scevb scev scev_expr done
=dst.llvm-%2 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb
=dst.llvm-%2 atuse_scevb scev
=dst.llvm-%2 atuse_scevb scev loop: L0%0%d
=dst.llvm-%2 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%2 atuse_scevb scev scev_expr
14 : input.dst.llvm-%2 : BV32
=dst.llvm-%2 atuse_scevb scev scev_expr done
=dst.llvm-%2 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%2 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%2 atexit_scev nullptr
=dst.llvm-%arrayidx3
=dst.llvm-%arrayidx3 loop pc: L0%0%d
=dst.llvm-%arrayidx3 val_scevb
=dst.llvm-%arrayidx3 val_scevb scev
=dst.llvm-%arrayidx3 val_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx3 val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx3 val_scevb scev scev_expr
15 : 00000000000000000000000000001000b
6 : input.dst.llvm-%m : BV32
16 : scev_op_add(15, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx3 val_scevb scev scev_expr done
=dst.llvm-%arrayidx3 val_scevb unsigned lower bound: 32:2147483656
=dst.llvm-%arrayidx3 val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx3 val_scevb signed lower bound: 32:2147483656
=dst.llvm-%arrayidx3 val_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx3 atuse_scevb
=dst.llvm-%arrayidx3 atuse_scevb scev
=dst.llvm-%arrayidx3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%arrayidx3 atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%arrayidx3 atuse_scevb scev scev_expr
15 : 00000000000000000000000000001000b
6 : input.dst.llvm-%m : BV32
16 : scev_op_add(15, 6) : loop L0%0%d : nsw
=dst.llvm-%arrayidx3 atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx3 atuse_scevb unsigned lower bound: 32:2147483656
=dst.llvm-%arrayidx3 atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%arrayidx3 atuse_scevb signed lower bound: 32:2147483656
=dst.llvm-%arrayidx3 atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%arrayidx3 atexit_scev nullptr
=dst.llvm-%3
=dst.llvm-%3 loop pc: L0%0%d
=dst.llvm-%3 val_scevb
=dst.llvm-%3 val_scevb scev
=dst.llvm-%3 val_scevb scev loop: L0%0%d
=dst.llvm-%3 val_scevb scev scev_overflow_flag: 
=dst.llvm-%3 val_scevb scev scev_expr
17 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 val_scevb scev scev_expr done
=dst.llvm-%3 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb
=dst.llvm-%3 atuse_scevb scev
=dst.llvm-%3 atuse_scevb scev loop: L0%0%d
=dst.llvm-%3 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%3 atuse_scevb scev scev_expr
17 : input.dst.llvm-%3 : BV32
=dst.llvm-%3 atuse_scevb scev scev_expr done
=dst.llvm-%3 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%3 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%3 atexit_scev nullptr
=dst.llvm-%add4
=dst.llvm-%add4 loop pc: L0%0%d
=dst.llvm-%add4 val_scevb
=dst.llvm-%add4 val_scevb scev
=dst.llvm-%add4 val_scevb scev loop: L0%0%d
=dst.llvm-%add4 val_scevb scev scev_overflow_flag: 
=dst.llvm-%add4 val_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
20 : scev_op_add(18, 14, 10, 7) : loop L0%0%d : 
=dst.llvm-%add4 val_scevb scev scev_expr done
=dst.llvm-%add4 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add4 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add4 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%add4 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb
=dst.llvm-%add4 atuse_scevb scev
=dst.llvm-%add4 atuse_scevb scev loop: L0%0%d
=dst.llvm-%add4 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%add4 atuse_scevb scev scev_expr
1 : 11111111111111111111111111111111b
17 : input.dst.llvm-%3 : BV32
18 : scev_op_mul(1, 17) : loop L0%0%d : 
14 : input.dst.llvm-%2 : BV32
10 : input.dst.llvm-%1 : BV32
7 : input.dst.llvm-%0 : BV32
20 : scev_op_add(18, 14, 10, 7) : loop L0%0%d : 
=dst.llvm-%add4 atuse_scevb scev scev_expr done
=dst.llvm-%add4 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%add4 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%add4 atexit_scev nullptr
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%m : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-%sub.E0%0%d : BV:32
=reaching defns for expr 4 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 5 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 6 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 7 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-%add4.E0%0%d : BV:32
=reaching defns for expr 8 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-%0.E0%0%d : BV:32
=reaching defns for expr 9 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-%1.E0%0%d : BV:32
=reaching defns for expr 10 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%2.E0%0%d : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%3.E0%0%d : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 16 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 17 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 18 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 19 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 20 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 21 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%add.E0%0%d : BV:32
=reaching defns for expr 22 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%arrayidx.E0%0%d : BV:32
=reaching defns for expr 23 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-%arrayidx1.E0%0%d : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%arrayidx2.E0%0%d : BV:32
=reaching defns for expr 25 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-%arrayidx3.E0%0%d : BV:32
=reaching defns for expr 26 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d : BV:32
=reaching defns for expr 27 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d : BV:32
=reaching defns for expr 28 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d : BV:32
=reaching defns for expr 29 edges
  L0%0%d=>E0%0%d
=reaching defns for expr 29 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%sub.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.local./*___y___foo__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.llvm-%m
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%add.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%1.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%2.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%arrayidx.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx1.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%0.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%3.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%arrayidx2.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%72f0355cb9847d924c673de58468b759.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx3.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%4ad719ffd051f6fadb1eb586f6dacea2.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.1.total_offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%55a147996d5c345040cc3a80efece8a6.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%be7d873adafde1195cfad5d1695ee47.intermediate.gepoffset.1.offset.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%72f0355cb9847d924c673de58468b759.gepoffset.2.total_offset.E0%0%d
lr_status_bottom(; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.llvm-%add4.E0%0%d
lr_status_bottom(; memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, )
=LR status for var input.dst.local_alloc_count.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.cur_rounding_mode.E0%0%d
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename fcall3.proof
=function_name foo
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: bar
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg1
=LhsExpr
1 : $spec-arg-1 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-1 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pred 1
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=FunctionName: foo
=EntryPreconds
=pred 0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
equal-ret
=LhsExpr
1 : $spec-ret : BV:32
2 : $llvm-ret : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => E0%0%d_E0%0%d
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: foo
=Input: llvm-method-arg.0
=arg addr
1 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%m : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : bar : 6 : 1 : 0
C_SYMBOL2 : foo : 13 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%m : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L0%0%d#{0,0}=>L1%3%d#{0,0})*((((L1%3%d#{0,0}=>L1%4%bbentry#{0,0})*(L1%4%bbentry#{0,0}=>L1%9%bbentry#{0,0}))+((L1%3%d#{0,0}=>L1%7%bbentry#{0,0})*(L1%7%bbentry#{0,0}=>L1%9%bbentry#{0,0})))*((L1%9%bbentry#{0,0}=>L1%12%d#{0,0})*((((L1%12%d#{0,0}=>L1%13%bbentry#{0,0})*(L1%13%bbentry#{0,0}=>L1%18%bbentry#{0,0}))+((L1%12%d#{0,0}=>L1%16%bbentry#{0,0})*(L1%16%bbentry#{0,0}=>L1%18%bbentry#{0,0})))*((L1%18%bbentry#{0,0}=>L1%21%d#{0,0})*((((L1%21%d#{0,0}=>L1%22%bbentry#{0,0})*(L1%22%bbentry#{0,0}=>L1%27%bbentry#{0,0}))+((L1%21%d#{0,0}=>L1%25%bbentry#{0,0})*(L1%25%bbentry#{0,0}=>L1%27%bbentry#{0,0})))*((L1%27%bbentry#{0,0}=>L1%30%d#{0,0})*((((L1%30%d#{0,0}=>L1%31%bbentry#{0,0})*(L1%31%bbentry#{0,0}=>L1%36%bbentry#{0,0}))+((L1%30%d#{0,0}=>L1%34%bbentry#{0,0})*(L1%34%bbentry#{0,0}=>L1%36%bbentry#{0,0})))*(L1%36%bbentry#{0,0}=>E0%0%d#{0,0})))))))))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>E0%0%d#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
pointer-implements-map-arg0
=LhsExpr
1 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
2 : Lambda0Var : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : 100 { 0x64 +1.1192e129 } : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1Var : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%m : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : bvand(10, 11) : BV:32
13 : 0 { 0x0 +1.0e129 } : BV:32
14 : eq(12, 13) : BOOL
15 : and(9, 14) : BOOL
16 : eq(10, 1) : BOOL
17 : and(15, 16) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.2
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%m : BV:32
=predicate done
=graph_with_precondition_done

=Locs in foo.A1
=Locs end
=Liveness in foo.A1
=live locs at L0%0%d_L0%0%d

=live locs at E0%0%d_E0%0%d


=Definedness in foo.A1

=Branch affecting variable locs in foo.A1

=Relevant Memlabels in foo.A1
=relevant memlabels
=function: foo
memlabel-mem--arg.0
memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/
memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in foo.A1
=avail_exprs begin
=avail_exprs end
=sprel_map in foo.A1
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce930.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce930 b41bfd487d4aad9fed34aea3849418c5
=input.spec-%var-m-0
1 : Lambda8041Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8042Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(17, 22) : BOOL
24 : eq(17, 2) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 17) : BV:32
27 : 3774873765 { 0xe10000a5 -520093531 -1.1966e67 } : BV:32
28 : bvadd(18, 26, 27) : BV:32
29 : 2703434075 { 0xa123215b -1591533221 -1.27445542e195 } : BV:32
30 : eq(28, 29) : BOOL
31 : 225 { 0xe1 -31 } : BV:8
32 : 2703434072 { 0xa1232158 -1591533224 -1.27445507e195 } : BV:32
33 : eq(28, 32) : BOOL
34 : 165 { 0xa5 -91 } : BV:8
35 : 0 { 0x0 } : BV:8
36 : ite(33, 34, 35) : BV:8
37 : ite(30, 31, 36) : BV:8
38 : bvadd(20, 26, 27) : BV:32
39 : eq(38, 29) : BOOL
40 : eq(38, 32) : BOOL
41 : ite(40, 34, 35) : BV:8
42 : ite(39, 31, 41) : BV:8
43 : bvadd(22, 26, 27) : BV:32
44 : eq(43, 29) : BOOL
45 : eq(43, 32) : BOOL
46 : ite(45, 34, 35) : BV:8
47 : ite(44, 31, 46) : BV:8
48 : bvadd(26, 27) : BV:32
49 : eq(48, 29) : BOOL
50 : eq(48, 32) : BOOL
51 : ite(50, 34, 35) : BV:8
52 : ite(49, 31, 51) : BV:8
53 : bvconcat(37, 42, 47, 52) : BV:32
54 : ite(24, 2, 53) : BV:32
55 : ite(23, 2, 54) : BV:32
56 : ite(21, 2, 55) : BV:32
57 : ite(19, 2, 56) : BV:32
58 : lambda(17, 57) : FUNCTION[BV:32 -> BV:32]
59 : map(16, 58) : MAP[BV:32 -> BV:32]
60 : sym_const(59) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.L1%12%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.dst.llvm-mem
1 : ([ 0; 2703434071 ] -> 0, [ 2703434072; 2703434072 ] -> 165, [ 2703434073; 2703434074 ] -> 0, [ 2703434075; 2703434075 ] -> 225, [ 2703434076; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2703434071 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, [ 2703434072; 2703434075 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 2703434076; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 2703434072 { 0xa1232158 -1591533224 -1.27445507e195 } : BV:32
=input.dst.llvm-%m
1 : 3774873765 { 0xe10000a5 -520093531 -1.1966e67 } : BV:32
=input.spec-%var-val-3.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 2703434075 { 0xa123215b -1591533221 -1.27445542e195 } : BV:32
=input.spec-%tmpvar-8.L1%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 2703434072 { 0xa1232158 -1591533224 -1.27445507e195 } : BV:32
=input.spec-%tmpvar-4.L1%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L1%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L1%3%d
1 : 512 { 0x200 +1.6103e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-12.L1%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-9.L1%21%d
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-2.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L1%30%d
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-1.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-2.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L1%12%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L1%30%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L1%30%d.0
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%tmpvar-9.L1%21%d.0
1 : 4194304 { 0x400000 +1.50000000e129 } : BV:32
=input.spec-%tmpvar-9.L1%21%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L1%3%d.0
1 : 512 { 0x200 +1.6103e129 } : BV:32
=input.spec-%tmpvar-1.L1%3%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L1%12%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-m-0.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.1.1
1 : Lambda8028Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : eq(1, 4) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : 3774873765 { 0xe10000a5 -520093531 -1.1966e67 } : BV:32
13 : bvadd(2, 11, 12) : BV:32
14 : 2703434075 { 0xa123215b -1591533221 -1.27445542e195 } : BV:32
15 : eq(13, 14) : BOOL
16 : 225 { 0xe1 -31 } : BV:8
17 : 2703434072 { 0xa1232158 -1591533224 -1.27445507e195 } : BV:32
18 : eq(13, 17) : BOOL
19 : 165 { 0xa5 -91 } : BV:8
20 : 0 { 0x0 } : BV:8
21 : ite(18, 19, 20) : BV:8
22 : ite(15, 16, 21) : BV:8
23 : bvadd(5, 11, 12) : BV:32
24 : eq(23, 14) : BOOL
25 : eq(23, 17) : BOOL
26 : ite(25, 19, 20) : BV:8
27 : ite(24, 16, 26) : BV:8
28 : bvadd(7, 11, 12) : BV:32
29 : eq(28, 14) : BOOL
30 : eq(28, 17) : BOOL
31 : ite(30, 19, 20) : BV:8
32 : ite(29, 16, 31) : BV:8
33 : bvadd(11, 12) : BV:32
34 : eq(33, 14) : BOOL
35 : eq(33, 17) : BOOL
36 : ite(35, 19, 20) : BV:8
37 : ite(34, 16, 36) : BV:8
38 : bvconcat(22, 27, 32, 37) : BV:32
39 : ite(9, 4, 38) : BV:32
40 : ite(8, 4, 39) : BV:32
41 : ite(6, 4, 40) : BV:32
42 : ite(3, 4, 41) : BV:32
43 : lambda(1, 42) : FUNCTION[BV:32 -> BV:32]
44 : sym_const(43) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
4037999633
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce931.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce931 062a334bc7db58be915fc13ff05396
=input.spec-%var-m-0
1 : Lambda8050Var : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 99 { 0x63 +1.1180e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 100 { 0x64 +1.1192e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda8051Var : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2 { 0x2 +1.23e129 } : BV:32
21 : eq(17, 20) : BOOL
22 : 1 { 0x1 +1.11e129 } : BV:32
23 : eq(17, 22) : BOOL
24 : eq(17, 2) : BOOL
25 : 4 { 0x4 +1.47e129 } : BV:32
26 : bvmul(25, 17) : BV:32
27 : 32 { 0x20 +1.381e129 } : BV:32
28 : bvadd(18, 26, 27) : BV:32
29 : eq(28, 2) : BOOL
30 : 32 { 0x20 } : BV:8
31 : 0 { 0x0 } : BV:8
32 : ite(29, 30, 31) : BV:8
33 : bvadd(20, 26, 27) : BV:32
34 : eq(33, 2) : BOOL
35 : ite(34, 30, 31) : BV:8
36 : bvadd(22, 26, 27) : BV:32
37 : eq(36, 2) : BOOL
38 : ite(37, 30, 31) : BV:8
39 : bvadd(26, 27) : BV:32
40 : eq(39, 2) : BOOL
41 : ite(40, 30, 31) : BV:8
42 : bvconcat(32, 35, 38, 41) : BV:32
43 : ite(24, 2, 42) : BV:32
44 : ite(23, 2, 43) : BV:32
45 : ite(21, 2, 44) : BV:32
46 : ite(19, 2, 45) : BV:32
47 : lambda(17, 46) : FUNCTION[BV:32 -> BV:32]
48 : map(16, 47) : MAP[BV:32 -> BV:32]
49 : sym_const(48) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-5.L1%12%d
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.dst.llvm-mem
1 : ([ 0; 0 ] -> 32, [ 1; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3 ] -> memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/, [ 4; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___foo__x__=L0%0%argnum0=/
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%m
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.spec-%var-val-3.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-8.L1%21%d
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-4.L1%12%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%tmpvar-0.L1%3%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L1%3%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-12.L1%30%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.spec-%tmpvar-9.L1%21%d
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%tmpvar-2.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L1%30%d
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-val-0.L1%9%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-6.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-1.L1%18%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-val-2.L1%27%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-14.L1%36%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L1%12%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L1%30%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-13.L1%30%d.0
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%tmpvar-9.L1%21%d.0
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.spec-%tmpvar-9.L1%21%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-1.L1%3%d.0
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%tmpvar-1.L1%3%d.2
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-5.L1%12%d.0
1 : 65536 { 0x10000 +1.781250e129 } : BV:32
=input.spec-%var-m-0.0.1
1 : ([ 0; 99 ] -> true, [ 100; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-m-0.1.1
1 : Lambda8033Var : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 2 { 0x2 +1.23e129 } : BV:32
6 : eq(1, 5) : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : eq(1, 7) : BOOL
9 : eq(1, 4) : BOOL
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : 32 { 0x20 +1.381e129 } : BV:32
13 : bvadd(2, 11, 12) : BV:32
14 : eq(13, 4) : BOOL
15 : 32 { 0x20 } : BV:8
16 : 0 { 0x0 } : BV:8
17 : ite(14, 15, 16) : BV:8
18 : bvadd(5, 11, 12) : BV:32
19 : eq(18, 4) : BOOL
20 : ite(19, 15, 16) : BV:8
21 : bvadd(7, 11, 12) : BV:32
22 : eq(21, 4) : BOOL
23 : ite(22, 15, 16) : BV:8
24 : bvadd(11, 12) : BV:32
25 : eq(24, 4) : BOOL
26 : ite(25, 15, 16) : BV:8
27 : bvconcat(17, 20, 23, 26) : BV:32
28 : ite(9, 4, 27) : BV:32
29 : ite(8, 4, 28) : BV:32
30 : ite(6, 4, 29) : BV:32
31 : ite(3, 4, 30) : BV:32
32 : lambda(1, 31) : FUNCTION[BV:32 -> BV:32]
33 : sym_const(32) : FUNCTION[BV:32 -> BV:32]
=counter_example.random_seed
2597798020
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
2 : input.dst.llvm-%add4.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 0 { 0x0 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : map_get(3, 8) : SUM[UNIT,BV:32]
10 : sum_is(9, 6) : BOOL
11 : 2 { 0x2 +1.23e129 } : BV:32
12 : map_get(3, 11) : SUM[UNIT,BV:32]
13 : sum_is(12, 6) : BOOL
14 : 3 { 0x3 +1.35e129 } : BV:32
15 : map_get(3, 14) : SUM[UNIT,BV:32]
16 : sum_is(15, 6) : BOOL
17 : 1 { 0x1 +1.0e1025 } : INT
18 : sum_is(15, 17) : BOOL
19 : or(16, 18) : BOOL
20 : and(13, 19) : BOOL
21 : sum_is(12, 17) : BOOL
22 : and(21, 19) : BOOL
23 : or(20, 22) : BOOL
24 : and(10, 23) : BOOL
25 : sum_is(9, 17) : BOOL
26 : and(25, 23) : BOOL
27 : or(24, 26) : BOOL
28 : and(7, 27) : BOOL
29 : sum_is(5, 17) : BOOL
30 : and(29, 27) : BOOL
31 : or(28, 30) : BOOL
32 : or(2, 31) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L0%0%d_L0%0%d=>E0%0%d_E0%0%d)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
equal-ret
=LhsExpr
1 : input.spec-%tmpvar-23.E0%0%d : BV:32
2 : input.dst.llvm-%add4.E0%0%d : BV:32
3 : eq(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #0.pred
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
140440 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140615 : memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/ : MEMLABEL
140498 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140421 : 0 { 0x0 } : BOOL
140616 : select(140440, 140441, 140615, 140498, 140420, 140421) : BV:32
=RhsExpr
140499 : input.dst.llvm-%m : BV:32
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #1.pred
=Comment
precond-mlasserts
=LhsExpr
141137 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin : BV:32
141138 : input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end : BV:32
141140 : bvule(141137, 141138) : BOOL
140423 : 4 { 0x4 +1.47e129 } : BV:32
140297 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
140728 : bvadd(140423, 140297) : BV:32
141142 : bvadd(141137, 140728) : BV:32
141143 : eq(141138, 141142) : BOOL
141144 : and(141140, 141143) : BOOL
140498 : input.dst.local./*___y___foo__x__=L0%0%argnum0=/ : BV:32
140341 : 3 { 0x3 +1.35e129 } : BV:32
141145 : bvand(140498, 140341) : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
141146 : eq(141145, 140290) : BOOL
141147 : and(141144, 141146) : BOOL
141148 : eq(140498, 141137) : BOOL
141149 : and(141147, 141148) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #2.pred
=Comment
pointer-implements-map-arg0
=LhsExpr
140306 : input.spec-%var-m-0 : MAP[BV:32 -> BV:32]
140414 : Lambda0Var : BV:32
140290 : 0 { 0x0 +1.0e129 } : BV:32
140415 : bvule(140290, 140414) : BOOL
140411 : 100 { 0x64 +1.1192e129 } : BV:32
140416 : bvult(140414, 140411) : BOOL
140417 : and(140415, 140416) : BOOL
140418 : lambda(140414, 140417) : FUNCTION[BV:32 -> BOOL]
140422 : Lambda1Var : BV:32
140440 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
140441 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
140688 : memlabel-mem-may-straddle-symbol.1-symbol.2-local./*___y___bar__x__=L0%0%argnum0=/-local./*___y___bar__x__=L0%0%argnum1=/-local./*___y___foo__x__=L0%0%argnum0=/-heap : MEMLABEL
140423 : 4 { 0x4 +1.47e129 } : BV:32
140424 : bvmul(140422, 140423) : BV:32
140499 : input.dst.llvm-%m : BV:32
141160 : bvadd(140424, 140499) : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
140421 : 0 { 0x0 } : BOOL
141191 : select(140440, 140441, 140688, 141160, 140420, 140421) : BV:32
141192 : lambda(140422, 141191) : FUNCTION[BV:32 -> BV:32]
141193 : map(140418, 141192) : MAP[BV:32 -> BV:32]
141194 : eq(140306, 141193) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d assume #3.pred
=Comment
merged-predicate
=LhsExpr
140276 : 1 { 0x1 } : BOOL
140499 : input.dst.llvm-%m : BV:32
140633 : 8 { 0x8 +1.95e129 } : BV:32
140634 : bvadd(140499, 140633) : BV:32
140649 : isgepoffset(140634, 140633) : BOOL
140628 : 12 { 0xc +1.143e129 } : BV:32
140629 : bvadd(140499, 140628) : BV:32
140420 : 4 { 0x4 +1.0e1025 } : INT
141068 : islangaligned(140629, 140420) : BOOL
140423 : 4 { 0x4 +1.47e129 } : BV:32
140657 : bvadd(140423, 140499) : BV:32
140680 : isgepoffset(140657, 140423) : BOOL
141079 : and(140276, 140680) : BOOL
141081 : and(141068, 141079) : BOOL
141083 : islangaligned(140657, 140420) : BOOL
141097 : and(140276, 140649, 141081, 141083) : BOOL
141099 : islangaligned(140634, 140420) : BOOL
141102 : and(141097, 141099) : BOOL
140531 : islangaligned(140499, 140420) : BOOL
140647 : isgepoffset(140629, 140628) : BOOL
140290 : 0 { 0x0 +1.0e129 } : BV:32
140646 : isgepoffset(140499, 140290) : BOOL
141049 : and(140276, 140646) : BOOL
141051 : and(140531, 141049) : BOOL
141066 : and(140276, 140531, 140647, 141051) : BOOL
142020 : and(141102, 141066) : BOOL
=RhsExpr
140276 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
