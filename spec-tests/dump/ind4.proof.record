==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x14 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x14 $x12)))
 (let (($x19 (and $x9 $x18)))
 (and $x19 $x20)))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x328 (= true false)))
 (let (($x329 (= $x328 true)))
 (let ((?x313 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x322 (concat ?x321 (concat ?x318 (concat ?x315 ?x313)))))
 (let (($x323 (= ?x322 input.dst.llvm-%l)))
 (let (($x324 (= $x323 true)))
 (let (($x325 (= $x324 true)))
 (let ((?x304 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x305 (= (_ bv0 32) ?x304)))
 (let ((?x301 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x300 $x302)))
 (let (($x306 (and $x303 $x305)))
 (let (($x298 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (and $x298 $x306)))
 (let (($x308 (= $x307 true)))
 (let (($x309 (= $x308 true)))
 (let (($x310 (= $x309 true)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x197 ?x195))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x289))))
 (let (($x283 (= input.spec-%var-l-1.2.1.2.0 ?x295)))
 (let (($x284 (and $x283 true)))
 (let (($x224 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x280 (=> $x224 $x284)))
 (let (($x222 (= $x224 (bvuge (ite (= (_ bv0 32) ?x201) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x80 (= false false)))
 (let (($x189 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x187 (=> $x189 $x80)))
 (let (($x186 (= $x189 (= (ite (= (_ bv0 32) ?x201) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x190 (and $x186 $x187)))
 (let (($x223 (and $x190 $x222)))
 (let (($x281 (and $x223 $x280)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x135)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x138)))
 (let (($x142 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x277 (and $x142 $x281)))
 (let (($x89 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x278 (=> $x89 $x277)))
 (let (($x91 (= $x89 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x75 $x80)))
 (let (($x79 (= $x75 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x82 (and $x79 $x81)))
 (let (($x92 (and $x82 $x91)))
 (let (($x275 (and $x92 $x278)))
 (let (($x279 (= $x275 true)))
 (let (($x282 (= $x279 true)))
 (let (($x285 (= $x282 true)))
 (let (($x311 (and $x285 $x310)))
 (let (($x326 (and $x311 $x325)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x327 (and $x19 $x326)))
 (let (($x330 (=> $x327 $x329)))
 (not $x330)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x328 (= true false)))
 (let (($x329 (= $x328 true)))
 (let ((?x313 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x315 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x318 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x322 (concat ?x321 (concat ?x318 (concat ?x315 ?x313)))))
 (let (($x323 (= ?x322 input.dst.llvm-%l)))
 (let (($x324 (= $x323 true)))
 (let (($x325 (= $x324 true)))
 (let ((?x304 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x305 (= (_ bv0 32) ?x304)))
 (let ((?x301 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x301)))
 (let (($x300 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x300 $x302)))
 (let (($x306 (and $x303 $x305)))
 (let (($x298 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (and $x298 $x306)))
 (let (($x308 (= $x307 true)))
 (let (($x309 (= $x308 true)))
 (let (($x310 (= $x309 true)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x201 (concat ?x200 (concat ?x197 ?x195))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x289))))
 (let (($x283 (= input.spec-%var-l-1.2.1.2.0 ?x295)))
 (let (($x284 (and $x283 true)))
 (let (($x224 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x280 (=> $x224 $x284)))
 (let (($x222 (= $x224 (bvuge (ite (= (_ bv0 32) ?x201) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x80 (= false false)))
 (let (($x189 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x187 (=> $x189 $x80)))
 (let (($x186 (= $x189 (= (ite (= (_ bv0 32) ?x201) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x190 (and $x186 $x187)))
 (let (($x223 (and $x190 $x222)))
 (let (($x281 (and $x223 $x280)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x135)))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x138)))
 (let (($x142 (= input.spec-%var-l-1.2.0 ?x141)))
 (let (($x277 (and $x142 $x281)))
 (let (($x89 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x278 (=> $x89 $x277)))
 (let (($x91 (= $x89 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x75 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x81 (=> $x75 $x80)))
 (let (($x79 (= $x75 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x82 (and $x79 $x81)))
 (let (($x92 (and $x82 $x91)))
 (let (($x275 (and $x92 $x278)))
 (let (($x279 (= $x275 true)))
 (let (($x282 (= $x279 true)))
 (let (($x285 (= $x282 true)))
 (let (($x311 (and $x285 $x310)))
 (let (($x326 (and $x311 $x325)))
 (let (($x19 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x327 (and $x19 $x326)))
 (let (($x330 (=> $x327 $x329)))
 (not $x330)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (= true false)))
 (let (($x239 (= $x236 true)))
 (let ((?x248 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x234 (concat ?x238 (concat ?x249 (concat ?x245 ?x248)))))
 (let (($x235 (= ?x234 input.dst.llvm-%l)))
 (let (($x231 (= $x235 true)))
 (let (($x232 (= $x231 true)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x217)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x212 $x211)))
 (let (($x225 (and $x214 $x220)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x215 $x225)))
 (let (($x229 (= $x227 true)))
 (let (($x242 (= $x229 true)))
 (let (($x250 (= $x242 true)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x115 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x116 (concat ?x112 ?x115))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x205))))
 (let (($x266 (= input.spec-%var-l-1.2.1.2.0 ?x210)))
 (let (($x267 (and $x266 false)))
 (let (($x180 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x273 (=> $x180 $x267)))
 (let (($x183 (= $x180 (bvuge (ite (= (_ bv0 32) ?x119) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x279 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x86 (=> $x88 $x279)))
 (let (($x85 (= $x88 (= (ite (= (_ bv0 32) ?x119) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x96 (and $x85 $x86)))
 (let (($x179 (and $x96 $x183)))
 (let (($x269 (and $x179 $x273)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x40)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x46)))
 (let (($x17 (= input.spec-%var-l-1.2.0 ?x27)))
 (let (($x263 (and $x17 $x269)))
 (let (($x302 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x264 (=> $x302 $x263)))
 (let (($x304 (= $x302 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x280 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x282 (=> $x280 $x279)))
 (let (($x275 (= $x280 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x285 (and $x275 $x282)))
 (let (($x305 (and $x285 $x304)))
 (let (($x257 (and $x305 $x264)))
 (let (($x272 (= $x257 true)))
 (let (($x270 (= $x272 true)))
 (let (($x265 (= $x270 true)))
 (let (($x251 (and $x265 $x250)))
 (let (($x230 (and $x251 $x232)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x233 (and $x21 $x230)))
 (let (($x240 (=> $x233 $x239)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x236 (= true false)))
 (let (($x239 (= $x236 true)))
 (let ((?x248 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x238 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x234 (concat ?x238 (concat ?x249 (concat ?x245 ?x248)))))
 (let (($x235 (= ?x234 input.dst.llvm-%l)))
 (let (($x231 (= $x235 true)))
 (let (($x232 (= $x231 true)))
 (let ((?x217 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x217)))
 (let ((?x213 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x211 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x213)))
 (let (($x212 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (and $x212 $x211)))
 (let (($x225 (and $x214 $x220)))
 (let (($x215 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x215 $x225)))
 (let (($x229 (= $x227 true)))
 (let (($x242 (= $x229 true)))
 (let (($x250 (= $x242 true)))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x115 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x119 (concat ?x116 (concat ?x112 ?x115))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x205))))
 (let (($x266 (= input.spec-%var-l-1.2.1.2.0 ?x210)))
 (let (($x267 (and $x266 false)))
 (let (($x180 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x273 (=> $x180 $x267)))
 (let (($x183 (= $x180 (bvuge (ite (= (_ bv0 32) ?x119) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x279 (= false false)))
 (let (($x88 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x86 (=> $x88 $x279)))
 (let (($x85 (= $x88 (= (ite (= (_ bv0 32) ?x119) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x96 (and $x85 $x86)))
 (let (($x179 (and $x96 $x183)))
 (let (($x269 (and $x179 $x273)))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x40)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x46)))
 (let (($x17 (= input.spec-%var-l-1.2.0 ?x27)))
 (let (($x263 (and $x17 $x269)))
 (let (($x302 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x264 (=> $x302 $x263)))
 (let (($x304 (= $x302 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x280 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x282 (=> $x280 $x279)))
 (let (($x275 (= $x280 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x285 (and $x275 $x282)))
 (let (($x305 (and $x285 $x304)))
 (let (($x257 (and $x305 $x264)))
 (let (($x272 (= $x257 true)))
 (let (($x270 (= $x272 true)))
 (let (($x265 (= $x270 true)))
 (let (($x251 (and $x265 $x250)))
 (let (($x230 (and $x251 $x232)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x233 (and $x21 $x230)))
 (let (($x240 (=> $x233 $x239)))
 (not $x240)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x172)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x107 $x106)))
 (let (($x176 (and $x145 $x174)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x146 $x176)))
 (let (($x122 (= $x129 true)))
 (let (($x124 (= $x122 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x148 (concat ?x165 (concat ?x162 ?x181)))))
 (let (($x166 (= input.dst.llvm-%l ?x168)))
 (let (($x123 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x146) $x176)))
 (let (($x121 (and $x123 $x166)))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x328 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x45 (concat ?x330 (concat ?x326 ?x329))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x102))))
 (let (($x228 (= input.spec-%var-l-1.2.1.2.0 ?x103)))
 (let (($x253 (and $x228 true)))
 (let (($x70 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x256 (=> $x70 $x253)))
 (let (($x73 (= $x70 (bvuge (ite (= (_ bv0 32) ?x45) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x272 (= false false)))
 (let (($x301 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x299 (=> $x301 $x272)))
 (let (($x298 (= $x301 (= (ite (= (_ bv0 32) ?x45) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x309 (and $x298 $x299)))
 (let (($x5 (and $x309 $x73)))
 (let (($x262 (and $x5 $x256)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x133)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x92)))
 (let (($x44 (= input.spec-%var-l-1.2.0 ?x37)))
 (let (($x153 (and $x44 $x262)))
 (let (($x211 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x211 $x153)))
 (let (($x217 (= $x211 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x273 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x270 (=> $x273 $x272)))
 (let (($x257 (= $x273 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x265 (and $x257 $x270)))
 (let (($x220 (and $x265 $x217)))
 (let (($x158 (and $x220 $x156)))
 (let (($x125 (and $x158 $x121)))
 (let (($x126 (= $x125 true)))
 (let (($x120 (= $x126 true)))
 (let (($x128 (= $x120 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x184 (and $x33 $x128)))
 (let (($x127 (=> $x184 $x124)))
 (not $x127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x174 (= (_ bv0 32) ?x172)))
 (let ((?x108 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x107 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x107 $x106)))
 (let (($x176 (and $x145 $x174)))
 (let (($x146 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x129 (and $x146 $x176)))
 (let (($x122 (= $x129 true)))
 (let (($x124 (= $x122 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x162 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x168 (concat ?x148 (concat ?x165 (concat ?x162 ?x181)))))
 (let (($x166 (= input.dst.llvm-%l ?x168)))
 (let (($x123 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x146) $x176)))
 (let (($x121 (and $x123 $x166)))
 (let ((?x328 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x329 (concat ?x328 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x45 (concat ?x330 (concat ?x326 ?x329))))
 (let ((?x102 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv1 32))) (select input.dst.llvm-mem ?x45))))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x45 (_ bv2 32))) ?x102))))
 (let (($x228 (= input.spec-%var-l-1.2.1.2.0 ?x103)))
 (let (($x253 (and $x228 true)))
 (let (($x70 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x256 (=> $x70 $x253)))
 (let (($x73 (= $x70 (bvuge (ite (= (_ bv0 32) ?x45) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x272 (= false false)))
 (let (($x301 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x299 (=> $x301 $x272)))
 (let (($x298 (= $x301 (= (ite (= (_ bv0 32) ?x45) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x309 (and $x298 $x299)))
 (let (($x5 (and $x309 $x73)))
 (let (($x262 (and $x5 $x256)))
 (let ((?x133 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x133)))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x92)))
 (let (($x44 (= input.spec-%var-l-1.2.0 ?x37)))
 (let (($x153 (and $x44 $x262)))
 (let (($x211 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x156 (=> $x211 $x153)))
 (let (($x217 (= $x211 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x273 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x270 (=> $x273 $x272)))
 (let (($x257 (= $x273 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x265 (and $x257 $x270)))
 (let (($x220 (and $x265 $x217)))
 (let (($x158 (and $x220 $x156)))
 (let (($x125 (and $x158 $x121)))
 (let (($x126 (= $x125 true)))
 (let (($x120 (= $x126 true)))
 (let (($x128 (= $x120 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x184 (and $x33 $x128)))
 (let (($x127 (=> $x184 $x124)))
 (not $x127)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x143 (= $x262 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x15 (concat ?x63 (concat ?x61 ?x71)))))
 (let (($x66 (= input.dst.llvm-%l ?x56)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x50)))
 (let ((?x322 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x322)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x319 $x316)))
 (let (($x55 (and $x36 $x49)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x28 (and (and (and $x68 $x11) $x55) $x66)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x239 (concat ?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x74 (concat ?x240 (concat ?x230 ?x239))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x318))))
 (let (($x178 (= input.spec-%var-l-1.2.1.2.0 ?x314)))
 (let (($x164 (and $x178 true)))
 (let (($x289 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x157 (=> $x289 $x164)))
 (let (($x283 (= $x289 (bvuge (ite (= (_ bv0 32) ?x74) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x255 (= false false)))
 (let (($x213 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x216 (=> $x213 $x255)))
 (let (($x215 (= $x213 (= (ite (= (_ bv0 32) ?x74) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x242 (and $x215 $x216)))
 (let (($x78 (and $x242 $x283)))
 (let (($x150 (and $x78 $x157)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x111)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x27)))
 (let (($x285 (= input.spec-%var-l-1.2.0 ?x79)))
 (let (($x23 (and $x285 $x150)))
 (let (($x108 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x48 (=> $x108 $x23)))
 (let (($x145 (= $x108 (bvuge (ite $x262 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x256 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x258 (=> $x256 $x255)))
 (let (($x158 (= $x256 (= (ite $x262 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x159 (and $x158 $x258)))
 (let (($x172 (and $x159 $x145)))
 (let (($x67 (and $x172 $x48)))
 (let (($x312 (and $x67 $x28)))
 (let (($x93 (= $x312 true)))
 (let (($x35 (= $x93 true)))
 (let (($x95 (= $x35 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x83 (and $x33 $x95)))
 (let (($x13 (=> $x83 $x143)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x262 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x143 (= $x262 true)))
 (let ((?x71 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x56 (concat ?x15 (concat ?x63 (concat ?x61 ?x71)))))
 (let (($x66 (= input.dst.llvm-%l ?x56)))
 (let ((?x50 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x49 (= (_ bv0 32) ?x50)))
 (let ((?x322 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x316 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x322)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (and $x319 $x316)))
 (let (($x55 (and $x36 $x49)))
 (let (($x11 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x28 (and (and (and $x68 $x11) $x55) $x66)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x239 (concat ?x236 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x240 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x74 (concat ?x240 (concat ?x230 ?x239))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem ?x74))))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x74 (_ bv2 32))) ?x318))))
 (let (($x178 (= input.spec-%var-l-1.2.1.2.0 ?x314)))
 (let (($x164 (and $x178 true)))
 (let (($x289 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x157 (=> $x289 $x164)))
 (let (($x283 (= $x289 (bvuge (ite (= (_ bv0 32) ?x74) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x255 (= false false)))
 (let (($x213 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x216 (=> $x213 $x255)))
 (let (($x215 (= $x213 (= (ite (= (_ bv0 32) ?x74) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x242 (and $x215 $x216)))
 (let (($x78 (and $x242 $x283)))
 (let (($x150 (and $x78 $x157)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x111)))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x27)))
 (let (($x285 (= input.spec-%var-l-1.2.0 ?x79)))
 (let (($x23 (and $x285 $x150)))
 (let (($x108 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x48 (=> $x108 $x23)))
 (let (($x145 (= $x108 (bvuge (ite $x262 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x256 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x258 (=> $x256 $x255)))
 (let (($x158 (= $x256 (= (ite $x262 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x159 (and $x158 $x258)))
 (let (($x172 (and $x159 $x145)))
 (let (($x67 (and $x172 $x48)))
 (let (($x312 (and $x67 $x28)))
 (let (($x93 (= $x312 true)))
 (let (($x35 (= $x93 true)))
 (let (($x95 (= $x35 true)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x83 (and $x33 $x95)))
 (let (($x13 (=> $x83 $x143)))
 (not $x13))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b01000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b01000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_35)
(function @fun_35
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_35 #b01000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000040 #x40))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv128 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv8 32) (_ bv128 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv8192 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x80 (= $x150 true)))
 (let ((?x223 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x290 (concat ?x291 (concat ?x294 (concat ?x190 ?x223)))))
 (let (($x89 (= input.dst.llvm-%l ?x290)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x186)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x196)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x243 $x198)))
 (let (($x292 (and $x195 $x202)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x306 (and (and (and $x31 $x252) $x292) $x89)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x128 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x149 (concat ?x129 ?x184))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x237))))
 (let (($x288 (= input.spec-%var-l-1.2.1.2.0 ?x297)))
 (let (($x22 (and $x288 false)))
 (let (($x7 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x29 (=> $x7 $x22)))
 (let (($x205 (= $x7 (bvuge (ite (= (_ bv0 32) ?x168) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x170 (= false false)))
 (let (($x126 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x107 (=> $x126 $x170)))
 (let (($x171 (= $x126 (= (ite (= (_ bv0 32) ?x168) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x130 (and $x171 $x107)))
 (let (($x87 (and $x130 $x205)))
 (let (($x9 (and $x87 $x29)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x90)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x214)))
 (let (($x330 (= input.spec-%var-l-1.2.0 ?x137)))
 (let (($x53 (and $x330 $x9)))
 (let (($x322 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x59 (=> $x322 $x53)))
 (let (($x36 (= $x322 (bvuge (ite $x150 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x157 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x154 (=> $x157 $x170)))
 (let (($x67 (= $x157 (= (ite $x150 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x68 (and $x67 $x154)))
 (let (($x50 (and $x68 $x36)))
 (let (($x197 (and $x50 $x59)))
 (let (($x132 (and $x197 $x306)))
 (let (($x308 (= $x132 true)))
 (let (($x296 (= $x308 true)))
 (let (($x26 (= $x296 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x82 (and $x76 $x26)))
 (let (($x307 (=> $x82 $x80)))
 (not $x307))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x150 (= (_ bv0 32) input.dst.llvm-%l)))
 (let (($x80 (= $x150 true)))
 (let ((?x223 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x290 (concat ?x291 (concat ?x294 (concat ?x190 ?x223)))))
 (let (($x89 (= input.dst.llvm-%l ?x290)))
 (let ((?x186 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x202 (= (_ bv0 32) ?x186)))
 (let ((?x196 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x198 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x196)))
 (let (($x243 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x243 $x198)))
 (let (($x292 (and $x195 $x202)))
 (let (($x252 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x306 (and (and (and $x31 $x252) $x292) $x89)))
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x184 (concat ?x128 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x168 (concat ?x149 (concat ?x129 ?x184))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x297 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x237))))
 (let (($x288 (= input.spec-%var-l-1.2.1.2.0 ?x297)))
 (let (($x22 (and $x288 false)))
 (let (($x7 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x29 (=> $x7 $x22)))
 (let (($x205 (= $x7 (bvuge (ite (= (_ bv0 32) ?x168) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x170 (= false false)))
 (let (($x126 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x107 (=> $x126 $x170)))
 (let (($x171 (= $x126 (= (ite (= (_ bv0 32) ?x168) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x130 (and $x171 $x107)))
 (let (($x87 (and $x130 $x205)))
 (let (($x9 (and $x87 $x29)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x90)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x214)))
 (let (($x330 (= input.spec-%var-l-1.2.0 ?x137)))
 (let (($x53 (and $x330 $x9)))
 (let (($x322 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x59 (=> $x322 $x53)))
 (let (($x36 (= $x322 (bvuge (ite $x150 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x157 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x154 (=> $x157 $x170)))
 (let (($x67 (= $x157 (= (ite $x150 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x68 (and $x67 $x154)))
 (let (($x50 (and $x68 $x36)))
 (let (($x197 (and $x50 $x59)))
 (let (($x132 (and $x197 $x306)))
 (let (($x308 (= $x132 true)))
 (let (($x296 (= $x308 true)))
 (let (($x26 (= $x296 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x82 (and $x76 $x26)))
 (let (($x307 (=> $x82 $x80)))
 (not $x307))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b00000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008008)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x08)
                                #x0000800b
                                #x00)
                         #x0000800a
                         #x00)
                  #x00008009
                  #x00)))
  (store (store (store (store a!1 #x0000000f #x00) #x0000000e #x00)
                #x0000000d
                #x00)
         #x0000000c
         #x00)))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000800b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008008)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv2097152 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741826 32) (_ bv32 8)))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x117 (= (_ bv0 3) ?x91)))
 (let (($x94 (= $x117 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x85 (concat ?x109 (concat ?x207 ?x112)))))
 (let (($x115 (= input.dst.llvm-%l ?x268)))
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x303)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x125 $x219)))
 (let (($x46 (and $x266 $x208)))
 (let (($x278 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x277 (and (and (and $x226 $x278) $x46) $x115)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x83 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x56 (concat ?x14 (concat ?x143 ?x83))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x147))))
 (let (($x222 (= input.spec-%var-l-1.2.1.2.0 ?x210)))
 (let (($x193 (and $x222 true)))
 (let (($x269 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x203 (=> $x269 $x193)))
 (let (($x103 (= $x269 (bvuge (ite (= (_ bv0 32) ?x56) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x38 (= false false)))
 (let (($x93 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x319 (=> $x93 $x38)))
 (let (($x54 (= $x93 (= (ite (= (_ bv0 32) ?x56) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x273 (and $x54 $x319)))
 (let (($x275 (and $x273 $x103)))
 (let (($x199 (and $x275 $x203)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x321)))
 (let (($x258 (= input.spec-%var-l-1.2.0 ?x289)))
 (let (($x286 (and $x258 $x199)))
 (let (($x196 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x287 (=> $x196 $x286)))
 (let (($x195 (= $x196 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x29 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x60 (=> $x29 $x38)))
 (let (($x197 (= $x29 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x197 $x60)))
 (let (($x186 (and $x31 $x195)))
 (let (($x274 (and $x186 $x287)))
 (let (($x134 (and $x274 $x277)))
 (let (($x175 (= $x134 true)))
 (let (($x229 (= $x175 true)))
 (let (($x225 (= $x229 true)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x118 (and $x104 $x225)))
 (let (($x144 (=> $x118 $x94)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x91 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x117 (= (_ bv0 3) ?x91)))
 (let (($x94 (= $x117 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x268 (concat ?x85 (concat ?x109 (concat ?x207 ?x112)))))
 (let (($x115 (= input.dst.llvm-%l ?x268)))
 (let ((?x303 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x208 (= (_ bv0 32) ?x303)))
 (let ((?x101 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (and $x125 $x219)))
 (let (($x46 (and $x266 $x208)))
 (let (($x278 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x226 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x277 (and (and (and $x226 $x278) $x46) $x115)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x83 (concat ?x95 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x56 (concat ?x14 (concat ?x143 ?x83))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x147))))
 (let (($x222 (= input.spec-%var-l-1.2.1.2.0 ?x210)))
 (let (($x193 (and $x222 true)))
 (let (($x269 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x203 (=> $x269 $x193)))
 (let (($x103 (= $x269 (bvuge (ite (= (_ bv0 32) ?x56) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x38 (= false false)))
 (let (($x93 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x319 (=> $x93 $x38)))
 (let (($x54 (= $x93 (= (ite (= (_ bv0 32) ?x56) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x273 (and $x54 $x319)))
 (let (($x275 (and $x273 $x103)))
 (let (($x199 (and $x275 $x203)))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x139)))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x321)))
 (let (($x258 (= input.spec-%var-l-1.2.0 ?x289)))
 (let (($x286 (and $x258 $x199)))
 (let (($x196 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x287 (=> $x196 $x286)))
 (let (($x195 (= $x196 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x29 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x60 (=> $x29 $x38)))
 (let (($x197 (= $x29 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x197 $x60)))
 (let (($x186 (and $x31 $x195)))
 (let (($x274 (and $x186 $x287)))
 (let (($x134 (and $x274 $x277)))
 (let (($x175 (= $x134 true)))
 (let (($x229 (= $x175 true)))
 (let (($x225 (= $x229 true)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x118 (and $x104 $x225)))
 (let (($x144 (=> $x118 $x94)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x211 (= $x123 true)))
 (let (($x133 (= $x211 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x317 (concat ?x299 (concat ?x301 ?x228)))))
 (let (($x261 (= input.dst.llvm-%l ?x5)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x45)))
 (let ((?x323 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x323)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x315 $x44)))
 (let (($x185 (and $x312 $x161)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and (and (and $x282 $x173) $x185) $x261)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x307 (concat ?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x33 (concat ?x80 (concat ?x26 ?x307))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x25))))
 (let (($x271 (= input.spec-%var-l-1.2.1.2.0 ?x97)))
 (let (($x105 (and $x271 true)))
 (let (($x310 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x183 (=> $x310 $x105)))
 (let (($x51 (= $x310 (bvuge (ite (= (_ bv0 32) ?x33) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x194 (= false false)))
 (let (($x234 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x252 (=> $x234 $x194)))
 (let (($x204 (= $x234 (= (ite (= (_ bv0 32) ?x33) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x243 (and $x204 $x252)))
 (let (($x84 (and $x243 $x51)))
 (let (($x177 (and $x84 $x183)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x77)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x221)))
 (let (($x241 (= input.spec-%var-l-1.2.0 ?x316)))
 (let (($x327 (and $x241 $x177)))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x98 (=> $x101 $x327)))
 (let (($x266 (= $x101 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x203 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x141 (=> $x203 $x194)))
 (let (($x274 (= $x203 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x226 (and $x274 $x141)))
 (let (($x303 (and $x226 $x266)))
 (let (($x254 (and $x303 $x98)))
 (let (($x180 (and $x254 $x174)))
 (let (($x272 (= $x180 true)))
 (let (($x52 (= $x272 true)))
 (let (($x270 (= $x52 true)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x176 (and $x104 $x270)))
 (let (($x300 (=> $x176 $x133)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x123 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x211 (= $x123 true)))
 (let (($x133 (= $x211 true)))
 (let ((?x228 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x301 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x5 (concat ?x317 (concat ?x299 (concat ?x301 ?x228)))))
 (let (($x261 (= input.dst.llvm-%l ?x5)))
 (let ((?x45 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x161 (= (_ bv0 32) ?x45)))
 (let ((?x323 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x44 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x323)))
 (let (($x315 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x315 $x44)))
 (let (($x185 (and $x312 $x161)))
 (let (($x173 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and (and (and $x282 $x173) $x185) $x261)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x307 (concat ?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x33 (concat ?x80 (concat ?x26 ?x307))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv1 32))) (select input.dst.llvm-mem ?x33))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x33 (_ bv2 32))) ?x25))))
 (let (($x271 (= input.spec-%var-l-1.2.1.2.0 ?x97)))
 (let (($x105 (and $x271 true)))
 (let (($x310 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x183 (=> $x310 $x105)))
 (let (($x51 (= $x310 (bvuge (ite (= (_ bv0 32) ?x33) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x194 (= false false)))
 (let (($x234 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x252 (=> $x234 $x194)))
 (let (($x204 (= $x234 (= (ite (= (_ bv0 32) ?x33) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x243 (and $x204 $x252)))
 (let (($x84 (and $x243 $x51)))
 (let (($x177 (and $x84 $x183)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x77)))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x221)))
 (let (($x241 (= input.spec-%var-l-1.2.0 ?x316)))
 (let (($x327 (and $x241 $x177)))
 (let (($x101 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x98 (=> $x101 $x327)))
 (let (($x266 (= $x101 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x203 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x141 (=> $x203 $x194)))
 (let (($x274 (= $x203 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x226 (and $x274 $x141)))
 (let (($x303 (and $x226 $x266)))
 (let (($x254 (and $x303 $x98)))
 (let (($x180 (and $x254 $x174)))
 (let (($x272 (= $x180 true)))
 (let (($x52 (= $x272 true)))
 (let (($x270 (= $x52 true)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x176 (and $x104 $x270)))
 (let (($x300 (=> $x176 $x133)))
 (not $x300)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x368 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv1 32))) (select input.dst.llvm-mem ?x368))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv2 32))) ?x372))))
 (let ((?x349 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x346 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x367 (concat ?x366 (concat ?x348 (concat ?x346 ?x349)))))
 (let ((?x353 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x422 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x353 false ?x367 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let (($x394 (= $x422 true)))
 (let (($x395 (= $x394 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x384 (concat ?x383 (concat ?x380 (concat ?x257 ?x106)))))
 (let (($x385 (= input.dst.llvm-%l ?x384)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x159)))
 (let ((?x335 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x335)))
 (let (($x325 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x325 $x338)))
 (let (($x216 (and $x11 $x191)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x333 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x388 (and (and (and $x333 $x49) $x216) $x385)))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x332 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x94 (concat ?x200 (concat ?x225 ?x91))))
 (let ((?x355 (bvadd ?x94 (_ bv4 32))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem ?x355))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv2 32))) ?x359))))
 (let (($x379 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x365 ?x353 false ?x367 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x331))))
 (let (($x259 (= input.spec-%var-l-1.2.1.2.0 ?x230)))
 (let (($x239 (and $x259 $x379)))
 (let (($x217 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x246 (=> $x217 $x239)))
 (let (($x295 (= $x217 (bvuge (ite (= (_ bv0 32) ?x94) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x218 (= false false)))
 (let (($x18 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x278 (=> $x18 $x218)))
 (let (($x41 (= $x18 (= (ite (= (_ bv0 32) ?x94) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x125 (and $x41 $x278)))
 (let (($x297 (and $x125 $x295)))
 (let (($x240 (and $x297 $x246)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x116)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x12)))
 (let (($x67 (= input.spec-%var-l-1.2.0 ?x198)))
 (let (($x158 (and $x67 $x240)))
 (let (($x323 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x153 (=> $x323 $x158)))
 (let (($x312 (= $x323 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x183 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x113 (=> $x183 $x218)))
 (let (($x254 (= $x183 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x282 (and $x254 $x113)))
 (let (($x45 (and $x282 $x312)))
 (let (($x260 (and $x45 $x153)))
 (let (($x389 (and $x260 $x388)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let (($x392 (= $x391 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x393 (and $x76 $x392)))
 (let (($x396 (=> $x393 $x395)))
 (not $x396))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x368 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x372 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv1 32))) (select input.dst.llvm-mem ?x368))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x368 (_ bv2 32))) ?x372))))
 (let ((?x349 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x346 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x367 (concat ?x366 (concat ?x348 (concat ?x346 ?x349)))))
 (let ((?x353 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x422 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x353 false ?x367 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let (($x394 (= $x422 true)))
 (let (($x395 (= $x394 true)))
 (let ((?x106 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x384 (concat ?x383 (concat ?x380 (concat ?x257 ?x106)))))
 (let (($x385 (= input.dst.llvm-%l ?x384)))
 (let ((?x159 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x191 (= (_ bv0 32) ?x159)))
 (let ((?x335 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x338 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x335)))
 (let (($x325 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x325 $x338)))
 (let (($x216 (and $x11 $x191)))
 (let (($x49 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x333 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x388 (and (and (and $x333 $x49) $x216) $x385)))
 (let ((?x332 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x91 (concat ?x332 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x225 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x94 (concat ?x200 (concat ?x225 ?x91))))
 (let ((?x355 (bvadd ?x94 (_ bv4 32))))
 (let ((?x359 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem ?x355))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv2 32))) ?x359))))
 (let (($x379 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x365 ?x353 false ?x367 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x331))))
 (let (($x259 (= input.spec-%var-l-1.2.1.2.0 ?x230)))
 (let (($x239 (and $x259 $x379)))
 (let (($x217 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x246 (=> $x217 $x239)))
 (let (($x295 (= $x217 (bvuge (ite (= (_ bv0 32) ?x94) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x218 (= false false)))
 (let (($x18 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x278 (=> $x18 $x218)))
 (let (($x41 (= $x18 (= (ite (= (_ bv0 32) ?x94) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x125 (and $x41 $x278)))
 (let (($x297 (and $x125 $x295)))
 (let (($x240 (and $x297 $x246)))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x116)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x12)))
 (let (($x67 (= input.spec-%var-l-1.2.0 ?x198)))
 (let (($x158 (and $x67 $x240)))
 (let (($x323 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x153 (=> $x323 $x158)))
 (let (($x312 (= $x323 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x183 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x113 (=> $x183 $x218)))
 (let (($x254 (= $x183 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x282 (and $x254 $x113)))
 (let (($x45 (and $x282 $x312)))
 (let (($x260 (and $x45 $x153)))
 (let (($x389 (and $x260 $x388)))
 (let (($x390 (= $x389 true)))
 (let (($x391 (= $x390 true)))
 (let (($x392 (= $x391 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x393 (and $x76 $x392)))
 (let (($x396 (=> $x393 $x395)))
 (not $x396))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6840 (_ BitVec 32)) (BOUND_VARIABLE_6841 (_ BitVec 32)) (BOUND_VARIABLE_6842 (_ BitVec 32)) (BOUND_VARIABLE_6843 Bool) (BOUND_VARIABLE_6844 (_ BitVec 32)) (BOUND_VARIABLE_6845 (_ BitVec 32)) (BOUND_VARIABLE_6846 (_ BitVec 32)) (BOUND_VARIABLE_6847 (_ BitVec 32)) (BOUND_VARIABLE_6848 (_ BitVec 32)) (BOUND_VARIABLE_6849 (_ BitVec 32)) (BOUND_VARIABLE_6850 Bool) (BOUND_VARIABLE_6851 (_ BitVec 32)) (BOUND_VARIABLE_6852 (_ BitVec 32)) (BOUND_VARIABLE_6853 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000003)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000003)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x157 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x140))))
 (let ((?x110 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x314 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x170 (concat ?x23 (concat ?x251 ?x110))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x306 ?x172 false)))
 (let (($x365 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x128 (=> $x365 $x314)))
 (let (($x352 (= $x365 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x363 (= false false)))
 (let (($x343 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x364 (=> $x343 $x363)))
 (let (($x355 (= $x343 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x360 (and $x355 $x364)))
 (let (($x353 (and $x360 $x352)))
 (let (($x215 (and $x353 $x128)))
 (let (($x111 (= $x215 true)))
 (let (($x149 (= $x111 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x192 (concat ?x129 (concat ?x137 ?x184)))))
 (let (($x124 (= input.dst.llvm-%l ?x122)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x64)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x143 $x289)))
 (let (($x95 (and $x93 $x263)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x19 (and (and (and $x135 $x13) $x95) $x124)))
 (let ((?x303 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x142 (concat ?x303 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x302 (concat ?x8 (concat ?x280 ?x142))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x319))))
 (let (($x72 (= input.spec-%var-l-1.2.1.2.0 ?x16)))
 (let (($x68 (and $x72 true)))
 (let (($x97 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x78 (=> $x97 $x68)))
 (let (($x25 (= $x97 (bvuge (ite (= (_ bv0 32) ?x302) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x266 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x138 (=> $x266 $x363)))
 (let (($x84 (= $x266 (= (ite (= (_ bv0 32) ?x302) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x84 $x138)))
 (let (($x10 (and $x31 $x25)))
 (let (($x196 (and $x10 $x78)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x216)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x383)))
 (let (($x257 (= input.spec-%var-l-1.2.0 ?x74)))
 (let (($x70 (and $x257 $x196)))
 (let (($x53 (=> $x365 $x70)))
 (let (($x119 (and $x353 $x53)))
 (let (($x236 (and $x119 $x19)))
 (let (($x248 (= $x236 true)))
 (let (($x209 (= $x248 true)))
 (let (($x249 (= $x209 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x86 (and $x76 $x249)))
 (let (($x150 (=> $x86 $x149)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x172 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x157 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv1 32))) (select input.dst.llvm-mem ?x157))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x157 (_ bv2 32))) ?x140))))
 (let ((?x110 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x251 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x23 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x314 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x170 (concat ?x23 (concat ?x251 ?x110))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x306 ?x172 false)))
 (let (($x365 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x128 (=> $x365 $x314)))
 (let (($x352 (= $x365 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x363 (= false false)))
 (let (($x343 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x364 (=> $x343 $x363)))
 (let (($x355 (= $x343 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x360 (and $x355 $x364)))
 (let (($x353 (and $x360 $x352)))
 (let (($x215 (and $x353 $x128)))
 (let (($x111 (= $x215 true)))
 (let (($x149 (= $x111 true)))
 (let ((?x184 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x129 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x122 (concat ?x192 (concat ?x129 (concat ?x137 ?x184)))))
 (let (($x124 (= input.dst.llvm-%l ?x122)))
 (let ((?x64 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x263 (= (_ bv0 32) ?x64)))
 (let ((?x47 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x47)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x143 $x289)))
 (let (($x95 (and $x93 $x263)))
 (let (($x13 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x19 (and (and (and $x135 $x13) $x95) $x124)))
 (let ((?x303 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x142 (concat ?x303 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x302 (concat ?x8 (concat ?x280 ?x142))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv1 32))) (select input.dst.llvm-mem ?x302))))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x302 (_ bv2 32))) ?x319))))
 (let (($x72 (= input.spec-%var-l-1.2.1.2.0 ?x16)))
 (let (($x68 (and $x72 true)))
 (let (($x97 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x78 (=> $x97 $x68)))
 (let (($x25 (= $x97 (bvuge (ite (= (_ bv0 32) ?x302) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x266 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x138 (=> $x266 $x363)))
 (let (($x84 (= $x266 (= (ite (= (_ bv0 32) ?x302) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x84 $x138)))
 (let (($x10 (and $x31 $x25)))
 (let (($x196 (and $x10 $x78)))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x216)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x383)))
 (let (($x257 (= input.spec-%var-l-1.2.0 ?x74)))
 (let (($x70 (and $x257 $x196)))
 (let (($x53 (=> $x365 $x70)))
 (let (($x119 (and $x353 $x53)))
 (let (($x236 (and $x119 $x19)))
 (let (($x248 (= $x236 true)))
 (let (($x209 (= $x248 true)))
 (let (($x249 (= $x209 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x86 (and $x76 $x249)))
 (let (($x150 (=> $x86 $x149)))
 (not $x150)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_6417 (_ BitVec 32)) (BOUND_VARIABLE_6418 (_ BitVec 32)) (BOUND_VARIABLE_6419 (_ BitVec 32)) (BOUND_VARIABLE_6420 (_ BitVec 32)) (BOUND_VARIABLE_6421 (_ BitVec 32)) (BOUND_VARIABLE_6422 (_ BitVec 32)) (BOUND_VARIABLE_6423 Bool) (BOUND_VARIABLE_6424 (_ BitVec 32)) (BOUND_VARIABLE_6425 (_ BitVec 32)) (BOUND_VARIABLE_6426 (_ BitVec 32)) (BOUND_VARIABLE_6427 (_ BitVec 32)) (BOUND_VARIABLE_6428 (_ BitVec 32)) (BOUND_VARIABLE_6429 (_ BitVec 32)) (BOUND_VARIABLE_6430 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv9 32) (_ bv128 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv32768 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv524288 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x40ebd7eb)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000007 #x92))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x92000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xffffffff)
              (= x!8 #x92000000)
              (= x!9 #x00000000)
              (= x!10 #xffffffff)
              (= x!11 #x00000000)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x168))))
 (let ((?x299 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x120 (concat ?x277 (concat ?x301 (concat ?x5 ?x299)))))
 (let ((?x300 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x295 (concat ?x167 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x88 (concat ?x125 (concat ?x223 ?x295))))
 (let (($x408 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x88 ?x300 false ?x120 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x207)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x279)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x182)))
 (let (($x314 (= input.spec-%var-l-1.2.0 ?x172)))
 (let (($x224 (and $x314 $x408)))
 (let (($x47 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x328 (=> $x47 $x224)))
 (let (($x93 (= $x47 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x59 (= false false)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x208 (=> $x78 $x59)))
 (let (($x119 (= $x78 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x135 (and $x119 $x208)))
 (let (($x64 (and $x135 $x93)))
 (let (($x320 (and $x64 $x328)))
 (let (($x146 (= $x320 true)))
 (let (($x206 (= $x146 true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x262 (concat ?x281 (concat ?x226 ?x204)))))
 (let (($x231 (= input.dst.llvm-%l ?x132)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x141)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x290 $x298)))
 (let (($x15 (and $x195 $x101)))
 (let (($x307 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x318 (and (and (and $x27 $x307) $x15) $x231)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x88 (_ bv4 32))))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x88 (_ bv4 32)) (_ bv2 32))) ?x123)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x88 (_ bv4 32)) (_ bv3 32))) ?x304)))
 (let (($x109 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x115 ?x300 false ?x120 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x207)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x421))))
 (let (($x193 (= input.spec-%var-l-1.2.1.2.0 ?x394)))
 (let (($x269 (and $x193 $x109)))
 (let (($x158 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x9 (=> $x158 $x269)))
 (let (($x371 (= $x158 (bvuge (ite (= (_ bv0 32) ?x88) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x324 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x175 (=> $x324 $x59)))
 (let (($x332 (= $x324 (= (ite (= (_ bv0 32) ?x88) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x326 (and $x332 $x175)))
 (let (($x240 (and $x326 $x371)))
 (let (($x61 (and $x240 $x9)))
 (let (($x256 (and $x314 $x61)))
 (let (($x54 (=> $x47 $x256)))
 (let (($x287 (and $x64 $x54)))
 (let (($x108 (and $x287 $x318)))
 (let (($x145 (= $x108 true)))
 (let (($x265 (= $x145 true)))
 (let (($x276 (= $x265 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x242 (and $x76 $x276)))
 (let (($x413 (=> $x242 $x206)))
 (not $x413)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x81 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv1 32))) (select input.dst.llvm-mem ?x81))))
 (let ((?x207 (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x81 (_ bv2 32))) ?x168))))
 (let ((?x299 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x120 (concat ?x277 (concat ?x301 (concat ?x5 ?x299)))))
 (let ((?x300 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x295 (concat ?x167 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x125 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x88 (concat ?x125 (concat ?x223 ?x295))))
 (let (($x408 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x88 ?x300 false ?x120 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x207)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x279)))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x182)))
 (let (($x314 (= input.spec-%var-l-1.2.0 ?x172)))
 (let (($x224 (and $x314 $x408)))
 (let (($x47 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x328 (=> $x47 $x224)))
 (let (($x93 (= $x47 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x59 (= false false)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x208 (=> $x78 $x59)))
 (let (($x119 (= $x78 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x135 (and $x119 $x208)))
 (let (($x64 (and $x135 $x93)))
 (let (($x320 (and $x64 $x328)))
 (let (($x146 (= $x320 true)))
 (let (($x206 (= $x146 true)))
 (let ((?x204 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x226 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x132 (concat ?x262 (concat ?x281 (concat ?x226 ?x204)))))
 (let (($x231 (= input.dst.llvm-%l ?x132)))
 (let ((?x141 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x101 (= (_ bv0 32) ?x141)))
 (let ((?x17 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x290 $x298)))
 (let (($x15 (and $x195 $x101)))
 (let (($x307 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x318 (and (and (and $x27 $x307) $x15) $x231)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x88 (_ bv4 32))))))
 (let ((?x304 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x88 (_ bv4 32)) (_ bv2 32))) ?x123)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x88 (_ bv4 32)) (_ bv3 32))) ?x304)))
 (let (($x109 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x115 ?x300 false ?x120 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x207)))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv1 32))) (select input.dst.llvm-mem ?x88))))
 (let ((?x394 (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x88 (_ bv2 32))) ?x421))))
 (let (($x193 (= input.spec-%var-l-1.2.1.2.0 ?x394)))
 (let (($x269 (and $x193 $x109)))
 (let (($x158 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x9 (=> $x158 $x269)))
 (let (($x371 (= $x158 (bvuge (ite (= (_ bv0 32) ?x88) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x324 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x175 (=> $x324 $x59)))
 (let (($x332 (= $x324 (= (ite (= (_ bv0 32) ?x88) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x326 (and $x332 $x175)))
 (let (($x240 (and $x326 $x371)))
 (let (($x61 (and $x240 $x9)))
 (let (($x256 (and $x314 $x61)))
 (let (($x54 (=> $x47 $x256)))
 (let (($x287 (and $x64 $x54)))
 (let (($x108 (and $x287 $x318)))
 (let (($x145 (= $x108 true)))
 (let (($x265 (= $x145 true)))
 (let (($x276 (= $x265 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x242 (and $x76 $x276)))
 (let (($x413 (=> $x242 $x206)))
 (not $x413)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6509 (_ BitVec 32)) (BOUND_VARIABLE_6510 (_ BitVec 32)) (BOUND_VARIABLE_6511 (_ BitVec 32)) (BOUND_VARIABLE_6512 Bool) (BOUND_VARIABLE_6513 (_ BitVec 32)) (BOUND_VARIABLE_6514 (_ BitVec 32)) (BOUND_VARIABLE_6515 (_ BitVec 32)) (BOUND_VARIABLE_6516 (_ BitVec 32)) (BOUND_VARIABLE_6517 (_ BitVec 32)) (BOUND_VARIABLE_6518 (_ BitVec 32)) (BOUND_VARIABLE_6519 Bool) (BOUND_VARIABLE_6520 (_ BitVec 32)) (BOUND_VARIABLE_6521 (_ BitVec 32)) (BOUND_VARIABLE_6522 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv10 32) (_ bv16 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1048576 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1048576 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #xa9687d78)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x00000006
                     #x80)
              #x80000003
              #x80)
       #x80000003
       #x80))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x80000001)
              (= x!8 #x00800000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00800000)
              (= x!12 #x80000001)
              (= x!13 #x00000000))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x80000001)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00800000)
              (= x!12 #x80000001)
              (= x!13 #x00000000))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x377 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x378))))
 (let ((?x379 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x370 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x384 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x74 (concat ?x187 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x197 (concat ?x303 (concat ?x51 ?x74))))
 (let (($x57 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x197 (concat ?x346 (concat ?x384 (concat ?x370 ?x379))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x221 ?x185 false)))
 (let (($x344 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x334 (=> $x344 $x57)))
 (let (($x97 (= $x344 (bvuge (ite (= (_ bv0 32) ?x197) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x134 (= false false)))
 (let (($x8 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x8 $x134)))
 (let (($x254 (= $x8 (= (ite (= (_ bv0 32) ?x197) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x50 (and $x254 $x63)))
 (let (($x214 (and $x50 $x97)))
 (let (($x49 (and $x214 $x334)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x15)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x262)))
 (let (($x226 (= input.spec-%var-l-1.2.0 ?x147)))
 (let (($x337 (and $x226 $x49)))
 (let (($x115 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x177 (=> $x115 $x337)))
 (let (($x270 (= $x115 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x228 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x181 (=> $x228 $x134)))
 (let (($x315 (= $x228 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x176 (and $x315 $x181)))
 (let (($x300 (and $x176 $x270)))
 (let (($x259 (and $x300 $x177)))
 (let (($x358 (= $x259 true)))
 (let (($x188 (= $x358 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x339 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x296 (concat ?x80 (concat ?x77 (concat ?x339 ?x98)))))
 (let (($x233 (= input.dst.llvm-%l ?x296)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x218)))
 (let ((?x354 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x366 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x354)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x131 $x366)))
 (let (($x327 (and $x323 $x60)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x36 (and (and (and $x48 $x12) $x327) $x233)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x105))))
 (let (($x87 (= input.spec-%var-l-1.2.1.2.0 ?x113)))
 (let (($x251 (and $x87 true)))
 (let (($x205 (=> $x344 $x251)))
 (let (($x23 (and $x214 $x205)))
 (let (($x288 (and $x226 $x23)))
 (let (($x157 (=> $x115 $x288)))
 (let (($x225 (and $x300 $x157)))
 (let (($x39 (and $x225 $x36)))
 (let (($x325 (= $x39 true)))
 (let (($x335 (= $x325 true)))
 (let (($x385 (= $x335 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x336 (and $x76 $x385)))
 (let (($x230 (=> $x336 $x188)))
 (not $x230))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x377 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x378))))
 (let ((?x379 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x370 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x384 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x187 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x74 (concat ?x187 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x197 (concat ?x303 (concat ?x51 ?x74))))
 (let (($x57 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x197 (concat ?x346 (concat ?x384 (concat ?x370 ?x379))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x221 ?x185 false)))
 (let (($x344 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x334 (=> $x344 $x57)))
 (let (($x97 (= $x344 (bvuge (ite (= (_ bv0 32) ?x197) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x134 (= false false)))
 (let (($x8 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x63 (=> $x8 $x134)))
 (let (($x254 (= $x8 (= (ite (= (_ bv0 32) ?x197) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x50 (and $x254 $x63)))
 (let (($x214 (and $x50 $x97)))
 (let (($x49 (and $x214 $x334)))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x15)))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x262)))
 (let (($x226 (= input.spec-%var-l-1.2.0 ?x147)))
 (let (($x337 (and $x226 $x49)))
 (let (($x115 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x177 (=> $x115 $x337)))
 (let (($x270 (= $x115 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x228 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x181 (=> $x228 $x134)))
 (let (($x315 (= $x228 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x176 (and $x315 $x181)))
 (let (($x300 (and $x176 $x270)))
 (let (($x259 (and $x300 $x177)))
 (let (($x358 (= $x259 true)))
 (let (($x188 (= $x358 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x339 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x296 (concat ?x80 (concat ?x77 (concat ?x339 ?x98)))))
 (let (($x233 (= input.dst.llvm-%l ?x296)))
 (let ((?x218 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x60 (= (_ bv0 32) ?x218)))
 (let ((?x354 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x366 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x354)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x323 (and $x131 $x366)))
 (let (($x327 (and $x323 $x60)))
 (let (($x12 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x48 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x36 (and (and (and $x48 $x12) $x327) $x233)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x105))))
 (let (($x87 (= input.spec-%var-l-1.2.1.2.0 ?x113)))
 (let (($x251 (and $x87 true)))
 (let (($x205 (=> $x344 $x251)))
 (let (($x23 (and $x214 $x205)))
 (let (($x288 (and $x226 $x23)))
 (let (($x157 (=> $x115 $x288)))
 (let (($x225 (and $x300 $x157)))
 (let (($x39 (and $x225 $x36)))
 (let (($x325 (= $x39 true)))
 (let (($x335 (= $x325 true)))
 (let (($x385 (= $x335 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x336 (and $x76 $x385)))
 (let (($x230 (=> $x336 $x188)))
 (not $x230))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_46)
(= input.dst.llvm-mem @fun_43)
(function @fun_46
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_46 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b00000000000000000000000000000011) #b10000000)
 (= (@fun_43 #b10000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_6548 (_ BitVec 32)) (BOUND_VARIABLE_6549 (_ BitVec 32)) (BOUND_VARIABLE_6550 (_ BitVec 32)) (BOUND_VARIABLE_6551 (_ BitVec 32)) (BOUND_VARIABLE_6552 (_ BitVec 32)) (BOUND_VARIABLE_6553 (_ BitVec 32)) (BOUND_VARIABLE_6554 Bool) (BOUND_VARIABLE_6555 (_ BitVec 32)) (BOUND_VARIABLE_6556 (_ BitVec 32)) (BOUND_VARIABLE_6557 (_ BitVec 32)) (BOUND_VARIABLE_6558 (_ BitVec 32)) (BOUND_VARIABLE_6559 (_ BitVec 32)) (BOUND_VARIABLE_6560 (_ BitVec 32)) (BOUND_VARIABLE_6561 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3 32) (_ bv1 8)) (_ bv16777221 32) (_ bv16 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16777216 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xfffffffe)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x4f635575)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000004
                                #x08)
                         #x00000003
                         #x62)
                  #x6200000d
                  #x08)))
(let ((a!2 (store (store (store (store a!1 #x00000003 #x62) #xffffffff #x08)
                         #xfffffffe
                         #x08)
                  #x00000005
                  #x08)))
  (store (store (store (store a!2 #x6200000e #x08) #x00000000 #x08)
                #x00000000
                #x08)
         #x6200000c
         #x08))))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x62000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xfffffffe)
              (= x!8 #x00080808)
              (= x!9 #x00080808)
              (= x!10 #xfffffffe)
              (= x!11 #x08086200)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x41))))
 (let ((?x21 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x129 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x422 (concat ?x393 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x309 (concat ?x391 (concat ?x104 ?x422))))
 (let ((?x250 (bvadd ?x309 (_ bv4 32))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x160))))
 (let (($x91 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x249 ?x129 false (concat ?x361 (concat ?x244 (concat ?x238 ?x21))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x388)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x46))))
 (let (($x342 (= input.spec-%var-l-1.2.1.2.0 ?x276)))
 (let (($x200 (and $x342 $x91)))
 (let (($x301 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x20 (=> $x301 $x200)))
 (let (($x123 (= $x301 (bvuge (ite (= (_ bv0 32) ?x309) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x110 (= false false)))
 (let (($x167 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x223 (=> $x167 $x110)))
 (let (($x278 (= $x167 (= (ite (= (_ bv0 32) ?x309) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x190 (and $x278 $x223)))
 (let (($x304 (and $x190 $x123)))
 (let (($x227 (and $x304 $x20)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x153)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x350)))
 (let (($x57 (= input.spec-%var-l-1.2.0 ?x185)))
 (let (($x117 (and $x57 $x227)))
 (let (($x354 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (=> $x354 $x117)))
 (let (($x323 (= $x354 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x205 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x6 (=> $x205 $x110)))
 (let (($x225 (= $x205 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x48 (and $x225 $x6)))
 (let (($x218 (and $x48 $x323)))
 (let (($x84 (and $x218 $x18)))
 (let (($x56 (= $x84 true)))
 (let (($x397 (= $x56 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x222 (concat ?x217 (concat ?x92 ?x67)))))
 (let (($x267 (= input.dst.llvm-%l ?x29)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x38)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x234 $x253)))
 (let (($x96 (and $x10 $x198)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and (and (and $x33 $x142) $x96) $x267)))
 (let (($x180 (and $x84 $x174)))
 (let (($x35 (= $x180 true)))
 (let (($x210 (= $x35 true)))
 (let (($x83 (= $x210 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x40 (and $x76 $x83)))
 (let (($x173 (=> $x40 $x397)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x357 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv1 32))) (select input.dst.llvm-mem ?x357))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x357 (_ bv2 32))) ?x41))))
 (let ((?x21 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x238 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x129 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x422 (concat ?x393 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x309 (concat ?x391 (concat ?x104 ?x422))))
 (let ((?x250 (bvadd ?x309 (_ bv4 32))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv1 32))) (select input.dst.llvm-mem ?x250))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x250 (_ bv2 32))) ?x160))))
 (let (($x91 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x249 ?x129 false (concat ?x361 (concat ?x244 (concat ?x238 ?x21))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x388)))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv1 32))) (select input.dst.llvm-mem ?x309))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x309 (_ bv2 32))) ?x46))))
 (let (($x342 (= input.spec-%var-l-1.2.1.2.0 ?x276)))
 (let (($x200 (and $x342 $x91)))
 (let (($x301 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x20 (=> $x301 $x200)))
 (let (($x123 (= $x301 (bvuge (ite (= (_ bv0 32) ?x309) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x110 (= false false)))
 (let (($x167 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x223 (=> $x167 $x110)))
 (let (($x278 (= $x167 (= (ite (= (_ bv0 32) ?x309) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x190 (and $x278 $x223)))
 (let (($x304 (and $x190 $x123)))
 (let (($x227 (and $x304 $x20)))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x153)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x350)))
 (let (($x57 (= input.spec-%var-l-1.2.0 ?x185)))
 (let (($x117 (and $x57 $x227)))
 (let (($x354 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (=> $x354 $x117)))
 (let (($x323 (= $x354 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x205 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x6 (=> $x205 $x110)))
 (let (($x225 (= $x205 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x48 (and $x225 $x6)))
 (let (($x218 (and $x48 $x323)))
 (let (($x84 (and $x218 $x18)))
 (let (($x56 (= $x84 true)))
 (let (($x397 (= $x56 true)))
 (let ((?x67 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x92 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x29 (concat ?x222 (concat ?x217 (concat ?x92 ?x67)))))
 (let (($x267 (= input.dst.llvm-%l ?x29)))
 (let ((?x38 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x198 (= (_ bv0 32) ?x38)))
 (let ((?x138 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x253 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (and $x234 $x253)))
 (let (($x96 (and $x10 $x198)))
 (let (($x142 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x174 (and (and (and $x33 $x142) $x96) $x267)))
 (let (($x180 (and $x84 $x174)))
 (let (($x35 (= $x180 true)))
 (let (($x210 (= $x35 true)))
 (let (($x83 (= $x210 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x40 (and $x76 $x83)))
 (let (($x173 (=> $x40 $x397)))
 (not $x173))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x5))))
 (let ((?x256 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x43 (concat ?x213 (concat ?x85 (concat ?x193 ?x256)))))
 (let ((?x95 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x446 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) ?x95 false ?x43 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x149)))
 (let (($x89 (= $x446 true)))
 (let (($x417 (= $x89 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x308 (concat ?x111 (concat ?x124 (concat ?x307 ?x34)))))
 (let (($x126 (= input.dst.llvm-%l ?x308)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x243)))
 (let ((?x268 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x268)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x155 $x52)))
 (let (($x82 (and $x287 $x271)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x146 (and (and (and $x88 $x94) $x82) $x126)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x187 (concat ?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x106 (concat ?x139 (concat ?x163 ?x187))))
 (let ((?x169 (bvadd ?x106 (_ bv4 32))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x24))))
 (let (($x66 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x54 ?x95 false ?x43 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x149)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x279))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x306)))
 (let (($x353 (and $x358 $x66)))
 (let (($x116 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x128 (=> $x116 $x353)))
 (let (($x113 (= $x116 (bvuge (ite (= (_ bv0 32) ?x106) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x107 (= false false)))
 (let (($x191 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x282 (=> $x191 $x107)))
 (let (($x135 (= $x191 (= (ite (= (_ bv0 32) ?x106) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x147 (and $x135 $x282)))
 (let (($x87 (and $x147 $x113)))
 (let (($x382 (and $x87 $x128)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x96)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x222)))
 (let (($x92 (= input.spec-%var-l-1.2.0 ?x229)))
 (let (($x216 (and $x92 $x382)))
 (let (($x249 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (=> $x249 $x216)))
 (let (($x137 (= $x249 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x86 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (=> $x86 $x107)))
 (let (($x250 (= $x86 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x273 (and $x250 $x69)))
 (let (($x129 (and $x273 $x137)))
 (let (($x293 (and $x129 $x178)))
 (let (($x72 (and $x293 $x146)))
 (let (($x145 (= $x72 true)))
 (let (($x242 (= $x145 true)))
 (let (($x206 (= $x242 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x11 (and $x76 $x206)))
 (let (($x415 (=> $x11 $x417)))
 (not $x415))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x168 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x5))))
 (let ((?x256 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x43 (concat ?x213 (concat ?x85 (concat ?x193 ?x256)))))
 (let ((?x95 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x446 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv0 32) ?x95 false ?x43 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x149)))
 (let (($x89 (= $x446 true)))
 (let (($x417 (= $x89 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x307 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x308 (concat ?x111 (concat ?x124 (concat ?x307 ?x34)))))
 (let (($x126 (= input.dst.llvm-%l ?x308)))
 (let ((?x243 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x271 (= (_ bv0 32) ?x243)))
 (let ((?x268 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x268)))
 (let (($x155 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x287 (and $x155 $x52)))
 (let (($x82 (and $x287 $x271)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x146 (and (and (and $x88 $x94) $x82) $x126)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x187 (concat ?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x106 (concat ?x139 (concat ?x163 ?x187))))
 (let ((?x169 (bvadd ?x106 (_ bv4 32))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem ?x169))))
 (let ((?x54 (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x169 (_ bv2 32))) ?x24))))
 (let (($x66 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x54 ?x95 false ?x43 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x149)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv1 32))) (select input.dst.llvm-mem ?x106))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x106 (_ bv2 32))) ?x279))))
 (let (($x358 (= input.spec-%var-l-1.2.1.2.0 ?x306)))
 (let (($x353 (and $x358 $x66)))
 (let (($x116 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x128 (=> $x116 $x353)))
 (let (($x113 (= $x116 (bvuge (ite (= (_ bv0 32) ?x106) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x107 (= false false)))
 (let (($x191 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x282 (=> $x191 $x107)))
 (let (($x135 (= $x191 (= (ite (= (_ bv0 32) ?x106) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x147 (and $x135 $x282)))
 (let (($x87 (and $x147 $x113)))
 (let (($x382 (and $x87 $x128)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x96)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x222)))
 (let (($x92 (= input.spec-%var-l-1.2.0 ?x229)))
 (let (($x216 (and $x92 $x382)))
 (let (($x249 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x178 (=> $x249 $x216)))
 (let (($x137 (= $x249 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x86 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x69 (=> $x86 $x107)))
 (let (($x250 (= $x86 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x273 (and $x250 $x69)))
 (let (($x129 (and $x273 $x137)))
 (let (($x293 (and $x129 $x178)))
 (let (($x72 (and $x293 $x146)))
 (let (($x145 (= $x72 true)))
 (let (($x242 (= $x145 true)))
 (let (($x206 (= $x242 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x11 (and $x76 $x206)))
 (let (($x415 (=> $x11 $x417)))
 (not $x415))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6806 (_ BitVec 32)) (BOUND_VARIABLE_6807 (_ BitVec 32)) (BOUND_VARIABLE_6808 (_ BitVec 32)) (BOUND_VARIABLE_6809 Bool) (BOUND_VARIABLE_6810 (_ BitVec 32)) (BOUND_VARIABLE_6811 (_ BitVec 32)) (BOUND_VARIABLE_6812 (_ BitVec 32)) (BOUND_VARIABLE_6813 (_ BitVec 32)) (BOUND_VARIABLE_6814 (_ BitVec 32)) (BOUND_VARIABLE_6815 (_ BitVec 32)) (BOUND_VARIABLE_6816 Bool) (BOUND_VARIABLE_6817 (_ BitVec 32)) (BOUND_VARIABLE_6818 (_ BitVec 32)) (BOUND_VARIABLE_6819 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000001)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000001)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x437 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x437 (_ bv1 32))) (select input.dst.llvm-mem ?x437))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x437 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x437 (_ bv2 32))) ?x431))))
 (let ((?x71 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x433 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x438 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x436 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x444 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv0 32) (concat ?x436 (concat ?x438 (concat ?x433 ?x71))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x426 ?x432 false)))
 (let (($x54 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x359 (=> $x54 $x444)))
 (let (($x335 (= $x54 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x211 (= false false)))
 (let (($x196 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x9 (=> $x196 $x211)))
 (let (($x339 (= $x196 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x98 (and $x339 $x9)))
 (let (($x310 (and $x98 $x335)))
 (let (($x47 (and $x310 $x359)))
 (let (($x59 (= $x47 true)))
 (let (($x411 (= $x59 true)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x337 (concat ?x324 (concat ?x314 ?x186)))))
 (let (($x289 (= input.dst.llvm-%l ?x64)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x35)))
 (let ((?x397 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x397)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x56 $x210)))
 (let (($x173 (and $x83 $x40)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x349 (and (and (and $x174 $x220) $x173) $x289)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x104 (concat ?x390 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x345 (concat ?x343 (concat ?x393 ?x104))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x334))))
 (let (($x138 (= input.spec-%var-l-1.2.1.2.0 ?x134)))
 (let (($x267 (and $x138 true)))
 (let (($x276 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x121 (=> $x276 $x267)))
 (let (($x46 (= $x276 (bvuge (ite (= (_ bv0 32) ?x345) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x239 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x240 (=> $x239 $x211)))
 (let (($x391 (= $x239 (= (ite (= (_ bv0 32) ?x345) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x57 (and $x391 $x240)))
 (let (($x420 (and $x57 $x46)))
 (let (($x258 (and $x420 $x121)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x82)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x307 (= input.spec-%var-l-1.2.0 ?x338)))
 (let (($x142 (and $x307 $x258)))
 (let (($x31 (=> $x54 $x142)))
 (let (($x263 (= $x54 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x169 (= $x196 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x132 (and $x169 $x9)))
 (let (($x95 (and $x132 $x263)))
 (let (($x234 (and $x95 $x31)))
 (let (($x377 (and $x234 $x349)))
 (let (($x291 (= $x377 true)))
 (let (($x172 (= $x291 true)))
 (let (($x292 (= $x172 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x355 (and $x76 $x292)))
 (let (($x403 (=> $x355 $x411)))
 (not $x403)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x432 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x437 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x437 (_ bv1 32))) (select input.dst.llvm-mem ?x437))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x437 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x437 (_ bv2 32))) ?x431))))
 (let ((?x71 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x433 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x438 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x436 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x444 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv0 32) (concat ?x436 (concat ?x438 (concat ?x433 ?x71))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x426 ?x432 false)))
 (let (($x54 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x359 (=> $x54 $x444)))
 (let (($x335 (= $x54 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x211 (= false false)))
 (let (($x196 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x9 (=> $x196 $x211)))
 (let (($x339 (= $x196 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x98 (and $x339 $x9)))
 (let (($x310 (and $x98 $x335)))
 (let (($x47 (and $x310 $x359)))
 (let (($x59 (= $x47 true)))
 (let (($x411 (= $x59 true)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x337 (concat ?x324 (concat ?x314 ?x186)))))
 (let (($x289 (= input.dst.llvm-%l ?x64)))
 (let ((?x35 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x40 (= (_ bv0 32) ?x35)))
 (let ((?x397 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x397)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x56 $x210)))
 (let (($x173 (and $x83 $x40)))
 (let (($x220 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x349 (and (and (and $x174 $x220) $x173) $x289)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x104 (concat ?x390 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x345 (concat ?x343 (concat ?x393 ?x104))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x334))))
 (let (($x138 (= input.spec-%var-l-1.2.1.2.0 ?x134)))
 (let (($x267 (and $x138 true)))
 (let (($x276 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x121 (=> $x276 $x267)))
 (let (($x46 (= $x276 (bvuge (ite (= (_ bv0 32) ?x345) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x239 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x240 (=> $x239 $x211)))
 (let (($x391 (= $x239 (= (ite (= (_ bv0 32) ?x345) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x57 (and $x391 $x240)))
 (let (($x420 (and $x57 $x46)))
 (let (($x258 (and $x420 $x121)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x82)))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x111)))
 (let (($x307 (= input.spec-%var-l-1.2.0 ?x338)))
 (let (($x142 (and $x307 $x258)))
 (let (($x31 (=> $x54 $x142)))
 (let (($x263 (= $x54 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x169 (= $x196 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x132 (and $x169 $x9)))
 (let (($x95 (and $x132 $x263)))
 (let (($x234 (and $x95 $x31)))
 (let (($x377 (and $x234 $x349)))
 (let (($x291 (= $x377 true)))
 (let (($x172 (= $x291 true)))
 (let (($x292 (= $x172 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x355 (and $x76 $x292)))
 (let (($x403 (=> $x355 $x411)))
 (not $x403)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000060)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00) #x00000060 #x60))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000060)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000060)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000063)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000060)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_6943 (_ BitVec 32)) (BOUND_VARIABLE_6944 (_ BitVec 32)) (BOUND_VARIABLE_6945 (_ BitVec 32)) (BOUND_VARIABLE_6946 (_ BitVec 32)) (BOUND_VARIABLE_6947 (_ BitVec 32)) (BOUND_VARIABLE_6948 (_ BitVec 32)) (BOUND_VARIABLE_6949 Bool) (BOUND_VARIABLE_6950 (_ BitVec 32)) (BOUND_VARIABLE_6951 (_ BitVec 32)) (BOUND_VARIABLE_6952 (_ BitVec 32)) (BOUND_VARIABLE_6953 (_ BitVec 32)) (BOUND_VARIABLE_6954 (_ BitVec 32)) (BOUND_VARIABLE_6955 (_ BitVec 32)) (BOUND_VARIABLE_6956 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv128 8)))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x333 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x125))))
 (let ((?x209 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x91 (concat ?x164 (concat ?x20 (concat ?x130 ?x209)))))
 (let ((?x386 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x535)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x538)))
 (let (($x542 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x541 ?x386 false ?x91 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x189)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x472))))
 (let (($x479 (= input.spec-%var-l-1.2.0 ?x478)))
 (let (($x504 (and $x479 $x542)))
 (let (($x397 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x505 (=> $x397 $x504)))
 (let (($x416 (= $x397 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x33 (= false false)))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x136 (=> $x121 $x33)))
 (let (($x374 (= $x121 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x230 (and $x374 $x136)))
 (let (($x409 (and $x230 $x416)))
 (let (($x506 (and $x409 $x505)))
 (let (($x507 (= $x506 true)))
 (let (($x508 (= $x507 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x74 (concat ?x254 (concat ?x300 ?x141)))))
 (let (($x50 (= input.dst.llvm-%l ?x55)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x119)))
 (let ((?x278 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x422 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x278)))
 (let (($x413 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x413 $x422)))
 (let (($x26 (and $x281 $x317)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x283 (and (and (and $x23 $x320) $x26) $x50)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x42 (concat ?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x87 (concat ?x100 (concat ?x202 ?x42))))
 (let ((?x18 (bvadd ?x87 (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x200))))
 (let (($x28 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x160 ?x386 false ?x91 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x189)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x376))))
 (let (($x72 (= input.spec-%var-l-1.2.1.2.0 ?x417)))
 (let (($x274 (and $x72 $x28)))
 (let (($x112 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x29 (=> $x112 $x274)))
 (let (($x358 (= $x112 (bvuge (ite (= (_ bv0 32) ?x87) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x229 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x92 (=> $x229 $x33)))
 (let (($x8 (= $x229 (= (ite (= (_ bv0 32) ?x87) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x191 (and $x8 $x92)))
 (let (($x284 (and $x191 $x358)))
 (let (($x262 (and $x284 $x29)))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x439)))
 (let ((?x428 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x425)))
 (let (($x443 (= input.spec-%var-l-1.2.0 ?x428)))
 (let (($x387 (and $x443 $x262)))
 (let (($x101 (=> $x397 $x387)))
 (let (($x83 (= $x397 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x234 (= $x121 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x174 (and $x234 $x136)))
 (let (($x35 (and $x174 $x83)))
 (let (($x231 (and $x35 $x101)))
 (let (($x188 (and $x231 $x283)))
 (let (($x252 (= $x188 true)))
 (let (($x379 (= $x252 true)))
 (let (($x156 (= $x379 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x63 (and $x76 $x156)))
 (let (($x519 (=> $x63 $x508)))
 (not $x519)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x333 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv1 32))) (select input.dst.llvm-mem ?x333))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x333 (_ bv2 32))) ?x125))))
 (let ((?x209 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x130 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x20 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x91 (concat ?x164 (concat ?x20 (concat ?x130 ?x209)))))
 (let ((?x386 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x538 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x535)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x538)))
 (let (($x542 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x541 ?x386 false ?x91 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x189)))
 (let ((?x472 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x478 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x472))))
 (let (($x479 (= input.spec-%var-l-1.2.0 ?x478)))
 (let (($x504 (and $x479 $x542)))
 (let (($x397 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x505 (=> $x397 $x504)))
 (let (($x416 (= $x397 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x33 (= false false)))
 (let (($x121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x136 (=> $x121 $x33)))
 (let (($x374 (= $x121 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x230 (and $x374 $x136)))
 (let (($x409 (and $x230 $x416)))
 (let (($x506 (and $x409 $x505)))
 (let (($x507 (= $x506 true)))
 (let (($x508 (= $x507 true)))
 (let ((?x141 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x55 (concat ?x74 (concat ?x254 (concat ?x300 ?x141)))))
 (let (($x50 (= input.dst.llvm-%l ?x55)))
 (let ((?x119 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x317 (= (_ bv0 32) ?x119)))
 (let ((?x278 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x422 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x278)))
 (let (($x413 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (and $x413 $x422)))
 (let (($x26 (and $x281 $x317)))
 (let (($x320 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x283 (and (and (and $x23 $x320) $x26) $x50)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x42 (concat ?x257 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x87 (concat ?x100 (concat ?x202 ?x42))))
 (let ((?x18 (bvadd ?x87 (_ bv4 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x200))))
 (let (($x28 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x160 ?x386 false ?x91 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x189)))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem ?x87))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x87 (_ bv2 32))) ?x376))))
 (let (($x72 (= input.spec-%var-l-1.2.1.2.0 ?x417)))
 (let (($x274 (and $x72 $x28)))
 (let (($x112 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x29 (=> $x112 $x274)))
 (let (($x358 (= $x112 (bvuge (ite (= (_ bv0 32) ?x87) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x229 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x92 (=> $x229 $x33)))
 (let (($x8 (= $x229 (= (ite (= (_ bv0 32) ?x87) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x191 (and $x8 $x92)))
 (let (($x284 (and $x191 $x358)))
 (let (($x262 (and $x284 $x29)))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x439)))
 (let ((?x428 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x425)))
 (let (($x443 (= input.spec-%var-l-1.2.0 ?x428)))
 (let (($x387 (and $x443 $x262)))
 (let (($x101 (=> $x397 $x387)))
 (let (($x83 (= $x397 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x234 (= $x121 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x174 (and $x234 $x136)))
 (let (($x35 (and $x174 $x83)))
 (let (($x231 (and $x35 $x101)))
 (let (($x188 (and $x231 $x283)))
 (let (($x252 (= $x188 true)))
 (let (($x379 (= $x252 true)))
 (let (($x156 (= $x379 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x63 (and $x76 $x156)))
 (let (($x519 (=> $x63 $x508)))
 (not $x519)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_63)
(= input.dst.llvm-mem @fun_59)
(function @fun_63
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_63 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_4794 (_ BitVec 32)) (BOUND_VARIABLE_4795 (_ BitVec 32)) (BOUND_VARIABLE_4796 (_ BitVec 32)) (BOUND_VARIABLE_4797 Bool) (BOUND_VARIABLE_4798 (_ BitVec 32)) (BOUND_VARIABLE_4799 (_ BitVec 32)) (BOUND_VARIABLE_4800 (_ BitVec 32)) (BOUND_VARIABLE_4801 (_ BitVec 32)) (BOUND_VARIABLE_4802 (_ BitVec 32)) (BOUND_VARIABLE_4803 (_ BitVec 32)) (BOUND_VARIABLE_4804 Bool) (BOUND_VARIABLE_4805 (_ BitVec 32)) (BOUND_VARIABLE_4806 (_ BitVec 32)) (BOUND_VARIABLE_4807 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3 32) (_ bv16 8)) (_ bv268435456 32) (_ bv255 8)) (_ bv268435457 32) (_ bv255 8)) (_ bv268435458 32) (_ bv255 8)) (_ bv268435459 32) (_ bv255 8)))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv33554432 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv268435456 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3838383c)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x38383839)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x38383838)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x38))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x38383838)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x38383838)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3838383f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3838383c)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x38383839)
              (= x!8 #x38383838)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x38383838)
              (= x!12 #x38383839)
              (= x!13 #x38383838))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x564 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x552 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x556 (concat (select input.dst.llvm-mem (bvadd ?x552 (_ bv1 32))) (select input.dst.llvm-mem ?x552))))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x552 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x552 (_ bv2 32))) ?x556))))
 (let ((?x514 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x544 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x547 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x550 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x235)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x418)))
 (let (($x565 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x261 (concat ?x550 (concat ?x547 (concat ?x544 ?x514))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x562 ?x564 false)))
 (let (($x176 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x494 (=> $x176 $x565)))
 (let (($x340 (= $x176 (bvuge (ite (= (_ bv0 32) ?x261) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x248 (= false false)))
 (let (($x507 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x505 (=> $x507 $x248)))
 (let (($x296 (= $x507 (= (ite (= (_ bv0 32) ?x261) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x260 (and $x296 $x505)))
 (let (($x68 (and $x260 $x340)))
 (let (($x497 (and $x68 $x494)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x318))))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x295)))
 (let (($x500 (and $x11 $x497)))
 (let (($x160 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x524 (=> $x160 $x500)))
 (let (($x268 (= $x160 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x175 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x244 (=> $x175 $x248)))
 (let (($x350 (= $x175 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x221 (and $x350 $x244)))
 (let (($x204 (and $x221 $x268)))
 (let (($x516 (and $x204 $x524)))
 (let (($x517 (= $x516 true)))
 (let (($x523 (= $x517 true)))
 (let ((?x442 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x426 (concat ?x438 (concat ?x219 (concat ?x389 ?x442)))))
 (let (($x429 (= input.dst.llvm-%l ?x426)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x65)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x217 $x25)))
 (let (($x310 (and $x253 $x286)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x34 (and (and (and $x162 $x16) $x310) $x429)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x287 (concat ?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x40 (concat ?x84 (concat ?x421 ?x287))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x431))))
 (let (($x337 (= input.spec-%var-l-1.2.1.2.0 ?x38)))
 (let (($x39 (and $x337 true)))
 (let (($x186 (=> $x176 $x39)))
 (let (($x297 (= $x176 (bvuge (ite (= (_ bv0 32) ?x40) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x504 (= $x507 (= (ite (= (_ bv0 32) ?x40) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x508 (and $x504 $x505)))
 (let (($x307 (and $x508 $x297)))
 (let (($x285 (and $x307 $x186)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x26)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x74)))
 (let (($x300 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x177 (and $x300 $x285)))
 (let (($x64 (=> $x160 $x177)))
 (let (($x238 (= $x160 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= $x175 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x41 (and $x18 $x244)))
 (let (($x386 (and $x41 $x238)))
 (let (($x339 (and $x386 $x64)))
 (let (($x290 (and $x339 $x34)))
 (let (($x7 (= $x290 true)))
 (let (($x213 (= $x7 true)))
 (let (($x249 (= $x213 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x107 (and $x76 $x249)))
 (let (($x526 (=> $x107 $x523)))
 (not $x526))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x564 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x552 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x556 (concat (select input.dst.llvm-mem (bvadd ?x552 (_ bv1 32))) (select input.dst.llvm-mem ?x552))))
 (let ((?x562 (concat (select input.dst.llvm-mem (bvadd ?x552 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x552 (_ bv2 32))) ?x556))))
 (let ((?x514 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x544 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x547 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x550 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x235)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x418)))
 (let (($x565 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x261 (concat ?x550 (concat ?x547 (concat ?x544 ?x514))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x562 ?x564 false)))
 (let (($x176 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x494 (=> $x176 $x565)))
 (let (($x340 (= $x176 (bvuge (ite (= (_ bv0 32) ?x261) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x248 (= false false)))
 (let (($x507 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x505 (=> $x507 $x248)))
 (let (($x296 (= $x507 (= (ite (= (_ bv0 32) ?x261) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x260 (and $x296 $x505)))
 (let (($x68 (and $x260 $x340)))
 (let (($x497 (and $x68 $x494)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x318))))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x295)))
 (let (($x500 (and $x11 $x497)))
 (let (($x160 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x524 (=> $x160 $x500)))
 (let (($x268 (= $x160 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x175 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x244 (=> $x175 $x248)))
 (let (($x350 (= $x175 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x221 (and $x350 $x244)))
 (let (($x204 (and $x221 $x268)))
 (let (($x516 (and $x204 $x524)))
 (let (($x517 (= $x516 true)))
 (let (($x523 (= $x517 true)))
 (let ((?x442 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x219 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x438 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x426 (concat ?x438 (concat ?x219 (concat ?x389 ?x442)))))
 (let (($x429 (= input.dst.llvm-%l ?x426)))
 (let ((?x65 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x286 (= (_ bv0 32) ?x65)))
 (let ((?x129 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x217 $x25)))
 (let (($x310 (and $x253 $x286)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x162 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x34 (and (and (and $x162 $x16) $x310) $x429)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x287 (concat ?x196 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x40 (concat ?x84 (concat ?x421 ?x287))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x431))))
 (let (($x337 (= input.spec-%var-l-1.2.1.2.0 ?x38)))
 (let (($x39 (and $x337 true)))
 (let (($x186 (=> $x176 $x39)))
 (let (($x297 (= $x176 (bvuge (ite (= (_ bv0 32) ?x40) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x504 (= $x507 (= (ite (= (_ bv0 32) ?x40) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x508 (and $x504 $x505)))
 (let (($x307 (and $x508 $x297)))
 (let (($x285 (and $x307 $x186)))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x26)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x74)))
 (let (($x300 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x177 (and $x300 $x285)))
 (let (($x64 (=> $x160 $x177)))
 (let (($x238 (= $x160 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x18 (= $x175 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x41 (and $x18 $x244)))
 (let (($x386 (and $x41 $x238)))
 (let (($x339 (and $x386 $x64)))
 (let (($x290 (and $x339 $x34)))
 (let (($x7 (= $x290 true)))
 (let (($x213 (= $x7 true)))
 (let (($x249 (= $x213 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x107 (and $x76 $x249)))
 (let (($x526 (=> $x107 $x523)))
 (not $x526))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x30000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00007f00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
              #x30000001
              #x7f)
       #x00007f01
       #x7f))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00007f00)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x30000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x30000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_4907 (_ BitVec 32)) (BOUND_VARIABLE_4908 (_ BitVec 32)) (BOUND_VARIABLE_4909 (_ BitVec 32)) (BOUND_VARIABLE_4910 (_ BitVec 32)) (BOUND_VARIABLE_4911 (_ BitVec 32)) (BOUND_VARIABLE_4912 (_ BitVec 32)) (BOUND_VARIABLE_4913 Bool) (BOUND_VARIABLE_4914 (_ BitVec 32)) (BOUND_VARIABLE_4915 (_ BitVec 32)) (BOUND_VARIABLE_4916 (_ BitVec 32)) (BOUND_VARIABLE_4917 (_ BitVec 32)) (BOUND_VARIABLE_4918 (_ BitVec 32)) (BOUND_VARIABLE_4919 (_ BitVec 32)) (BOUND_VARIABLE_4920 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3 32) (_ bv128 8)) (_ bv2147483648 32) (_ bv255 8)) (_ bv2147483649 32) (_ bv255 8)) (_ bv2147483650 32) (_ bv255 8)) (_ bv2147483651 32) (_ bv255 8)))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv33554432 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x124))))
 (let ((?x133 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x243 (concat ?x273 (concat ?x49 (concat ?x158 ?x133)))))
 (let ((?x77 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x468)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x501)))
 (let ((?x671 (bvadd ?x482 (_ bv4 32))))
 (let ((?x675 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv1 32))) (select input.dst.llvm-mem ?x671))))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv2 32))) ?x675))))
 (let (($x662 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x681 ?x77 false ?x243 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x338)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x482 (_ bv1 32))) (select input.dst.llvm-mem ?x482))))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd ?x482 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x482 (_ bv2 32))) ?x612))))
 (let (($x606 (= input.spec-%var-l-1.2.1.2.0 ?x618)))
 (let (($x634 (and $x606 $x662)))
 (let (($x182 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x635 (=> $x182 $x634)))
 (let (($x525 (= $x182 (bvuge (ite (= (_ bv0 32) ?x482) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x314 (= false false)))
 (let (($x521 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x523 (=> $x521 $x314)))
 (let (($x448 (= $x521 (= (ite (= (_ bv0 32) ?x482) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x451 (and $x448 $x523)))
 (let (($x520 (and $x451 $x525)))
 (let (($x636 (and $x520 $x635)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x362))))
 (let (($x146 (= input.spec-%var-l-1.2.0 ?x145)))
 (let (($x637 (and $x146 $x636)))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x638 (=> $x129 $x637)))
 (let (($x367 (= $x129 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x186 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (=> $x186 $x314)))
 (let (($x411 (= $x186 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x47 (and $x411 $x324)))
 (let (($x368 (and $x47 $x367)))
 (let (($x649 (and $x368 $x638)))
 (let (($x657 (= $x649 true)))
 (let (($x658 (= $x657 true)))
 (let ((?x474 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x470 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x395 (concat ?x391 (concat ?x167 (concat ?x470 ?x474)))))
 (let (($x345 (= input.dst.llvm-%l ?x395)))
 (let ((?x471 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x476 (= (_ bv0 32) ?x471)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x393 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x473 (and $x379 $x393)))
 (let (($x477 (and $x473 $x476)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x240 (and (and (and $x156 $x316) $x477) $x345)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x397 (concat ?x31 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x436 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x141 (concat ?x326 (concat ?x436 ?x397))))
 (let ((?x291 (bvadd ?x141 (_ bv4 32))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x292))))
 (let (($x61 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x236 ?x77 false ?x243 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x338)))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x479))))
 (let (($x346 (= input.spec-%var-l-1.2.1.2.0 ?x533)))
 (let (($x278 (and $x346 $x61)))
 (let (($x50 (=> $x182 $x278)))
 (let (($x428 (= $x182 (bvuge (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x517 (= $x521 (= (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x267 (and $x517 $x523)))
 (let (($x229 (and $x267 $x428)))
 (let (($x283 (and $x229 $x50)))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x325)))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x311)))
 (let (($x261 (= input.spec-%var-l-1.2.0 ?x418)))
 (let (($x188 (and $x261 $x283)))
 (let (($x416 (=> $x129 $x188)))
 (let (($x253 (= $x129 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x339 (= $x186 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x162 (and $x339 $x324)))
 (let (($x65 (and $x162 $x253)))
 (let (($x374 (and $x65 $x416)))
 (let (($x304 (and $x374 $x240)))
 (let (($x104 (= $x304 true)))
 (let (($x276 (= $x104 true)))
 (let (($x420 (= $x276 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x302 (and $x76 $x420)))
 (let (($x654 (=> $x302 $x658)))
 (not $x654))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x271 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x124 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem ?x271))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x271 (_ bv2 32))) ?x124))))
 (let ((?x133 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x273 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x243 (concat ?x273 (concat ?x49 (concat ?x158 ?x133)))))
 (let ((?x77 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x468 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x501 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x468)))
 (let ((?x482 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x501)))
 (let ((?x671 (bvadd ?x482 (_ bv4 32))))
 (let ((?x675 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv1 32))) (select input.dst.llvm-mem ?x671))))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv2 32))) ?x675))))
 (let (($x662 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x681 ?x77 false ?x243 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x338)))
 (let ((?x612 (concat (select input.dst.llvm-mem (bvadd ?x482 (_ bv1 32))) (select input.dst.llvm-mem ?x482))))
 (let ((?x618 (concat (select input.dst.llvm-mem (bvadd ?x482 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x482 (_ bv2 32))) ?x612))))
 (let (($x606 (= input.spec-%var-l-1.2.1.2.0 ?x618)))
 (let (($x634 (and $x606 $x662)))
 (let (($x182 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x635 (=> $x182 $x634)))
 (let (($x525 (= $x182 (bvuge (ite (= (_ bv0 32) ?x482) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x314 (= false false)))
 (let (($x521 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x523 (=> $x521 $x314)))
 (let (($x448 (= $x521 (= (ite (= (_ bv0 32) ?x482) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x451 (and $x448 $x523)))
 (let (($x520 (and $x451 $x525)))
 (let (($x636 (and $x520 $x635)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x362))))
 (let (($x146 (= input.spec-%var-l-1.2.0 ?x145)))
 (let (($x637 (and $x146 $x636)))
 (let (($x129 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x638 (=> $x129 $x637)))
 (let (($x367 (= $x129 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x186 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x324 (=> $x186 $x314)))
 (let (($x411 (= $x186 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x47 (and $x411 $x324)))
 (let (($x368 (and $x47 $x367)))
 (let (($x649 (and $x368 $x638)))
 (let (($x657 (= $x649 true)))
 (let (($x658 (= $x657 true)))
 (let ((?x474 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x470 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x395 (concat ?x391 (concat ?x167 (concat ?x470 ?x474)))))
 (let (($x345 (= input.dst.llvm-%l ?x395)))
 (let ((?x471 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x476 (= (_ bv0 32) ?x471)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x393 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x379 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x473 (and $x379 $x393)))
 (let (($x477 (and $x473 $x476)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x240 (and (and (and $x156 $x316) $x477) $x345)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x397 (concat ?x31 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x436 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x141 (concat ?x326 (concat ?x436 ?x397))))
 (let ((?x291 (bvadd ?x141 (_ bv4 32))))
 (let ((?x292 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x292))))
 (let (($x61 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x236 ?x77 false ?x243 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x338)))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x479))))
 (let (($x346 (= input.spec-%var-l-1.2.1.2.0 ?x533)))
 (let (($x278 (and $x346 $x61)))
 (let (($x50 (=> $x182 $x278)))
 (let (($x428 (= $x182 (bvuge (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x517 (= $x521 (= (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x267 (and $x517 $x523)))
 (let (($x229 (and $x267 $x428)))
 (let (($x283 (and $x229 $x50)))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x311 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x325)))
 (let ((?x418 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x311)))
 (let (($x261 (= input.spec-%var-l-1.2.0 ?x418)))
 (let (($x188 (and $x261 $x283)))
 (let (($x416 (=> $x129 $x188)))
 (let (($x253 (= $x129 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x339 (= $x186 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x162 (and $x339 $x324)))
 (let (($x65 (and $x162 $x253)))
 (let (($x374 (and $x65 $x416)))
 (let (($x304 (and $x374 $x240)))
 (let (($x104 (= $x304 true)))
 (let (($x276 (= $x104 true)))
 (let (($x420 (= $x276 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x302 (and $x76 $x420)))
 (let (($x654 (=> $x302 $x658)))
 (not $x654))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_4962 (_ BitVec 32)) (BOUND_VARIABLE_4963 (_ BitVec 32)) (BOUND_VARIABLE_4964 (_ BitVec 32)) (BOUND_VARIABLE_4965 Bool) (BOUND_VARIABLE_4966 (_ BitVec 32)) (BOUND_VARIABLE_4967 (_ BitVec 32)) (BOUND_VARIABLE_4968 (_ BitVec 32)) (BOUND_VARIABLE_4969 (_ BitVec 32)) (BOUND_VARIABLE_4970 (_ BitVec 32)) (BOUND_VARIABLE_4971 (_ BitVec 32)) (BOUND_VARIABLE_4972 Bool) (BOUND_VARIABLE_4973 (_ BitVec 32)) (BOUND_VARIABLE_4974 (_ BitVec 32)) (BOUND_VARIABLE_4975 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1073741824 32) (_ bv32 8)) (_ bv32 32) (_ bv255 8)) (_ bv33 32) (_ bv255 8)) (_ bv34 32) (_ bv255 8)) (_ bv35 32) (_ bv255 8)))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv33554432 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv32 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1073741827 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10101010)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x1010100a)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x0a)
                                #x1010100e
                                #x10)
                         #x1010100f
                         #x10)
                  #x10101013
                  #x10)))
(let ((a!2 (store (store (store (store a!1 #x1010100e #x10) #x1010100a #x10)
                         #x1010100a
                         #x10)
                  #x10101013
                  #x10)))
(let ((a!3 (store (store (store (store a!2 #x1010100c #x10) #x10101010 #x10)
                         #x1010100f
                         #x10)
                  #x1010100b
                  #x10)))
(let ((a!4 (store (store (store (store a!3 #x10101015 #x10) #x10101011 #x10)
                         #x1010100c
                         #x10)
                  #x1010100b
                  #x10)))
(let ((a!5 (store (store (store (store a!4 #x10101012 #x10) #x10101017 #x10)
                         #x1010100d
                         #x10)
                  #x10101011
                  #x10)))
(let ((a!6 (store (store (store (store a!5 #x10101010 #x10) #x10101011 #x10)
                         #x1010100d
                         #x10)
                  #x10101016
                  #x10)))
  (store (store (store (store a!6 #x10101010 #x10) #x10101012 #x10)
                #x10101011
                #x10)
         #x10101010
         #x10))))))))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10101013)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10101010)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x1010100a)
              (= x!8 #x10101010)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x10101010)
              (= x!12 #x1010100a)
              (= x!13 #x10101010))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x706 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x694 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x698 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv1 32))) (select input.dst.llvm-mem ?x694))))
 (let ((?x704 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv2 32))) ?x698))))
 (let ((?x691 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x688 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x686 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x690 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x209)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x388)))
 (let ((?x574 (bvadd ?x90 (_ bv4 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem (bvadd ?x574 (_ bv1 32))) (select input.dst.llvm-mem ?x574))))
 (let ((?x586 (concat (select input.dst.llvm-mem (bvadd ?x574 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x574 (_ bv2 32))) ?x503))))
 (let (($x707 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x586 (concat ?x690 (concat ?x686 (concat ?x688 ?x691))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x704 ?x706 false)))
 (let (($x596 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x619 (=> $x596 $x707)))
 (let (($x590 (= $x596 (bvuge (ite (= (_ bv0 32) ?x586) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x82 (= false false)))
 (let (($x566 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x573 (=> $x566 $x82)))
 (let (($x572 (= $x566 (= (ite (= (_ bv0 32) ?x586) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x576 (and $x572 $x573)))
 (let (($x604 (and $x576 $x590)))
 (let (($x641 (and $x604 $x619)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x385))))
 (let (($x109 (= input.spec-%var-l-1.2.1.2.0 ?x242)))
 (let (($x600 (and $x109 $x641)))
 (let (($x655 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x602 (=> $x655 $x600)))
 (let (($x390 (= $x655 (bvuge (ite (= (_ bv0 32) ?x90) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x513 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x448 (=> $x513 $x82)))
 (let (($x408 (= $x513 (= (ite (= (_ bv0 32) ?x90) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x23 (and $x408 $x448)))
 (let (($x195 (and $x23 $x390)))
 (let (($x666 (and $x195 $x602)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x132))))
 (let (($x14 (= input.spec-%var-l-1.2.0 ?x405)))
 (let (($x661 (and $x14 $x666)))
 (let (($x236 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x668 (=> $x236 $x661)))
 (let (($x515 (= $x236 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x327 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x111 (=> $x327 $x82)))
 (let (($x514 (= $x327 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x543 (and $x514 $x111)))
 (let (($x518 (and $x543 $x515)))
 (let (($x669 (and $x518 $x668)))
 (let (($x642 (= $x669 true)))
 (let (($x645 (= $x642 true)))
 (let ((?x268 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x426 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x419 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x419 (concat ?x192 (concat ?x426 ?x268)))))
 (let (($x429 (= input.dst.llvm-%l ?x152)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x107)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (and $x251 $x293)))
 (let (($x365 (and $x249 $x213)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x456 (and (and (and $x263 $x7) $x365) $x429)))
 (let ((?x613 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x614 (concat ?x613 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x611 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x615 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x618 (concat ?x615 (concat ?x611 ?x614))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv1 32))) (select input.dst.llvm-mem ?x618))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv2 32))) ?x38))))
 (let (($x504 (= input.spec-%var-l-1.2.1.2.0 ?x225)))
 (let (($x176 (and $x504 true)))
 (let (($x40 (=> $x655 $x176)))
 (let (($x658 (= $x655 (bvuge (ite (= (_ bv0 32) ?x618) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x498 (= $x513 (= (ite (= (_ bv0 32) ?x618) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x525 (and $x498 $x448)))
 (let (($x654 (and $x525 $x658)))
 (let (($x287 (and $x654 $x40)))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x477)))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x391)))
 (let (($x470 (= input.spec-%var-l-1.2.0 ?x469)))
 (let (($x360 (and $x470 $x287)))
 (let (($x430 (=> $x236 $x360)))
 (let (($x172 (= $x236 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x291 (= $x327 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x233 (and $x291 $x111)))
 (let (($x77 (and $x233 $x172)))
 (let (($x505 (and $x77 $x430)))
 (let (($x296 (and $x505 $x456)))
 (let (($x558 (= $x296 true)))
 (let (($x554 (= $x558 true)))
 (let (($x555 (= $x554 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x516 (and $x76 $x555)))
 (let (($x639 (=> $x516 $x645)))
 (not $x639))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x706 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x694 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x698 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv1 32))) (select input.dst.llvm-mem ?x694))))
 (let ((?x704 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv2 32))) ?x698))))
 (let ((?x691 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x688 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x686 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x690 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x209)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x388)))
 (let ((?x574 (bvadd ?x90 (_ bv4 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem (bvadd ?x574 (_ bv1 32))) (select input.dst.llvm-mem ?x574))))
 (let ((?x586 (concat (select input.dst.llvm-mem (bvadd ?x574 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x574 (_ bv2 32))) ?x503))))
 (let (($x707 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x586 (concat ?x690 (concat ?x686 (concat ?x688 ?x691))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x704 ?x706 false)))
 (let (($x596 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x619 (=> $x596 $x707)))
 (let (($x590 (= $x596 (bvuge (ite (= (_ bv0 32) ?x586) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x82 (= false false)))
 (let (($x566 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x573 (=> $x566 $x82)))
 (let (($x572 (= $x566 (= (ite (= (_ bv0 32) ?x586) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x576 (and $x572 $x573)))
 (let (($x604 (and $x576 $x590)))
 (let (($x641 (and $x604 $x619)))
 (let ((?x385 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x385))))
 (let (($x109 (= input.spec-%var-l-1.2.1.2.0 ?x242)))
 (let (($x600 (and $x109 $x641)))
 (let (($x655 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x602 (=> $x655 $x600)))
 (let (($x390 (= $x655 (bvuge (ite (= (_ bv0 32) ?x90) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x513 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x448 (=> $x513 $x82)))
 (let (($x408 (= $x513 (= (ite (= (_ bv0 32) ?x90) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x23 (and $x408 $x448)))
 (let (($x195 (and $x23 $x390)))
 (let (($x666 (and $x195 $x602)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x132))))
 (let (($x14 (= input.spec-%var-l-1.2.0 ?x405)))
 (let (($x661 (and $x14 $x666)))
 (let (($x236 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x668 (=> $x236 $x661)))
 (let (($x515 (= $x236 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x327 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x111 (=> $x327 $x82)))
 (let (($x514 (= $x327 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x543 (and $x514 $x111)))
 (let (($x518 (and $x543 $x515)))
 (let (($x669 (and $x518 $x668)))
 (let (($x642 (= $x669 true)))
 (let (($x645 (= $x642 true)))
 (let ((?x268 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x426 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x419 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x419 (concat ?x192 (concat ?x426 ?x268)))))
 (let (($x429 (= input.dst.llvm-%l ?x152)))
 (let ((?x107 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x213 (= (_ bv0 32) ?x107)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x293 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (and $x251 $x293)))
 (let (($x365 (and $x249 $x213)))
 (let (($x7 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x263 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x456 (and (and (and $x263 $x7) $x365) $x429)))
 (let ((?x613 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x614 (concat ?x613 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x611 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x615 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x618 (concat ?x615 (concat ?x611 ?x614))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv1 32))) (select input.dst.llvm-mem ?x618))))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv2 32))) ?x38))))
 (let (($x504 (= input.spec-%var-l-1.2.1.2.0 ?x225)))
 (let (($x176 (and $x504 true)))
 (let (($x40 (=> $x655 $x176)))
 (let (($x658 (= $x655 (bvuge (ite (= (_ bv0 32) ?x618) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x498 (= $x513 (= (ite (= (_ bv0 32) ?x618) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x525 (and $x498 $x448)))
 (let (($x654 (and $x525 $x658)))
 (let (($x287 (and $x654 $x40)))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x477)))
 (let ((?x469 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x391)))
 (let (($x470 (= input.spec-%var-l-1.2.0 ?x469)))
 (let (($x360 (and $x470 $x287)))
 (let (($x430 (=> $x236 $x360)))
 (let (($x172 (= $x236 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x291 (= $x327 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x233 (and $x291 $x111)))
 (let (($x77 (and $x233 $x172)))
 (let (($x505 (and $x77 $x430)))
 (let (($x296 (and $x505 $x456)))
 (let (($x558 (= $x296 true)))
 (let (($x554 (= $x558 true)))
 (let (($x555 (= $x554 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x516 (and $x76 $x555)))
 (let (($x639 (=> $x516 $x645)))
 (not $x639))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_5608 (_ BitVec 32)) (BOUND_VARIABLE_5609 (_ BitVec 32)) (BOUND_VARIABLE_5610 (_ BitVec 32)) (BOUND_VARIABLE_5611 (_ BitVec 32)) (BOUND_VARIABLE_5612 (_ BitVec 32)) (BOUND_VARIABLE_5613 (_ BitVec 32)) (BOUND_VARIABLE_5614 Bool) (BOUND_VARIABLE_5615 (_ BitVec 32)) (BOUND_VARIABLE_5616 (_ BitVec 32)) (BOUND_VARIABLE_5617 (_ BitVec 32)) (BOUND_VARIABLE_5618 (_ BitVec 32)) (BOUND_VARIABLE_5619 (_ BitVec 32)) (BOUND_VARIABLE_5620 (_ BitVec 32)) (BOUND_VARIABLE_5621 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv8 8)) (_ bv8 32) (_ bv247 8)) (_ bv9 32) (_ bv255 8)) (_ bv10 32) (_ bv255 8)) (_ bv11 32) (_ bv255 8)))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967287 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x8b505054)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x50505050)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x50505050)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x8b)
                                #x50505054
                                #x53)
                         #x8b505055
                         #x50)
                  #x8b505056
                  #x50)))
(let ((a!2 (store (store (store (store a!1 #x50505053 #x50) #x50505056 #x50)
                         #x8b505053
                         #x50)
                  #x8b505055
                  #x50)))
(let ((a!3 (store (store (store (store a!2 #x8b505054 #x50) #x50505050 #x50)
                         #x8b505057
                         #x50)
                  #x8b505054
                  #x50)))
  (store (store (store (store a!3 #x50505055 #x50) #x50505052 #x50)
                #x8b505056
                #x50)
         #x50505051
         #x50)))))
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x50505050)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x8b505057)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x8b505054)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x302))))
 (let ((?x57 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x319 (concat ?x47 (concat ?x252 (concat ?x156 ?x57)))))
 (let ((?x304 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x112)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x288)))
 (let ((?x398 (bvadd ?x258 (_ bv4 32))))
 (let ((?x626 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv1 32))) (select input.dst.llvm-mem ?x398))))
 (let ((?x630 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv2 32))) ?x626))))
 (let ((?x827 (bvadd ?x630 (_ bv4 32))))
 (let ((?x831 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv1 32))) (select input.dst.llvm-mem ?x827))))
 (let ((?x837 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv2 32))) ?x831))))
 (let (($x805 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x837 ?x304 false ?x319 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x196)))
 (let ((?x746 (concat (select input.dst.llvm-mem (bvadd ?x630 (_ bv1 32))) (select input.dst.llvm-mem ?x630))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x630 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x630 (_ bv2 32))) ?x746))))
 (let (($x751 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x750)))
 (let (($x778 (and $x751 $x805)))
 (let (($x591 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x781 (=> $x591 $x778)))
 (let (($x594 (= $x591 (bvuge (ite (= (_ bv0 32) ?x630) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x54 (= false false)))
 (let (($x414 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x584 (=> $x414 $x54)))
 (let (($x567 (= $x414 (= (ite (= (_ bv0 32) ?x630) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x483 (and $x567 $x584)))
 (let (($x656 (and $x483 $x594)))
 (let (($x782 (and $x656 $x781)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.0 ?x194)))
 (let (($x779 (and $x5 $x782)))
 (let (($x645 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x780 (=> $x645 $x779)))
 (let (($x130 (= $x645 (bvuge (ite (= (_ bv0 32) ?x258) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x684 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x670 (=> $x684 $x54)))
 (let (($x42 (= $x684 (= (ite (= (_ bv0 32) ?x258) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x203 (and $x42 $x670)))
 (let (($x143 (and $x203 $x130)))
 (let (($x793 (and $x143 $x780)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x318))))
 (let (($x557 (= input.spec-%var-l-1.2.0 ?x552)))
 (let (($x801 (and $x557 $x793)))
 (let (($x237 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x802 (=> $x237 $x801)))
 (let (($x244 (= $x237 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x40 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x173 (=> $x40 $x54)))
 (let (($x254 (= $x40 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x386 (and $x254 $x173)))
 (let (($x310 (and $x386 $x244)))
 (let (($x798 (and $x310 $x802)))
 (let (($x799 (= $x798 true)))
 (let (($x795 (= $x799 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x519 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x303 (concat ?x519 (concat ?x211 (concat ?x27 ?x95)))))
 (let (($x421 (= input.dst.llvm-%l ?x303)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x394 (= (_ bv0 32) ?x146)))
 (let ((?x495 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x468 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x495)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x370 $x468)))
 (let (($x180 (and $x145 $x394)))
 (let (($x482 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x348 (and (and (and $x17 $x482) $x180) $x421)))
 (let ((?x686 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x692 (concat ?x686 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x693 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x694 (concat ?x693 (concat ?x691 ?x692))))
 (let ((?x149 (bvadd ?x694 (_ bv4 32))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x131))))
 (let (($x507 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x411 ?x304 false ?x319 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x196)))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv1 32))) (select input.dst.llvm-mem ?x694))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv2 32))) ?x479))))
 (let (($x397 (= input.spec-%var-l-1.2.1.2.0 ?x336)))
 (let (($x355 (and $x397 $x507)))
 (let (($x243 (=> $x645 $x355)))
 (let (($x669 (= $x645 (bvuge (ite (= (_ bv0 32) ?x694) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x682 (= $x684 (= (ite (= (_ bv0 32) ?x694) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x667 (and $x682 $x670)))
 (let (($x642 (and $x667 $x669)))
 (let (($x158 (and $x642 $x243)))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x333)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x540)))
 (let (($x90 (= input.spec-%var-l-1.2.0 ?x388)))
 (let (($x133 (and $x90 $x158)))
 (let (($x56 (=> $x237 $x133)))
 (let (($x249 (= $x237 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x505 (= $x40 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x263 (and $x505 $x173)))
 (let (($x107 (and $x263 $x249)))
 (let (($x493 (and $x107 $x56)))
 (let (($x96 (and $x493 $x348)))
 (let (($x307 (= $x96 true)))
 (let (($x335 (= $x307 true)))
 (let (($x377 (= $x335 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x48 (and $x76 $x377)))
 (let (($x796 (=> $x48 $x795)))
 (not $x796))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x86 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x302))))
 (let ((?x57 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x319 (concat ?x47 (concat ?x252 (concat ?x156 ?x57)))))
 (let ((?x304 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x112)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x288)))
 (let ((?x398 (bvadd ?x258 (_ bv4 32))))
 (let ((?x626 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv1 32))) (select input.dst.llvm-mem ?x398))))
 (let ((?x630 (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x398 (_ bv2 32))) ?x626))))
 (let ((?x827 (bvadd ?x630 (_ bv4 32))))
 (let ((?x831 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv1 32))) (select input.dst.llvm-mem ?x827))))
 (let ((?x837 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv2 32))) ?x831))))
 (let (($x805 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x837 ?x304 false ?x319 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x196)))
 (let ((?x746 (concat (select input.dst.llvm-mem (bvadd ?x630 (_ bv1 32))) (select input.dst.llvm-mem ?x630))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x630 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x630 (_ bv2 32))) ?x746))))
 (let (($x751 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x750)))
 (let (($x778 (and $x751 $x805)))
 (let (($x591 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x781 (=> $x591 $x778)))
 (let (($x594 (= $x591 (bvuge (ite (= (_ bv0 32) ?x630) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x54 (= false false)))
 (let (($x414 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x584 (=> $x414 $x54)))
 (let (($x567 (= $x414 (= (ite (= (_ bv0 32) ?x630) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x483 (and $x567 $x584)))
 (let (($x656 (and $x483 $x594)))
 (let (($x782 (and $x656 $x781)))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv1 32))) (select input.dst.llvm-mem ?x258))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x258 (_ bv2 32))) ?x256))))
 (let (($x5 (= input.spec-%var-l-1.2.1.2.0 ?x194)))
 (let (($x779 (and $x5 $x782)))
 (let (($x645 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x780 (=> $x645 $x779)))
 (let (($x130 (= $x645 (bvuge (ite (= (_ bv0 32) ?x258) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x684 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x670 (=> $x684 $x54)))
 (let (($x42 (= $x684 (= (ite (= (_ bv0 32) ?x258) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x203 (and $x42 $x670)))
 (let (($x143 (and $x203 $x130)))
 (let (($x793 (and $x143 $x780)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x318))))
 (let (($x557 (= input.spec-%var-l-1.2.0 ?x552)))
 (let (($x801 (and $x557 $x793)))
 (let (($x237 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x802 (=> $x237 $x801)))
 (let (($x244 (= $x237 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x40 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x173 (=> $x40 $x54)))
 (let (($x254 (= $x40 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x386 (and $x254 $x173)))
 (let (($x310 (and $x386 $x244)))
 (let (($x798 (and $x310 $x802)))
 (let (($x799 (= $x798 true)))
 (let (($x795 (= $x799 true)))
 (let ((?x95 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x27 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x519 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x303 (concat ?x519 (concat ?x211 (concat ?x27 ?x95)))))
 (let (($x421 (= input.dst.llvm-%l ?x303)))
 (let ((?x146 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x394 (= (_ bv0 32) ?x146)))
 (let ((?x495 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x468 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x495)))
 (let (($x370 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x370 $x468)))
 (let (($x180 (and $x145 $x394)))
 (let (($x482 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x348 (and (and (and $x17 $x482) $x180) $x421)))
 (let ((?x686 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x692 (concat ?x686 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x693 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x694 (concat ?x693 (concat ?x691 ?x692))))
 (let ((?x149 (bvadd ?x694 (_ bv4 32))))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv1 32))) (select input.dst.llvm-mem ?x149))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x149 (_ bv2 32))) ?x131))))
 (let (($x507 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x411 ?x304 false ?x319 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x196)))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv1 32))) (select input.dst.llvm-mem ?x694))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x694 (_ bv2 32))) ?x479))))
 (let (($x397 (= input.spec-%var-l-1.2.1.2.0 ?x336)))
 (let (($x355 (and $x397 $x507)))
 (let (($x243 (=> $x645 $x355)))
 (let (($x669 (= $x645 (bvuge (ite (= (_ bv0 32) ?x694) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x682 (= $x684 (= (ite (= (_ bv0 32) ?x694) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x667 (and $x682 $x670)))
 (let (($x642 (and $x667 $x669)))
 (let (($x158 (and $x642 $x243)))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x540 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x333)))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x540)))
 (let (($x90 (= input.spec-%var-l-1.2.0 ?x388)))
 (let (($x133 (and $x90 $x158)))
 (let (($x56 (=> $x237 $x133)))
 (let (($x249 (= $x237 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x505 (= $x40 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x263 (and $x505 $x173)))
 (let (($x107 (and $x263 $x249)))
 (let (($x493 (and $x107 $x56)))
 (let (($x96 (and $x493 $x348)))
 (let (($x307 (= $x96 true)))
 (let (($x335 (= $x307 true)))
 (let (($x377 (= $x335 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x48 (and $x76 $x377)))
 (let (($x796 (=> $x48 $x795)))
 (not $x796))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_5929 (_ BitVec 32)) (BOUND_VARIABLE_5930 (_ BitVec 32)) (BOUND_VARIABLE_5931 (_ BitVec 32)) (BOUND_VARIABLE_5932 Bool) (BOUND_VARIABLE_5933 (_ BitVec 32)) (BOUND_VARIABLE_5934 (_ BitVec 32)) (BOUND_VARIABLE_5935 (_ BitVec 32)) (BOUND_VARIABLE_5936 (_ BitVec 32)) (BOUND_VARIABLE_5937 (_ BitVec 32)) (BOUND_VARIABLE_5938 (_ BitVec 32)) (BOUND_VARIABLE_5939 Bool) (BOUND_VARIABLE_5940 (_ BitVec 32)) (BOUND_VARIABLE_5941 (_ BitVec 32)) (BOUND_VARIABLE_5942 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3 32) (_ bv64 8)) (_ bv1073741824 32) (_ bv255 8)) (_ bv1073741825 32) (_ bv255 8)) (_ bv1073741826 32) (_ bv255 8)) (_ bv1073741827 32) (_ bv255 8)))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1073741824 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00010004)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00800000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x80)
                                #x00800004
                                #xfe)
                         #x00010005
                         #x00)
                  #x00010003
                  #x00)))
(let ((a!2 (store (store (store (store a!1 #x00800007 #x00) #x0000fffe #x00)
                         #x00010005
                         #x00)
                  #x00010004
                  #x00)))
(let ((a!3 (store (store (store (store a!2 #x00010001 #x00) #x00800005 #xff)
                         #x00000003
                         #x00)
                  #x00000006
                  #x00)))
(let ((a!4 (store (store (store (store a!3 #x00800000 #x00) #x00000004 #x00)
                         #x00000005
                         #x00)
                  #x00800001
                  #x00)))
(let ((a!5 (store (store (store (store a!4 #x00000007 #x00) #x00000001 #x00)
                         #x0000ffff
                         #x00)
                  #x00000000
                  #x00)))
(let ((a!6 (store (store (store (store a!5 #x00010007 #x00) #x00010004 #x00)
                         #x00010002
                         #x00)
                  #x00800003
                  #x00)))
  (store a!6 #x00800006 #x00))))))))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00800000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00800000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00010007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00010004)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00800000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x850 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x838 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x844 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv1 32))) (select input.dst.llvm-mem ?x838))))
 (let ((?x848 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv2 32))) ?x844))))
 (let ((?x820 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x818 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x821 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x817 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x434 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x434)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x407)))
 (let ((?x68 (bvadd ?x235 (_ bv4 32))))
 (let ((?x423 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x423))))
 (let ((?x622 (bvadd ?x352 (_ bv4 32))))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv1 32))) (select input.dst.llvm-mem ?x622))))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv2 32))) ?x720))))
 (let (($x851 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x729 (concat ?x817 (concat ?x821 (concat ?x818 ?x820))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x848 ?x850 false)))
 (let (($x726 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x761 (=> $x726 $x851)))
 (let (($x723 (= $x726 (bvuge (ite (= (_ bv0 32) ?x729) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x15 (= false false)))
 (let (($x715 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x659 (=> $x715 $x15)))
 (let (($x712 (= $x715 (= (ite (= (_ bv0 32) ?x729) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x632 (and $x712 $x659)))
 (let (($x759 (and $x632 $x723)))
 (let (($x769 (and $x759 $x761)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x89))))
 (let (($x159 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x322)))
 (let (($x752 (and $x159 $x769)))
 (let (($x301 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x811 (=> $x301 $x752)))
 (let (($x361 (= $x301 (bvuge (ite (= (_ bv0 32) ?x352) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x20 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x262 (=> $x20 $x15)))
 (let (($x114 (= $x20 (= (ite (= (_ bv0 32) ?x352) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x344 (and $x114 $x262)))
 (let (($x135 (and $x344 $x361)))
 (let (($x792 (and $x135 $x811)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x178))))
 (let (($x422 (= input.spec-%var-l-1.2.1.2.0 ?x500)))
 (let (($x784 (and $x422 $x792)))
 (let (($x594 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x810 (=> $x594 $x784)))
 (let (($x523 (= $x594 (bvuge (ite (= (_ bv0 32) ?x235) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x320 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x320 $x15)))
 (let (($x600 (= $x320 (= (ite (= (_ bv0 32) ?x235) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x661 (and $x600 $x42)))
 (let (($x267 (and $x661 $x523)))
 (let (($x813 (and $x267 $x810)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x53))))
 (let (($x186 (= input.spec-%var-l-1.2.0 ?x58)))
 (let (($x783 (and $x186 $x813)))
 (let (($x411 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x786 (=> $x411 $x783)))
 (let (($x664 (= $x411 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x372 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x154 (=> $x372 $x15)))
 (let (($x456 (= $x372 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x296 (and $x456 $x154)))
 (let (($x586 (and $x296 $x664)))
 (let (($x785 (and $x586 $x786)))
 (let (($x789 (= $x785 true)))
 (let (($x814 (= $x789 true)))
 (let ((?x654 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x658 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x671 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x679 (concat ?x671 (concat ?x93 (concat ?x658 ?x654)))))
 (let (($x609 (= input.dst.llvm-%l ?x679)))
 (let ((?x431 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x431)))
 (let ((?x613 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x616 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x613)))
 (let (($x617 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x617 $x616)))
 (let (($x432 (and $x175 $x222)))
 (let (($x612 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x606 (and (and (and $x393 $x612) $x432) $x609)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x194 (concat ?x168 (concat ?x32 ?x150))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x476))))
 (let (($x167 (= input.spec-%var-l-1.2.1.2.0 ?x451)))
 (let (($x77 (and $x167 true)))
 (let (($x265 (=> $x594 $x77)))
 (let (($x591 (= $x594 (bvuge (ite (= (_ bv0 32) ?x194) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x113 (= $x320 (= (ite (= (_ bv0 32) ?x194) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x130 (and $x113 $x42)))
 (let (($x595 (and $x130 $x591)))
 (let (($x471 (and $x595 $x265)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x519)))
 (let (($x27 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x111 (and $x27 $x471)))
 (let (($x477 (=> $x411 $x111)))
 (let (($x240 (= $x411 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x149 (= $x372 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x446 (and $x149 $x154)))
 (let (($x304 (and $x446 $x240)))
 (let (($x264 (and $x304 $x477)))
 (let (($x498 (and $x264 $x606)))
 (let (($x655 (= $x498 true)))
 (let (($x238 (= $x655 true)))
 (let (($x334 (= $x238 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x38 (and $x76 $x334)))
 (let (($x807 (=> $x38 $x814)))
 (not $x807))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x850 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x838 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x844 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv1 32))) (select input.dst.llvm-mem ?x838))))
 (let ((?x848 (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x838 (_ bv2 32))) ?x844))))
 (let ((?x820 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x818 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x821 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x817 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x434 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x434)))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x407)))
 (let ((?x68 (bvadd ?x235 (_ bv4 32))))
 (let ((?x423 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv1 32))) (select input.dst.llvm-mem ?x68))))
 (let ((?x352 (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x68 (_ bv2 32))) ?x423))))
 (let ((?x622 (bvadd ?x352 (_ bv4 32))))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv1 32))) (select input.dst.llvm-mem ?x622))))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x622 (_ bv2 32))) ?x720))))
 (let (($x851 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x729 (concat ?x817 (concat ?x821 (concat ?x818 ?x820))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x848 ?x850 false)))
 (let (($x726 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x761 (=> $x726 $x851)))
 (let (($x723 (= $x726 (bvuge (ite (= (_ bv0 32) ?x729) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x15 (= false false)))
 (let (($x715 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x659 (=> $x715 $x15)))
 (let (($x712 (= $x715 (= (ite (= (_ bv0 32) ?x729) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x632 (and $x712 $x659)))
 (let (($x759 (and $x632 $x723)))
 (let (($x769 (and $x759 $x761)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv1 32))) (select input.dst.llvm-mem ?x352))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x352 (_ bv2 32))) ?x89))))
 (let (($x159 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x322)))
 (let (($x752 (and $x159 $x769)))
 (let (($x301 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x811 (=> $x301 $x752)))
 (let (($x361 (= $x301 (bvuge (ite (= (_ bv0 32) ?x352) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x20 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x262 (=> $x20 $x15)))
 (let (($x114 (= $x20 (= (ite (= (_ bv0 32) ?x352) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x344 (and $x114 $x262)))
 (let (($x135 (and $x344 $x361)))
 (let (($x792 (and $x135 $x811)))
 (let ((?x178 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv1 32))) (select input.dst.llvm-mem ?x235))))
 (let ((?x500 (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x235 (_ bv2 32))) ?x178))))
 (let (($x422 (= input.spec-%var-l-1.2.1.2.0 ?x500)))
 (let (($x784 (and $x422 $x792)))
 (let (($x594 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x810 (=> $x594 $x784)))
 (let (($x523 (= $x594 (bvuge (ite (= (_ bv0 32) ?x235) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x320 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x42 (=> $x320 $x15)))
 (let (($x600 (= $x320 (= (ite (= (_ bv0 32) ?x235) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x661 (and $x600 $x42)))
 (let (($x267 (and $x661 $x523)))
 (let (($x813 (and $x267 $x810)))
 (let ((?x53 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x53))))
 (let (($x186 (= input.spec-%var-l-1.2.0 ?x58)))
 (let (($x783 (and $x186 $x813)))
 (let (($x411 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x786 (=> $x411 $x783)))
 (let (($x664 (= $x411 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x372 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x154 (=> $x372 $x15)))
 (let (($x456 (= $x372 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x296 (and $x456 $x154)))
 (let (($x586 (and $x296 $x664)))
 (let (($x785 (and $x586 $x786)))
 (let (($x789 (= $x785 true)))
 (let (($x814 (= $x789 true)))
 (let ((?x654 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x658 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x671 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x679 (concat ?x671 (concat ?x93 (concat ?x658 ?x654)))))
 (let (($x609 (= input.dst.llvm-%l ?x679)))
 (let ((?x431 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x222 (= (_ bv0 32) ?x431)))
 (let ((?x613 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x616 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x613)))
 (let (($x617 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x175 (and $x617 $x616)))
 (let (($x432 (and $x175 $x222)))
 (let (($x612 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x393 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x606 (and (and (and $x393 $x612) $x432) $x609)))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x194 (concat ?x168 (concat ?x32 ?x150))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x476))))
 (let (($x167 (= input.spec-%var-l-1.2.1.2.0 ?x451)))
 (let (($x77 (and $x167 true)))
 (let (($x265 (=> $x594 $x77)))
 (let (($x591 (= $x594 (bvuge (ite (= (_ bv0 32) ?x194) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x113 (= $x320 (= (ite (= (_ bv0 32) ?x194) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x130 (and $x113 $x42)))
 (let (($x595 (and $x130 $x591)))
 (let (($x471 (and $x595 $x265)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x519 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x519)))
 (let (($x27 (= input.spec-%var-l-1.2.0 ?x134)))
 (let (($x111 (and $x27 $x471)))
 (let (($x477 (=> $x411 $x111)))
 (let (($x240 (= $x411 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x149 (= $x372 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x446 (and $x149 $x154)))
 (let (($x304 (and $x446 $x240)))
 (let (($x264 (and $x304 $x477)))
 (let (($x498 (and $x264 $x606)))
 (let (($x655 (= $x498 true)))
 (let (($x238 (= $x655 true)))
 (let (($x334 (= $x238 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x38 (and $x76 $x334)))
 (let (($x807 (=> $x38 $x814)))
 (not $x807))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_6387 (_ BitVec 32)) (BOUND_VARIABLE_6388 (_ BitVec 32)) (BOUND_VARIABLE_6389 (_ BitVec 32)) (BOUND_VARIABLE_6390 (_ BitVec 32)) (BOUND_VARIABLE_6391 (_ BitVec 32)) (BOUND_VARIABLE_6392 (_ BitVec 32)) (BOUND_VARIABLE_6393 Bool) (BOUND_VARIABLE_6394 (_ BitVec 32)) (BOUND_VARIABLE_6395 (_ BitVec 32)) (BOUND_VARIABLE_6396 (_ BitVec 32)) (BOUND_VARIABLE_6397 (_ BitVec 32)) (BOUND_VARIABLE_6398 (_ BitVec 32)) (BOUND_VARIABLE_6399 (_ BitVec 32)) (BOUND_VARIABLE_6400 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv8 8)) (_ bv8 32) (_ bv255 8)) (_ bv9 32) (_ bv255 8)) (_ bv10 32) (_ bv255 8)) (_ bv11 32) (_ bv255 8)))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x22606060)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x60606060)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x60607060)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x60)
                     #x60606061
                     #x70)
              #x60606064
              #x5f)
       #x60606067
       #x22))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x60606060)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x60606060)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x22606063)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x22606060)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    false)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x288 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x205))))
 (let ((?x174 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x208 (concat ?x81 (concat ?x56 (concat ?x196 ?x174)))))
 (let ((?x156 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x171)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x405)))
 (let ((?x680 (bvadd ?x604 (_ bv4 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem ?x680))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv2 32))) ?x70))))
 (let ((?x717 (bvadd ?x160 (_ bv4 32))))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv1 32))) (select input.dst.llvm-mem ?x717))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv2 32))) ?x771))))
 (let ((?x982 (bvadd ?x756 (_ bv4 32))))
 (let ((?x986 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv1 32))) (select input.dst.llvm-mem ?x982))))
 (let ((?x992 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv2 32))) ?x986))))
 (let (($x950 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x992 ?x156 false ?x208 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x493)))
 (let ((?x911 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv1 32))) (select input.dst.llvm-mem ?x756))))
 (let ((?x915 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv2 32))) ?x911))))
 (let (($x895 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x915)))
 (let (($x919 (and $x895 $x950)))
 (let (($x777 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x917 (=> $x777 $x919)))
 (let (($x765 (= $x777 (bvuge (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x391 (= false false)))
 (let (($x711 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x650 (=> $x711 $x391)))
 (let (($x709 (= $x711 (= (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x652 (and $x709 $x650)))
 (let (($x797 (and $x652 $x765)))
 (let (($x920 (and $x797 $x917)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x59))))
 (let (($x444 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x24)))
 (let (($x923 (and $x444 $x920)))
 (let (($x559 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x945 (=> $x559 $x923)))
 (let (($x157 (= $x559 (bvuge (ite (= (_ bv0 32) ?x160) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x62 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x313 (=> $x62 $x391)))
 (let (($x342 (= $x62 (= (ite (= (_ bv0 32) ?x160) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x74 (and $x342 $x313)))
 (let (($x91 (and $x74 $x157)))
 (let (($x946 (and $x91 $x945)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x9))))
 (let (($x324 (= input.spec-%var-l-1.2.1.2.0 ?x491)))
 (let (($x926 (and $x324 $x946)))
 (let (($x824 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x937 (=> $x824 $x926)))
 (let (($x492 (= $x824 (bvuge (ite (= (_ bv0 32) ?x604) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x140 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x347 (=> $x140 $x391)))
 (let (($x593 (= $x140 (= (ite (= (_ bv0 32) ?x604) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x226 (and $x593 $x347)))
 (let (($x585 (and $x226 $x492)))
 (let (($x942 (and $x585 $x937)))
 (let ((?x741 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x827 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x741))))
 (let (($x835 (= input.spec-%var-l-1.2.0 ?x827)))
 (let (($x943 (and $x835 $x942)))
 (let (($x613 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x939 (=> $x613 $x943)))
 (let (($x327 (= $x613 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x265 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x475 (=> $x265 $x391)))
 (let (($x220 (= $x265 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x213 (and $x220 $x475)))
 (let (($x73 (and $x213 $x327)))
 (let (($x940 (and $x73 $x939)))
 (let (($x938 (= $x940 true)))
 (let (($x941 (= $x938 true)))
 (let ((?x694 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x692 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x224 (concat ?x370 (concat ?x692 ?x694)))))
 (let (($x481 (= input.dst.llvm-%l ?x17)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x702 (= (_ bv0 32) ?x287)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x445 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x445 $x104)))
 (let (($x682 (and $x253 $x702)))
 (let (($x368 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x382 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x495 (and (and (and $x382 $x368) $x682) $x481)))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x322 (concat ?x363 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x640 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x725 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x728 (concat ?x725 (concat ?x640 ?x322))))
 (let ((?x63 (bvadd ?x728 (_ bv4 32))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x155))))
 (let (($x502 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x284 ?x156 false ?x208 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x493)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x402))))
 (let (($x537 (= input.spec-%var-l-1.2.1.2.0 ?x90)))
 (let (($x533 (and $x537 $x502)))
 (let (($x182 (=> $x824 $x533)))
 (let (($x812 (= $x824 (bvuge (ite (= (_ bv0 32) ?x728) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x269 (= $x140 (= (ite (= (_ bv0 32) ?x728) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x341 (and $x269 $x347)))
 (let (($x816 (and $x341 $x812)))
 (let (($x670 (and $x816 $x182)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x65)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x235 (= input.spec-%var-l-1.2.0 ?x407)))
 (let (($x667 (and $x235 $x670)))
 (let (($x703 (=> $x613 $x667)))
 (let (($x175 (= $x613 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x264 (= $x265 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x393 (and $x264 $x475)))
 (let (($x431 (and $x393 $x175)))
 (let (($x346 (and $x431 $x703)))
 (let (($x421 (and $x346 $x495)))
 (let (($x348 (= $x421 true)))
 (let (($x96 (= $x348 true)))
 (let (($x244 (= $x96 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x564 (and $x76 $x244)))
 (let (($x944 (=> $x564 $x941)))
 (not $x944))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x288 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x493 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x205))))
 (let ((?x174 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x208 (concat ?x81 (concat ?x56 (concat ?x196 ?x174)))))
 (let ((?x156 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv4 32))))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv2 32))) ?x171)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd (bvadd (_ bv0 32) (_ bv4 32)) (_ bv3 32))) ?x405)))
 (let ((?x680 (bvadd ?x604 (_ bv4 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv1 32))) (select input.dst.llvm-mem ?x680))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x680 (_ bv2 32))) ?x70))))
 (let ((?x717 (bvadd ?x160 (_ bv4 32))))
 (let ((?x771 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv1 32))) (select input.dst.llvm-mem ?x717))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x717 (_ bv2 32))) ?x771))))
 (let ((?x982 (bvadd ?x756 (_ bv4 32))))
 (let ((?x986 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv1 32))) (select input.dst.llvm-mem ?x982))))
 (let ((?x992 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv2 32))) ?x986))))
 (let (($x950 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x992 ?x156 false ?x208 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x493)))
 (let ((?x911 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv1 32))) (select input.dst.llvm-mem ?x756))))
 (let ((?x915 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv2 32))) ?x911))))
 (let (($x895 (= input.spec-%var-l-1.2.1.2.1.2.1.2.0 ?x915)))
 (let (($x919 (and $x895 $x950)))
 (let (($x777 (bvuge input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x917 (=> $x777 $x919)))
 (let (($x765 (= $x777 (bvuge (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x391 (= false false)))
 (let (($x711 (= input.spec-%var-l-1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x650 (=> $x711 $x391)))
 (let (($x709 (= $x711 (= (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x652 (and $x709 $x650)))
 (let (($x797 (and $x652 $x765)))
 (let (($x920 (and $x797 $x917)))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv1 32))) (select input.dst.llvm-mem ?x160))))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x160 (_ bv2 32))) ?x59))))
 (let (($x444 (= input.spec-%var-l-1.2.1.2.1.2.0 ?x24)))
 (let (($x923 (and $x444 $x920)))
 (let (($x559 (bvuge input.spec-%var-l-1.2.1.2.1.0 (_ bv1 32))))
 (let (($x945 (=> $x559 $x923)))
 (let (($x157 (= $x559 (bvuge (ite (= (_ bv0 32) ?x160) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x62 (= input.spec-%var-l-1.2.1.2.1.0 (_ bv0 32))))
 (let (($x313 (=> $x62 $x391)))
 (let (($x342 (= $x62 (= (ite (= (_ bv0 32) ?x160) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x74 (and $x342 $x313)))
 (let (($x91 (and $x74 $x157)))
 (let (($x946 (and $x91 $x945)))
 (let ((?x9 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv1 32))) (select input.dst.llvm-mem ?x604))))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x604 (_ bv2 32))) ?x9))))
 (let (($x324 (= input.spec-%var-l-1.2.1.2.0 ?x491)))
 (let (($x926 (and $x324 $x946)))
 (let (($x824 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x937 (=> $x824 $x926)))
 (let (($x492 (= $x824 (bvuge (ite (= (_ bv0 32) ?x604) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x140 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x347 (=> $x140 $x391)))
 (let (($x593 (= $x140 (= (ite (= (_ bv0 32) ?x604) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x226 (and $x593 $x347)))
 (let (($x585 (and $x226 $x492)))
 (let (($x942 (and $x585 $x937)))
 (let ((?x741 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv1 32))) (select input.dst.llvm-mem (_ bv0 32)))))
 (let ((?x827 (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd (_ bv0 32) (_ bv2 32))) ?x741))))
 (let (($x835 (= input.spec-%var-l-1.2.0 ?x827)))
 (let (($x943 (and $x835 $x942)))
 (let (($x613 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x939 (=> $x613 $x943)))
 (let (($x327 (= $x613 (bvuge (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x265 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x475 (=> $x265 $x391)))
 (let (($x220 (= $x265 (= (ite (= (_ bv0 32) (_ bv0 32)) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x213 (and $x220 $x475)))
 (let (($x73 (and $x213 $x327)))
 (let (($x940 (and $x73 $x939)))
 (let (($x938 (= $x940 true)))
 (let (($x941 (= $x938 true)))
 (let ((?x694 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x692 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x17 (concat ?x224 (concat ?x370 (concat ?x692 ?x694)))))
 (let (($x481 (= input.dst.llvm-%l ?x17)))
 (let ((?x287 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x702 (= (_ bv0 32) ?x287)))
 (let ((?x131 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x104 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x131)))
 (let (($x445 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x253 (and $x445 $x104)))
 (let (($x682 (and $x253 $x702)))
 (let (($x368 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x382 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x495 (and (and (and $x382 $x368) $x682) $x481)))
 (let ((?x363 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x322 (concat ?x363 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x640 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x725 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x728 (concat ?x725 (concat ?x640 ?x322))))
 (let ((?x63 (bvadd ?x728 (_ bv4 32))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv1 32))) (select input.dst.llvm-mem ?x63))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x63 (_ bv2 32))) ?x155))))
 (let (($x502 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x284 ?x156 false ?x208 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x493)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv1 32))) (select input.dst.llvm-mem ?x728))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x728 (_ bv2 32))) ?x402))))
 (let (($x537 (= input.spec-%var-l-1.2.1.2.0 ?x90)))
 (let (($x533 (and $x537 $x502)))
 (let (($x182 (=> $x824 $x533)))
 (let (($x812 (= $x824 (bvuge (ite (= (_ bv0 32) ?x728) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x269 (= $x140 (= (ite (= (_ bv0 32) ?x728) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x341 (and $x269 $x347)))
 (let (($x816 (and $x341 $x812)))
 (let (($x670 (and $x816 $x182)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x65)))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x18)))
 (let (($x235 (= input.spec-%var-l-1.2.0 ?x407)))
 (let (($x667 (and $x235 $x670)))
 (let (($x703 (=> $x613 $x667)))
 (let (($x175 (= $x613 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x264 (= $x265 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x393 (and $x264 $x475)))
 (let (($x431 (and $x393 $x175)))
 (let (($x346 (and $x431 $x703)))
 (let (($x421 (and $x346 $x495)))
 (let (($x348 (= $x421 true)))
 (let (($x96 (= $x348 true)))
 (let (($x244 (= $x96 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x564 (and $x76 $x244)))
 (let (($x944 (=> $x564 $x941)))
 (not $x944))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6710 (_ BitVec 32)) (BOUND_VARIABLE_6711 (_ BitVec 32)) (BOUND_VARIABLE_6712 (_ BitVec 32)) (BOUND_VARIABLE_6713 Bool) (BOUND_VARIABLE_6714 (_ BitVec 32)) (BOUND_VARIABLE_6715 (_ BitVec 32)) (BOUND_VARIABLE_6716 (_ BitVec 32)) (BOUND_VARIABLE_6717 (_ BitVec 32)) (BOUND_VARIABLE_6718 (_ BitVec 32)) (BOUND_VARIABLE_6719 (_ BitVec 32)) (BOUND_VARIABLE_6720 Bool) (BOUND_VARIABLE_6721 (_ BitVec 32)) (BOUND_VARIABLE_6722 (_ BitVec 32)) (BOUND_VARIABLE_6723 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv64 8)) (_ bv64 32) (_ bv191 8)) (_ bv65 32) (_ bv255 8)) (_ bv66 32) (_ bv255 8)) (_ bv67 32) (_ bv255 8)))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967231 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv131072 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv64 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x20202020)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x2020201f)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20)
              #x20202024
              #x1a)
       #x20202024
       #x1a))
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x20202023)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x2020201f)
              (= x!8 #x20202020)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x20202020)
              (= x!12 #x2020201f)
              (= x!13 #x20201a20))
      true
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x394 (= false true)))
 (let (($x168 (= $x394 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x519 (concat ?x180 (concat ?x25 (concat ?x222 ?x15)))))
 (let (($x506 (= input.dst.llvm-%l ?x519)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x379 (= (_ bv0 32) ?x145)))
 (let ((?x947 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x374 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x947)))
 (let (($x944 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x372 (and $x944 $x374)))
 (let (($x412 (and $x372 $x379)))
 (let (($x938 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x950 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x211 (and (and (and $x950 $x938) $x412) $x506)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x141 (concat ?x283 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x542 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x491 (concat ?x542 (concat ?x651 ?x141))))
 (let ((?x923 (concat (select input.dst.llvm-mem (bvadd ?x491 (_ bv1 32))) (select input.dst.llvm-mem ?x491))))
 (let ((?x943 (concat (select input.dst.llvm-mem (bvadd ?x491 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x491 (_ bv2 32))) ?x923))))
 (let (($x989 (= input.spec-%var-l-1.2.1.2.0 ?x943)))
 (let (($x992 (and $x989 true)))
 (let (($x157 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x985 (=> $x157 $x992)))
 (let (($x559 (= $x157 (bvuge (ite (= (_ bv0 32) ?x491) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x552 (= false false)))
 (let (($x484 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x593 (=> $x484 $x552)))
 (let (($x573 (= $x484 (= (ite (= (_ bv0 32) ?x491) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x492 (and $x573 $x593)))
 (let (($x556 (and $x492 $x559)))
 (let (($x983 (and $x556 $x985)))
 (let ((?x682 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x682)))
 (let ((?x699 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x224)))
 (let (($x692 (= input.spec-%var-l-1.2.0 ?x699)))
 (let (($x987 (and $x692 $x983)))
 (let (($x284 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x988 (=> $x284 $x987)))
 (let (($x319 (= $x284 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x302 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x557 (=> $x302 $x552)))
 (let (($x63 (= $x302 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x420 (and $x63 $x557)))
 (let (($x156 (and $x420 $x319)))
 (let (($x990 (and $x156 $x988)))
 (let (($x304 (and $x990 $x211)))
 (let (($x468 (= $x304 true)))
 (let (($x230 (= $x468 true)))
 (let (($x505 (= $x230 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x328 (and $x76 $x505)))
 (let (($x193 (=> $x328 $x168)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x394 (= false true)))
 (let (($x168 (= $x394 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x519 (concat ?x180 (concat ?x25 (concat ?x222 ?x15)))))
 (let (($x506 (= input.dst.llvm-%l ?x519)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x379 (= (_ bv0 32) ?x145)))
 (let ((?x947 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x374 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x947)))
 (let (($x944 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x372 (and $x944 $x374)))
 (let (($x412 (and $x372 $x379)))
 (let (($x938 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x950 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x211 (and (and (and $x950 $x938) $x412) $x506)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x141 (concat ?x283 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x542 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x491 (concat ?x542 (concat ?x651 ?x141))))
 (let ((?x923 (concat (select input.dst.llvm-mem (bvadd ?x491 (_ bv1 32))) (select input.dst.llvm-mem ?x491))))
 (let ((?x943 (concat (select input.dst.llvm-mem (bvadd ?x491 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x491 (_ bv2 32))) ?x923))))
 (let (($x989 (= input.spec-%var-l-1.2.1.2.0 ?x943)))
 (let (($x992 (and $x989 true)))
 (let (($x157 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x985 (=> $x157 $x992)))
 (let (($x559 (= $x157 (bvuge (ite (= (_ bv0 32) ?x491) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x552 (= false false)))
 (let (($x484 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x593 (=> $x484 $x552)))
 (let (($x573 (= $x484 (= (ite (= (_ bv0 32) ?x491) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x492 (and $x573 $x593)))
 (let (($x556 (and $x492 $x559)))
 (let (($x983 (and $x556 $x985)))
 (let ((?x682 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x682)))
 (let ((?x699 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x224)))
 (let (($x692 (= input.spec-%var-l-1.2.0 ?x699)))
 (let (($x987 (and $x692 $x983)))
 (let (($x284 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x988 (=> $x284 $x987)))
 (let (($x319 (= $x284 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x302 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x557 (=> $x302 $x552)))
 (let (($x63 (= $x302 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x420 (and $x63 $x557)))
 (let (($x156 (and $x420 $x319)))
 (let (($x990 (and $x156 $x988)))
 (let (($x304 (and $x990 $x211)))
 (let (($x468 (= $x304 true)))
 (let (($x230 (= $x468 true)))
 (let (($x505 (= $x230 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x328 (and $x76 $x505)))
 (let (($x193 (=> $x328 $x168)))
 (not $x193))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let (($x711 (= $x24 true)))
 (let ((?x739 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x732 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x767 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x718 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x768 (concat ?x718 (concat ?x767 (concat ?x732 ?x739)))))
 (let (($x735 (= input.dst.llvm-%l ?x768)))
 (let ((?x313 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x313)))
 (let ((?x280 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x280)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x70 $x275)))
 (let (($x403 (and $x216 $x91)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x913 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x59 (and (and (and $x913 $x128) $x403) $x735)))
 (let ((?x533 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x205 (concat ?x533 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x703 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x112 (concat ?x703 (concat ?x258 ?x205))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x66))))
 (let (($x910 (= input.spec-%var-l-1.2.1.2.0 ?x120)))
 (let (($x908 (and $x910 false)))
 (let (($x35 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x911 (=> $x35 $x908)))
 (let (($x169 (= $x35 (bvuge (ite (= (_ bv0 32) ?x112) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x984 (= false false)))
 (let (($x56 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x155 (=> $x56 $x984)))
 (let (($x255 (= $x56 (= (ite (= (_ bv0 32) ?x112) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x88 (and $x255 $x155)))
 (let (($x441 (and $x88 $x169)))
 (let (($x906 (and $x441 $x911)))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x373)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x186)))
 (let (($x369 (= input.spec-%var-l-1.2.0 ?x197)))
 (let (($x907 (and $x369 $x906)))
 (let (($x947 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x895 (=> $x947 $x907)))
 (let (($x372 (= $x947 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x985 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x986 (=> $x985 $x984)))
 (let (($x990 (= $x985 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x950 (and $x990 $x986)))
 (let (($x145 (and $x950 $x372)))
 (let (($x797 (and $x145 $x895)))
 (let (($x329 (and $x797 $x59)))
 (let (($x60 (= $x329 true)))
 (let (($x378 (= $x60 true)))
 (let (($x277 (= $x378 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x22 (and $x76 $x277)))
 (let (($x717 (=> $x22 $x711)))
 (not $x717))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x24 (= false true)))
 (let (($x711 (= $x24 true)))
 (let ((?x739 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x732 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x767 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x718 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x768 (concat ?x718 (concat ?x767 (concat ?x732 ?x739)))))
 (let (($x735 (= input.dst.llvm-%l ?x768)))
 (let ((?x313 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x91 (= (_ bv0 32) ?x313)))
 (let ((?x280 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x275 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x280)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x216 (and $x70 $x275)))
 (let (($x403 (and $x216 $x91)))
 (let (($x128 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x913 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x59 (and (and (and $x913 $x128) $x403) $x735)))
 (let ((?x533 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x205 (concat ?x533 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x703 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x112 (concat ?x703 (concat ?x258 ?x205))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv1 32))) (select input.dst.llvm-mem ?x112))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x112 (_ bv2 32))) ?x66))))
 (let (($x910 (= input.spec-%var-l-1.2.1.2.0 ?x120)))
 (let (($x908 (and $x910 false)))
 (let (($x35 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x911 (=> $x35 $x908)))
 (let (($x169 (= $x35 (bvuge (ite (= (_ bv0 32) ?x112) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x984 (= false false)))
 (let (($x56 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x155 (=> $x56 $x984)))
 (let (($x255 (= $x56 (= (ite (= (_ bv0 32) ?x112) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x88 (and $x255 $x155)))
 (let (($x441 (and $x88 $x169)))
 (let (($x906 (and $x441 $x911)))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x373)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x186)))
 (let (($x369 (= input.spec-%var-l-1.2.0 ?x197)))
 (let (($x907 (and $x369 $x906)))
 (let (($x947 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x895 (=> $x947 $x907)))
 (let (($x372 (= $x947 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x985 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x986 (=> $x985 $x984)))
 (let (($x990 (= $x985 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x950 (and $x990 $x986)))
 (let (($x145 (and $x950 $x372)))
 (let (($x797 (and $x145 $x895)))
 (let (($x329 (and $x797 $x59)))
 (let (($x60 (= $x329 true)))
 (let (($x378 (= $x60 true)))
 (let (($x277 (= $x378 true)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x22 (and $x76 $x277)))
 (let (($x717 (=> $x22 $x711)))
 (not $x717))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x618 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x611 (not $x618)))
 (let (($x503 (= $x611 false)))
 (let (($x217 (= $x503 true)))
 (let ((?x541 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x504 (= (_ bv0 3) ?x541)))
 (let (($x152 (= $x504 true)))
 (let (($x251 (= $x152 true)))
 (let (($x219 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x219 true)))
 (let (($x225 (= $x139 true)))
 (let (($x28 (= $x225 true)))
 (let ((?x671 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x691 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv1 32))) (select input.dst.llvm-mem ?x671))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv2 32))) ?x691))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x554))))
 (let (($x836 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x426)))
 (let (($x317 (and $x836 true)))
 (let (($x824 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x834 (=> $x824 $x317)))
 (let (($x234 (= $x824 (bvuge (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x949 (= false false)))
 (let (($x154 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x941 (=> $x154 $x949)))
 (let (($x83 (= $x154 (= (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x690 (and $x83 $x941)))
 (let (($x782 (and $x690 $x234)))
 (let (($x833 (and $x782 $x834)))
 (let ((?x815 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x723 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x726 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x738 (concat (select input.dst.llvm-mem ?x16) (concat ?x726 (concat ?x723 ?x815)))))
 (let (($x659 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x738)))
 (let (($x778 (and $x659 $x833)))
 (let (($x280 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x831 (=> $x280 $x778)))
 (let (($x623 (= $x280 (bvuge (ite $x618 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x911 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x914 (=> $x911 $x949)))
 (let (($x422 (= $x911 (= (ite $x618 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x68 (and $x422 $x914)))
 (let (($x497 (and $x68 $x623)))
 (let (($x830 (and $x497 $x831)))
 (let (($x805 (= $x830 true)))
 (let (($x781 (= $x805 true)))
 (let (($x672 (= $x781 true)))
 (let (($x606 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x609 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x105 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x671 (_ bv1 32))) (or false (or false (and true (or $x609 $x606)))))))
 (let (($x198 (=> (and $x611 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x671 (_ bv1 32)))) (or false (or false (and true (or $x609 $x606)))))))
 (let (($x93 (= $x198 true)))
 (let (($x270 (= $x93 true)))
 (let (($x352 (= $x270 true)))
 (let ((?x617 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x334 (bvugt ?x617 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x429 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x617 (_ bv3 32)))))
 (let (($x448 (=> (bvule ?x617 (bvsub (bvadd ?x617 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x429 $x334)))))))
 (let (($x525 (=> (and $x611 (bvule ?x617 (bvsub (bvadd ?x617 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x429 $x334)))))))
 (let (($x655 (= $x525 true)))
 (let (($x679 (= $x655 true)))
 (let (($x658 (= $x679 true)))
 (let (($x451 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x167 (= $x451 true)))
 (let (($x469 (= $x167 true)))
 (let (($x594 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x172 (= $x594 true)))
 (let (($x316 (= $x172 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x42)))
 (let ((?x520 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x610 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x520)))
 (let (($x591 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x591 $x610)))
 (let (($x461 (and $x294 $x130)))
 (let (($x595 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x595 $x461)))
 (let (($x353 (= $x414 true)))
 (let (($x194 (= $x353 true)))
 (let (($x150 (= $x194 true)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x505 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x400 (concat ?x39 (concat ?x230 ?x505))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x582 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x174))))
 (let (($x330 (= input.spec-%var-l-1.2.1.2.0 ?x582)))
 (let (($x740 (and $x330 true)))
 (let (($x499 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x32 (=> $x499 $x740)))
 (let ((?x222 (ite (= (_ bv0 32) ?x400) (_ bv0 32) (_ bv1 32))))
 (let (($x269 (bvuge ?x222 (_ bv1 32))))
 (let (($x397 (= $x499 $x269)))
 (let (($x252 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x362 (=> $x252 $x949)))
 (let (($x15 (= ?x222 (_ bv0 32))))
 (let (($x266 (= $x252 $x15)))
 (let (($x336 (and $x266 $x362)))
 (let (($x382 (and $x336 $x397)))
 (let (($x332 (and $x382 $x32)))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x479)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x751 (= input.spec-%var-l-1.2.0 ?x239)))
 (let (($x134 (and $x751 $x332)))
 (let (($x579 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x320 (=> $x579 $x134)))
 (let ((?x907 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x275 (bvuge ?x907 (_ bv1 32))))
 (let (($x495 (= $x579 $x275)))
 (let (($x87 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x321 (=> $x87 $x949)))
 (let (($x895 (= ?x907 (_ bv0 32))))
 (let (($x17 (= $x87 $x895)))
 (let (($x405 (and $x17 $x321)))
 (let (($x750 (and $x405 $x495)))
 (let (($x27 (and $x750 $x320)))
 (let (($x256 (= $x27 true)))
 (let (($x207 (= $x256 true)))
 (let (($x339 (= $x207 true)))
 (let (($x885 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x582)))
 (let (($x272 (and $x885 true)))
 (let (($x755 (=> $x824 $x272)))
 (let (($x402 (= $x824 $x269)))
 (let (($x146 (= $x154 $x15)))
 (let (($x468 (and $x146 $x941)))
 (let (($x688 (and $x468 $x402)))
 (let (($x765 (and $x688 $x755)))
 (let (($x702 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x239)))
 (let (($x138 (and $x702 $x765)))
 (let (($x652 (=> $x280 $x138)))
 (let (($x216 (= $x280 $x275)))
 (let (($x797 (= $x911 $x895)))
 (let (($x913 (and $x797 $x914)))
 (let (($x313 (and $x913 $x216)))
 (let (($x244 (and $x313 $x652)))
 (let (($x709 (= $x244 true)))
 (let (($x731 (= $x709 true)))
 (let (($x909 (= $x731 true)))
 (let (($x212 (and $x909 $x339)))
 (let (($x5 (and $x212 $x150)))
 (let (($x476 (and $x5 $x316)))
 (let (($x513 (and $x476 $x469)))
 (let (($x654 (and $x513 $x658)))
 (let (($x191 (and $x654 $x352)))
 (let (($x221 (and $x191 $x672)))
 (let (($x306 (and $x221 $x28)))
 (let (($x435 (and $x306 $x251)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x7 (and $x245 $x435)))
 (let (($x10 (=> $x7 $x217)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x618 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x611 (not $x618)))
 (let (($x503 (= $x611 false)))
 (let (($x217 (= $x503 true)))
 (let ((?x541 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x504 (= (_ bv0 3) ?x541)))
 (let (($x152 (= $x504 true)))
 (let (($x251 (= $x152 true)))
 (let (($x219 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x219 true)))
 (let (($x225 (= $x139 true)))
 (let (($x28 (= $x225 true)))
 (let ((?x671 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x691 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv1 32))) (select input.dst.llvm-mem ?x671))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x671 (_ bv2 32))) ?x691))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x554))))
 (let (($x836 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x426)))
 (let (($x317 (and $x836 true)))
 (let (($x824 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x834 (=> $x824 $x317)))
 (let (($x234 (= $x824 (bvuge (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x949 (= false false)))
 (let (($x154 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x941 (=> $x154 $x949)))
 (let (($x83 (= $x154 (= (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x690 (and $x83 $x941)))
 (let (($x782 (and $x690 $x234)))
 (let (($x833 (and $x782 $x834)))
 (let ((?x815 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x723 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x726 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x738 (concat (select input.dst.llvm-mem ?x16) (concat ?x726 (concat ?x723 ?x815)))))
 (let (($x659 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x738)))
 (let (($x778 (and $x659 $x833)))
 (let (($x280 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x831 (=> $x280 $x778)))
 (let (($x623 (= $x280 (bvuge (ite $x618 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x911 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x914 (=> $x911 $x949)))
 (let (($x422 (= $x911 (= (ite $x618 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x68 (and $x422 $x914)))
 (let (($x497 (and $x68 $x623)))
 (let (($x830 (and $x497 $x831)))
 (let (($x805 (= $x830 true)))
 (let (($x781 (= $x805 true)))
 (let (($x672 (= $x781 true)))
 (let (($x606 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x609 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x105 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x671 (_ bv1 32))) (or false (or false (and true (or $x609 $x606)))))))
 (let (($x198 (=> (and $x611 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x671 (_ bv1 32)))) (or false (or false (and true (or $x609 $x606)))))))
 (let (($x93 (= $x198 true)))
 (let (($x270 (= $x93 true)))
 (let (($x352 (= $x270 true)))
 (let ((?x617 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x334 (bvugt ?x617 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x429 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x617 (_ bv3 32)))))
 (let (($x448 (=> (bvule ?x617 (bvsub (bvadd ?x617 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x429 $x334)))))))
 (let (($x525 (=> (and $x611 (bvule ?x617 (bvsub (bvadd ?x617 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x429 $x334)))))))
 (let (($x655 (= $x525 true)))
 (let (($x679 (= $x655 true)))
 (let (($x658 (= $x679 true)))
 (let (($x451 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x167 (= $x451 true)))
 (let (($x469 (= $x167 true)))
 (let (($x594 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x172 (= $x594 true)))
 (let (($x316 (= $x172 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x130 (= (_ bv0 32) ?x42)))
 (let ((?x520 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x610 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x520)))
 (let (($x591 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x591 $x610)))
 (let (($x461 (and $x294 $x130)))
 (let (($x595 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x414 (and $x595 $x461)))
 (let (($x353 (= $x414 true)))
 (let (($x194 (= $x353 true)))
 (let (($x150 (= $x194 true)))
 (let ((?x193 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x505 (concat ?x193 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x400 (concat ?x39 (concat ?x230 ?x505))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv1 32))) (select input.dst.llvm-mem ?x400))))
 (let ((?x582 (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x400 (_ bv2 32))) ?x174))))
 (let (($x330 (= input.spec-%var-l-1.2.1.2.0 ?x582)))
 (let (($x740 (and $x330 true)))
 (let (($x499 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x32 (=> $x499 $x740)))
 (let ((?x222 (ite (= (_ bv0 32) ?x400) (_ bv0 32) (_ bv1 32))))
 (let (($x269 (bvuge ?x222 (_ bv1 32))))
 (let (($x397 (= $x499 $x269)))
 (let (($x252 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x362 (=> $x252 $x949)))
 (let (($x15 (= ?x222 (_ bv0 32))))
 (let (($x266 (= $x252 $x15)))
 (let (($x336 (and $x266 $x362)))
 (let (($x382 (and $x336 $x397)))
 (let (($x332 (and $x382 $x32)))
 (let ((?x479 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x479)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x104)))
 (let (($x751 (= input.spec-%var-l-1.2.0 ?x239)))
 (let (($x134 (and $x751 $x332)))
 (let (($x579 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x320 (=> $x579 $x134)))
 (let ((?x907 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x275 (bvuge ?x907 (_ bv1 32))))
 (let (($x495 (= $x579 $x275)))
 (let (($x87 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x321 (=> $x87 $x949)))
 (let (($x895 (= ?x907 (_ bv0 32))))
 (let (($x17 (= $x87 $x895)))
 (let (($x405 (and $x17 $x321)))
 (let (($x750 (and $x405 $x495)))
 (let (($x27 (and $x750 $x320)))
 (let (($x256 (= $x27 true)))
 (let (($x207 (= $x256 true)))
 (let (($x339 (= $x207 true)))
 (let (($x885 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x582)))
 (let (($x272 (and $x885 true)))
 (let (($x755 (=> $x824 $x272)))
 (let (($x402 (= $x824 $x269)))
 (let (($x146 (= $x154 $x15)))
 (let (($x468 (and $x146 $x941)))
 (let (($x688 (and $x468 $x402)))
 (let (($x765 (and $x688 $x755)))
 (let (($x702 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x239)))
 (let (($x138 (and $x702 $x765)))
 (let (($x652 (=> $x280 $x138)))
 (let (($x216 (= $x280 $x275)))
 (let (($x797 (= $x911 $x895)))
 (let (($x913 (and $x797 $x914)))
 (let (($x313 (and $x913 $x216)))
 (let (($x244 (and $x313 $x652)))
 (let (($x709 (= $x244 true)))
 (let (($x731 (= $x709 true)))
 (let (($x909 (= $x731 true)))
 (let (($x212 (and $x909 $x339)))
 (let (($x5 (and $x212 $x150)))
 (let (($x476 (and $x5 $x316)))
 (let (($x513 (and $x476 $x469)))
 (let (($x654 (and $x513 $x658)))
 (let (($x191 (and $x654 $x352)))
 (let (($x221 (and $x191 $x672)))
 (let (($x306 (and $x221 $x28)))
 (let (($x435 (and $x306 $x251)))
 (let (($x245 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x7 (and $x245 $x435)))
 (let (($x10 (=> $x7 $x217)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_42)
(function @fun_42
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv126646784 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv241432963 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv241432960 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv241432960 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x7ffffffa)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xfd)
                                #xfffffffe
                                #xff)
                         #x80000000
                         #xff)
                  #x7ffffffb
                  #xff)))
(let ((a!2 (store (store (store (store a!1 #x80000007 #x7f) #x80000000 #xff)
                         #x80000002
                         #xff)
                  #x7ffffffc
                  #xff)))
(let ((a!3 (store (store (store (store a!2 #xfffffffd #xff) #x7fffffff #xff)
                         #x80000000
                         #xff)
                  #x80000001
                  #xff)))
(let ((a!4 (store (store (store (store a!3 #x80000001 #xff) #x80000006 #xff)
                         #x80000005
                         #xff)
                  #x7fffffff
                  #xff)))
(let ((a!5 (store (store (store (store a!4 #x7ffffffd #xff) #x80000003 #xff)
                         #x80000004
                         #xff)
                  #xffffffff
                  #xff)))
  (store (store (store (store a!5 #x80000002 #xff) #x00000000 #xff)
                #x80000001
                #xff)
         #x7ffffffa
         #xff)))))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #xffffffff)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x355 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x725 (not $x355)))
 (let (($x340 (= $x725 false)))
 (let (($x798 (= $x340 true)))
 (let ((?x310 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x561 (= (_ bv0 3) ?x310)))
 (let (($x494 (= $x561 true)))
 (let (($x560 (= $x494 true)))
 (let (($x365 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x473 (= $x365 true)))
 (let (($x656 (= $x473 true)))
 (let (($x633 (= $x656 true)))
 (let ((?x556 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x838 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv1 32))) (select input.dst.llvm-mem ?x556))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv2 32))) ?x838))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x630 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x48))))
 (let (($x796 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x630)))
 (let (($x547 (and $x796 false)))
 (let (($x778 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x747 (=> $x778 $x547)))
 (let (($x597 (= $x778 (bvuge (ite (= (_ bv0 32) ?x79) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x709 (= false false)))
 (let (($x734 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x815 (=> $x734 $x709)))
 (let (($x267 (= $x734 (= (ite (= (_ bv0 32) ?x79) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x553 (and $x267 $x815)))
 (let (($x729 (and $x553 $x597)))
 (let (($x307 (and $x729 $x747)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x593 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x593) (concat ?x500 (concat ?x383 ?x181)))))
 (let (($x135 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x301)))
 (let (($x202 (and $x135 $x307)))
 (let (($x495 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x377 (=> $x495 $x202)))
 (let (($x453 (= $x495 (bvuge (ite $x355 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x755 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x731 (=> $x755 $x709)))
 (let (($x69 (= $x755 (= (ite $x355 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x721 (and $x69 $x731)))
 (let (($x322 (and $x721 $x453)))
 (let (($x485 (and $x322 $x377)))
 (let (($x123 (= $x485 true)))
 (let (($x795 (= $x123 true)))
 (let (($x562 (= $x795 true)))
 (let (($x917 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x593)))
 (let (($x484 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x556 (_ bv1 32))) (or false (or false (and true (or $x62 $x917)))))))
 (let (($x991 (=> (and $x725 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x556 (_ bv1 32)))) (or false (or false (and true (or $x62 $x917)))))))
 (let (($x559 (= $x991 true)))
 (let (($x517 (= $x559 true)))
 (let (($x246 (= $x517 true)))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x454 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x159 (_ bv3 32)))))
 (let (($x492 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x454)))))))
 (let (($x379 (=> (and $x725 (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x454)))))))
 (let (($x412 (= $x379 true)))
 (let (($x657 (= $x412 true)))
 (let (($x946 (= $x657 true)))
 (let (($x240 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x573 (= $x240 true)))
 (let (($x371 (= $x573 true)))
 (let (($x989 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x939 (= $x989 true)))
 (let (($x923 (= $x939 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x329 (= (_ bv0 32) ?x59)))
 (let ((?x756 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x644 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x756)))
 (let (($x718 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x735 (and $x718 $x644)))
 (let (($x748 (and $x735 $x329)))
 (let (($x771 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x749 (and $x771 $x748)))
 (let (($x292 (= $x749 true)))
 (let (($x491 (= $x292 true)))
 (let (($x141 (= $x491 true)))
 (let ((?x683 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x388 (concat ?x683 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x660 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x333 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x107 (concat ?x333 (concat ?x660 ?x388))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x303))))
 (let (($x762 (= input.spec-%var-l-1.2.1.2.0 ?x533)))
 (let (($x253 (and $x762 false)))
 (let (($x281 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x22 (=> $x281 $x253)))
 (let ((?x685 (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32))))
 (let (($x830 (bvuge ?x685 (_ bv1 32))))
 (let (($x128 (= $x281 $x830)))
 (let (($x120 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x66 (=> $x120 $x709)))
 (let (($x286 (= ?x685 (_ bv0 32))))
 (let (($x199 (= $x120 $x286)))
 (let (($x910 (and $x199 $x66)))
 (let (($x444 (and $x910 $x128)))
 (let (($x378 (and $x444 $x22)))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x451)))
 (let ((?x611 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x513)))
 (let (($x205 (= input.spec-%var-l-1.2.0 ?x611)))
 (let (($x711 (and $x205 $x378)))
 (let (($x915 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x717 (=> $x915 $x711)))
 (let ((?x138 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x750 (bvuge ?x138 (_ bv1 32))))
 (let (($x155 (= $x915 $x750)))
 (let (($x447 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x912 (=> $x447 $x709)))
 (let (($x652 (= ?x138 (_ bv0 32))))
 (let (($x441 (= $x447 $x652)))
 (let (($x169 (and $x441 $x912)))
 (let (($x88 (and $x169 $x155)))
 (let (($x133 (and $x88 $x717)))
 (let (($x277 (= $x133 true)))
 (let (($x24 (= $x277 true)))
 (let (($x589 (= $x24 true)))
 (let (($x380 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x533)))
 (let (($x703 (and $x380 false)))
 (let (($x950 (=> $x778 $x703)))
 (let (($x834 (= $x778 $x830)))
 (let (($x723 (= $x734 $x286)))
 (let (($x738 (and $x723 $x815)))
 (let (($x833 (and $x738 $x834)))
 (let (($x63 (and $x833 $x950)))
 (let (($x617 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x611)))
 (let (($x149 (and $x617 $x63)))
 (let (($x145 (=> $x495 $x149)))
 (let (($x327 (= $x495 $x750)))
 (let (($x244 (= $x755 $x652)))
 (let (($x909 (and $x244 $x731)))
 (let (($x751 (and $x909 $x327)))
 (let (($x311 (and $x751 $x145)))
 (let (($x65 (= $x311 true)))
 (let (($x11 (= $x65 true)))
 (let (($x376 (= $x11 true)))
 (let (($x768 (and $x376 $x589)))
 (let (($x938 (and $x768 $x141)))
 (let (($x926 (and $x938 $x923)))
 (let (($x943 (and $x926 $x371)))
 (let (($x919 (and $x943 $x946)))
 (let (($x942 (and $x919 $x246)))
 (let (($x236 (and $x942 $x562)))
 (let (($x254 (and $x236 $x633)))
 (let (($x84 (and $x254 $x560)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x545 (and $x179 $x84)))
 (let (($x780 (=> $x545 $x798)))
 (not $x780)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x355 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x725 (not $x355)))
 (let (($x340 (= $x725 false)))
 (let (($x798 (= $x340 true)))
 (let ((?x310 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x561 (= (_ bv0 3) ?x310)))
 (let (($x494 (= $x561 true)))
 (let (($x560 (= $x494 true)))
 (let (($x365 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x473 (= $x365 true)))
 (let (($x656 (= $x473 true)))
 (let (($x633 (= $x656 true)))
 (let ((?x556 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x838 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv1 32))) (select input.dst.llvm-mem ?x556))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x556 (_ bv2 32))) ?x838))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv1 32))) (select input.dst.llvm-mem ?x79))))
 (let ((?x630 (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x79 (_ bv2 32))) ?x48))))
 (let (($x796 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x630)))
 (let (($x547 (and $x796 false)))
 (let (($x778 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x747 (=> $x778 $x547)))
 (let (($x597 (= $x778 (bvuge (ite (= (_ bv0 32) ?x79) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x709 (= false false)))
 (let (($x734 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x815 (=> $x734 $x709)))
 (let (($x267 (= $x734 (= (ite (= (_ bv0 32) ?x79) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x553 (and $x267 $x815)))
 (let (($x729 (and $x553 $x597)))
 (let (($x307 (and $x729 $x747)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x500 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x593 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x301 (concat (select input.dst.llvm-mem ?x593) (concat ?x500 (concat ?x383 ?x181)))))
 (let (($x135 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x301)))
 (let (($x202 (and $x135 $x307)))
 (let (($x495 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x377 (=> $x495 $x202)))
 (let (($x453 (= $x495 (bvuge (ite $x355 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x755 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x731 (=> $x755 $x709)))
 (let (($x69 (= $x755 (= (ite $x355 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x721 (and $x69 $x731)))
 (let (($x322 (and $x721 $x453)))
 (let (($x485 (and $x322 $x377)))
 (let (($x123 (= $x485 true)))
 (let (($x795 (= $x123 true)))
 (let (($x562 (= $x795 true)))
 (let (($x917 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x593)))
 (let (($x484 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x556 (_ bv1 32))) (or false (or false (and true (or $x62 $x917)))))))
 (let (($x991 (=> (and $x725 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x556 (_ bv1 32)))) (or false (or false (and true (or $x62 $x917)))))))
 (let (($x559 (= $x991 true)))
 (let (($x517 (= $x559 true)))
 (let (($x246 (= $x517 true)))
 (let ((?x159 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x454 (bvugt ?x159 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x159 (_ bv3 32)))))
 (let (($x492 (=> (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x454)))))))
 (let (($x379 (=> (and $x725 (bvule ?x159 (bvsub (bvadd ?x159 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x454)))))))
 (let (($x412 (= $x379 true)))
 (let (($x657 (= $x412 true)))
 (let (($x946 (= $x657 true)))
 (let (($x240 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x573 (= $x240 true)))
 (let (($x371 (= $x573 true)))
 (let (($x989 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x939 (= $x989 true)))
 (let (($x923 (= $x939 true)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x329 (= (_ bv0 32) ?x59)))
 (let ((?x756 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x644 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x756)))
 (let (($x718 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x735 (and $x718 $x644)))
 (let (($x748 (and $x735 $x329)))
 (let (($x771 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x749 (and $x771 $x748)))
 (let (($x292 (= $x749 true)))
 (let (($x491 (= $x292 true)))
 (let (($x141 (= $x491 true)))
 (let ((?x683 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x388 (concat ?x683 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x660 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x333 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x107 (concat ?x333 (concat ?x660 ?x388))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x303))))
 (let (($x762 (= input.spec-%var-l-1.2.1.2.0 ?x533)))
 (let (($x253 (and $x762 false)))
 (let (($x281 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x22 (=> $x281 $x253)))
 (let ((?x685 (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32))))
 (let (($x830 (bvuge ?x685 (_ bv1 32))))
 (let (($x128 (= $x281 $x830)))
 (let (($x120 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x66 (=> $x120 $x709)))
 (let (($x286 (= ?x685 (_ bv0 32))))
 (let (($x199 (= $x120 $x286)))
 (let (($x910 (and $x199 $x66)))
 (let (($x444 (and $x910 $x128)))
 (let (($x378 (and $x444 $x22)))
 (let ((?x451 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x513 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x451)))
 (let ((?x611 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x513)))
 (let (($x205 (= input.spec-%var-l-1.2.0 ?x611)))
 (let (($x711 (and $x205 $x378)))
 (let (($x915 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x717 (=> $x915 $x711)))
 (let ((?x138 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x750 (bvuge ?x138 (_ bv1 32))))
 (let (($x155 (= $x915 $x750)))
 (let (($x447 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x912 (=> $x447 $x709)))
 (let (($x652 (= ?x138 (_ bv0 32))))
 (let (($x441 (= $x447 $x652)))
 (let (($x169 (and $x441 $x912)))
 (let (($x88 (and $x169 $x155)))
 (let (($x133 (and $x88 $x717)))
 (let (($x277 (= $x133 true)))
 (let (($x24 (= $x277 true)))
 (let (($x589 (= $x24 true)))
 (let (($x380 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x533)))
 (let (($x703 (and $x380 false)))
 (let (($x950 (=> $x778 $x703)))
 (let (($x834 (= $x778 $x830)))
 (let (($x723 (= $x734 $x286)))
 (let (($x738 (and $x723 $x815)))
 (let (($x833 (and $x738 $x834)))
 (let (($x63 (and $x833 $x950)))
 (let (($x617 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x611)))
 (let (($x149 (and $x617 $x63)))
 (let (($x145 (=> $x495 $x149)))
 (let (($x327 (= $x495 $x750)))
 (let (($x244 (= $x755 $x652)))
 (let (($x909 (and $x244 $x731)))
 (let (($x751 (and $x909 $x327)))
 (let (($x311 (and $x751 $x145)))
 (let (($x65 (= $x311 true)))
 (let (($x11 (= $x65 true)))
 (let (($x376 (= $x11 true)))
 (let (($x768 (and $x376 $x589)))
 (let (($x938 (and $x768 $x141)))
 (let (($x926 (and $x938 $x923)))
 (let (($x943 (and $x926 $x371)))
 (let (($x919 (and $x943 $x946)))
 (let (($x942 (and $x919 $x246)))
 (let (($x236 (and $x942 $x562)))
 (let (($x254 (and $x236 $x633)))
 (let (($x84 (and $x254 $x560)))
 (let (($x179 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x545 (and $x179 $x84)))
 (let (($x780 (=> $x545 $x798)))
 (not $x780)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00111001101011111111111111100000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b11011101101011111111111111100111)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b11011101101011111111111111100100)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b11011101101011111111111111100100)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_34)
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv446186672 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2614715139 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2614715136 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2614715136 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffc0000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000007)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffc0003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffc0000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x735 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x808 (or $x735 $x179)))
 (let (($x826 (= $x808 true)))
 (let (($x848 (= $x826 true)))
 (let ((?x849 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x839 (= (_ bv0 3) ?x849)))
 (let (($x821 (= $x839 true)))
 (let (($x761 (= $x821 true)))
 (let (($x844 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x850 (= $x844 true)))
 (let (($x846 (= $x850 true)))
 (let (($x843 (= $x846 true)))
 (let ((?x652 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv1 32))) (select input.dst.llvm-mem ?x652))))
 (let ((?x719 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv2 32))) ?x86))))
 (let ((?x722 (concat (select input.dst.llvm-mem (bvadd ?x719 (_ bv1 32))) (select input.dst.llvm-mem ?x719))))
 (let ((?x724 (concat (select input.dst.llvm-mem (bvadd ?x719 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x719 (_ bv2 32))) ?x722))))
 (let (($x534 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x724)))
 (let (($x44 (and $x534 true)))
 (let (($x280 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x569 (=> $x280 $x44)))
 (let (($x415 (= $x280 (bvuge (ite (= (_ bv0 32) ?x719) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x589 (= false false)))
 (let (($x796 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x744 (=> $x796 $x589)))
 (let (($x391 (= $x796 (= (ite (= (_ bv0 32) ?x719) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x14 (and $x391 $x744)))
 (let (($x344 (and $x14 $x415)))
 (let (($x285 (and $x344 $x569)))
 (let ((?x347 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x750 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x96 (concat (select input.dst.llvm-mem ?x750) (concat ?x348 (concat ?x213 ?x347)))))
 (let (($x743 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x96)))
 (let (($x567 (and $x743 $x285)))
 (let (($x837 (=> $x735 $x567)))
 (let (($x516 (= $x735 (bvuge (ite $x179 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x711 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x768 (=> $x711 $x589)))
 (let (($x210 (= $x711 (= (ite $x179 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x427 (and $x210 $x768)))
 (let (($x426 (and $x427 $x516)))
 (let (($x605 (and $x426 $x837)))
 (let (($x398 (= $x605 true)))
 (let (($x789 (= $x398 true)))
 (let (($x209 (= $x789 true)))
 (let (($x198 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x658 (= $x198 true)))
 (let (($x654 (= $x658 true)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x609 (= $x16 true)))
 (let (($x423 (= $x609 true)))
 (let ((?x594 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x429 (= (_ bv0 32) ?x594)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x414 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x461 $x414)))
 (let (($x334 (and $x150 $x429)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x130 $x334)))
 (let (($x508 (= $x38 true)))
 (let (($x510 (= $x508 true)))
 (let (($x105 (= $x510 true)))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x485 (concat ?x377 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x795 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x365 (concat ?x82 (concat ?x795 ?x485))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x174))))
 (let (($x294 (= input.spec-%var-l-1.2.1.2.0 ?x17)))
 (let (($x5 (and $x294 true)))
 (let (($x737 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x68 (=> $x737 $x5)))
 (let ((?x656 (ite (= (_ bv0 32) ?x365) (_ bv0 32) (_ bv1 32))))
 (let (($x501 (bvuge ?x656 (_ bv1 32))))
 (let (($x270 (= $x737 $x501)))
 (let (($x27 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x134 (=> $x27 $x589)))
 (let (($x633 (= ?x656 (_ bv0 32))))
 (let (($x740 (= $x27 $x633)))
 (let (($x35 (and $x740 $x134)))
 (let (($x352 (and $x35 $x270)))
 (let (($x497 (and $x352 $x68)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x484 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x283)))
 (let ((?x517 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x484)))
 (let (($x330 (= input.spec-%var-l-1.2.0 ?x517)))
 (let (($x20 (and $x330 $x497)))
 (let (($x207 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x422 (=> $x207 $x20)))
 (let ((?x133 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x59 (bvuge ?x133 (_ bv1 32))))
 (let (($x470 (= $x207 $x59)))
 (let (($x591 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x615 (=> $x591 $x589)))
 (let (($x277 (= ?x133 (_ bv0 32))))
 (let (($x520 (= $x591 $x277)))
 (let (($x595 (and $x520 $x615)))
 (let (($x185 (and $x595 $x470)))
 (let (($x295 (and $x185 $x422)))
 (let (($x163 (= $x295 true)))
 (let (($x726 (= $x163 true)))
 (let (($x113 (= $x726 true)))
 (let (($x505 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x17)))
 (let (($x519 (and $x505 true)))
 (let (($x15 (=> $x280 $x519)))
 (let (($x895 (= $x280 $x501)))
 (let (($x48 (= $x796 $x633)))
 (let (($x547 (and $x48 $x744)))
 (let (($x797 (and $x547 $x895)))
 (let (($x394 (and $x797 $x15)))
 (let (($x246 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x517)))
 (let (($x941 (and $x246 $x394)))
 (let (($x468 (=> $x735 $x941)))
 (let (($x329 (= $x735 $x59)))
 (let (($x24 (= $x711 $x277)))
 (let (($x732 (and $x24 $x768)))
 (let (($x748 (and $x732 $x329)))
 (let (($x243 (and $x748 $x468)))
 (let (($x222 (= $x243 true)))
 (let (($x400 (= $x222 true)))
 (let (($x146 (= $x400 true)))
 (let (($x353 (and $x146 $x113)))
 (let (($x498 (and $x353 $x105)))
 (let (($x606 (and $x498 $x423)))
 (let (($x525 (and $x606 $x654)))
 (let (($x360 (and $x525 $x209)))
 (let (($x817 (and $x360 $x843)))
 (let (($x464 (and $x817 $x761)))
 (let (($x333 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x842 (and $x333 $x464)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x513 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x451 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x138 (_ bv3 32)))))
 (let (($x659 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x451 $x513)))))))
 (let (($x372 (not $x179)))
 (let (($x167 (=> (and $x372 (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x451 $x513)))))))
 (let (($x751 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x750)))
 (let (($x434 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32))) (or false (or false (and true (or $x327 $x751)))))))
 (let (($x216 (=> (and $x372 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32)))) (or false (or false (and true (or $x327 $x751)))))))
 (let (($x469 (and $x216 $x167)))
 (let (($x851 (and $x469 $x842)))
 (let (($x820 (=> $x851 $x848)))
 (not $x820))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x735 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x808 (or $x735 $x179)))
 (let (($x826 (= $x808 true)))
 (let (($x848 (= $x826 true)))
 (let ((?x849 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x839 (= (_ bv0 3) ?x849)))
 (let (($x821 (= $x839 true)))
 (let (($x761 (= $x821 true)))
 (let (($x844 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x850 (= $x844 true)))
 (let (($x846 (= $x850 true)))
 (let (($x843 (= $x846 true)))
 (let ((?x652 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv1 32))) (select input.dst.llvm-mem ?x652))))
 (let ((?x719 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv2 32))) ?x86))))
 (let ((?x722 (concat (select input.dst.llvm-mem (bvadd ?x719 (_ bv1 32))) (select input.dst.llvm-mem ?x719))))
 (let ((?x724 (concat (select input.dst.llvm-mem (bvadd ?x719 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x719 (_ bv2 32))) ?x722))))
 (let (($x534 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x724)))
 (let (($x44 (and $x534 true)))
 (let (($x280 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x569 (=> $x280 $x44)))
 (let (($x415 (= $x280 (bvuge (ite (= (_ bv0 32) ?x719) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x589 (= false false)))
 (let (($x796 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x744 (=> $x796 $x589)))
 (let (($x391 (= $x796 (= (ite (= (_ bv0 32) ?x719) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x14 (and $x391 $x744)))
 (let (($x344 (and $x14 $x415)))
 (let (($x285 (and $x344 $x569)))
 (let ((?x347 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x348 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x750 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x96 (concat (select input.dst.llvm-mem ?x750) (concat ?x348 (concat ?x213 ?x347)))))
 (let (($x743 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x96)))
 (let (($x567 (and $x743 $x285)))
 (let (($x837 (=> $x735 $x567)))
 (let (($x516 (= $x735 (bvuge (ite $x179 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x711 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x768 (=> $x711 $x589)))
 (let (($x210 (= $x711 (= (ite $x179 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x427 (and $x210 $x768)))
 (let (($x426 (and $x427 $x516)))
 (let (($x605 (and $x426 $x837)))
 (let (($x398 (= $x605 true)))
 (let (($x789 (= $x398 true)))
 (let (($x209 (= $x789 true)))
 (let (($x198 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x658 (= $x198 true)))
 (let (($x654 (= $x658 true)))
 (let (($x16 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x609 (= $x16 true)))
 (let (($x423 (= $x609 true)))
 (let ((?x594 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x429 (= (_ bv0 32) ?x594)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x414 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x461 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x150 (and $x461 $x414)))
 (let (($x334 (and $x150 $x429)))
 (let (($x130 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x38 (and $x130 $x334)))
 (let (($x508 (= $x38 true)))
 (let (($x510 (= $x508 true)))
 (let (($x105 (= $x510 true)))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x485 (concat ?x377 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x795 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x365 (concat ?x82 (concat ?x795 ?x485))))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x174))))
 (let (($x294 (= input.spec-%var-l-1.2.1.2.0 ?x17)))
 (let (($x5 (and $x294 true)))
 (let (($x737 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x68 (=> $x737 $x5)))
 (let ((?x656 (ite (= (_ bv0 32) ?x365) (_ bv0 32) (_ bv1 32))))
 (let (($x501 (bvuge ?x656 (_ bv1 32))))
 (let (($x270 (= $x737 $x501)))
 (let (($x27 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x134 (=> $x27 $x589)))
 (let (($x633 (= ?x656 (_ bv0 32))))
 (let (($x740 (= $x27 $x633)))
 (let (($x35 (and $x740 $x134)))
 (let (($x352 (and $x35 $x270)))
 (let (($x497 (and $x352 $x68)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x484 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x283)))
 (let ((?x517 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x484)))
 (let (($x330 (= input.spec-%var-l-1.2.0 ?x517)))
 (let (($x20 (and $x330 $x497)))
 (let (($x207 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x422 (=> $x207 $x20)))
 (let ((?x133 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x59 (bvuge ?x133 (_ bv1 32))))
 (let (($x470 (= $x207 $x59)))
 (let (($x591 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x615 (=> $x591 $x589)))
 (let (($x277 (= ?x133 (_ bv0 32))))
 (let (($x520 (= $x591 $x277)))
 (let (($x595 (and $x520 $x615)))
 (let (($x185 (and $x595 $x470)))
 (let (($x295 (and $x185 $x422)))
 (let (($x163 (= $x295 true)))
 (let (($x726 (= $x163 true)))
 (let (($x113 (= $x726 true)))
 (let (($x505 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x17)))
 (let (($x519 (and $x505 true)))
 (let (($x15 (=> $x280 $x519)))
 (let (($x895 (= $x280 $x501)))
 (let (($x48 (= $x796 $x633)))
 (let (($x547 (and $x48 $x744)))
 (let (($x797 (and $x547 $x895)))
 (let (($x394 (and $x797 $x15)))
 (let (($x246 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x517)))
 (let (($x941 (and $x246 $x394)))
 (let (($x468 (=> $x735 $x941)))
 (let (($x329 (= $x735 $x59)))
 (let (($x24 (= $x711 $x277)))
 (let (($x732 (and $x24 $x768)))
 (let (($x748 (and $x732 $x329)))
 (let (($x243 (and $x748 $x468)))
 (let (($x222 (= $x243 true)))
 (let (($x400 (= $x222 true)))
 (let (($x146 (= $x400 true)))
 (let (($x353 (and $x146 $x113)))
 (let (($x498 (and $x353 $x105)))
 (let (($x606 (and $x498 $x423)))
 (let (($x525 (and $x606 $x654)))
 (let (($x360 (and $x525 $x209)))
 (let (($x817 (and $x360 $x843)))
 (let (($x464 (and $x817 $x761)))
 (let (($x333 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x842 (and $x333 $x464)))
 (let ((?x138 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x513 (bvugt ?x138 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x451 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x138 (_ bv3 32)))))
 (let (($x659 (=> (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x451 $x513)))))))
 (let (($x372 (not $x179)))
 (let (($x167 (=> (and $x372 (bvule ?x138 (bvsub (bvadd ?x138 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x451 $x513)))))))
 (let (($x751 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x750)))
 (let (($x434 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32))) (or false (or false (and true (or $x327 $x751)))))))
 (let (($x216 (=> (and $x372 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32)))) (or false (or false (and true (or $x327 $x751)))))))
 (let (($x469 (and $x216 $x167)))
 (let (($x851 (and $x469 $x842)))
 (let (($x820 (=> $x851 $x848)))
 (not $x820))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x751 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv1 32))) (select input.dst.llvm-mem ?x751))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv2 32))) ?x265))))
 (let ((?x532 ((_ extract 2 0) ?x93)))
 (let (($x535 (= (_ bv0 3) ?x532)))
 (let (($x298 (= $x535 true)))
 (let ((?x418 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x142 (= (_ bv0 3) ?x418)))
 (let (($x31 (= $x142 true)))
 (let (($x439 (= $x31 true)))
 (let (($x571 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x571 true)))
 (let (($x229 (= $x109 true)))
 (let (($x526 (= $x229 true)))
 (let ((?x272 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x622 (concat (select input.dst.llvm-mem (bvadd ?x272 (_ bv1 32))) (select input.dst.llvm-mem ?x272))))
 (let ((?x687 (concat (select input.dst.llvm-mem (bvadd ?x272 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x272 (_ bv2 32))) ?x622))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x687 (_ bv1 32))) (select input.dst.llvm-mem ?x687))))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd ?x687 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x687 (_ bv2 32))) ?x529))))
 (let (($x575 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x572)))
 (let (($x23 (and $x575 true)))
 (let (($x683 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x34 (=> $x683 $x23)))
 (let (($x624 (= $x683 (bvuge (ite (= (_ bv0 32) ?x687) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x146 (= false false)))
 (let (($x398 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x837 (=> $x398 $x146)))
 (let (($x690 (= $x398 (= (ite (= (_ bv0 32) ?x687) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x346 (and $x690 $x837)))
 (let (($x601 (and $x346 $x624)))
 (let (($x268 (and $x601 $x34)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x558 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x555 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x172 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x836 (concat (select input.dst.llvm-mem ?x172) (concat ?x555 (concat ?x558 ?x70)))))
 (let (($x672 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x836)))
 (let (($x192 (and $x672 $x268)))
 (let (($x470 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x438 (=> $x470 $x192)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x421 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x403 (= $x470 (bvuge ?x421 (_ bv1 32)))))
 (let (($x941 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x256 (=> $x941 $x146)))
 (let (($x542 (= $x941 (= ?x421 (_ bv0 32)))))
 (let (($x988 (and $x542 $x256)))
 (let (($x160 (and $x988 $x403)))
 (let (($x442 (and $x160 $x438)))
 (let (($x550 (= $x442 true)))
 (let (($x419 (= $x550 true)))
 (let (($x576 (= $x419 true)))
 (let (($x245 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x263 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x983 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x263) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x263))))
 (let (($x77 (and true $x983)))
 (let (($x560 (and $x983 $x77)))
 (let (($x494 (= (bvand ?x93 (_ bv4294967288 32)) ?x93)))
 (let (($x110 (= (bvand ?x751 (_ bv4294967292 32)) ?x751)))
 (let (($x224 (and $x110 $x494)))
 (let (($x193 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x751 (bvsub ?x751 (_ bv4 32))) (bvult ?x751 (bvsub ?x751 (_ bv4 32))))))
 (let (($x84 (and (and (and (and (and $x77 $x193) $x110) $x224) $x560) $x245)))
 (let (($x798 (= true $x84)))
 (let (($x750 (not $x179)))
 (let (($x667 (=> $x750 $x798)))
 (let (($x908 (= $x667 true)))
 (let (($x191 (= $x908 true)))
 (let (($x712 (= $x191 true)))
 (let (($x181 (= $x750 true)))
 (let (($x301 (= $x181 true)))
 (let (($x632 (= $x301 true)))
 (let (($x195 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x661 (= $x195 true)))
 (let (($x322 (= $x661 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= $x79 true)))
 (let (($x53 (= $x183 true)))
 (let ((?x838 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x648 (= (_ bv0 32) ?x838)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x453 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let (($x721 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x721 $x453)))
 (let (($x784 (and $x135 $x648)))
 (let (($x651 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x810 (and $x651 $x784)))
 (let (($x669 (= $x810 true)))
 (let (($x840 (= $x669 true)))
 (let (($x847 (= $x840 true)))
 (let ((?x844 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x850 (concat ?x844 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x843 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x849 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x839 (concat ?x849 (concat ?x843 ?x850))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x839 (_ bv1 32))) (select input.dst.llvm-mem ?x839))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x839 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x839 (_ bv2 32))) ?x212))))
 (let (($x492 (= input.spec-%var-l-1.2.1.2.0 ?x355)))
 (let (($x379 (and $x492 true)))
 (let (($x271 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x937 (=> $x271 $x379)))
 (let ((?x761 (ite (= (_ bv0 32) ?x839) (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x761 (_ bv1 32))))
 (let (($x335 (= $x271 $x292)))
 (let (($x177 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x173 (=> $x177 $x146)))
 (let (($x464 (= ?x761 (_ bv0 32))))
 (let (($x382 (= $x177 $x464)))
 (let (($x318 (and $x382 $x173)))
 (let (($x620 (and $x318 $x335)))
 (let (($x657 (and $x620 $x937)))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x654)))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x431)))
 (let (($x157 (= input.spec-%var-l-1.2.0 ?x514)))
 (let (($x455 (and $x157 $x657)))
 (let (($x573 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x226 (=> $x573 $x455)))
 (let ((?x243 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x243 (_ bv1 32))))
 (let (($x923 (= $x573 $x185)))
 (let (($x284 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x552 (=> $x284 $x146)))
 (let (($x222 (= ?x243 (_ bv0 32))))
 (let (($x725 (= $x284 $x222)))
 (let (($x116 (and $x725 $x552)))
 (let (($x926 (and $x116 $x923)))
 (let (($x729 (and $x926 $x226)))
 (let (($x556 (= $x729 true)))
 (let (($x946 (= $x556 true)))
 (let (($x699 (= $x946 true)))
 (let (($x362 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x355)))
 (let (($x302 (and $x362 true)))
 (let (($x912 (=> $x683 $x302)))
 (let (($x771 (= $x683 $x292)))
 (let (($x567 (= $x398 $x464)))
 (let (($x789 (and $x567 $x837)))
 (let (($x480 (and $x789 $x771)))
 (let (($x155 (and $x480 $x912)))
 (let (($x516 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x514)))
 (let (($x376 (and $x516 $x155)))
 (let (($x65 (=> $x470 $x376)))
 (let (($x203 (= $x470 $x185)))
 (let (($x400 (= $x941 $x222)))
 (let (($x591 (and $x400 $x256)))
 (let (($x330 (and $x591 $x203)))
 (let (($x441 (and $x330 $x65)))
 (let (($x673 (= $x441 true)))
 (let (($x579 (= $x673 true)))
 (let (($x762 (= $x579 true)))
 (let (($x412 (and $x762 $x699)))
 (let (($x841 (and $x412 $x847)))
 (let (($x13 (and $x841 $x53)))
 (let (($x500 (and $x13 $x322)))
 (let (($x39 (and $x500 $x632)))
 (let (($x906 (and $x39 $x712)))
 (let (($x100 (and $x906 $x576)))
 (let (($x121 (and $x100 $x526)))
 (let (($x33 (and $x121 $x439)))
 (let (($x41 (and $x470 $x33)))
 (let (($x711 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x521 (and $x711 $x41)))
 (let (($x759 (bvugt ?x751 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x751 (_ bv3 32))))
 (let (($x617 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x333 (=> (bvule ?x751 (bvsub (bvadd ?x751 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x617 $x759)))))))
 (let (($x914 (=> (and $x750 (bvule ?x751 (bvsub (bvadd ?x751 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x617 $x759)))))))
 (let (($x370 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x907 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x162 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x272 (_ bv1 32))) (or false (or false (and true (or $x907 $x370)))))))
 (let (($x909 (=> (and $x750 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x272 (_ bv1 32)))) (or false (or false (and true (or $x907 $x370)))))))
 (let (($x316 (and $x909 $x914)))
 (let (($x478 (and $x316 $x521)))
 (let (($x164 (=> $x478 $x298)))
 (not $x164)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x751 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv1 32))) (select input.dst.llvm-mem ?x751))))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv2 32))) ?x265))))
 (let ((?x532 ((_ extract 2 0) ?x93)))
 (let (($x535 (= (_ bv0 3) ?x532)))
 (let (($x298 (= $x535 true)))
 (let ((?x418 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x142 (= (_ bv0 3) ?x418)))
 (let (($x31 (= $x142 true)))
 (let (($x439 (= $x31 true)))
 (let (($x571 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x109 (= $x571 true)))
 (let (($x229 (= $x109 true)))
 (let (($x526 (= $x229 true)))
 (let ((?x272 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x622 (concat (select input.dst.llvm-mem (bvadd ?x272 (_ bv1 32))) (select input.dst.llvm-mem ?x272))))
 (let ((?x687 (concat (select input.dst.llvm-mem (bvadd ?x272 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x272 (_ bv2 32))) ?x622))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x687 (_ bv1 32))) (select input.dst.llvm-mem ?x687))))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd ?x687 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x687 (_ bv2 32))) ?x529))))
 (let (($x575 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x572)))
 (let (($x23 (and $x575 true)))
 (let (($x683 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x34 (=> $x683 $x23)))
 (let (($x624 (= $x683 (bvuge (ite (= (_ bv0 32) ?x687) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x146 (= false false)))
 (let (($x398 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x837 (=> $x398 $x146)))
 (let (($x690 (= $x398 (= (ite (= (_ bv0 32) ?x687) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x346 (and $x690 $x837)))
 (let (($x601 (and $x346 $x624)))
 (let (($x268 (and $x601 $x34)))
 (let ((?x70 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x558 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x555 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x172 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x836 (concat (select input.dst.llvm-mem ?x172) (concat ?x555 (concat ?x558 ?x70)))))
 (let (($x672 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x836)))
 (let (($x192 (and $x672 $x268)))
 (let (($x470 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x438 (=> $x470 $x192)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x421 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x403 (= $x470 (bvuge ?x421 (_ bv1 32)))))
 (let (($x941 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x256 (=> $x941 $x146)))
 (let (($x542 (= $x941 (= ?x421 (_ bv0 32)))))
 (let (($x988 (and $x542 $x256)))
 (let (($x160 (and $x988 $x403)))
 (let (($x442 (and $x160 $x438)))
 (let (($x550 (= $x442 true)))
 (let (($x419 (= $x550 true)))
 (let (($x576 (= $x419 true)))
 (let (($x245 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x263 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x983 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x263) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x263))))
 (let (($x77 (and true $x983)))
 (let (($x560 (and $x983 $x77)))
 (let (($x494 (= (bvand ?x93 (_ bv4294967288 32)) ?x93)))
 (let (($x110 (= (bvand ?x751 (_ bv4294967292 32)) ?x751)))
 (let (($x224 (and $x110 $x494)))
 (let (($x193 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x751 (bvsub ?x751 (_ bv4 32))) (bvult ?x751 (bvsub ?x751 (_ bv4 32))))))
 (let (($x84 (and (and (and (and (and $x77 $x193) $x110) $x224) $x560) $x245)))
 (let (($x798 (= true $x84)))
 (let (($x750 (not $x179)))
 (let (($x667 (=> $x750 $x798)))
 (let (($x908 (= $x667 true)))
 (let (($x191 (= $x908 true)))
 (let (($x712 (= $x191 true)))
 (let (($x181 (= $x750 true)))
 (let (($x301 (= $x181 true)))
 (let (($x632 (= $x301 true)))
 (let (($x195 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x661 (= $x195 true)))
 (let (($x322 (= $x661 true)))
 (let (($x79 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x183 (= $x79 true)))
 (let (($x53 (= $x183 true)))
 (let ((?x838 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x648 (= (_ bv0 32) ?x838)))
 (let ((?x211 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x453 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x211)))
 (let (($x721 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x135 (and $x721 $x453)))
 (let (($x784 (and $x135 $x648)))
 (let (($x651 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x810 (and $x651 $x784)))
 (let (($x669 (= $x810 true)))
 (let (($x840 (= $x669 true)))
 (let (($x847 (= $x840 true)))
 (let ((?x844 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x850 (concat ?x844 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x843 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x849 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x839 (concat ?x849 (concat ?x843 ?x850))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x839 (_ bv1 32))) (select input.dst.llvm-mem ?x839))))
 (let ((?x355 (concat (select input.dst.llvm-mem (bvadd ?x839 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x839 (_ bv2 32))) ?x212))))
 (let (($x492 (= input.spec-%var-l-1.2.1.2.0 ?x355)))
 (let (($x379 (and $x492 true)))
 (let (($x271 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x937 (=> $x271 $x379)))
 (let ((?x761 (ite (= (_ bv0 32) ?x839) (_ bv0 32) (_ bv1 32))))
 (let (($x292 (bvuge ?x761 (_ bv1 32))))
 (let (($x335 (= $x271 $x292)))
 (let (($x177 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x173 (=> $x177 $x146)))
 (let (($x464 (= ?x761 (_ bv0 32))))
 (let (($x382 (= $x177 $x464)))
 (let (($x318 (and $x382 $x173)))
 (let (($x620 (and $x318 $x335)))
 (let (($x657 (and $x620 $x937)))
 (let ((?x654 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x431 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x654)))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x431)))
 (let (($x157 (= input.spec-%var-l-1.2.0 ?x514)))
 (let (($x455 (and $x157 $x657)))
 (let (($x573 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x226 (=> $x573 $x455)))
 (let ((?x243 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x185 (bvuge ?x243 (_ bv1 32))))
 (let (($x923 (= $x573 $x185)))
 (let (($x284 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x552 (=> $x284 $x146)))
 (let (($x222 (= ?x243 (_ bv0 32))))
 (let (($x725 (= $x284 $x222)))
 (let (($x116 (and $x725 $x552)))
 (let (($x926 (and $x116 $x923)))
 (let (($x729 (and $x926 $x226)))
 (let (($x556 (= $x729 true)))
 (let (($x946 (= $x556 true)))
 (let (($x699 (= $x946 true)))
 (let (($x362 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x355)))
 (let (($x302 (and $x362 true)))
 (let (($x912 (=> $x683 $x302)))
 (let (($x771 (= $x683 $x292)))
 (let (($x567 (= $x398 $x464)))
 (let (($x789 (and $x567 $x837)))
 (let (($x480 (and $x789 $x771)))
 (let (($x155 (and $x480 $x912)))
 (let (($x516 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x514)))
 (let (($x376 (and $x516 $x155)))
 (let (($x65 (=> $x470 $x376)))
 (let (($x203 (= $x470 $x185)))
 (let (($x400 (= $x941 $x222)))
 (let (($x591 (and $x400 $x256)))
 (let (($x330 (and $x591 $x203)))
 (let (($x441 (and $x330 $x65)))
 (let (($x673 (= $x441 true)))
 (let (($x579 (= $x673 true)))
 (let (($x762 (= $x579 true)))
 (let (($x412 (and $x762 $x699)))
 (let (($x841 (and $x412 $x847)))
 (let (($x13 (and $x841 $x53)))
 (let (($x500 (and $x13 $x322)))
 (let (($x39 (and $x500 $x632)))
 (let (($x906 (and $x39 $x712)))
 (let (($x100 (and $x906 $x576)))
 (let (($x121 (and $x100 $x526)))
 (let (($x33 (and $x121 $x439)))
 (let (($x41 (and $x470 $x33)))
 (let (($x711 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x521 (and $x711 $x41)))
 (let (($x759 (bvugt ?x751 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x751 (_ bv3 32))))
 (let (($x617 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x333 (=> (bvule ?x751 (bvsub (bvadd ?x751 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x617 $x759)))))))
 (let (($x914 (=> (and $x750 (bvule ?x751 (bvsub (bvadd ?x751 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x617 $x759)))))))
 (let (($x370 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x907 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x162 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x272 (_ bv1 32))) (or false (or false (and true (or $x907 $x370)))))))
 (let (($x909 (=> (and $x750 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x272 (_ bv1 32)))) (or false (or false (and true (or $x907 $x370)))))))
 (let (($x316 (and $x909 $x914)))
 (let (($x478 (and $x316 $x521)))
 (let (($x164 (=> $x478 $x298)))
 (not $x164)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x527 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x479 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x612 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x252 (concat (select input.dst.llvm-mem ?x612) (concat ?x479 (concat ?x527 ?x104)))))
 (let ((?x785 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x252)))
 (let (($x783 (= (_ bv0 32) ?x785)))
 (let (($x807 (= $x783 true)))
 (let ((?x125 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (= (_ bv0 3) ?x125)))
 (let (($x803 (= $x108 true)))
 (let (($x523 (= $x803 true)))
 (let (($x430 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= $x430 true)))
 (let (($x813 (= $x158 true)))
 (let (($x584 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x811 (= $x584 true)))
 (let (($x178 (= $x811 true)))
 (let (($x237 (= $x178 true)))
 (let ((?x652 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv1 32))) (select input.dst.llvm-mem ?x652))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv2 32))) ?x448))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x119))))
 (let (($x432 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x483)))
 (let (($x471 (and $x432 true)))
 (let (($x529 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x792 (=> $x529 $x471)))
 (let (($x217 (= $x529 (bvuge (ite (= (_ bv0 32) ?x254) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x762 (= false false)))
 (let (($x544 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x403 (=> $x544 $x762)))
 (let (($x234 (= $x544 (= (ite (= (_ bv0 32) ?x254) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x543 (and $x234 $x403)))
 (let (($x827 (and $x543 $x217)))
 (let (($x752 (and $x827 $x792)))
 (let (($x266 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x252)))
 (let (($x189 (and $x266 $x752)))
 (let (($x923 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x598 (=> $x923 $x189)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x820 (= $x923 (bvuge ?x112 (_ bv1 32)))))
 (let (($x376 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x159 (=> $x376 $x762)))
 (let (($x447 (= $x376 (= ?x112 (_ bv0 32)))))
 (let (($x267 (and $x447 $x159)))
 (let (($x642 (and $x267 $x820)))
 (let (($x823 (and $x642 $x598)))
 (let (($x416 (= $x823 true)))
 (let (($x819 (= $x416 true)))
 (let (($x621 (= $x819 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x534 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99))))
 (let (($x44 (and true $x534)))
 (let (($x347 (and $x534 $x44)))
 (let ((?x476 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x476 (_ bv1 32))) (select input.dst.llvm-mem ?x476))))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd ?x476 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x476 (_ bv2 32))) ?x105))))
 (let (($x140 (= (bvand ?x510 (_ bv4294967288 32)) ?x510)))
 (let (($x569 (= (bvand ?x476 (_ bv4294967292 32)) ?x476)))
 (let (($x213 (and $x569 $x140)))
 (let (($x531 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x476 (bvsub ?x476 (_ bv4 32))) (bvult ?x476 (bvsub ?x476 (_ bv4 32))))))
 (let (($x719 (and (and (and (and (and $x44 $x531) $x569) $x213) $x347) $x14)))
 (let (($x86 (= true $x719)))
 (let (($x750 (not $x179)))
 (let (($x40 (=> $x750 $x86)))
 (let (($x391 (= $x40 true)))
 (let (($x415 (= $x391 true)))
 (let (($x299 (= $x415 true)))
 (let (($x295 (= $x750 true)))
 (let (($x940 (= $x295 true)))
 (let (($x336 (= $x940 true)))
 (let (($x352 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x5 (= $x352 true)))
 (let (($x20 (= $x5 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x594 (= (_ bv0 32) ?x42)))
 (let ((?x353 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x726 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x353)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x113 $x726)))
 (let (($x68 (and $x194 $x594)))
 (let (($x461 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x497 (and $x461 $x68)))
 (let (($x623 (= $x497 true)))
 (let (($x294 (= $x623 true)))
 (let (($x737 (= $x294 true)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x554 (concat ?x70 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x836 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x822 (concat ?x89 (concat ?x836 ?x554))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv1 32))) (select input.dst.llvm-mem ?x822))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv2 32))) ?x107))))
 (let (($x134 (= input.spec-%var-l-1.2.1.2.0 ?x202)))
 (let (($x163 (and $x134 true)))
 (let (($x945 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x615 (=> $x945 $x163)))
 (let ((?x363 (ite (= (_ bv0 32) ?x822) (_ bv0 32) (_ bv1 32))))
 (let (($x572 (bvuge ?x363 (_ bv1 32))))
 (let (($x547 (= $x945 $x572)))
 (let (($x473 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x48 (=> $x473 $x762)))
 (let (($x78 (= ?x363 (_ bv0 32))))
 (let (($x501 (= $x473 $x78)))
 (let (($x656 (and $x501 $x48)))
 (let (($x895 (and $x656 $x547)))
 (let (($x595 (and $x895 $x615)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x322)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x301)))
 (let (($x650 (= input.spec-%var-l-1.2.0 ?x230)))
 (let (($x692 (and $x650 $x595)))
 (let (($x797 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x240 (=> $x797 $x692)))
 (let ((?x441 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x926 (bvuge ?x441 (_ bv1 32))))
 (let (($x824 (= $x797 $x926)))
 (let (($x747 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x377 (=> $x747 $x762)))
 (let (($x673 (= ?x441 (_ bv0 32))))
 (let (($x123 (= $x747 $x673)))
 (let (($x307 (and $x123 $x377)))
 (let (($x174 (and $x307 $x824)))
 (let (($x519 (and $x174 $x240)))
 (let (($x520 (= $x519 true)))
 (let (($x207 (= $x520 true)))
 (let (($x414 (= $x207 true)))
 (let (($x517 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x202)))
 (let (($x917 (and $x517 true)))
 (let (($x943 (=> $x529 $x917)))
 (let (($x583 (= $x529 $x572)))
 (let (($x741 (= $x544 $x78)))
 (let (($x515 (and $x741 $x403)))
 (let (($x590 (and $x515 $x583)))
 (let (($x618 (and $x590 $x943)))
 (let (($x263 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x230)))
 (let (($x989 (and $x263 $x618)))
 (let (($x938 (=> $x923 $x989)))
 (let (($x939 (= $x923 $x926)))
 (let (($x579 (= $x376 $x673)))
 (let (($x284 (and $x579 $x159)))
 (let (($x157 (and $x284 $x939)))
 (let (($x799 (and $x157 $x938)))
 (let (($x371 (= $x799 true)))
 (let (($x484 (= $x371 true)))
 (let (($x920 (= $x484 true)))
 (let (($x150 (and $x920 $x414)))
 (let (($x270 (and $x150 $x737)))
 (let (($x422 (and $x270 $x20)))
 (let (($x344 (and $x422 $x336)))
 (let (($x816 (and $x344 $x299)))
 (let (($x829 (and $x816 $x621)))
 (let (($x166 (and $x829 $x237)))
 (let (($x127 (and $x166 $x813)))
 (let (($x825 (and $x127 $x523)))
 (let (($x530 (and $x923 $x825)))
 (let (($x941 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x126 (and $x941 $x530)))
 (let (($x167 (bvugt ?x476 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x476 (_ bv3 32))))
 (let (($x659 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x711 (=> (bvule ?x476 (bvsub (bvadd ?x476 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x659 $x167)))))))
 (let (($x691 (=> (and $x750 (bvule ?x476 (bvsub (bvadd ?x476 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x659 $x167)))))))
 (let (($x216 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x434 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x612)))
 (let (($x513 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32))) (or false (or false (and true (or $x434 $x216)))))))
 (let (($x911 (=> (and $x750 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32)))) (or false (or false (and true (or $x434 $x216)))))))
 (let (($x611 (and $x911 $x691)))
 (let (($x290 (and $x611 $x126)))
 (let (($x539 (=> $x290 $x807)))
 (not $x539)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x104 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x527 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x479 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x612 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x252 (concat (select input.dst.llvm-mem ?x612) (concat ?x479 (concat ?x527 ?x104)))))
 (let ((?x785 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x252)))
 (let (($x783 (= (_ bv0 32) ?x785)))
 (let (($x807 (= $x783 true)))
 (let ((?x125 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x108 (= (_ bv0 3) ?x125)))
 (let (($x803 (= $x108 true)))
 (let (($x523 (= $x803 true)))
 (let (($x430 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x158 (= $x430 true)))
 (let (($x813 (= $x158 true)))
 (let (($x584 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x811 (= $x584 true)))
 (let (($x178 (= $x811 true)))
 (let (($x237 (= $x178 true)))
 (let ((?x652 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv1 32))) (select input.dst.llvm-mem ?x652))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x652 (_ bv2 32))) ?x448))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv1 32))) (select input.dst.llvm-mem ?x254))))
 (let ((?x483 (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x254 (_ bv2 32))) ?x119))))
 (let (($x432 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x483)))
 (let (($x471 (and $x432 true)))
 (let (($x529 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x792 (=> $x529 $x471)))
 (let (($x217 (= $x529 (bvuge (ite (= (_ bv0 32) ?x254) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x762 (= false false)))
 (let (($x544 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x403 (=> $x544 $x762)))
 (let (($x234 (= $x544 (= (ite (= (_ bv0 32) ?x254) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x543 (and $x234 $x403)))
 (let (($x827 (and $x543 $x217)))
 (let (($x752 (and $x827 $x792)))
 (let (($x266 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x252)))
 (let (($x189 (and $x266 $x752)))
 (let (($x923 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x598 (=> $x923 $x189)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x112 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x820 (= $x923 (bvuge ?x112 (_ bv1 32)))))
 (let (($x376 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x159 (=> $x376 $x762)))
 (let (($x447 (= $x376 (= ?x112 (_ bv0 32)))))
 (let (($x267 (and $x447 $x159)))
 (let (($x642 (and $x267 $x820)))
 (let (($x823 (and $x642 $x598)))
 (let (($x416 (= $x823 true)))
 (let (($x819 (= $x416 true)))
 (let (($x621 (= $x819 true)))
 (let (($x14 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x99 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x534 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x99))))
 (let (($x44 (and true $x534)))
 (let (($x347 (and $x534 $x44)))
 (let ((?x476 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x476 (_ bv1 32))) (select input.dst.llvm-mem ?x476))))
 (let ((?x510 (concat (select input.dst.llvm-mem (bvadd ?x476 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x476 (_ bv2 32))) ?x105))))
 (let (($x140 (= (bvand ?x510 (_ bv4294967288 32)) ?x510)))
 (let (($x569 (= (bvand ?x476 (_ bv4294967292 32)) ?x476)))
 (let (($x213 (and $x569 $x140)))
 (let (($x531 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x476 (bvsub ?x476 (_ bv4 32))) (bvult ?x476 (bvsub ?x476 (_ bv4 32))))))
 (let (($x719 (and (and (and (and (and $x44 $x531) $x569) $x213) $x347) $x14)))
 (let (($x86 (= true $x719)))
 (let (($x750 (not $x179)))
 (let (($x40 (=> $x750 $x86)))
 (let (($x391 (= $x40 true)))
 (let (($x415 (= $x391 true)))
 (let (($x299 (= $x415 true)))
 (let (($x295 (= $x750 true)))
 (let (($x940 (= $x295 true)))
 (let (($x336 (= $x940 true)))
 (let (($x352 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x5 (= $x352 true)))
 (let (($x20 (= $x5 true)))
 (let ((?x42 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x594 (= (_ bv0 32) ?x42)))
 (let ((?x353 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x726 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x353)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x194 (and $x113 $x726)))
 (let (($x68 (and $x194 $x594)))
 (let (($x461 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x497 (and $x461 $x68)))
 (let (($x623 (= $x497 true)))
 (let (($x294 (= $x623 true)))
 (let (($x737 (= $x294 true)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x554 (concat ?x70 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x836 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x822 (concat ?x89 (concat ?x836 ?x554))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv1 32))) (select input.dst.llvm-mem ?x822))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv2 32))) ?x107))))
 (let (($x134 (= input.spec-%var-l-1.2.1.2.0 ?x202)))
 (let (($x163 (and $x134 true)))
 (let (($x945 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x615 (=> $x945 $x163)))
 (let ((?x363 (ite (= (_ bv0 32) ?x822) (_ bv0 32) (_ bv1 32))))
 (let (($x572 (bvuge ?x363 (_ bv1 32))))
 (let (($x547 (= $x945 $x572)))
 (let (($x473 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x48 (=> $x473 $x762)))
 (let (($x78 (= ?x363 (_ bv0 32))))
 (let (($x501 (= $x473 $x78)))
 (let (($x656 (and $x501 $x48)))
 (let (($x895 (and $x656 $x547)))
 (let (($x595 (and $x895 $x615)))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x322)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x301)))
 (let (($x650 (= input.spec-%var-l-1.2.0 ?x230)))
 (let (($x692 (and $x650 $x595)))
 (let (($x797 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x240 (=> $x797 $x692)))
 (let ((?x441 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x926 (bvuge ?x441 (_ bv1 32))))
 (let (($x824 (= $x797 $x926)))
 (let (($x747 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x377 (=> $x747 $x762)))
 (let (($x673 (= ?x441 (_ bv0 32))))
 (let (($x123 (= $x747 $x673)))
 (let (($x307 (and $x123 $x377)))
 (let (($x174 (and $x307 $x824)))
 (let (($x519 (and $x174 $x240)))
 (let (($x520 (= $x519 true)))
 (let (($x207 (= $x520 true)))
 (let (($x414 (= $x207 true)))
 (let (($x517 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x202)))
 (let (($x917 (and $x517 true)))
 (let (($x943 (=> $x529 $x917)))
 (let (($x583 (= $x529 $x572)))
 (let (($x741 (= $x544 $x78)))
 (let (($x515 (and $x741 $x403)))
 (let (($x590 (and $x515 $x583)))
 (let (($x618 (and $x590 $x943)))
 (let (($x263 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x230)))
 (let (($x989 (and $x263 $x618)))
 (let (($x938 (=> $x923 $x989)))
 (let (($x939 (= $x923 $x926)))
 (let (($x579 (= $x376 $x673)))
 (let (($x284 (and $x579 $x159)))
 (let (($x157 (and $x284 $x939)))
 (let (($x799 (and $x157 $x938)))
 (let (($x371 (= $x799 true)))
 (let (($x484 (= $x371 true)))
 (let (($x920 (= $x484 true)))
 (let (($x150 (and $x920 $x414)))
 (let (($x270 (and $x150 $x737)))
 (let (($x422 (and $x270 $x20)))
 (let (($x344 (and $x422 $x336)))
 (let (($x816 (and $x344 $x299)))
 (let (($x829 (and $x816 $x621)))
 (let (($x166 (and $x829 $x237)))
 (let (($x127 (and $x166 $x813)))
 (let (($x825 (and $x127 $x523)))
 (let (($x530 (and $x923 $x825)))
 (let (($x941 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x126 (and $x941 $x530)))
 (let (($x167 (bvugt ?x476 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x476 (_ bv3 32))))
 (let (($x659 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x711 (=> (bvule ?x476 (bvsub (bvadd ?x476 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x659 $x167)))))))
 (let (($x691 (=> (and $x750 (bvule ?x476 (bvsub (bvadd ?x476 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x659 $x167)))))))
 (let (($x216 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x434 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x612)))
 (let (($x513 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32))) (or false (or false (and true (or $x434 $x216)))))))
 (let (($x911 (=> (and $x750 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x652 (_ bv1 32)))) (or false (or false (and true (or $x434 $x216)))))))
 (let (($x611 (and $x911 $x691)))
 (let (($x290 (and $x611 $x126)))
 (let (($x539 (=> $x290 $x807)))
 (not $x539)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv549416 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv1 8)) (_ bv549416 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv4237704 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv4237704 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv4237707 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xf1f3f3b0)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xf1f3f3b8)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #xf3f3f3f3)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #xf3)
              #xf1f3f3bf
              #xe1)
       #xf1f3f3bc
       #xb0))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xf3f3f3f3)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf3f3f3f3)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #xf3f3f3f3)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x341 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x915 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x138 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem ?x138) (concat ?x915 (concat ?x171 ?x341)))))
 (let ((?x10 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x380)))
 (let (($x435 (= (_ bv0 32) ?x10)))
 (let (($x537 (= $x435 true)))
 (let ((?x411 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x987 (= (_ bv0 3) ?x411)))
 (let (($x715 (= $x987 true)))
 (let (($x408 (= $x715 true)))
 (let (($x477 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= $x477 true)))
 (let (($x251 (= $x81 true)))
 (let (($x390 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x390 true)))
 (let (($x694 (= $x152 true)))
 (let (($x95 (= $x694 true)))
 (let ((?x907 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x502 (concat (select input.dst.llvm-mem (bvadd ?x907 (_ bv1 32))) (select input.dst.llvm-mem ?x907))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x907 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x907 (_ bv2 32))) ?x502))))
 (let ((?x831 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x831))))
 (let (($x506 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x689)))
 (let (($x504 (and $x506 false)))
 (let (($x792 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x792 $x504)))
 (let (($x616 (= $x792 (bvuge (ite (= (_ bv0 32) ?x300) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x920 (= false false)))
 (let (($x104 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x992 (=> $x104 $x920)))
 (let (($x834 (= $x104 (= (ite (= (_ bv0 32) ?x300) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x56 (and $x834 $x992)))
 (let (($x778 (and $x56 $x616)))
 (let (($x361 (and $x778 $x90)))
 (let (($x670 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x380)))
 (let (($x25 (and $x670 $x361)))
 (let (($x824 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x122 (=> $x824 $x25)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x277 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (= $x824 (bvuge ?x277 (_ bv1 32)))))
 (let (($x989 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x246 (=> $x989 $x920)))
 (let (($x426 (= $x989 (= ?x277 (_ bv0 32)))))
 (let (($x365 (and $x426 $x246)))
 (let (($x132 (and $x365 $x144)))
 (let (($x262 (and $x132 $x122)))
 (let (($x12 (= $x262 true)))
 (let (($x71 (= $x12 true)))
 (let (($x389 (= $x71 true)))
 (let (($x494 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x421 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x340) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x340))))
 (let (($x578 (and true $x421)))
 (let (($x154 (and $x421 $x578)))
 (let ((?x451 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv1 32))) (select input.dst.llvm-mem ?x451))))
 (let ((?x840 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv2 32))) ?x847))))
 (let (($x702 (= (bvand ?x840 (_ bv4294967288 32)) ?x840)))
 (let (($x542 (= (bvand ?x451 (_ bv4294967292 32)) ?x451)))
 (let (($x328 (and $x542 $x702)))
 (let (($x84 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x451 (bvsub ?x451 (_ bv4 32))) (bvult ?x451 (bvsub ?x451 (_ bv4 32))))))
 (let (($x265 (and (and (and (and (and $x578 $x84) $x542) $x328) $x154) $x494)))
 (let (($x777 (= true $x265)))
 (let (($x750 (not $x179)))
 (let (($x604 (=> $x750 $x777)))
 (let (($x561 (= $x604 true)))
 (let (($x545 (= $x561 true)))
 (let (($x835 (= $x545 true)))
 (let (($x729 (= $x750 true)))
 (let (($x885 (= $x729 true)))
 (let (($x280 (= $x885 true)))
 (let (($x620 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x379 (= $x620 true)))
 (let (($x455 (= $x379 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x838 (= (_ bv0 32) ?x211)))
 (let ((?x412 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x946 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x412)))
 (let (($x699 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x919 (and $x699 $x946)))
 (let (($x937 (and $x919 $x838)))
 (let (($x721 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x657 (and $x721 $x937)))
 (let (($x802 (= $x657 true)))
 (let (($x492 (= $x802 true)))
 (let (($x271 (= $x492 true)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x990 (concat ?x76 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x985 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x448 (concat ?x69 (concat ?x985 ?x990))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv1 32))) (select input.dst.llvm-mem ?x448))))
 (let ((?x757 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv2 32))) ?x59))))
 (let (($x173 (= input.spec-%var-l-1.2.1.2.0 ?x757)))
 (let (($x556 (and $x173 false)))
 (let (($x630 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x552 (=> $x630 $x556)))
 (let ((?x254 (ite (= (_ bv0 32) ?x448) (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x254 (_ bv1 32))))
 (let (($x789 (= $x630 $x189)))
 (let (($x821 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x567 (=> $x821 $x920)))
 (let (($x190 (= ?x254 (_ bv0 32))))
 (let (($x292 (= $x821 $x190)))
 (let (($x761 (and $x292 $x567)))
 (let (($x771 (and $x761 $x789)))
 (let (($x116 (and $x771 $x552)))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x344)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x285)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x44)))
 (let (($x485 (and $x11 $x116)))
 (let (($x480 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x562 (=> $x480 $x485)))
 (let ((?x799 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x799 (_ bv1 32))))
 (let (($x253 (= $x480 $x174)))
 (let (($x209 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x844 (=> $x209 $x920)))
 (let (($x371 (= ?x799 (_ bv0 32))))
 (let (($x846 (= $x209 $x371)))
 (let (($x360 (and $x846 $x844)))
 (let (($x212 (and $x360 $x253)))
 (let (($x302 (and $x212 $x562)))
 (let (($x725 (= $x302 true)))
 (let (($x573 (= $x725 true)))
 (let (($x453 (= $x573 true)))
 (let (($x514 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x757)))
 (let (($x198 (and $x514 false)))
 (let (($x680 (=> $x792 $x198)))
 (let (($x432 (= $x792 $x189)))
 (let (($x479 (= $x104 $x190)))
 (let (($x528 (and $x479 $x992)))
 (let (($x471 (and $x528 $x432)))
 (let (($x495 (and $x471 $x680)))
 (let (($x176 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x44)))
 (let (($x982 (and $x176 $x495)))
 (let (($x74 (=> $x824 $x982)))
 (let (($x312 (= $x824 $x174)))
 (let (($x484 (= $x989 $x371)))
 (let (($x747 (and $x484 $x246)))
 (let (($x650 (and $x747 $x312)))
 (let (($x239 (and $x650 $x74)))
 (let (($x288 (= $x239 true)))
 (let (($x431 (= $x288 true)))
 (let (($x658 (= $x431 true)))
 (let (($x135 (and $x658 $x453)))
 (let (($x335 (and $x135 $x271)))
 (let (($x226 (and $x335 $x455)))
 (let (($x560 (and $x226 $x280)))
 (let (($x196 (and $x560 $x835)))
 (let (($x746 (and $x196 $x389)))
 (let (($x225 (and $x746 $x95)))
 (let (($x57 (and $x225 $x251)))
 (let (($x541 (and $x57 $x408)))
 (let (($x7 (and $x824 $x541)))
 (let (($x376 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x18 (and $x376 $x7)))
 (let (($x914 (bvugt ?x451 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x451 (_ bv3 32))))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x941 (=> (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x333 $x914)))))))
 (let (($x378 (=> (and $x750 (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x333 $x914)))))))
 (let (($x909 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x759 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x907 (_ bv1 32))) (or false (or false (and true (or $x162 $x909)))))))
 (let (($x172 (=> (and $x750 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x907 (_ bv1 32)))) (or false (or false (and true (or $x162 $x909)))))))
 (let (($x734 (and $x172 $x378)))
 (let (($x417 (and $x734 $x18)))
 (let (($x306 (=> $x417 $x537)))
 (not $x306)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x341 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x915 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x138 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem ?x138) (concat ?x915 (concat ?x171 ?x341)))))
 (let ((?x10 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x380)))
 (let (($x435 (= (_ bv0 32) ?x10)))
 (let (($x537 (= $x435 true)))
 (let ((?x411 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x987 (= (_ bv0 3) ?x411)))
 (let (($x715 (= $x987 true)))
 (let (($x408 (= $x715 true)))
 (let (($x477 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x81 (= $x477 true)))
 (let (($x251 (= $x81 true)))
 (let (($x390 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x152 (= $x390 true)))
 (let (($x694 (= $x152 true)))
 (let (($x95 (= $x694 true)))
 (let ((?x907 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x502 (concat (select input.dst.llvm-mem (bvadd ?x907 (_ bv1 32))) (select input.dst.llvm-mem ?x907))))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x907 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x907 (_ bv2 32))) ?x502))))
 (let ((?x831 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x831))))
 (let (($x506 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x689)))
 (let (($x504 (and $x506 false)))
 (let (($x792 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x90 (=> $x792 $x504)))
 (let (($x616 (= $x792 (bvuge (ite (= (_ bv0 32) ?x300) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x920 (= false false)))
 (let (($x104 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x992 (=> $x104 $x920)))
 (let (($x834 (= $x104 (= (ite (= (_ bv0 32) ?x300) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x56 (and $x834 $x992)))
 (let (($x778 (and $x56 $x616)))
 (let (($x361 (and $x778 $x90)))
 (let (($x670 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x380)))
 (let (($x25 (and $x670 $x361)))
 (let (($x824 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x122 (=> $x824 $x25)))
 (let (($x179 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x277 (ite $x179 (_ bv0 32) (_ bv1 32))))
 (let (($x144 (= $x824 (bvuge ?x277 (_ bv1 32)))))
 (let (($x989 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x246 (=> $x989 $x920)))
 (let (($x426 (= $x989 (= ?x277 (_ bv0 32)))))
 (let (($x365 (and $x426 $x246)))
 (let (($x132 (and $x365 $x144)))
 (let (($x262 (and $x132 $x122)))
 (let (($x12 (= $x262 true)))
 (let (($x71 (= $x12 true)))
 (let (($x389 (= $x71 true)))
 (let (($x494 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x340 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x421 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x340) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x340))))
 (let (($x578 (and true $x421)))
 (let (($x154 (and $x421 $x578)))
 (let ((?x451 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x847 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv1 32))) (select input.dst.llvm-mem ?x451))))
 (let ((?x840 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv2 32))) ?x847))))
 (let (($x702 (= (bvand ?x840 (_ bv4294967288 32)) ?x840)))
 (let (($x542 (= (bvand ?x451 (_ bv4294967292 32)) ?x451)))
 (let (($x328 (and $x542 $x702)))
 (let (($x84 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x451 (bvsub ?x451 (_ bv4 32))) (bvult ?x451 (bvsub ?x451 (_ bv4 32))))))
 (let (($x265 (and (and (and (and (and $x578 $x84) $x542) $x328) $x154) $x494)))
 (let (($x777 (= true $x265)))
 (let (($x750 (not $x179)))
 (let (($x604 (=> $x750 $x777)))
 (let (($x561 (= $x604 true)))
 (let (($x545 (= $x561 true)))
 (let (($x835 (= $x545 true)))
 (let (($x729 (= $x750 true)))
 (let (($x885 (= $x729 true)))
 (let (($x280 (= $x885 true)))
 (let (($x620 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x379 (= $x620 true)))
 (let (($x455 (= $x379 true)))
 (let ((?x211 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x838 (= (_ bv0 32) ?x211)))
 (let ((?x412 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x946 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x412)))
 (let (($x699 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x919 (and $x699 $x946)))
 (let (($x937 (and $x919 $x838)))
 (let (($x721 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x657 (and $x721 $x937)))
 (let (($x802 (= $x657 true)))
 (let (($x492 (= $x802 true)))
 (let (($x271 (= $x492 true)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x990 (concat ?x76 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x985 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x448 (concat ?x69 (concat ?x985 ?x990))))
 (let ((?x59 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv1 32))) (select input.dst.llvm-mem ?x448))))
 (let ((?x757 (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x448 (_ bv2 32))) ?x59))))
 (let (($x173 (= input.spec-%var-l-1.2.1.2.0 ?x757)))
 (let (($x556 (and $x173 false)))
 (let (($x630 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x552 (=> $x630 $x556)))
 (let ((?x254 (ite (= (_ bv0 32) ?x448) (_ bv0 32) (_ bv1 32))))
 (let (($x189 (bvuge ?x254 (_ bv1 32))))
 (let (($x789 (= $x630 $x189)))
 (let (($x821 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x567 (=> $x821 $x920)))
 (let (($x190 (= ?x254 (_ bv0 32))))
 (let (($x292 (= $x821 $x190)))
 (let (($x761 (and $x292 $x567)))
 (let (($x771 (and $x761 $x789)))
 (let (($x116 (and $x771 $x552)))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x285 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x344)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x285)))
 (let (($x11 (= input.spec-%var-l-1.2.0 ?x44)))
 (let (($x485 (and $x11 $x116)))
 (let (($x480 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x562 (=> $x480 $x485)))
 (let ((?x799 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x174 (bvuge ?x799 (_ bv1 32))))
 (let (($x253 (= $x480 $x174)))
 (let (($x209 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x844 (=> $x209 $x920)))
 (let (($x371 (= ?x799 (_ bv0 32))))
 (let (($x846 (= $x209 $x371)))
 (let (($x360 (and $x846 $x844)))
 (let (($x212 (and $x360 $x253)))
 (let (($x302 (and $x212 $x562)))
 (let (($x725 (= $x302 true)))
 (let (($x573 (= $x725 true)))
 (let (($x453 (= $x573 true)))
 (let (($x514 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x757)))
 (let (($x198 (and $x514 false)))
 (let (($x680 (=> $x792 $x198)))
 (let (($x432 (= $x792 $x189)))
 (let (($x479 (= $x104 $x190)))
 (let (($x528 (and $x479 $x992)))
 (let (($x471 (and $x528 $x432)))
 (let (($x495 (and $x471 $x680)))
 (let (($x176 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x44)))
 (let (($x982 (and $x176 $x495)))
 (let (($x74 (=> $x824 $x982)))
 (let (($x312 (= $x824 $x174)))
 (let (($x484 (= $x989 $x371)))
 (let (($x747 (and $x484 $x246)))
 (let (($x650 (and $x747 $x312)))
 (let (($x239 (and $x650 $x74)))
 (let (($x288 (= $x239 true)))
 (let (($x431 (= $x288 true)))
 (let (($x658 (= $x431 true)))
 (let (($x135 (and $x658 $x453)))
 (let (($x335 (and $x135 $x271)))
 (let (($x226 (and $x335 $x455)))
 (let (($x560 (and $x226 $x280)))
 (let (($x196 (and $x560 $x835)))
 (let (($x746 (and $x196 $x389)))
 (let (($x225 (and $x746 $x95)))
 (let (($x57 (and $x225 $x251)))
 (let (($x541 (and $x57 $x408)))
 (let (($x7 (and $x824 $x541)))
 (let (($x376 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x18 (and $x376 $x7)))
 (let (($x914 (bvugt ?x451 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x451 (_ bv3 32))))
 (let (($x333 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x941 (=> (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x333 $x914)))))))
 (let (($x378 (=> (and $x750 (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x333 $x914)))))))
 (let (($x909 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x162 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x138)))
 (let (($x759 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x907 (_ bv1 32))) (or false (or false (and true (or $x162 $x909)))))))
 (let (($x172 (=> (and $x750 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x907 (_ bv1 32)))) (or false (or false (and true (or $x162 $x909)))))))
 (let (($x734 (and $x172 $x378)))
 (let (($x417 (and $x734 $x18)))
 (let (($x306 (=> $x417 $x537)))
 (not $x306)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffa)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000100)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x3a)
                                #x00000001
                                #x00)
                         #x00000000
                         #x00)
                  #xffffffff
                  #x00)))
(let ((a!2 (store (store (store (store a!1 #x00000107 #x00) #x00000106 #x00)
                         #x00000105
                         #x00)
                  #xfffffffe
                  #x00)))
  (store a!2 #x00000104 #x00))))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x3a3a3a3a)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x3a3a3a3a)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv163408 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv1 8)) (_ bv163408 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv270088 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv270088 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv270091 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x828 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x402 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x751 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x557 (concat (select input.dst.llvm-mem ?x751) (concat ?x402 (concat ?x249 ?x828)))))
 (let ((?x384 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x557)))
 (let ((?x755 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x332 (bvmul (_ bv4294967295 32) ?x755)))
 (let ((?x345 (bvneg ?x332)))
 (let (($x399 (= ?x345 ?x384)))
 (let (($x456 (= $x399 true)))
 (let ((?x749 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x801 (bvneg ?x749)))
 (let (($x264 (= ?x801 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x368 (= $x264 true)))
 (let (($x255 (= $x368 true)))
 (let ((?x851 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x313 (= (_ bv0 3) ?x851)))
 (let (($x507 (= $x313 true)))
 (let (($x842 (= $x507 true)))
 (let (($x317 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x317 true)))
 (let (($x806 (= $x73 true)))
 (let (($x373 (= $x806 true)))
 (let ((?x216 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x690 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x100))))
 (let ((?x947 (concat (select input.dst.llvm-mem (bvadd ?x690 (_ bv1 32))) (select input.dst.llvm-mem ?x690))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x690 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x690 (_ bv2 32))) ?x947))))
 (let (($x304 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x60)))
 (let (($x645 (and $x304 true)))
 (let (($x90 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x247 (=> $x90 $x645)))
 (let (($x848 (= $x90 (bvuge (ite (= (_ bv0 32) ?x690) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x658 (= false false)))
 (let (($x341 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x407 (=> $x341 $x658)))
 (let (($x121 (= $x341 (= (ite (= (_ bv0 32) ?x690) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x121 $x407)))
 (let (($x950 (and $x31 $x848)))
 (let (($x425 (and $x950 $x247)))
 (let (($x27 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x557)))
 (let (($x111 (and $x27 $x425)))
 (let (($x253 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x845 (=> $x253 $x111)))
 (let (($x652 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x400 (ite $x652 (_ bv0 32) (_ bv1 32))))
 (let (($x464 (= $x253 (bvuge ?x400 (_ bv1 32)))))
 (let (($x982 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x516 (=> $x982 $x658)))
 (let (($x327 (= $x982 (= ?x400 (_ bv0 32)))))
 (let (($x243 (and $x327 $x516)))
 (let (($x234 (and $x243 $x464)))
 (let (($x613 (and $x234 $x845)))
 (let (($x818 (= $x613 true)))
 (let (($x728 (= $x818 true)))
 (let (($x446 (= $x728 true)))
 (let (($x20 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x240 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x240) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x240))))
 (let (($x40 (and true $x86)))
 (let (($x294 (and $x86 $x40)))
 (let ((?x750 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x750 (_ bv1 32))) (select input.dst.llvm-mem ?x750))))
 (let ((?x737 (concat (select input.dst.llvm-mem (bvadd ?x750 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x750 (_ bv2 32))) ?x739))))
 (let (($x623 (= (bvand ?x737 (_ bv4294967288 32)) ?x737)))
 (let (($x816 (= (bvand ?x750 (_ bv4294967292 32)) ?x750)))
 (let (($x68 (and $x816 $x623)))
 (let (($x642 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x750 (bvsub ?x750 (_ bv4 32))) (bvult ?x750 (bvsub ?x750 (_ bv4 32))))))
 (let (($x812 (and (and (and (and (and $x40 $x642) $x816) $x68) $x294) $x20)))
 (let (($x14 (= true $x812)))
 (let (($x617 (not $x652)))
 (let (($x367 (=> $x617 $x14)))
 (let (($x347 (= $x367 true)))
 (let (($x423 (= $x347 true)))
 (let (($x140 (= $x423 true)))
 (let (($x656 (= $x617 true)))
 (let (($x895 (= $x656 true)))
 (let (($x163 (= $x895 true)))
 (let ((?x353 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x353)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x414 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x414 $x207)))
 (let (($x615 (and $x130 $x42)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x595 (and $x113 $x615)))
 (let (($x15 (= $x595 true)))
 (let (($x134 (= $x15 true)))
 (let (($x945 (= $x134 true)))
 (let ((?x388 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x597 (concat ?x388 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x660 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x809 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x502 (concat ?x809 (concat ?x660 ?x597))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x502 (_ bv1 32))) (select input.dst.llvm-mem ?x502))))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd ?x502 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x502 (_ bv2 32))) ?x185))))
 (let (($x48 (= input.spec-%var-l-1.2.1.2.0 ?x558)))
 (let (($x520 (and $x48 true)))
 (let (($x605 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x377 (=> $x605 $x520)))
 (let ((?x300 (ite (= (_ bv0 32) ?x502) (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x300 (_ bv1 32))))
 (let (($x515 (= $x605 $x25)))
 (let (($x291 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x741 (=> $x291 $x658)))
 (let (($x286 (= ?x300 (_ bv0 32))))
 (let (($x572 (= $x291 $x286)))
 (let (($x363 (and $x572 $x741)))
 (let (($x583 (and $x363 $x515)))
 (let (($x307 (and $x583 $x377)))
 (let ((?x560 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x988 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x560)))
 (let ((?x578 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x988)))
 (let (($x324 (= input.spec-%var-l-1.2.0 ?x578)))
 (let (($x850 (and $x324 $x307)))
 (let (($x590 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x817 (=> $x590 $x850)))
 (let ((?x239 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x239 (_ bv1 32))))
 (let (($x738 (= $x590 $x212)))
 (let (($x555 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x555 $x658)))
 (let (($x288 (= ?x239 (_ bv0 32))))
 (let (($x548 (= $x555 $x288)))
 (let (($x766 (and $x548 $x70)))
 (let (($x107 (and $x766 $x738)))
 (let (($x917 (and $x107 $x817)))
 (let (($x123 (= $x917 true)))
 (let (($x797 (= $x123 true)))
 (let (($x726 (= $x797 true)))
 (let (($x230 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x558)))
 (let (($x195 (and $x230 true)))
 (let (($x339 (=> $x90 $x195)))
 (let (($x506 (= $x90 $x25)))
 (let (($x915 (= $x341 $x286)))
 (let (($x145 (and $x915 $x407)))
 (let (($x504 (and $x145 $x506)))
 (let (($x244 (and $x504 $x339)))
 (let (($x712 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x578)))
 (let (($x22 (and $x712 $x244)))
 (let (($x644 (=> $x253 $x22)))
 (let (($x141 (= $x253 $x212)))
 (let (($x431 (= $x982 $x288)))
 (let (($x209 (and $x431 $x516)))
 (let (($x11 (and $x209 $x141)))
 (let (($x54 (and $x11 $x644)))
 (let (($x767 (= $x54 true)))
 (let (($x301 (= $x767 true)))
 (let (($x661 (= $x301 true)))
 (let (($x194 (and $x661 $x726)))
 (let (($x547 (and $x194 $x945)))
 (let (($x692 (and $x547 $x163)))
 (let (($x323 (and $x692 $x140)))
 (let (($x949 (and $x323 $x446)))
 (let (($x87 (and $x949 $x373)))
 (let (($x491 (and $x87 $x842)))
 (let (($x197 (and $x491 $x255)))
 (let (($x830 (and $x253 $x197)))
 (let (($x989 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x32 (and $x989 $x830)))
 (let (($x691 (bvugt ?x750 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x750 (_ bv3 32))))
 (let (($x711 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x376 (=> (bvule ?x750 (bvsub (bvadd ?x750 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x711 $x691)))))))
 (let (($x394 (=> (and $x617 (bvule ?x750 (bvsub (bvadd ?x750 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x711 $x691)))))))
 (let (($x911 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x513 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x751)))
 (let (($x167 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32))) (or false (or false (and true (or $x513 $x911)))))))
 (let (($x612 (=> (and $x617 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32)))) (or false (or false (and true (or $x513 $x911)))))))
 (let (($x469 (and $x612 $x394)))
 (let (($x397 (and $x469 $x32)))
 (let (($x326 (=> $x397 $x456)))
 (not $x326))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x828 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x249 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x402 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x751 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x557 (concat (select input.dst.llvm-mem ?x751) (concat ?x402 (concat ?x249 ?x828)))))
 (let ((?x384 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x557)))
 (let ((?x755 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x332 (bvmul (_ bv4294967295 32) ?x755)))
 (let ((?x345 (bvneg ?x332)))
 (let (($x399 (= ?x345 ?x384)))
 (let (($x456 (= $x399 true)))
 (let ((?x749 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x801 (bvneg ?x749)))
 (let (($x264 (= ?x801 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x368 (= $x264 true)))
 (let (($x255 (= $x368 true)))
 (let ((?x851 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x313 (= (_ bv0 3) ?x851)))
 (let (($x507 (= $x313 true)))
 (let (($x842 (= $x507 true)))
 (let (($x317 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x317 true)))
 (let (($x806 (= $x73 true)))
 (let (($x373 (= $x806 true)))
 (let ((?x216 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x690 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x100))))
 (let ((?x947 (concat (select input.dst.llvm-mem (bvadd ?x690 (_ bv1 32))) (select input.dst.llvm-mem ?x690))))
 (let ((?x60 (concat (select input.dst.llvm-mem (bvadd ?x690 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x690 (_ bv2 32))) ?x947))))
 (let (($x304 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x60)))
 (let (($x645 (and $x304 true)))
 (let (($x90 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x247 (=> $x90 $x645)))
 (let (($x848 (= $x90 (bvuge (ite (= (_ bv0 32) ?x690) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x658 (= false false)))
 (let (($x341 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x407 (=> $x341 $x658)))
 (let (($x121 (= $x341 (= (ite (= (_ bv0 32) ?x690) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x31 (and $x121 $x407)))
 (let (($x950 (and $x31 $x848)))
 (let (($x425 (and $x950 $x247)))
 (let (($x27 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x557)))
 (let (($x111 (and $x27 $x425)))
 (let (($x253 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x845 (=> $x253 $x111)))
 (let (($x652 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x400 (ite $x652 (_ bv0 32) (_ bv1 32))))
 (let (($x464 (= $x253 (bvuge ?x400 (_ bv1 32)))))
 (let (($x982 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x516 (=> $x982 $x658)))
 (let (($x327 (= $x982 (= ?x400 (_ bv0 32)))))
 (let (($x243 (and $x327 $x516)))
 (let (($x234 (and $x243 $x464)))
 (let (($x613 (and $x234 $x845)))
 (let (($x818 (= $x613 true)))
 (let (($x728 (= $x818 true)))
 (let (($x446 (= $x728 true)))
 (let (($x20 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x240 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x86 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x240) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x240))))
 (let (($x40 (and true $x86)))
 (let (($x294 (and $x86 $x40)))
 (let ((?x750 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x750 (_ bv1 32))) (select input.dst.llvm-mem ?x750))))
 (let ((?x737 (concat (select input.dst.llvm-mem (bvadd ?x750 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x750 (_ bv2 32))) ?x739))))
 (let (($x623 (= (bvand ?x737 (_ bv4294967288 32)) ?x737)))
 (let (($x816 (= (bvand ?x750 (_ bv4294967292 32)) ?x750)))
 (let (($x68 (and $x816 $x623)))
 (let (($x642 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x750 (bvsub ?x750 (_ bv4 32))) (bvult ?x750 (bvsub ?x750 (_ bv4 32))))))
 (let (($x812 (and (and (and (and (and $x40 $x642) $x816) $x68) $x294) $x20)))
 (let (($x14 (= true $x812)))
 (let (($x617 (not $x652)))
 (let (($x367 (=> $x617 $x14)))
 (let (($x347 (= $x367 true)))
 (let (($x423 (= $x347 true)))
 (let (($x140 (= $x423 true)))
 (let (($x656 (= $x617 true)))
 (let (($x895 (= $x656 true)))
 (let (($x163 (= $x895 true)))
 (let ((?x353 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x42 (= (_ bv0 32) ?x353)))
 (let ((?x150 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x150)))
 (let (($x414 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x130 (and $x414 $x207)))
 (let (($x615 (and $x130 $x42)))
 (let (($x113 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x595 (and $x113 $x615)))
 (let (($x15 (= $x595 true)))
 (let (($x134 (= $x15 true)))
 (let (($x945 (= $x134 true)))
 (let ((?x388 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x597 (concat ?x388 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x660 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x809 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x502 (concat ?x809 (concat ?x660 ?x597))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x502 (_ bv1 32))) (select input.dst.llvm-mem ?x502))))
 (let ((?x558 (concat (select input.dst.llvm-mem (bvadd ?x502 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x502 (_ bv2 32))) ?x185))))
 (let (($x48 (= input.spec-%var-l-1.2.1.2.0 ?x558)))
 (let (($x520 (and $x48 true)))
 (let (($x605 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x377 (=> $x605 $x520)))
 (let ((?x300 (ite (= (_ bv0 32) ?x502) (_ bv0 32) (_ bv1 32))))
 (let (($x25 (bvuge ?x300 (_ bv1 32))))
 (let (($x515 (= $x605 $x25)))
 (let (($x291 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x741 (=> $x291 $x658)))
 (let (($x286 (= ?x300 (_ bv0 32))))
 (let (($x572 (= $x291 $x286)))
 (let (($x363 (and $x572 $x741)))
 (let (($x583 (and $x363 $x515)))
 (let (($x307 (and $x583 $x377)))
 (let ((?x560 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x988 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x560)))
 (let ((?x578 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x988)))
 (let (($x324 (= input.spec-%var-l-1.2.0 ?x578)))
 (let (($x850 (and $x324 $x307)))
 (let (($x590 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x817 (=> $x590 $x850)))
 (let ((?x239 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x212 (bvuge ?x239 (_ bv1 32))))
 (let (($x738 (= $x590 $x212)))
 (let (($x555 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x70 (=> $x555 $x658)))
 (let (($x288 (= ?x239 (_ bv0 32))))
 (let (($x548 (= $x555 $x288)))
 (let (($x766 (and $x548 $x70)))
 (let (($x107 (and $x766 $x738)))
 (let (($x917 (and $x107 $x817)))
 (let (($x123 (= $x917 true)))
 (let (($x797 (= $x123 true)))
 (let (($x726 (= $x797 true)))
 (let (($x230 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x558)))
 (let (($x195 (and $x230 true)))
 (let (($x339 (=> $x90 $x195)))
 (let (($x506 (= $x90 $x25)))
 (let (($x915 (= $x341 $x286)))
 (let (($x145 (and $x915 $x407)))
 (let (($x504 (and $x145 $x506)))
 (let (($x244 (and $x504 $x339)))
 (let (($x712 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x578)))
 (let (($x22 (and $x712 $x244)))
 (let (($x644 (=> $x253 $x22)))
 (let (($x141 (= $x253 $x212)))
 (let (($x431 (= $x982 $x288)))
 (let (($x209 (and $x431 $x516)))
 (let (($x11 (and $x209 $x141)))
 (let (($x54 (and $x11 $x644)))
 (let (($x767 (= $x54 true)))
 (let (($x301 (= $x767 true)))
 (let (($x661 (= $x301 true)))
 (let (($x194 (and $x661 $x726)))
 (let (($x547 (and $x194 $x945)))
 (let (($x692 (and $x547 $x163)))
 (let (($x323 (and $x692 $x140)))
 (let (($x949 (and $x323 $x446)))
 (let (($x87 (and $x949 $x373)))
 (let (($x491 (and $x87 $x842)))
 (let (($x197 (and $x491 $x255)))
 (let (($x830 (and $x253 $x197)))
 (let (($x989 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x32 (and $x989 $x830)))
 (let (($x691 (bvugt ?x750 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x750 (_ bv3 32))))
 (let (($x711 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x376 (=> (bvule ?x750 (bvsub (bvadd ?x750 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x711 $x691)))))))
 (let (($x394 (=> (and $x617 (bvule ?x750 (bvsub (bvadd ?x750 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x711 $x691)))))))
 (let (($x911 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x513 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x751)))
 (let (($x167 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32))) (or false (or false (and true (or $x513 $x911)))))))
 (let (($x612 (=> (and $x617 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32)))) (or false (or false (and true (or $x513 $x911)))))))
 (let (($x469 (and $x612 $x394)))
 (let (($x397 (and $x469 $x32)))
 (let (($x326 (=> $x397 $x456)))
 (not $x326))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x659 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x657))))
 (let (($x571 (bvule ?x455 (_ bv4294967294 32))))
 (let (($x109 (= $x571 true)))
 (let (($x489 (= $x109 true)))
 (let ((?x199 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x205 (= (_ bv0 3) ?x199)))
 (let (($x77 (= $x205 true)))
 (let (($x293 (= $x77 true)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x983 (= $x23 true)))
 (let (($x622 (= $x983 true)))
 (let (($x574 (= $x622 true)))
 (let ((?x434 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem ?x434))))
 (let ((?x752 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv2 32))) ?x503))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x752 (_ bv1 32))) (select input.dst.llvm-mem ?x752))))
 (let ((?x684 (concat (select input.dst.llvm-mem (bvadd ?x752 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x752 (_ bv2 32))) ?x258))))
 (let (($x34 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x684)))
 (let (($x182 (and $x34 true)))
 (let (($x818 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x233 (=> $x818 $x182)))
 (let (($x166 (= $x818 (bvuge (ite (= (_ bv0 32) ?x752) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x661 (= false false)))
 (let (($x832 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x557 (=> $x832 $x661)))
 (let (($x614 (= $x832 (= (ite (= (_ bv0 32) ?x752) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x393 (and $x614 $x557)))
 (let (($x584 (and $x393 $x166)))
 (let (($x439 (and $x584 $x233)))
 (let ((?x719 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x783 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x807 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x476 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x785 (concat (select input.dst.llvm-mem ?x476) (concat ?x807 (concat ?x783 ?x719)))))
 (let (($x236 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x785)))
 (let (($x682 (and $x236 $x439)))
 (let (($x738 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x482 (=> $x738 $x682)))
 (let (($x652 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x722 (ite $x652 (_ bv0 32) (_ bv1 32))))
 (let (($x831 (= $x738 (bvuge ?x722 (_ bv1 32)))))
 (let (($x22 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x263 (=> $x22 $x661)))
 (let (($x78 (= $x22 (= ?x722 (_ bv0 32)))))
 (let (($x834 (and $x78 $x263)))
 (let (($x445 (and $x834 $x831)))
 (let (($x475 (and $x445 $x482)))
 (let (($x655 (= $x475 true)))
 (let (($x17 (= $x655 true)))
 (let (($x526 (= $x17 true)))
 (let (($x310 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x426 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x365 (and true $x426)))
 (let (($x269 (and $x426 $x365)))
 (let (($x906 (= (bvand ?x455 (_ bv4294967288 32)) ?x455)))
 (let (($x620 (= (bvand ?x659 (_ bv4294967292 32)) ?x659)))
 (let (($x840 (and $x620 $x906)))
 (let (($x577 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x659 (bvsub ?x659 (_ bv4 32))) (bvult ?x659 (bvsub ?x659 (_ bv4 32))))))
 (let (($x328 (and (and (and (and (and $x365 $x577) $x620) $x840) $x269) $x310)))
 (let (($x392 (= true $x328)))
 (let (($x617 (not $x652)))
 (let (($x265 (=> $x617 $x392)))
 (let (($x648 (= $x265 true)))
 (let (($x847 (= $x648 true)))
 (let (($x810 (= $x847 true)))
 (let (($x529 (= $x617 true)))
 (let (($x777 (= $x529 true)))
 (let (($x604 (= $x777 true)))
 (let ((?x789 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x761 (= (_ bv0 32) ?x789)))
 (let ((?x912 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x912)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x630 (and $x116 $x173)))
 (let (($x771 (and $x630 $x761)))
 (let (($x552 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x556 (and $x552 $x771)))
 (let (($x485 (= $x556 true)))
 (let (($x562 (= $x485 true)))
 (let (($x302 (= $x562 true)))
 (let ((?x721 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x699 (bvneg ?x721)))
 (let (($x135 (= ?x699 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x573 (= $x135 true)))
 (let (($x651 (= $x573 true)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x521 (concat ?x142 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x518 (concat ?x346 (concat ?x607 ?x521))))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv1 32))) (select input.dst.llvm-mem ?x518))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv2 32))) ?x720))))
 (let (($x360 (= input.spec-%var-l-1.2.1.2.0 ?x295)))
 (let (($x480 (and $x360 true)))
 (let (($x528 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x672 (=> $x528 $x480)))
 (let ((?x31 (ite (= (_ bv0 32) ?x518) (_ bv0 32) (_ bv1 32))))
 (let (($x446 (bvuge ?x31 (_ bv1 32))))
 (let (($x448 (= $x528 $x446)))
 (let (($x479 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x792 (=> $x479 $x661)))
 (let (($x533 (= ?x31 (_ bv0 32))))
 (let (($x175 (= $x479 $x533)))
 (let (($x992 (and $x175 $x792)))
 (let (($x190 (and $x992 $x448)))
 (let (($x846 (and $x190 $x672)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x86)))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x391)))
 (let (($x600 (= input.spec-%var-l-1.2.0 ?x642)))
 (let (($x198 (and $x600 $x846)))
 (let (($x990 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x680 (=> $x990 $x198)))
 (let ((?x54 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x54 (_ bv1 32))))
 (let (($x671 (= $x990 $x107)))
 (let (($x104 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (=> $x104 $x661)))
 (let (($x767 (= ?x54 (_ bv0 32))))
 (let (($x176 (= $x104 $x767)))
 (let (($x679 (and $x176 $x296)))
 (let (($x471 (and $x679 $x671)))
 (let (($x757 (and $x471 $x680)))
 (let (($x554 (= $x757 true)))
 (let (($x844 (= $x554 true)))
 (let (($x567 (= $x844 true)))
 (let (($x370 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x295)))
 (let (($x285 (and $x370 true)))
 (let (($x62 (=> $x818 $x285)))
 (let (($x845 (= $x818 $x446)))
 (let (($x110 (= $x832 $x533)))
 (let (($x601 (and $x110 $x557)))
 (let (($x613 (and $x601 $x845)))
 (let (($x748 (and $x613 $x62)))
 (let (($x235 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x642)))
 (let (($x798 (and $x235 $x748)))
 (let (($x991 (=> $x738 $x798)))
 (let (($x795 (= $x738 $x107)))
 (let (($x301 (= $x22 $x767)))
 (let (($x555 (and $x301 $x263)))
 (let (($x324 (and $x555 $x795)))
 (let (($x292 (and $x324 $x991)))
 (let (($x136 (= $x292 true)))
 (let (($x593 (= $x136 true)))
 (let (($x44 (= $x593 true)))
 (let (($x725 (and $x44 $x567)))
 (let (($x412 (and $x725 $x651)))
 (let (($x9 (and $x412 $x302)))
 (let (($x561 (and $x9 $x604)))
 (let (($x79 (and $x561 $x810)))
 (let (($x723 (and $x79 $x526)))
 (let (($x149 (and $x723 $x574)))
 (let (($x550 (and $x149 $x293)))
 (let (($x438 (and $x738 $x550)))
 (let (($x982 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x442 (and $x982 $x438)))
 (let (($x378 (bvugt ?x659 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x659 (_ bv3 32))))
 (let (($x941 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x989 (=> (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x941 $x378)))))))
 (let (($x155 (=> (and $x617 (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x941 $x378)))))))
 (let (($x172 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x759 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x476)))
 (let (($x914 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x434 (_ bv1 32))) (or false (or false (and true (or $x759 $x172)))))))
 (let (($x162 (=> (and $x617 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x434 (_ bv1 32)))) (or false (or false (and true (or $x759 $x172)))))))
 (let (($x316 (and $x162 $x155)))
 (let (($x419 (and $x316 $x442)))
 (let (($x268 (=> $x419 $x489)))
 (not $x268)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x659 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x657 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv1 32))) (select input.dst.llvm-mem ?x659))))
 (let ((?x455 (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x659 (_ bv2 32))) ?x657))))
 (let (($x571 (bvule ?x455 (_ bv4294967294 32))))
 (let (($x109 (= $x571 true)))
 (let (($x489 (= $x109 true)))
 (let ((?x199 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x205 (= (_ bv0 3) ?x199)))
 (let (($x77 (= $x205 true)))
 (let (($x293 (= $x77 true)))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x983 (= $x23 true)))
 (let (($x622 (= $x983 true)))
 (let (($x574 (= $x622 true)))
 (let ((?x434 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv1 32))) (select input.dst.llvm-mem ?x434))))
 (let ((?x752 (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x434 (_ bv2 32))) ?x503))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x752 (_ bv1 32))) (select input.dst.llvm-mem ?x752))))
 (let ((?x684 (concat (select input.dst.llvm-mem (bvadd ?x752 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x752 (_ bv2 32))) ?x258))))
 (let (($x34 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x684)))
 (let (($x182 (and $x34 true)))
 (let (($x818 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x233 (=> $x818 $x182)))
 (let (($x166 (= $x818 (bvuge (ite (= (_ bv0 32) ?x752) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x661 (= false false)))
 (let (($x832 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x557 (=> $x832 $x661)))
 (let (($x614 (= $x832 (= (ite (= (_ bv0 32) ?x752) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x393 (and $x614 $x557)))
 (let (($x584 (and $x393 $x166)))
 (let (($x439 (and $x584 $x233)))
 (let ((?x719 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x783 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x807 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x476 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x785 (concat (select input.dst.llvm-mem ?x476) (concat ?x807 (concat ?x783 ?x719)))))
 (let (($x236 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x785)))
 (let (($x682 (and $x236 $x439)))
 (let (($x738 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x482 (=> $x738 $x682)))
 (let (($x652 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x722 (ite $x652 (_ bv0 32) (_ bv1 32))))
 (let (($x831 (= $x738 (bvuge ?x722 (_ bv1 32)))))
 (let (($x22 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x263 (=> $x22 $x661)))
 (let (($x78 (= $x22 (= ?x722 (_ bv0 32)))))
 (let (($x834 (and $x78 $x263)))
 (let (($x445 (and $x834 $x831)))
 (let (($x475 (and $x445 $x482)))
 (let (($x655 (= $x475 true)))
 (let (($x17 (= $x655 true)))
 (let (($x526 (= $x17 true)))
 (let (($x310 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x169 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x426 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x169))))
 (let (($x365 (and true $x426)))
 (let (($x269 (and $x426 $x365)))
 (let (($x906 (= (bvand ?x455 (_ bv4294967288 32)) ?x455)))
 (let (($x620 (= (bvand ?x659 (_ bv4294967292 32)) ?x659)))
 (let (($x840 (and $x620 $x906)))
 (let (($x577 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x659 (bvsub ?x659 (_ bv4 32))) (bvult ?x659 (bvsub ?x659 (_ bv4 32))))))
 (let (($x328 (and (and (and (and (and $x365 $x577) $x620) $x840) $x269) $x310)))
 (let (($x392 (= true $x328)))
 (let (($x617 (not $x652)))
 (let (($x265 (=> $x617 $x392)))
 (let (($x648 (= $x265 true)))
 (let (($x847 (= $x648 true)))
 (let (($x810 (= $x847 true)))
 (let (($x529 (= $x617 true)))
 (let (($x777 (= $x529 true)))
 (let (($x604 (= $x777 true)))
 (let ((?x789 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x761 (= (_ bv0 32) ?x789)))
 (let ((?x912 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x912)))
 (let (($x116 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x630 (and $x116 $x173)))
 (let (($x771 (and $x630 $x761)))
 (let (($x552 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x556 (and $x552 $x771)))
 (let (($x485 (= $x556 true)))
 (let (($x562 (= $x485 true)))
 (let (($x302 (= $x562 true)))
 (let ((?x721 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x699 (bvneg ?x721)))
 (let (($x135 (= ?x699 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x573 (= $x135 true)))
 (let (($x651 (= $x573 true)))
 (let ((?x142 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x521 (concat ?x142 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x607 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x518 (concat ?x346 (concat ?x607 ?x521))))
 (let ((?x720 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv1 32))) (select input.dst.llvm-mem ?x518))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x518 (_ bv2 32))) ?x720))))
 (let (($x360 (= input.spec-%var-l-1.2.1.2.0 ?x295)))
 (let (($x480 (and $x360 true)))
 (let (($x528 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x672 (=> $x528 $x480)))
 (let ((?x31 (ite (= (_ bv0 32) ?x518) (_ bv0 32) (_ bv1 32))))
 (let (($x446 (bvuge ?x31 (_ bv1 32))))
 (let (($x448 (= $x528 $x446)))
 (let (($x479 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x792 (=> $x479 $x661)))
 (let (($x533 (= ?x31 (_ bv0 32))))
 (let (($x175 (= $x479 $x533)))
 (let (($x992 (and $x175 $x792)))
 (let (($x190 (and $x992 $x448)))
 (let (($x846 (and $x190 $x672)))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x391 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x86)))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x391)))
 (let (($x600 (= input.spec-%var-l-1.2.0 ?x642)))
 (let (($x198 (and $x600 $x846)))
 (let (($x990 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x680 (=> $x990 $x198)))
 (let ((?x54 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x107 (bvuge ?x54 (_ bv1 32))))
 (let (($x671 (= $x990 $x107)))
 (let (($x104 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x296 (=> $x104 $x661)))
 (let (($x767 (= ?x54 (_ bv0 32))))
 (let (($x176 (= $x104 $x767)))
 (let (($x679 (and $x176 $x296)))
 (let (($x471 (and $x679 $x671)))
 (let (($x757 (and $x471 $x680)))
 (let (($x554 (= $x757 true)))
 (let (($x844 (= $x554 true)))
 (let (($x567 (= $x844 true)))
 (let (($x370 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x295)))
 (let (($x285 (and $x370 true)))
 (let (($x62 (=> $x818 $x285)))
 (let (($x845 (= $x818 $x446)))
 (let (($x110 (= $x832 $x533)))
 (let (($x601 (and $x110 $x557)))
 (let (($x613 (and $x601 $x845)))
 (let (($x748 (and $x613 $x62)))
 (let (($x235 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x642)))
 (let (($x798 (and $x235 $x748)))
 (let (($x991 (=> $x738 $x798)))
 (let (($x795 (= $x738 $x107)))
 (let (($x301 (= $x22 $x767)))
 (let (($x555 (and $x301 $x263)))
 (let (($x324 (and $x555 $x795)))
 (let (($x292 (and $x324 $x991)))
 (let (($x136 (= $x292 true)))
 (let (($x593 (= $x136 true)))
 (let (($x44 (= $x593 true)))
 (let (($x725 (and $x44 $x567)))
 (let (($x412 (and $x725 $x651)))
 (let (($x9 (and $x412 $x302)))
 (let (($x561 (and $x9 $x604)))
 (let (($x79 (and $x561 $x810)))
 (let (($x723 (and $x79 $x526)))
 (let (($x149 (and $x723 $x574)))
 (let (($x550 (and $x149 $x293)))
 (let (($x438 (and $x738 $x550)))
 (let (($x982 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x442 (and $x982 $x438)))
 (let (($x378 (bvugt ?x659 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x659 (_ bv3 32))))
 (let (($x941 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x989 (=> (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x941 $x378)))))))
 (let (($x155 (=> (and $x617 (bvule ?x659 (bvsub (bvadd ?x659 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x941 $x378)))))))
 (let (($x172 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x759 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x476)))
 (let (($x914 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x434 (_ bv1 32))) (or false (or false (and true (or $x759 $x172)))))))
 (let (($x162 (=> (and $x617 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x434 (_ bv1 32)))) (or false (or false (and true (or $x759 $x172)))))))
 (let (($x316 (and $x162 $x155)))
 (let (($x419 (and $x316 $x442)))
 (let (($x268 (=> $x419 $x489)))
 (not $x268)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x371 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x907 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv1 32))) (select input.dst.llvm-mem ?x371))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv2 32))) ?x907))))
 (let ((?x739 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x444 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x837 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x799 (concat ?x837 (concat ?x299 (concat ?x444 ?x739)))))
 (let ((?x332 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x451 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv1 32))) (select input.dst.llvm-mem ?x451))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv2 32))) ?x613))))
 (let (($x460 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x336 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let (($x102 (= $x460 true)))
 (let (($x308 (= $x102 true)))
 (let ((?x512 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x354 (= (_ bv0 3) ?x512)))
 (let (($x101 (= $x354 true)))
 (let (($x274 (= $x101 true)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x389 (concat ?x71 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x477 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x768 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x498 (concat ?x768 (concat ?x477 ?x389))))
 (let ((?x662 (bvadd ?x498 (_ bv4 32))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x662 (_ bv1 32))) (select input.dst.llvm-mem ?x662))))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd ?x662 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x662 (_ bv2 32))) ?x165))))
 (let (($x309 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x676 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv1 32))) (select input.dst.llvm-mem ?x498))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv2 32))) ?x28))))
 (let (($x115 (= input.spec-%var-l-1.2.1.2.0 ?x433)))
 (let (($x21 (and $x115 $x309)))
 (let (($x357 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x19 (=> $x357 $x21)))
 (let ((?x177 (ite (= (_ bv0 32) ?x498) (_ bv0 32) (_ bv1 32))))
 (let (($x667 (bvuge ?x177 (_ bv1 32))))
 (let (($x117 (= $x357 $x667)))
 (let (($x196 (= false false)))
 (let (($x674 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (=> $x674 $x196)))
 (let (($x382 (= ?x177 (_ bv0 32))))
 (let (($x151 (= $x674 $x382)))
 (let (($x565 (and $x151 $x343)))
 (let (($x490 (and $x565 $x117)))
 (let (($x26 (and $x490 $x19)))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x744 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x441)))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x744)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x689)))
 (let (($x563 (and $x188 $x26)))
 (let (($x704 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x406 (=> $x704 $x563)))
 (let ((?x986 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x610 (bvuge ?x986 (_ bv1 32))))
 (let (($x641 (= $x704 $x610)))
 (let (($x61 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x338 (=> $x61 $x196)))
 (let (($x264 (= ?x986 (_ bv0 32))))
 (let (($x409 (= $x61 $x264)))
 (let (($x325 (and $x409 $x338)))
 (let (($x350 (and $x325 $x641)))
 (let (($x511 (and $x350 $x406)))
 (let (($x549 (= $x511 true)))
 (let (($x437 (= $x549 true)))
 (let (($x200 (= $x437 true)))
 (let (($x129 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x676 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let (($x536 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x433)))
 (let (($x30 (and $x536 $x129)))
 (let (($x226 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x80 (=> $x226 $x30)))
 (let (($x609 (= $x226 $x667)))
 (let (($x109 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x419 (=> $x109 $x196)))
 (let (($x152 (= $x109 $x382)))
 (let (($x81 (and $x152 $x419)))
 (let (($x105 (and $x81 $x609)))
 (let (($x639 (and $x105 $x80)))
 (let (($x616 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x689)))
 (let (($x474 (and $x616 $x639)))
 (let (($x620 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x602 (=> $x620 $x474)))
 (let (($x851 (= $x620 $x610)))
 (let (($x132 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x835 (=> $x132 $x196)))
 (let (($x801 (= $x132 $x264)))
 (let (($x368 (and $x801 $x835)))
 (let (($x806 (and $x368 $x851)))
 (let (($x635 (and $x806 $x602)))
 (let (($x649 (= $x635 true)))
 (let (($x124 (= $x649 true)))
 (let (($x351 (= $x124 true)))
 (let (($x724 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x724 true)))
 (let (($x347 (= $x208 true)))
 (let (($x14 (= $x347 true)))
 (let ((?x216 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x266))))
 (let ((?x159 (bvadd ?x141 (_ bv4 32))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x920 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x399))))
 (let (($x486 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x920 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x307))))
 (let (($x194 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x583)))
 (let (($x243 (and $x194 $x486)))
 (let (($x234 (=> $x226 $x243)))
 (let (($x534 (= $x226 (bvuge (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x442 (= $x109 (= (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x489 (and $x442 $x419)))
 (let (($x596 (and $x489 $x534)))
 (let (($x402 (and $x596 $x234)))
 (let ((?x236 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x608 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x709 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem ?x709) (concat ?x483 (concat ?x608 ?x236)))))
 (let (($x827 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x503)))
 (let (($x828 (and $x827 $x402)))
 (let (($x42 (=> $x620 $x828)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x426 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (= $x620 (bvuge ?x426 (_ bv1 32)))))
 (let (($x277 (= $x132 (= ?x426 (_ bv0 32)))))
 (let (($x320 (and $x277 $x835)))
 (let (($x802 (and $x320 $x318)))
 (let (($x5 (and $x802 $x42)))
 (let (($x510 (= $x5 true)))
 (let (($x35 (= $x510 true)))
 (let (($x423 (= $x35 true)))
 (let (($x285 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x346 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346))))
 (let (($x276 (and true $x142)))
 (let (($x295 (and $x142 $x276)))
 (let (($x720 (= (bvand ?x336 (_ bv4294967288 32)) ?x336)))
 (let (($x557 (= (bvand ?x451 (_ bv4294967292 32)) ?x451)))
 (let (($x650 (and $x557 $x720)))
 (let (($x31 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x451 (bvsub ?x451 (_ bv4 32))) (bvult ?x451 (bvsub ?x451 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x276 $x31) $x557) $x650) $x295) $x285)))
 (let (($x136 (= true $x292)))
 (let (($x652 (not $x731)))
 (let (($x593 (=> $x652 $x136)))
 (let (($x44 (= $x593 true)))
 (let (($x527 (= $x44 true)))
 (let (($x104 (= $x527 true)))
 (let (($x27 (= $x652 true)))
 (let (($x832 (= $x27 true)))
 (let (($x242 (= $x832 true)))
 (let ((?x913 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x756 (= (_ bv0 32) ?x913)))
 (let ((?x820 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x421 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x820)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x415 $x421)))
 (let (($x683 (and $x40 $x756)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x212 $x683)))
 (let (($x86 (= $x240 true)))
 (let (($x391 (= $x86 true)))
 (let (($x642 (= $x391 true)))
 (let ((?x263 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x555 (bvneg ?x263)))
 (let (($x107 (= ?x555 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x795 (= $x107 true)))
 (let (($x324 (= $x795 true)))
 (let (($x235 (and $x324 $x642)))
 (let (($x624 (and $x235 $x242)))
 (let (($x176 (and $x624 $x104)))
 (let (($x812 (and $x176 $x423)))
 (let (($x294 (and $x812 $x14)))
 (let (($x49 (and $x294 $x351)))
 (let (($x137 (and $x49 $x200)))
 (let (($x257 (and $x137 $x274)))
 (let (($x153 (and $x620 $x257)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x201 (and $x22 $x153)))
 (let (($x394 (bvugt ?x451 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x451 (_ bv3 32))))
 (let (($x376 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x982 (=> (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x376 $x394)))))))
 (let (($x618 (=> (and $x652 (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x376 $x394)))))))
 (let (($x612 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x709)))
 (let (($x691 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32))) (or false (or false (and true (or $x167 $x612)))))))
 (let (($x909 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32)))) (or false (or false (and true (or $x167 $x612)))))))
 (let (($x611 (and $x909 $x618)))
 (let (($x67 (and $x611 $x201)))
 (let (($x366 (=> $x67 $x308)))
 (not $x366)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x371 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x907 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv1 32))) (select input.dst.llvm-mem ?x371))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x371 (_ bv2 32))) ?x907))))
 (let ((?x739 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x444 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x299 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x837 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x799 (concat ?x837 (concat ?x299 (concat ?x444 ?x739)))))
 (let ((?x332 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x451 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv1 32))) (select input.dst.llvm-mem ?x451))))
 (let ((?x336 (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x451 (_ bv2 32))) ?x613))))
 (let (($x460 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x336 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let (($x102 (= $x460 true)))
 (let (($x308 (= $x102 true)))
 (let ((?x512 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x354 (= (_ bv0 3) ?x512)))
 (let (($x101 (= $x354 true)))
 (let (($x274 (= $x101 true)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x389 (concat ?x71 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x477 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x768 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x498 (concat ?x768 (concat ?x477 ?x389))))
 (let ((?x662 (bvadd ?x498 (_ bv4 32))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x662 (_ bv1 32))) (select input.dst.llvm-mem ?x662))))
 (let ((?x676 (concat (select input.dst.llvm-mem (bvadd ?x662 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x662 (_ bv2 32))) ?x165))))
 (let (($x309 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x676 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv1 32))) (select input.dst.llvm-mem ?x498))))
 (let ((?x433 (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x498 (_ bv2 32))) ?x28))))
 (let (($x115 (= input.spec-%var-l-1.2.1.2.0 ?x433)))
 (let (($x21 (and $x115 $x309)))
 (let (($x357 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x19 (=> $x357 $x21)))
 (let ((?x177 (ite (= (_ bv0 32) ?x498) (_ bv0 32) (_ bv1 32))))
 (let (($x667 (bvuge ?x177 (_ bv1 32))))
 (let (($x117 (= $x357 $x667)))
 (let (($x196 (= false false)))
 (let (($x674 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x343 (=> $x674 $x196)))
 (let (($x382 (= ?x177 (_ bv0 32))))
 (let (($x151 (= $x674 $x382)))
 (let (($x565 (and $x151 $x343)))
 (let (($x490 (and $x565 $x117)))
 (let (($x26 (and $x490 $x19)))
 (let ((?x441 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x744 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x441)))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x744)))
 (let (($x188 (= input.spec-%var-l-1.2.0 ?x689)))
 (let (($x563 (and $x188 $x26)))
 (let (($x704 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x406 (=> $x704 $x563)))
 (let ((?x986 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x610 (bvuge ?x986 (_ bv1 32))))
 (let (($x641 (= $x704 $x610)))
 (let (($x61 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x338 (=> $x61 $x196)))
 (let (($x264 (= ?x986 (_ bv0 32))))
 (let (($x409 (= $x61 $x264)))
 (let (($x325 (and $x409 $x338)))
 (let (($x350 (and $x325 $x641)))
 (let (($x511 (and $x350 $x406)))
 (let (($x549 (= $x511 true)))
 (let (($x437 (= $x549 true)))
 (let (($x200 (= $x437 true)))
 (let (($x129 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x676 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let (($x536 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x433)))
 (let (($x30 (and $x536 $x129)))
 (let (($x226 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x80 (=> $x226 $x30)))
 (let (($x609 (= $x226 $x667)))
 (let (($x109 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x419 (=> $x109 $x196)))
 (let (($x152 (= $x109 $x382)))
 (let (($x81 (and $x152 $x419)))
 (let (($x105 (and $x81 $x609)))
 (let (($x639 (and $x105 $x80)))
 (let (($x616 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x689)))
 (let (($x474 (and $x616 $x639)))
 (let (($x620 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x602 (=> $x620 $x474)))
 (let (($x851 (= $x620 $x610)))
 (let (($x132 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x835 (=> $x132 $x196)))
 (let (($x801 (= $x132 $x264)))
 (let (($x368 (and $x801 $x835)))
 (let (($x806 (and $x368 $x851)))
 (let (($x635 (and $x806 $x602)))
 (let (($x649 (= $x635 true)))
 (let (($x124 (= $x649 true)))
 (let (($x351 (= $x124 true)))
 (let (($x724 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x208 (= $x724 true)))
 (let (($x347 (= $x208 true)))
 (let (($x14 (= $x347 true)))
 (let ((?x216 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x141 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x266))))
 (let ((?x159 (bvadd ?x141 (_ bv4 32))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem ?x159))))
 (let ((?x920 (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x159 (_ bv2 32))) ?x399))))
 (let (($x486 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x920 ?x332 false ?x799 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x386)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x583 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x307))))
 (let (($x194 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x583)))
 (let (($x243 (and $x194 $x486)))
 (let (($x234 (=> $x226 $x243)))
 (let (($x534 (= $x226 (bvuge (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x442 (= $x109 (= (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x489 (and $x442 $x419)))
 (let (($x596 (and $x489 $x534)))
 (let (($x402 (and $x596 $x234)))
 (let ((?x236 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x608 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x483 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x709 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x503 (concat (select input.dst.llvm-mem ?x709) (concat ?x483 (concat ?x608 ?x236)))))
 (let (($x827 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x503)))
 (let (($x828 (and $x827 $x402)))
 (let (($x42 (=> $x620 $x828)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x426 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x318 (= $x620 (bvuge ?x426 (_ bv1 32)))))
 (let (($x277 (= $x132 (= ?x426 (_ bv0 32)))))
 (let (($x320 (and $x277 $x835)))
 (let (($x802 (and $x320 $x318)))
 (let (($x5 (and $x802 $x42)))
 (let (($x510 (= $x5 true)))
 (let (($x35 (= $x510 true)))
 (let (($x423 (= $x35 true)))
 (let (($x285 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x346 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x142 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x346))))
 (let (($x276 (and true $x142)))
 (let (($x295 (and $x142 $x276)))
 (let (($x720 (= (bvand ?x336 (_ bv4294967288 32)) ?x336)))
 (let (($x557 (= (bvand ?x451 (_ bv4294967292 32)) ?x451)))
 (let (($x650 (and $x557 $x720)))
 (let (($x31 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x451 (bvsub ?x451 (_ bv4 32))) (bvult ?x451 (bvsub ?x451 (_ bv4 32))))))
 (let (($x292 (and (and (and (and (and $x276 $x31) $x557) $x650) $x295) $x285)))
 (let (($x136 (= true $x292)))
 (let (($x652 (not $x731)))
 (let (($x593 (=> $x652 $x136)))
 (let (($x44 (= $x593 true)))
 (let (($x527 (= $x44 true)))
 (let (($x104 (= $x527 true)))
 (let (($x27 (= $x652 true)))
 (let (($x832 (= $x27 true)))
 (let (($x242 (= $x832 true)))
 (let ((?x913 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x756 (= (_ bv0 32) ?x913)))
 (let ((?x820 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x421 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x820)))
 (let (($x415 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x415 $x421)))
 (let (($x683 (and $x40 $x756)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x240 (and $x212 $x683)))
 (let (($x86 (= $x240 true)))
 (let (($x391 (= $x86 true)))
 (let (($x642 (= $x391 true)))
 (let ((?x263 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x555 (bvneg ?x263)))
 (let (($x107 (= ?x555 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x795 (= $x107 true)))
 (let (($x324 (= $x795 true)))
 (let (($x235 (and $x324 $x642)))
 (let (($x624 (and $x235 $x242)))
 (let (($x176 (and $x624 $x104)))
 (let (($x812 (and $x176 $x423)))
 (let (($x294 (and $x812 $x14)))
 (let (($x49 (and $x294 $x351)))
 (let (($x137 (and $x49 $x200)))
 (let (($x257 (and $x137 $x274)))
 (let (($x153 (and $x620 $x257)))
 (let (($x22 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x201 (and $x22 $x153)))
 (let (($x394 (bvugt ?x451 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x451 (_ bv3 32))))
 (let (($x376 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x982 (=> (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x376 $x394)))))))
 (let (($x618 (=> (and $x652 (bvule ?x451 (bvsub (bvadd ?x451 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x376 $x394)))))))
 (let (($x612 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x709)))
 (let (($x691 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32))) (or false (or false (and true (or $x167 $x612)))))))
 (let (($x909 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x216 (_ bv1 32)))) (or false (or false (and true (or $x167 $x612)))))))
 (let (($x611 (and $x909 $x618)))
 (let (($x67 (and $x611 $x201)))
 (let (($x366 (=> $x67 $x308)))
 (not $x366)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_20)
(= input.dst.llvm-mem @fun_37)
(function @fun_20
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_20 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_11434 (_ BitVec 32)) (BOUND_VARIABLE_11435 (_ BitVec 32)) (BOUND_VARIABLE_11436 (_ BitVec 32)) (BOUND_VARIABLE_11437 Bool) (BOUND_VARIABLE_11438 (_ BitVec 32)) (BOUND_VARIABLE_11439 (_ BitVec 32)) (BOUND_VARIABLE_11440 (_ BitVec 32)) (BOUND_VARIABLE_11441 (_ BitVec 32)) (BOUND_VARIABLE_11442 (_ BitVec 32)) (BOUND_VARIABLE_11443 (_ BitVec 32)) (BOUND_VARIABLE_11444 Bool) (BOUND_VARIABLE_11445 (_ BitVec 32)) (BOUND_VARIABLE_11446 (_ BitVec 32)) (BOUND_VARIABLE_11447 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv16177856 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv33747208 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv33747208 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv33747211 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x440 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv1 32))) (select input.dst.llvm-mem ?x440))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv2 32))) ?x388))))
 (let ((?x804 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x632 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x711 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem ?x711))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv2 32))) ?x613))))
 (let (($x218 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x650 (concat ?x341 (concat ?x311 (concat ?x632 ?x804))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x331 ?x106 false)))
 (let (($x309 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x917 (=> $x309 $x218)))
 (let (($x506 (= $x309 (bvuge (ite (= (_ bv0 32) ?x650) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x428 (= false false)))
 (let (($x638 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x424 (=> $x638 $x428)))
 (let (($x405 (= $x638 (= (ite (= (_ bv0 32) ?x650) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x300 (and $x405 $x424)))
 (let (($x91 (and $x300 $x506)))
 (let (($x330 (and $x91 $x917)))
 (let (($x520 (= $x330 true)))
 (let (($x988 (= $x520 true)))
 (let ((?x550 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x984 (= (_ bv0 3) ?x550)))
 (let (($x719 (= $x984 true)))
 (let (($x814 (= $x719 true)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x122 (concat ?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x203 (concat ?x429 (concat ?x334 ?x122))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x552))))
 (let (($x622 (= input.spec-%var-l-1.2.1.2.0 ?x113)))
 (let (($x574 (and $x622 true)))
 (let (($x786 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x293 (=> $x786 $x574)))
 (let ((?x262 (ite (= (_ bv0 32) ?x203) (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x262 (_ bv1 32))))
 (let (($x224 (= $x786 $x119)))
 (let (($x906 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x269 (=> $x906 $x428)))
 (let (($x361 (= ?x262 (_ bv0 32))))
 (let (($x702 (= $x906 $x361)))
 (let (($x492 (and $x702 $x269)))
 (let (($x840 (and $x492 $x224)))
 (let (($x910 (and $x840 $x293)))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x715 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x816)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x715)))
 (let (($x648 (= input.spec-%var-l-1.2.0 ?x251)))
 (let (($x438 (and $x648 $x910)))
 (let (($x379 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x23 (=> $x379 $x438)))
 (let ((?x923 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x435 (bvuge ?x923 (_ bv1 32))))
 (let (($x328 (= $x379 $x435)))
 (let (($x545 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x577 (=> $x545 $x428)))
 (let (($x769 (= ?x923 (_ bv0 32))))
 (let (($x169 (= $x545 $x769)))
 (let (($x154 (and $x169 $x577)))
 (let (($x822 (and $x154 $x328)))
 (let (($x723 (and $x822 $x23)))
 (let (($x77 (= $x723 true)))
 (let (($x199 (= $x77 true)))
 (let (($x983 (= $x199 true)))
 (let (($x412 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x113)))
 (let (($x211 (and $x412 true)))
 (let (($x777 (=> $x309 $x211)))
 (let (($x493 (= $x309 $x119)))
 (let (($x221 (= $x638 $x361)))
 (let (($x532 (and $x221 $x424)))
 (let (($x553 (and $x532 $x493)))
 (let (($x116 (and $x553 $x777)))
 (let (($x7 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x251)))
 (let (($x789 (and $x7 $x116)))
 (let (($x544 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x556 (=> $x544 $x789)))
 (let (($x272 (= $x544 $x435)))
 (let (($x938 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x384 (=> $x938 $x428)))
 (let (($x849 (= $x938 $x769)))
 (let (($x284 (and $x849 $x384)))
 (let (($x10 (and $x284 $x272)))
 (let (($x771 (and $x10 $x556)))
 (let (($x302 (= $x771 true)))
 (let (($x912 (= $x302 true)))
 (let (($x135 (= $x912 true)))
 (let (($x15 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x319 (= $x15 true)))
 (let (($x432 (= $x319 true)))
 (let (($x160 (= $x432 true)))
 (let ((?x751 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv1 32))) (select input.dst.llvm-mem ?x751))))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv2 32))) ?x639))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x946 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x554))))
 (let (($x479 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x946)))
 (let (($x992 (and $x479 true)))
 (let (($x600 (=> $x309 $x992)))
 (let (($x115 (= $x309 (bvuge (ite (= (_ bv0 32) ?x351) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x118 (= $x638 (= (ite (= (_ bv0 32) ?x351) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x676 (and $x118 $x424)))
 (let (($x413 (and $x676 $x115)))
 (let (($x189 (and $x413 $x600)))
 (let ((?x264 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x368 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x750 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x939 (concat (select input.dst.llvm-mem ?x750) (concat ?x806 (concat ?x368 ?x264)))))
 (let (($x673 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x939)))
 (let (($x448 (and $x673 $x189)))
 (let (($x175 (=> $x544 $x448)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x344 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (= $x544 (bvuge ?x344 (_ bv1 32)))))
 (let (($x456 (= $x938 (= ?x344 (_ bv0 32)))))
 (let (($x326 (and $x456 $x384)))
 (let (($x837 (and $x326 $x89)))
 (let (($x480 (and $x837 $x175)))
 (let (($x792 (= $x480 true)))
 (let (($x525 (= $x792 true)))
 (let (($x190 (= $x525 true)))
 (let (($x136 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x690 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690))))
 (let (($x62 (and true $x31)))
 (let (($x285 (and $x31 $x62)))
 (let (($x991 (= (bvand ?x650 (_ bv4294967288 32)) ?x650)))
 (let (($x540 (= (bvand ?x711 (_ bv4294967292 32)) ?x711)))
 (let (($x370 (and $x540 $x991)))
 (let (($x601 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x711 (bvsub ?x711 (_ bv4 32))) (bvult ?x711 (bvsub ?x711 (_ bv4 32))))))
 (let (($x176 (and (and (and (and (and $x62 $x601) $x540) $x370) $x285) $x136)))
 (let (($x144 (= true $x176)))
 (let (($x652 (not $x731)))
 (let (($x132 (=> $x652 $x144)))
 (let (($x426 (= $x132 true)))
 (let (($x365 (= $x426 true)))
 (let (($x277 (= $x365 true)))
 (let (($x607 (= $x652 true)))
 (let (($x261 (= $x607 true)))
 (let (($x142 (= $x261 true)))
 (let ((?x642 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x642)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let (($x683 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x391 (and $x683 $x86)))
 (let (($x27 (and $x391 $x235)))
 (let (($x756 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x832 (and $x756 $x27)))
 (let (($x242 (= $x832 true)))
 (let (($x624 (= $x242 true)))
 (let (($x100 (= $x624 true)))
 (let ((?x519 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x212 (bvneg ?x519)))
 (let (($x820 (= ?x212 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x421 (= $x820 true)))
 (let (($x40 (= $x421 true)))
 (let (($x346 (and $x40 $x100)))
 (let (($x276 (and $x346 $x142)))
 (let (($x196 (and $x276 $x277)))
 (let (($x656 (and $x196 $x190)))
 (let (($x947 (and $x656 $x160)))
 (let (($x431 (and $x947 $x135)))
 (let (($x149 (and $x431 $x983)))
 (let (($x807 (and $x149 $x814)))
 (let (($x362 (and $x544 $x807)))
 (let (($x661 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x445 (and $x661 $x362)))
 (let (($x155 (bvugt ?x711 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x711 (_ bv3 32))))
 (let (($x989 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x22 (=> (bvule ?x711 (bvsub (bvadd ?x711 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x989 $x155)))))))
 (let (($x495 (=> (and $x652 (bvule ?x711 (bvsub (bvadd ?x711 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x989 $x155)))))))
 (let (($x162 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x914 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x750)))
 (let (($x378 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x751 (_ bv1 32))) (or false (or false (and true (or $x914 $x162)))))))
 (let (($x513 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x751 (_ bv1 32)))) (or false (or false (and true (or $x914 $x162)))))))
 (let (($x734 (and $x513 $x495)))
 (let (($x654 (and $x734 $x445)))
 (let (($x138 (=> $x654 $x988)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x106 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x440 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv1 32))) (select input.dst.llvm-mem ?x440))))
 (let ((?x331 (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x440 (_ bv2 32))) ?x388))))
 (let ((?x804 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x632 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x711 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv1 32))) (select input.dst.llvm-mem ?x711))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x711 (_ bv2 32))) ?x613))))
 (let (($x218 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x650 (concat ?x341 (concat ?x311 (concat ?x632 ?x804))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x331 ?x106 false)))
 (let (($x309 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x917 (=> $x309 $x218)))
 (let (($x506 (= $x309 (bvuge (ite (= (_ bv0 32) ?x650) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x428 (= false false)))
 (let (($x638 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x424 (=> $x638 $x428)))
 (let (($x405 (= $x638 (= (ite (= (_ bv0 32) ?x650) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x300 (and $x405 $x424)))
 (let (($x91 (and $x300 $x506)))
 (let (($x330 (and $x91 $x917)))
 (let (($x520 (= $x330 true)))
 (let (($x988 (= $x520 true)))
 (let ((?x550 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x984 (= (_ bv0 3) ?x550)))
 (let (($x719 (= $x984 true)))
 (let (($x814 (= $x719 true)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x122 (concat ?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x429 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x203 (concat ?x429 (concat ?x334 ?x122))))
 (let ((?x552 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem ?x203))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x203 (_ bv2 32))) ?x552))))
 (let (($x622 (= input.spec-%var-l-1.2.1.2.0 ?x113)))
 (let (($x574 (and $x622 true)))
 (let (($x786 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x293 (=> $x786 $x574)))
 (let ((?x262 (ite (= (_ bv0 32) ?x203) (_ bv0 32) (_ bv1 32))))
 (let (($x119 (bvuge ?x262 (_ bv1 32))))
 (let (($x224 (= $x786 $x119)))
 (let (($x906 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x269 (=> $x906 $x428)))
 (let (($x361 (= ?x262 (_ bv0 32))))
 (let (($x702 (= $x906 $x361)))
 (let (($x492 (and $x702 $x269)))
 (let (($x840 (and $x492 $x224)))
 (let (($x910 (and $x840 $x293)))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x715 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x816)))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x715)))
 (let (($x648 (= input.spec-%var-l-1.2.0 ?x251)))
 (let (($x438 (and $x648 $x910)))
 (let (($x379 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x23 (=> $x379 $x438)))
 (let ((?x923 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x435 (bvuge ?x923 (_ bv1 32))))
 (let (($x328 (= $x379 $x435)))
 (let (($x545 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x577 (=> $x545 $x428)))
 (let (($x769 (= ?x923 (_ bv0 32))))
 (let (($x169 (= $x545 $x769)))
 (let (($x154 (and $x169 $x577)))
 (let (($x822 (and $x154 $x328)))
 (let (($x723 (and $x822 $x23)))
 (let (($x77 (= $x723 true)))
 (let (($x199 (= $x77 true)))
 (let (($x983 (= $x199 true)))
 (let (($x412 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x113)))
 (let (($x211 (and $x412 true)))
 (let (($x777 (=> $x309 $x211)))
 (let (($x493 (= $x309 $x119)))
 (let (($x221 (= $x638 $x361)))
 (let (($x532 (and $x221 $x424)))
 (let (($x553 (and $x532 $x493)))
 (let (($x116 (and $x553 $x777)))
 (let (($x7 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x251)))
 (let (($x789 (and $x7 $x116)))
 (let (($x544 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x556 (=> $x544 $x789)))
 (let (($x272 (= $x544 $x435)))
 (let (($x938 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x384 (=> $x938 $x428)))
 (let (($x849 (= $x938 $x769)))
 (let (($x284 (and $x849 $x384)))
 (let (($x10 (and $x284 $x272)))
 (let (($x771 (and $x10 $x556)))
 (let (($x302 (= $x771 true)))
 (let (($x912 (= $x302 true)))
 (let (($x135 (= $x912 true)))
 (let (($x15 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x319 (= $x15 true)))
 (let (($x432 (= $x319 true)))
 (let (($x160 (= $x432 true)))
 (let ((?x751 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv1 32))) (select input.dst.llvm-mem ?x751))))
 (let ((?x351 (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x751 (_ bv2 32))) ?x639))))
 (let ((?x554 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x946 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x554))))
 (let (($x479 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x946)))
 (let (($x992 (and $x479 true)))
 (let (($x600 (=> $x309 $x992)))
 (let (($x115 (= $x309 (bvuge (ite (= (_ bv0 32) ?x351) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x118 (= $x638 (= (ite (= (_ bv0 32) ?x351) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x676 (and $x118 $x424)))
 (let (($x413 (and $x676 $x115)))
 (let (($x189 (and $x413 $x600)))
 (let ((?x264 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x368 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x806 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x750 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x939 (concat (select input.dst.llvm-mem ?x750) (concat ?x806 (concat ?x368 ?x264)))))
 (let (($x673 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x939)))
 (let (($x448 (and $x673 $x189)))
 (let (($x175 (=> $x544 $x448)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x344 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x89 (= $x544 (bvuge ?x344 (_ bv1 32)))))
 (let (($x456 (= $x938 (= ?x344 (_ bv0 32)))))
 (let (($x326 (and $x456 $x384)))
 (let (($x837 (and $x326 $x89)))
 (let (($x480 (and $x837 $x175)))
 (let (($x792 (= $x480 true)))
 (let (($x525 (= $x792 true)))
 (let (($x190 (= $x525 true)))
 (let (($x136 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x690 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x31 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690))))
 (let (($x62 (and true $x31)))
 (let (($x285 (and $x31 $x62)))
 (let (($x991 (= (bvand ?x650 (_ bv4294967288 32)) ?x650)))
 (let (($x540 (= (bvand ?x711 (_ bv4294967292 32)) ?x711)))
 (let (($x370 (and $x540 $x991)))
 (let (($x601 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x711 (bvsub ?x711 (_ bv4 32))) (bvult ?x711 (bvsub ?x711 (_ bv4 32))))))
 (let (($x176 (and (and (and (and (and $x62 $x601) $x540) $x370) $x285) $x136)))
 (let (($x144 (= true $x176)))
 (let (($x652 (not $x731)))
 (let (($x132 (=> $x652 $x144)))
 (let (($x426 (= $x132 true)))
 (let (($x365 (= $x426 true)))
 (let (($x277 (= $x365 true)))
 (let (($x607 (= $x652 true)))
 (let (($x261 (= $x607 true)))
 (let (($x142 (= $x261 true)))
 (let ((?x642 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x235 (= (_ bv0 32) ?x642)))
 (let ((?x240 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x240)))
 (let (($x683 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x391 (and $x683 $x86)))
 (let (($x27 (and $x391 $x235)))
 (let (($x756 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x832 (and $x756 $x27)))
 (let (($x242 (= $x832 true)))
 (let (($x624 (= $x242 true)))
 (let (($x100 (= $x624 true)))
 (let ((?x519 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x212 (bvneg ?x519)))
 (let (($x820 (= ?x212 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x421 (= $x820 true)))
 (let (($x40 (= $x421 true)))
 (let (($x346 (and $x40 $x100)))
 (let (($x276 (and $x346 $x142)))
 (let (($x196 (and $x276 $x277)))
 (let (($x656 (and $x196 $x190)))
 (let (($x947 (and $x656 $x160)))
 (let (($x431 (and $x947 $x135)))
 (let (($x149 (and $x431 $x983)))
 (let (($x807 (and $x149 $x814)))
 (let (($x362 (and $x544 $x807)))
 (let (($x661 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x445 (and $x661 $x362)))
 (let (($x155 (bvugt ?x711 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x711 (_ bv3 32))))
 (let (($x989 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x22 (=> (bvule ?x711 (bvsub (bvadd ?x711 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x989 $x155)))))))
 (let (($x495 (=> (and $x652 (bvule ?x711 (bvsub (bvadd ?x711 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x989 $x155)))))))
 (let (($x162 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x914 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x750)))
 (let (($x378 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x751 (_ bv1 32))) (or false (or false (and true (or $x914 $x162)))))))
 (let (($x513 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x751 (_ bv1 32)))) (or false (or false (and true (or $x914 $x162)))))))
 (let (($x734 (and $x513 $x495)))
 (let (($x654 (and $x734 $x445)))
 (let (($x138 (=> $x654 $x988)))
 (not $x138)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_23)
(= input.dst.llvm-mem @fun_40)
(function @fun_23
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_23 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_40
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_40 #b10000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_11830 (_ BitVec 32)) (BOUND_VARIABLE_11831 (_ BitVec 32)) (BOUND_VARIABLE_11832 (_ BitVec 32)) (BOUND_VARIABLE_11833 (_ BitVec 32)) (BOUND_VARIABLE_11834 (_ BitVec 32)) (BOUND_VARIABLE_11835 (_ BitVec 32)) (BOUND_VARIABLE_11836 Bool) (BOUND_VARIABLE_11837 (_ BitVec 32)) (BOUND_VARIABLE_11838 (_ BitVec 32)) (BOUND_VARIABLE_11839 (_ BitVec 32)) (BOUND_VARIABLE_11840 (_ BitVec 32)) (BOUND_VARIABLE_11841 (_ BitVec 32)) (BOUND_VARIABLE_11842 (_ BitVec 32)) (BOUND_VARIABLE_11843 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv5 32) (_ bv1 8)) (_ bv1091576460 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1091576456 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2571880528 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2571880528 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2571880531 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x564 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x564 (_ bv1 32))) (select input.dst.llvm-mem ?x564))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x564 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x564 (_ bv2 32))) ?x127))))
 (let ((?x735 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x621 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x794 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x669 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x180 (concat ?x669 (concat ?x794 (concat ?x621 ?x735)))))
 (let ((?x283 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x941 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x941 (_ bv1 32))) (select input.dst.llvm-mem ?x941))))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd ?x941 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x941 (_ bv2 32))) ?x613))))
 (let ((?x904 (bvadd ?x370 (_ bv4 32))))
 (let ((?x901 (concat (select input.dst.llvm-mem (bvadd ?x904 (_ bv1 32))) (select input.dst.llvm-mem ?x904))))
 (let ((?x924 (concat (select input.dst.llvm-mem (bvadd ?x904 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x904 (_ bv2 32))) ?x901))))
 (let (($x893 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x924 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let ((?x714 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x647 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x714))))
 (let (($x753 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x647)))
 (let (($x854 (and $x753 $x893)))
 (let (($x279 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x852 (=> $x279 $x854)))
 (let (($x522 (= $x279 (bvuge (ite (= (_ bv0 32) ?x370) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x595 (= false false)))
 (let (($x286 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x654 (=> $x286 $x595)))
 (let (($x449 (= $x286 (= (ite (= (_ bv0 32) ?x370) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x463 (and $x449 $x654)))
 (let (($x206 (and $x463 $x522)))
 (let (($x776 (and $x206 $x852)))
 (let (($x791 (= $x776 true)))
 (let (($x790 (= $x791 true)))
 (let ((?x578 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x843 (= (_ bv0 3) ?x578)))
 (let (($x559 (= $x843 true)))
 (let (($x403 (= $x559 true)))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x486 (concat ?x386 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x821 (concat ?x484 (concat ?x243 ?x486))))
 (let ((?x475 (bvadd ?x821 (_ bv4 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv1 32))) (select input.dst.llvm-mem ?x475))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv2 32))) ?x290))))
 (let (($x850 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x258 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x821 (_ bv1 32))) (select input.dst.llvm-mem ?x821))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x821 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x821 (_ bv2 32))) ?x273))))
 (let (($x230 (= input.spec-%var-l-1.2.1.2.0 ?x204)))
 (let (($x252 (and $x230 $x850)))
 (let (($x327 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x158 (=> $x327 $x252)))
 (let ((?x254 (ite (= (_ bv0 32) ?x821) (_ bv0 32) (_ bv1 32))))
 (let (($x576 (bvuge ?x254 (_ bv1 32))))
 (let (($x548 (= $x327 $x576)))
 (let (($x25 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x685 (=> $x25 $x595)))
 (let (($x112 (= ?x254 (_ bv0 32))))
 (let (($x684 (= $x25 $x112)))
 (let (($x915 (and $x684 $x685)))
 (let (($x323 (and $x915 $x548)))
 (let (($x249 (and $x323 $x158)))
 (let ((?x505 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x505)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x436)))
 (let (($x17 (= input.spec-%var-l-1.2.0 ?x96)))
 (let (($x839 (and $x17 $x249)))
 (let (($x516 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x400 (=> $x516 $x839)))
 (let ((?x55 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x919 (bvuge ?x55 (_ bv1 32))))
 (let (($x102 (= $x516 $x919)))
 (let (($x584 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x437 (=> $x584 $x595)))
 (let (($x688 (= ?x55 (_ bv0 32))))
 (let (($x549 (= $x584 $x688)))
 (let (($x101 (and $x549 $x437)))
 (let (($x354 (and $x101 $x102)))
 (let (($x267 (and $x354 $x400)))
 (let (($x291 (= $x267 true)))
 (let (($x461 (= $x291 true)))
 (let (($x210 (= $x461 true)))
 (let (($x233 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x258 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let (($x434 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x204)))
 (let (($x308 (and $x434 $x233)))
 (let (($x366 (=> $x279 $x308)))
 (let (($x536 (= $x279 $x576)))
 (let (($x444 (= $x286 $x112)))
 (let (($x907 (and $x444 $x654)))
 (let (($x662 (and $x907 $x536)))
 (let (($x215 (and $x662 $x366)))
 (let (($x131 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x96)))
 (let (($x460 (and $x131 $x215)))
 (let (($x373 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x67 (=> $x373 $x460)))
 (let (($x721 (= $x373 $x919)))
 (let (($x792 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x15 (=> $x792 $x595)))
 (let (($x535 (= $x792 $x688)))
 (let (($x51 (and $x535 $x15)))
 (let (($x356 (and $x51 $x721)))
 (let (($x200 (and $x356 $x67)))
 (let (($x182 (= $x200 true)))
 (let (($x808 (= $x182 true)))
 (let (($x831 (= $x808 true)))
 (let (($x348 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x313 (= $x348 true)))
 (let (($x942 (= $x313 true)))
 (let (($x491 (= $x942 true)))
 (let ((?x167 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x506 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x506))))
 (let ((?x566 (bvadd ?x185 (_ bv4 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x745 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x65))))
 (let (($x586 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x745 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x645 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x111))))
 (let (($x255 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x645)))
 (let (($x256 (and $x255 $x586)))
 (let (($x473 (=> $x279 $x256)))
 (let (($x92 (= $x279 (bvuge (ite (= (_ bv0 32) ?x185) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x445 (= $x286 (= (ite (= (_ bv0 32) ?x185) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x145 (and $x445 $x654)))
 (let (($x331 (and $x145 $x92)))
 (let (($x784 (and $x331 $x473)))
 (let ((?x651 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x552 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x412 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x659 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x116 (concat (select input.dst.llvm-mem ?x659) (concat ?x412 (concat ?x552 ?x651)))))
 (let (($x789 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x116)))
 (let (($x646 (and $x789 $x784)))
 (let (($x355 (=> $x373 $x646)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x525 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x769 (= $x373 (bvuge ?x525 (_ bv1 32)))))
 (let (($x656 (= $x792 (= ?x525 (_ bv0 32)))))
 (let (($x319 (and $x656 $x15)))
 (let (($x849 (and $x319 $x769)))
 (let (($x306 (and $x849 $x355)))
 (let (($x579 (= $x306 true)))
 (let (($x762 (= $x579 true)))
 (let (($x542 (= $x762 true)))
 (let (($x144 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x601 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110))))
 (let (($x593 (and true $x601)))
 (let (($x136 (and $x601 $x593)))
 (let (($x104 (= (bvand ?x370 (_ bv4294967288 32)) ?x370)))
 (let (($x336 (= (bvand ?x941 (_ bv4294967292 32)) ?x941)))
 (let (($x292 (and $x336 $x104)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x941 (bvsub ?x941 (_ bv4 32))) (bvult ?x941 (bvsub ?x941 (_ bv4 32))))))
 (let (($x196 (and (and (and (and (and $x593 $x99) $x336) $x292) $x136) $x144)))
 (let (($x159 (= true $x196)))
 (let (($x652 (not $x731)))
 (let (($x938 (=> $x652 $x159)))
 (let (($x344 (= $x938 true)))
 (let (($x345 (= $x344 true)))
 (let (($x456 (= $x345 true)))
 (let (($x518 (= $x652 true)))
 (let (($x121 (= $x518 true)))
 (let (($x31 (= $x121 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x346 (= (_ bv0 32) ?x100)))
 (let ((?x832 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x832)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x624 (and $x27 $x242)))
 (let (($x607 (and $x624 $x346)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (and $x235 $x607)))
 (let (($x142 (= $x261 true)))
 (let (($x276 (= $x142 true)))
 (let (($x521 (= $x276 true)))
 (let ((?x913 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x756 (bvneg ?x913)))
 (let (($x240 (= ?x756 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x86 (= $x240 true)))
 (let (($x391 (= $x86 true)))
 (let (($x690 (and $x391 $x521)))
 (let (($x62 (and $x690 $x31)))
 (let (($x428 (and $x62 $x456)))
 (let (($x87 (and $x428 $x542)))
 (let (($x314 (and $x87 $x491)))
 (let (($x82 (and $x314 $x831)))
 (let (($x729 (and $x82 $x210)))
 (let (($x817 (and $x729 $x403)))
 (let (($x123 (and $x373 $x817)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x207 (and $x324 $x123)))
 (let (($x618 (bvugt ?x941 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x941 (_ bv3 32))))
 (let (($x982 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x661 (=> (bvule ?x941 (bvsub (bvadd ?x941 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x982 $x618)))))))
 (let (($x244 (=> (and $x652 (bvule ?x941 (bvsub (bvadd ?x941 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x982 $x618)))))))
 (let (($x909 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x691 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x659)))
 (let (($x394 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x167 (_ bv1 32))) (or false (or false (and true (or $x691 $x909)))))))
 (let (($x709 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x167 (_ bv1 32)))) (or false (or false (and true (or $x691 $x909)))))))
 (let (($x469 (and $x709 $x244)))
 (let (($x558 (and $x469 $x207)))
 (let (($x872 (=> $x558 $x790)))
 (not $x872))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x564 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x564 (_ bv1 32))) (select input.dst.llvm-mem ?x564))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x564 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x564 (_ bv2 32))) ?x127))))
 (let ((?x735 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x621 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x794 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x669 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x180 (concat ?x669 (concat ?x794 (concat ?x621 ?x735)))))
 (let ((?x283 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x941 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x613 (concat (select input.dst.llvm-mem (bvadd ?x941 (_ bv1 32))) (select input.dst.llvm-mem ?x941))))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd ?x941 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x941 (_ bv2 32))) ?x613))))
 (let ((?x904 (bvadd ?x370 (_ bv4 32))))
 (let ((?x901 (concat (select input.dst.llvm-mem (bvadd ?x904 (_ bv1 32))) (select input.dst.llvm-mem ?x904))))
 (let ((?x924 (concat (select input.dst.llvm-mem (bvadd ?x904 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x904 (_ bv2 32))) ?x901))))
 (let (($x893 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x924 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let ((?x714 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv1 32))) (select input.dst.llvm-mem ?x370))))
 (let ((?x647 (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x370 (_ bv2 32))) ?x714))))
 (let (($x753 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x647)))
 (let (($x854 (and $x753 $x893)))
 (let (($x279 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x852 (=> $x279 $x854)))
 (let (($x522 (= $x279 (bvuge (ite (= (_ bv0 32) ?x370) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x595 (= false false)))
 (let (($x286 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x654 (=> $x286 $x595)))
 (let (($x449 (= $x286 (= (ite (= (_ bv0 32) ?x370) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x463 (and $x449 $x654)))
 (let (($x206 (and $x463 $x522)))
 (let (($x776 (and $x206 $x852)))
 (let (($x791 (= $x776 true)))
 (let (($x790 (= $x791 true)))
 (let ((?x578 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x843 (= (_ bv0 3) ?x578)))
 (let (($x559 (= $x843 true)))
 (let (($x403 (= $x559 true)))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x486 (concat ?x386 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x243 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x484 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x821 (concat ?x484 (concat ?x243 ?x486))))
 (let ((?x475 (bvadd ?x821 (_ bv4 32))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv1 32))) (select input.dst.llvm-mem ?x475))))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x475 (_ bv2 32))) ?x290))))
 (let (($x850 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x258 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x821 (_ bv1 32))) (select input.dst.llvm-mem ?x821))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x821 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x821 (_ bv2 32))) ?x273))))
 (let (($x230 (= input.spec-%var-l-1.2.1.2.0 ?x204)))
 (let (($x252 (and $x230 $x850)))
 (let (($x327 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x158 (=> $x327 $x252)))
 (let ((?x254 (ite (= (_ bv0 32) ?x821) (_ bv0 32) (_ bv1 32))))
 (let (($x576 (bvuge ?x254 (_ bv1 32))))
 (let (($x548 (= $x327 $x576)))
 (let (($x25 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x685 (=> $x25 $x595)))
 (let (($x112 (= ?x254 (_ bv0 32))))
 (let (($x684 (= $x25 $x112)))
 (let (($x915 (and $x684 $x685)))
 (let (($x323 (and $x915 $x548)))
 (let (($x249 (and $x323 $x158)))
 (let ((?x505 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x436 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x505)))
 (let ((?x96 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x436)))
 (let (($x17 (= input.spec-%var-l-1.2.0 ?x96)))
 (let (($x839 (and $x17 $x249)))
 (let (($x516 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x400 (=> $x516 $x839)))
 (let ((?x55 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x919 (bvuge ?x55 (_ bv1 32))))
 (let (($x102 (= $x516 $x919)))
 (let (($x584 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x437 (=> $x584 $x595)))
 (let (($x688 (= ?x55 (_ bv0 32))))
 (let (($x549 (= $x584 $x688)))
 (let (($x101 (and $x549 $x437)))
 (let (($x354 (and $x101 $x102)))
 (let (($x267 (and $x354 $x400)))
 (let (($x291 (= $x267 true)))
 (let (($x461 (= $x291 true)))
 (let (($x210 (= $x461 true)))
 (let (($x233 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x258 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let (($x434 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x204)))
 (let (($x308 (and $x434 $x233)))
 (let (($x366 (=> $x279 $x308)))
 (let (($x536 (= $x279 $x576)))
 (let (($x444 (= $x286 $x112)))
 (let (($x907 (and $x444 $x654)))
 (let (($x662 (and $x907 $x536)))
 (let (($x215 (and $x662 $x366)))
 (let (($x131 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x96)))
 (let (($x460 (and $x131 $x215)))
 (let (($x373 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x67 (=> $x373 $x460)))
 (let (($x721 (= $x373 $x919)))
 (let (($x792 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x15 (=> $x792 $x595)))
 (let (($x535 (= $x792 $x688)))
 (let (($x51 (and $x535 $x15)))
 (let (($x356 (and $x51 $x721)))
 (let (($x200 (and $x356 $x67)))
 (let (($x182 (= $x200 true)))
 (let (($x808 (= $x182 true)))
 (let (($x831 (= $x808 true)))
 (let (($x348 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x313 (= $x348 true)))
 (let (($x942 (= $x313 true)))
 (let (($x491 (= $x942 true)))
 (let ((?x167 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x506 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv1 32))) (select input.dst.llvm-mem ?x167))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x167 (_ bv2 32))) ?x506))))
 (let ((?x566 (bvadd ?x185 (_ bv4 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv1 32))) (select input.dst.llvm-mem ?x566))))
 (let ((?x745 (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x566 (_ bv2 32))) ?x65))))
 (let (($x586 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x745 ?x283 false ?x180 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x202)))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x645 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x111))))
 (let (($x255 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x645)))
 (let (($x256 (and $x255 $x586)))
 (let (($x473 (=> $x279 $x256)))
 (let (($x92 (= $x279 (bvuge (ite (= (_ bv0 32) ?x185) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x445 (= $x286 (= (ite (= (_ bv0 32) ?x185) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x145 (and $x445 $x654)))
 (let (($x331 (and $x145 $x92)))
 (let (($x784 (and $x331 $x473)))
 (let ((?x651 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x552 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x412 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x659 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x116 (concat (select input.dst.llvm-mem ?x659) (concat ?x412 (concat ?x552 ?x651)))))
 (let (($x789 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x116)))
 (let (($x646 (and $x789 $x784)))
 (let (($x355 (=> $x373 $x646)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x525 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x769 (= $x373 (bvuge ?x525 (_ bv1 32)))))
 (let (($x656 (= $x792 (= ?x525 (_ bv0 32)))))
 (let (($x319 (and $x656 $x15)))
 (let (($x849 (and $x319 $x769)))
 (let (($x306 (and $x849 $x355)))
 (let (($x579 (= $x306 true)))
 (let (($x762 (= $x579 true)))
 (let (($x542 (= $x762 true)))
 (let (($x144 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x601 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x110))))
 (let (($x593 (and true $x601)))
 (let (($x136 (and $x601 $x593)))
 (let (($x104 (= (bvand ?x370 (_ bv4294967288 32)) ?x370)))
 (let (($x336 (= (bvand ?x941 (_ bv4294967292 32)) ?x941)))
 (let (($x292 (and $x336 $x104)))
 (let (($x99 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x941 (bvsub ?x941 (_ bv4 32))) (bvult ?x941 (bvsub ?x941 (_ bv4 32))))))
 (let (($x196 (and (and (and (and (and $x593 $x99) $x336) $x292) $x136) $x144)))
 (let (($x159 (= true $x196)))
 (let (($x652 (not $x731)))
 (let (($x938 (=> $x652 $x159)))
 (let (($x344 (= $x938 true)))
 (let (($x345 (= $x344 true)))
 (let (($x456 (= $x345 true)))
 (let (($x518 (= $x652 true)))
 (let (($x121 (= $x518 true)))
 (let (($x31 (= $x121 true)))
 (let ((?x100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x346 (= (_ bv0 32) ?x100)))
 (let ((?x832 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x832)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x624 (and $x27 $x242)))
 (let (($x607 (and $x624 $x346)))
 (let (($x235 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (and $x235 $x607)))
 (let (($x142 (= $x261 true)))
 (let (($x276 (= $x142 true)))
 (let (($x521 (= $x276 true)))
 (let ((?x913 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x756 (bvneg ?x913)))
 (let (($x240 (= ?x756 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x86 (= $x240 true)))
 (let (($x391 (= $x86 true)))
 (let (($x690 (and $x391 $x521)))
 (let (($x62 (and $x690 $x31)))
 (let (($x428 (and $x62 $x456)))
 (let (($x87 (and $x428 $x542)))
 (let (($x314 (and $x87 $x491)))
 (let (($x82 (and $x314 $x831)))
 (let (($x729 (and $x82 $x210)))
 (let (($x817 (and $x729 $x403)))
 (let (($x123 (and $x373 $x817)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x207 (and $x324 $x123)))
 (let (($x618 (bvugt ?x941 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x941 (_ bv3 32))))
 (let (($x982 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x661 (=> (bvule ?x941 (bvsub (bvadd ?x941 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x982 $x618)))))))
 (let (($x244 (=> (and $x652 (bvule ?x941 (bvsub (bvadd ?x941 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x982 $x618)))))))
 (let (($x909 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x691 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x659)))
 (let (($x394 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x167 (_ bv1 32))) (or false (or false (and true (or $x691 $x909)))))))
 (let (($x709 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x167 (_ bv1 32)))) (or false (or false (and true (or $x691 $x909)))))))
 (let (($x469 (and $x709 $x244)))
 (let (($x558 (and $x469 $x207)))
 (let (($x872 (=> $x558 $x790)))
 (not $x872))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x761 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x761 (_ bv1 32))) (select input.dst.llvm-mem ?x761))))
 (let ((?x950 (concat (select input.dst.llvm-mem (bvadd ?x761 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x761 (_ bv2 32))) ?x470))))
 (let ((?x562 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x342 (concat ?x228 (concat ?x485 (concat ?x137 ?x562)))))
 (let ((?x156 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x620 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let (($x809 (= $x620 true)))
 (let (($x380 (= $x809 true)))
 (let ((?x634 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x937 (concat ?x634 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x490 (concat ?x565 (concat ?x343 ?x937))))
 (let ((?x392 (bvadd ?x490 (_ bv4 32))))
 (let ((?x742 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv1 32))) (select input.dst.llvm-mem ?x392))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv2 32))) ?x742))))
 (let (($x660 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x608 ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv1 32))) (select input.dst.llvm-mem ?x490))))
 (let ((?x723 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv2 32))) ?x7))))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.0 ?x723)))
 (let (($x128 (and $x58 $x660)))
 (let (($x560 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x604 (=> $x560 $x128)))
 (let ((?x297 (ite (= (_ bv0 32) ?x490) (_ bv0 32) (_ bv1 32))))
 (let (($x946 (bvuge ?x297 (_ bv1 32))))
 (let (($x60 (= $x560 $x946)))
 (let (($x794 (= false false)))
 (let (($x802 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x571 (=> $x802 $x794)))
 (let (($x188 (= ?x297 (_ bv0 32))))
 (let (($x79 (= $x802 $x188)))
 (let (($x217 (and $x79 $x571)))
 (let (($x985 (and $x217 $x60)))
 (let (($x830 (and $x985 $x604)))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x644)))
 (let ((?x679 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x71)))
 (let (($x483 (= input.spec-%var-l-1.2.0 ?x679)))
 (let (($x507 (and $x483 $x830)))
 (let (($x431 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x245 (=> $x431 $x507)))
 (let ((?x700 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x706 (bvuge ?x700 (_ bv1 32))))
 (let (($x589 (= $x431 $x706)))
 (let (($x577 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x840 (=> $x577 $x794)))
 (let (($x619 (= ?x700 (_ bv0 32))))
 (let (($x224 (= $x577 $x619)))
 (let (($x906 (and $x224 $x840)))
 (let (($x561 (and $x906 $x589)))
 (let (($x632 (and $x561 $x245)))
 (let (($x670 (= $x632 true)))
 (let (($x440 (= $x670 true)))
 (let (($x712 (= $x440 true)))
 (let (($x822 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x608 ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let (($x12 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x723)))
 (let (($x221 (and $x12 $x822)))
 (let (($x578 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x532 (=> $x578 $x221)))
 (let (($x49 (= $x578 $x946)))
 (let (($x82 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x808 (=> $x82 $x794)))
 (let (($x108 (= $x82 $x188)))
 (let (($x675 (and $x108 $x808)))
 (let (($x349 (and $x675 $x49)))
 (let (($x361 (and $x349 $x532)))
 (let (($x990 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x679)))
 (let (($x119 (and $x990 $x361)))
 (let (($x564 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x340 (=> $x564 $x119)))
 (let (($x575 (= $x564 $x706)))
 (let (($x283 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x687 (=> $x283 $x794)))
 (let (($x666 (= $x283 $x619)))
 (let (($x168 (and $x666 $x687)))
 (let (($x141 (and $x168 $x575)))
 (let (($x492 (and $x141 $x340)))
 (let (($x328 (= $x492 true)))
 (let (($x169 (= $x328 true)))
 (let (($x265 (= $x169 true)))
 (let ((?x914 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x914 (_ bv1 32))) (select input.dst.llvm-mem ?x914))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x914 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x914 (_ bv2 32))) ?x101))))
 (let ((?x743 (bvadd ?x66 (_ bv4 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x743 (_ bv1 32))) (select input.dst.llvm-mem ?x743))))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x743 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x743 (_ bv2 32))) ?x337))))
 (let (($x441 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x508 ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let ((?x511 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x511))))
 (let (($x284 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x165)))
 (let (($x474 (and $x284 $x441)))
 (let (($x80 (=> $x578 $x474)))
 (let (($x729 (= $x578 (bvuge (ite (= (_ bv0 32) ?x66) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x182 (= $x82 (= (ite (= (_ bv0 32) ?x66) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x783 (and $x182 $x808)))
 (let (($x582 (and $x783 $x729)))
 (let (($x635 (and $x582 $x80)))
 (let ((?x717 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x436 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x451 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x451) (concat ?x5 (concat ?x436 ?x717)))))
 (let (($x243 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x238)))
 (let (($x796 (and $x243 $x635)))
 (let (($x944 (=> $x564 $x796)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (= $x564 (bvuge ?x24 (_ bv1 32)))))
 (let (($x722 (= $x283 (= ?x24 (_ bv0 32)))))
 (let (($x621 (and $x722 $x687)))
 (let (($x546 (and $x621 $x225)))
 (let (($x526 (and $x546 $x944)))
 (let (($x125 (= $x526 true)))
 (let (($x686 (= $x125 true)))
 (let (($x93 (= $x686 true)))
 (let ((?x769 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x849 (= (_ bv0 32) ?x769)))
 (let ((?x319 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x373 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x923 (and $x15 $x373)))
 (let (($x453 (and $x923 $x849)))
 (let (($x595 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x777 (and $x595 $x453)))
 (let (($x113 (= $x777 true)))
 (let (($x412 (= $x113 true)))
 (let (($x573 (= $x412 true)))
 (let ((?x428 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x480 (= (_ bv0 3) ?x428)))
 (let (($x792 (= $x480 true)))
 (let (($x525 (= $x792 true)))
 (let ((?x176 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x144 (bvneg ?x176)))
 (let (($x159 (= ?x144 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x938 (= $x159 true)))
 (let (($x344 (= $x938 true)))
 (let (($x527 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x285 (= $x527 true)))
 (let (($x104 (= $x285 true)))
 (let (($x292 (= $x104 true)))
 (let (($x336 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x624 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235))))
 (let (($x100 (and true $x624)))
 (let (($x720 (and $x624 $x100)))
 (let ((?x376 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv1 32))) (select input.dst.llvm-mem ?x376))))
 (let ((?x926 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv2 32))) ?x110))))
 (let (($x99 (= (bvand ?x926 (_ bv4294967288 32)) ?x926)))
 (let (($x518 (= (bvand ?x376 (_ bv4294967292 32)) ?x376)))
 (let (($x132 (and $x518 $x99)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x376 (bvsub ?x376 (_ bv4 32))) (bvult ?x376 (bvsub ?x376 (_ bv4 32))))))
 (let (($x650 (and (and (and (and (and $x100 $x276) $x518) $x132) $x720) $x336)))
 (let (($x798 (= true $x650)))
 (let (($x652 (not $x731)))
 (let (($x818 (=> $x652 $x798)))
 (let (($x446 (= $x818 true)))
 (let (($x845 (= $x446 true)))
 (let (($x613 (= $x845 true)))
 (let (($x86 (= $x652 true)))
 (let (($x391 (= $x86 true)))
 (let (($x642 (= $x391 true)))
 (let (($x295 (and $x642 $x613)))
 (let (($x365 (and $x295 $x292)))
 (let (($x345 (and $x365 $x344)))
 (let (($x190 (and $x345 $x525)))
 (let (($x552 (and $x190 $x573)))
 (let (($x385 (and $x552 $x93)))
 (let (($x648 (and $x385 $x265)))
 (let (($x161 (and $x648 $x712)))
 (let (($x388 (and $x564 $x161)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x836 (and $x40 $x388)))
 (let (($x495 (bvugt ?x376 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x376 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x324 (=> (bvule ?x376 (bvsub (bvadd ?x376 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x495)))))))
 (let (($x301 (=> (and $x652 (bvule ?x376 (bvsub (bvadd ?x376 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x495)))))))
 (let (($x513 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x451)))
 (let (($x155 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x914 (_ bv1 32))) (or false (or false (and true (or $x378 $x513)))))))
 (let (($x750 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x914 (_ bv1 32)))) (or false (or false (and true (or $x378 $x513)))))))
 (let (($x316 (and $x750 $x301)))
 (let (($x804 (and $x316 $x836)))
 (let (($x321 (=> $x804 $x380)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x761 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x761 (_ bv1 32))) (select input.dst.llvm-mem ?x761))))
 (let ((?x950 (concat (select input.dst.llvm-mem (bvadd ?x761 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x761 (_ bv2 32))) ?x470))))
 (let ((?x562 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x485 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x342 (concat ?x228 (concat ?x485 (concat ?x137 ?x562)))))
 (let ((?x156 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x620 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let (($x809 (= $x620 true)))
 (let (($x380 (= $x809 true)))
 (let ((?x634 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x937 (concat ?x634 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x565 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x490 (concat ?x565 (concat ?x343 ?x937))))
 (let ((?x392 (bvadd ?x490 (_ bv4 32))))
 (let ((?x742 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv1 32))) (select input.dst.llvm-mem ?x392))))
 (let ((?x608 (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x392 (_ bv2 32))) ?x742))))
 (let (($x660 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x608 ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv1 32))) (select input.dst.llvm-mem ?x490))))
 (let ((?x723 (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x490 (_ bv2 32))) ?x7))))
 (let (($x58 (= input.spec-%var-l-1.2.1.2.0 ?x723)))
 (let (($x128 (and $x58 $x660)))
 (let (($x560 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x604 (=> $x560 $x128)))
 (let ((?x297 (ite (= (_ bv0 32) ?x490) (_ bv0 32) (_ bv1 32))))
 (let (($x946 (bvuge ?x297 (_ bv1 32))))
 (let (($x60 (= $x560 $x946)))
 (let (($x794 (= false false)))
 (let (($x802 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x571 (=> $x802 $x794)))
 (let (($x188 (= ?x297 (_ bv0 32))))
 (let (($x79 (= $x802 $x188)))
 (let (($x217 (and $x79 $x571)))
 (let (($x985 (and $x217 $x60)))
 (let (($x830 (and $x985 $x604)))
 (let ((?x644 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x71 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x644)))
 (let ((?x679 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x71)))
 (let (($x483 (= input.spec-%var-l-1.2.0 ?x679)))
 (let (($x507 (and $x483 $x830)))
 (let (($x431 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x245 (=> $x431 $x507)))
 (let ((?x700 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x706 (bvuge ?x700 (_ bv1 32))))
 (let (($x589 (= $x431 $x706)))
 (let (($x577 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x840 (=> $x577 $x794)))
 (let (($x619 (= ?x700 (_ bv0 32))))
 (let (($x224 (= $x577 $x619)))
 (let (($x906 (and $x224 $x840)))
 (let (($x561 (and $x906 $x589)))
 (let (($x632 (and $x561 $x245)))
 (let (($x670 (= $x632 true)))
 (let (($x440 (= $x670 true)))
 (let (($x712 (= $x440 true)))
 (let (($x822 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x608 ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let (($x12 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x723)))
 (let (($x221 (and $x12 $x822)))
 (let (($x578 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x532 (=> $x578 $x221)))
 (let (($x49 (= $x578 $x946)))
 (let (($x82 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x808 (=> $x82 $x794)))
 (let (($x108 (= $x82 $x188)))
 (let (($x675 (and $x108 $x808)))
 (let (($x349 (and $x675 $x49)))
 (let (($x361 (and $x349 $x532)))
 (let (($x990 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x679)))
 (let (($x119 (and $x990 $x361)))
 (let (($x564 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x340 (=> $x564 $x119)))
 (let (($x575 (= $x564 $x706)))
 (let (($x283 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x687 (=> $x283 $x794)))
 (let (($x666 (= $x283 $x619)))
 (let (($x168 (and $x666 $x687)))
 (let (($x141 (and $x168 $x575)))
 (let (($x492 (and $x141 $x340)))
 (let (($x328 (= $x492 true)))
 (let (($x169 (= $x328 true)))
 (let (($x265 (= $x169 true)))
 (let ((?x914 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x914 (_ bv1 32))) (select input.dst.llvm-mem ?x914))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x914 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x914 (_ bv2 32))) ?x101))))
 (let ((?x743 (bvadd ?x66 (_ bv4 32))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x743 (_ bv1 32))) (select input.dst.llvm-mem ?x743))))
 (let ((?x508 (concat (select input.dst.llvm-mem (bvadd ?x743 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x743 (_ bv2 32))) ?x337))))
 (let (($x441 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x508 ?x156 false ?x342 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x950)))
 (let ((?x511 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv1 32))) (select input.dst.llvm-mem ?x66))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x66 (_ bv2 32))) ?x511))))
 (let (($x284 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x165)))
 (let (($x474 (and $x284 $x441)))
 (let (($x80 (=> $x578 $x474)))
 (let (($x729 (= $x578 (bvuge (ite (= (_ bv0 32) ?x66) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x182 (= $x82 (= (ite (= (_ bv0 32) ?x66) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x783 (and $x182 $x808)))
 (let (($x582 (and $x783 $x729)))
 (let (($x635 (and $x582 $x80)))
 (let ((?x717 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x436 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x451 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x451) (concat ?x5 (concat ?x436 ?x717)))))
 (let (($x243 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x238)))
 (let (($x796 (and $x243 $x635)))
 (let (($x944 (=> $x564 $x796)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x24 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x225 (= $x564 (bvuge ?x24 (_ bv1 32)))))
 (let (($x722 (= $x283 (= ?x24 (_ bv0 32)))))
 (let (($x621 (and $x722 $x687)))
 (let (($x546 (and $x621 $x225)))
 (let (($x526 (and $x546 $x944)))
 (let (($x125 (= $x526 true)))
 (let (($x686 (= $x125 true)))
 (let (($x93 (= $x686 true)))
 (let ((?x769 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x849 (= (_ bv0 32) ?x769)))
 (let ((?x319 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x373 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x319)))
 (let (($x15 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x923 (and $x15 $x373)))
 (let (($x453 (and $x923 $x849)))
 (let (($x595 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x777 (and $x595 $x453)))
 (let (($x113 (= $x777 true)))
 (let (($x412 (= $x113 true)))
 (let (($x573 (= $x412 true)))
 (let ((?x428 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x480 (= (_ bv0 3) ?x428)))
 (let (($x792 (= $x480 true)))
 (let (($x525 (= $x792 true)))
 (let ((?x176 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x144 (bvneg ?x176)))
 (let (($x159 (= ?x144 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x938 (= $x159 true)))
 (let (($x344 (= $x938 true)))
 (let (($x527 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x285 (= $x527 true)))
 (let (($x104 (= $x285 true)))
 (let (($x292 (= $x104 true)))
 (let (($x336 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x235 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x624 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x235))))
 (let (($x100 (and true $x624)))
 (let (($x720 (and $x624 $x100)))
 (let ((?x376 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv1 32))) (select input.dst.llvm-mem ?x376))))
 (let ((?x926 (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x376 (_ bv2 32))) ?x110))))
 (let (($x99 (= (bvand ?x926 (_ bv4294967288 32)) ?x926)))
 (let (($x518 (= (bvand ?x376 (_ bv4294967292 32)) ?x376)))
 (let (($x132 (and $x518 $x99)))
 (let (($x276 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x376 (bvsub ?x376 (_ bv4 32))) (bvult ?x376 (bvsub ?x376 (_ bv4 32))))))
 (let (($x650 (and (and (and (and (and $x100 $x276) $x518) $x132) $x720) $x336)))
 (let (($x798 (= true $x650)))
 (let (($x652 (not $x731)))
 (let (($x818 (=> $x652 $x798)))
 (let (($x446 (= $x818 true)))
 (let (($x845 (= $x446 true)))
 (let (($x613 (= $x845 true)))
 (let (($x86 (= $x652 true)))
 (let (($x391 (= $x86 true)))
 (let (($x642 (= $x391 true)))
 (let (($x295 (and $x642 $x613)))
 (let (($x365 (and $x295 $x292)))
 (let (($x345 (and $x365 $x344)))
 (let (($x190 (and $x345 $x525)))
 (let (($x552 (and $x190 $x573)))
 (let (($x385 (and $x552 $x93)))
 (let (($x648 (and $x385 $x265)))
 (let (($x161 (and $x648 $x712)))
 (let (($x388 (and $x564 $x161)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x836 (and $x40 $x388)))
 (let (($x495 (bvugt ?x376 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x376 (_ bv3 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x324 (=> (bvule ?x376 (bvsub (bvadd ?x376 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x495)))))))
 (let (($x301 (=> (and $x652 (bvule ?x376 (bvsub (bvadd ?x376 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x22 $x495)))))))
 (let (($x513 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x451)))
 (let (($x155 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x914 (_ bv1 32))) (or false (or false (and true (or $x378 $x513)))))))
 (let (($x750 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x914 (_ bv1 32)))) (or false (or false (and true (or $x378 $x513)))))))
 (let (($x316 (and $x750 $x301)))
 (let (($x804 (and $x316 $x836)))
 (let (($x321 (=> $x804 $x380)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_21)
(= input.dst.llvm-mem @fun_38)
(function @fun_21
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_21 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (=
  (@fun_21 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_38
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_11401 (_ BitVec 32)) (BOUND_VARIABLE_11402 (_ BitVec 32)) (BOUND_VARIABLE_11403 (_ BitVec 32)) (BOUND_VARIABLE_11404 Bool) (BOUND_VARIABLE_11405 (_ BitVec 32)) (BOUND_VARIABLE_11406 (_ BitVec 32)) (BOUND_VARIABLE_11407 (_ BitVec 32)) (BOUND_VARIABLE_11408 (_ BitVec 32)) (BOUND_VARIABLE_11409 (_ BitVec 32)) (BOUND_VARIABLE_11410 (_ BitVec 32)) (BOUND_VARIABLE_11411 Bool) (BOUND_VARIABLE_11412 (_ BitVec 32)) (BOUND_VARIABLE_11413 (_ BitVec 32)) (BOUND_VARIABLE_11414 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv16015880 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv33739200 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv33739200 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv33739203 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x18181819)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x18181820)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x18181818)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x1818181e)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x18))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x18181818)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x18181818)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x18181818)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x18181819)
              (= x!8 #x18181818)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x18181818)
              (= x!12 #x18181819)
              (= x!13 #x18181818))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x18181819)
              (= x!8 #x1818181e)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x18181818)
              (= x!12 #x18181819)
              (= x!13 #x18181818))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x368 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x776 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x776 (_ bv1 32))) (select input.dst.llvm-mem ?x776))))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x776 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x776 (_ bv2 32))) ?x384))))
 (let ((?x893 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x854 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x791 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x56 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x791 (concat ?x212 (concat ?x854 ?x893))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x639 ?x368 false)))
 (let (($x632 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x828 (=> $x632 $x56)))
 (let ((?x48 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x419 (bvuge ?x48 (_ bv1 32))))
 (let (($x481 (= $x632 $x419)))
 (let (($x420 (= false false)))
 (let (($x119 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x532 (=> $x119 $x420)))
 (let (($x377 (= ?x48 (_ bv0 32))))
 (let (($x535 (= $x119 $x377)))
 (let (($x721 (and $x535 $x532)))
 (let (($x220 (and $x721 $x481)))
 (let (($x821 (and $x220 $x828)))
 (let (($x371 (= $x821 true)))
 (let (($x641 (= $x371 true)))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x471 (concat ?x350 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x681 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x514 (concat ?x681 (concat ?x117 ?x471))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x514 (_ bv1 32))) (select input.dst.llvm-mem ?x514))))
 (let ((?x585 (concat (select input.dst.llvm-mem (bvadd ?x514 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x514 (_ bv2 32))) ?x820))))
 (let (($x688 (= input.spec-%var-l-1.2.1.2.0 ?x585)))
 (let (($x120 (and $x688 true)))
 (let (($x200 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x200 $x120)))
 (let ((?x163 (ite (= (_ bv0 32) ?x514) (_ bv0 32) (_ bv1 32))))
 (let (($x554 (bvuge ?x163 (_ bv1 32))))
 (let (($x34 (= $x200 $x554)))
 (let (($x306 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x586 (=> $x306 $x420)))
 (let (($x838 (= ?x163 (_ bv0 32))))
 (let (($x127 (= $x306 $x838)))
 (let (($x579 (and $x127 $x586)))
 (let (($x393 (and $x579 $x34)))
 (let (($x366 (and $x393 $x258)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x28)))
 (let ((?x747 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x193)))
 (let (($x355 (= input.spec-%var-l-1.2.0 ?x747)))
 (let (($x290 (and $x355 $x366)))
 (let (($x73 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x166 (=> $x73 $x290)))
 (let (($x348 (= $x73 $x419)))
 (let (($x781 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x530 (=> $x781 $x420)))
 (let (($x542 (= $x781 $x377)))
 (let (($x707 (and $x542 $x530)))
 (let (($x87 (and $x707 $x348)))
 (let (($x233 (and $x87 $x166)))
 (let (($x614 (= $x233 true)))
 (let (($x67 (= $x614 true)))
 (let (($x164 (= $x67 true)))
 (let (($x645 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x585)))
 (let (($x41 (and $x645 true)))
 (let (($x250 (=> $x632 $x41)))
 (let (($x725 (= $x632 $x554)))
 (let (($x134 (= $x119 $x838)))
 (let (($x674 (and $x134 $x532)))
 (let (($x846 (and $x674 $x725)))
 (let (($x397 (and $x846 $x250)))
 (let (($x819 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x747)))
 (let (($x111 (and $x819 $x397)))
 (let (($x699 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x698 (=> $x699 $x111)))
 (let (($x367 (= $x699 $x419)))
 (let (($x237 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x472 (=> $x237 $x420)))
 (let (($x583 (= $x237 $x377)))
 (let (($x150 (and $x583 $x472)))
 (let (($x489 (and $x150 $x367)))
 (let (($x834 (and $x489 $x698)))
 (let (($x247 (= $x834 true)))
 (let (($x32 (= $x247 true)))
 (let (($x234 (= $x32 true)))
 (let ((?x691 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x906 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x265))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x906 (_ bv1 32))) (select input.dst.llvm-mem ?x906))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x906 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x906 (_ bv2 32))) ?x21))))
 (let (($x246 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x409)))
 (let (($x408 (and $x246 true)))
 (let (($x171 (=> $x632 $x408)))
 (let (($x507 (= $x632 (bvuge (ite (= (_ bv0 32) ?x906) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x221 (= $x119 (= (ite (= (_ bv0 32) ?x906) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x340 (and $x221 $x532)))
 (let (($x245 (and $x340 $x507)))
 (let (($x654 (and $x245 $x171)))
 (let ((?x694 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x711 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem ?x711) (concat ?x54 (concat ?x296 ?x694)))))
 (let (($x679 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x71)))
 (let (($x279 (and $x679 $x654)))
 (let (($x341 (=> $x699 $x279)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x287 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x310 (= $x699 (bvuge ?x287 (_ bv1 32)))))
 (let (($x16 (= $x237 (= ?x287 (_ bv0 32)))))
 (let (($x443 (and $x16 $x472)))
 (let (($x228 (and $x443 $x310)))
 (let (($x331 (and $x228 $x341)))
 (let (($x445 (= $x331 true)))
 (let (($x218 (= $x445 true)))
 (let (($x531 (= $x218 true)))
 (let ((?x573 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x552 (= (_ bv0 32) ?x573)))
 (let ((?x777 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x777)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x412 (and $x453 $x113)))
 (let (($x640 (and $x412 $x552)))
 (let (($x849 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (and $x849 $x640)))
 (let (($x24 (= $x283 true)))
 (let (($x669 (= $x24 true)))
 (let (($x722 (= $x669 true)))
 (let ((?x595 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x15 (= (_ bv0 3) ?x595)))
 (let (($x319 (= $x15 true)))
 (let (($x373 (= $x319 true)))
 (let ((?x345 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x456 (bvneg ?x345)))
 (let (($x480 (= ?x456 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x792 (= $x480 true)))
 (let (($x525 (= $x792 true)))
 (let (($x277 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x176 (= $x277 true)))
 (let (($x144 (= $x176 true)))
 (let (($x196 (= $x144 true)))
 (let (($x798 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x607 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x607) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x607))))
 (let (($x426 (and true $x276)))
 (let (($x336 (and $x276 $x426)))
 (let ((?x989 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x989 (_ bv1 32))) (select input.dst.llvm-mem ?x989))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x989 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x989 (_ bv2 32))) ?x110))))
 (let (($x940 (= (bvand ?x132 (_ bv4294967288 32)) ?x132)))
 (let (($x748 (= (bvand ?x989 (_ bv4294967292 32)) ?x989)))
 (let (($x422 (and $x748 $x940)))
 (let (($x121 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x989 (bvsub ?x989 (_ bv4 32))) (bvult ?x989 (bvsub ?x989 (_ bv4 32))))))
 (let (($x295 (and (and (and (and (and $x426 $x121) $x748) $x422) $x336) $x798)))
 (let (($x370 (= true $x295)))
 (let (($x652 (not $x731)))
 (let (($x527 (=> $x652 $x370)))
 (let (($x285 (= $x527 true)))
 (let (($x104 (= $x285 true)))
 (let (($x292 (= $x104 true)))
 (let (($x242 (= $x652 true)))
 (let (($x624 (= $x242 true)))
 (let (($x100 (= $x624 true)))
 (let (($x365 (and $x100 $x292)))
 (let (($x159 (and $x365 $x196)))
 (let (($x190 (and $x159 $x525)))
 (let (($x923 (and $x190 $x373)))
 (let (($x794 (and $x923 $x722)))
 (let (($x352 (and $x794 $x531)))
 (let (($x745 (and $x352 $x234)))
 (let (($x356 (and $x745 $x164)))
 (let (($x298 (and $x699 $x356)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x51 (and $x391 $x298)))
 (let (($x244 (bvugt ?x989 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x989 (_ bv3 32))))
 (let (($x661 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x40 (=> (bvule ?x989 (bvsub (bvadd ?x989 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x661 $x244)))))))
 (let (($x795 (=> (and $x652 (bvule ?x989 (bvsub (bvadd ?x989 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x661 $x244)))))))
 (let (($x709 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x711)))
 (let (($x618 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x691 (_ bv1 32))) (or false (or false (and true (or $x394 $x709)))))))
 (let (($x659 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x691 (_ bv1 32)))) (or false (or false (and true (or $x394 $x709)))))))
 (let (($x611 (and $x659 $x795)))
 (let (($x919 (and $x611 $x51)))
 (let (($x396 (=> $x919 $x641)))
 (not $x396)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x368 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x776 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x384 (concat (select input.dst.llvm-mem (bvadd ?x776 (_ bv1 32))) (select input.dst.llvm-mem ?x776))))
 (let ((?x639 (concat (select input.dst.llvm-mem (bvadd ?x776 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x776 (_ bv2 32))) ?x384))))
 (let ((?x893 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x854 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x791 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x56 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x791 (concat ?x212 (concat ?x854 ?x893))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x639 ?x368 false)))
 (let (($x632 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x828 (=> $x632 $x56)))
 (let ((?x48 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x419 (bvuge ?x48 (_ bv1 32))))
 (let (($x481 (= $x632 $x419)))
 (let (($x420 (= false false)))
 (let (($x119 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x532 (=> $x119 $x420)))
 (let (($x377 (= ?x48 (_ bv0 32))))
 (let (($x535 (= $x119 $x377)))
 (let (($x721 (and $x535 $x532)))
 (let (($x220 (and $x721 $x481)))
 (let (($x821 (and $x220 $x828)))
 (let (($x371 (= $x821 true)))
 (let (($x641 (= $x371 true)))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x471 (concat ?x350 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x681 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x514 (concat ?x681 (concat ?x117 ?x471))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x514 (_ bv1 32))) (select input.dst.llvm-mem ?x514))))
 (let ((?x585 (concat (select input.dst.llvm-mem (bvadd ?x514 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x514 (_ bv2 32))) ?x820))))
 (let (($x688 (= input.spec-%var-l-1.2.1.2.0 ?x585)))
 (let (($x120 (and $x688 true)))
 (let (($x200 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x200 $x120)))
 (let ((?x163 (ite (= (_ bv0 32) ?x514) (_ bv0 32) (_ bv1 32))))
 (let (($x554 (bvuge ?x163 (_ bv1 32))))
 (let (($x34 (= $x200 $x554)))
 (let (($x306 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x586 (=> $x306 $x420)))
 (let (($x838 (= ?x163 (_ bv0 32))))
 (let (($x127 (= $x306 $x838)))
 (let (($x579 (and $x127 $x586)))
 (let (($x393 (and $x579 $x34)))
 (let (($x366 (and $x393 $x258)))
 (let ((?x28 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x28)))
 (let ((?x747 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x193)))
 (let (($x355 (= input.spec-%var-l-1.2.0 ?x747)))
 (let (($x290 (and $x355 $x366)))
 (let (($x73 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x166 (=> $x73 $x290)))
 (let (($x348 (= $x73 $x419)))
 (let (($x781 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x530 (=> $x781 $x420)))
 (let (($x542 (= $x781 $x377)))
 (let (($x707 (and $x542 $x530)))
 (let (($x87 (and $x707 $x348)))
 (let (($x233 (and $x87 $x166)))
 (let (($x614 (= $x233 true)))
 (let (($x67 (= $x614 true)))
 (let (($x164 (= $x67 true)))
 (let (($x645 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x585)))
 (let (($x41 (and $x645 true)))
 (let (($x250 (=> $x632 $x41)))
 (let (($x725 (= $x632 $x554)))
 (let (($x134 (= $x119 $x838)))
 (let (($x674 (and $x134 $x532)))
 (let (($x846 (and $x674 $x725)))
 (let (($x397 (and $x846 $x250)))
 (let (($x819 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x747)))
 (let (($x111 (and $x819 $x397)))
 (let (($x699 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x698 (=> $x699 $x111)))
 (let (($x367 (= $x699 $x419)))
 (let (($x237 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x472 (=> $x237 $x420)))
 (let (($x583 (= $x237 $x377)))
 (let (($x150 (and $x583 $x472)))
 (let (($x489 (and $x150 $x367)))
 (let (($x834 (and $x489 $x698)))
 (let (($x247 (= $x834 true)))
 (let (($x32 (= $x247 true)))
 (let (($x234 (= $x32 true)))
 (let ((?x691 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv1 32))) (select input.dst.llvm-mem ?x691))))
 (let ((?x906 (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x691 (_ bv2 32))) ?x265))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x906 (_ bv1 32))) (select input.dst.llvm-mem ?x906))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x906 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x906 (_ bv2 32))) ?x21))))
 (let (($x246 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x409)))
 (let (($x408 (and $x246 true)))
 (let (($x171 (=> $x632 $x408)))
 (let (($x507 (= $x632 (bvuge (ite (= (_ bv0 32) ?x906) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x221 (= $x119 (= (ite (= (_ bv0 32) ?x906) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x340 (and $x221 $x532)))
 (let (($x245 (and $x340 $x507)))
 (let (($x654 (and $x245 $x171)))
 (let ((?x694 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x711 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x71 (concat (select input.dst.llvm-mem ?x711) (concat ?x54 (concat ?x296 ?x694)))))
 (let (($x679 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x71)))
 (let (($x279 (and $x679 $x654)))
 (let (($x341 (=> $x699 $x279)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x287 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x310 (= $x699 (bvuge ?x287 (_ bv1 32)))))
 (let (($x16 (= $x237 (= ?x287 (_ bv0 32)))))
 (let (($x443 (and $x16 $x472)))
 (let (($x228 (and $x443 $x310)))
 (let (($x331 (and $x228 $x341)))
 (let (($x445 (= $x331 true)))
 (let (($x218 (= $x445 true)))
 (let (($x531 (= $x218 true)))
 (let ((?x573 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x552 (= (_ bv0 32) ?x573)))
 (let ((?x777 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x113 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x777)))
 (let (($x453 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x412 (and $x453 $x113)))
 (let (($x640 (and $x412 $x552)))
 (let (($x849 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x283 (and $x849 $x640)))
 (let (($x24 (= $x283 true)))
 (let (($x669 (= $x24 true)))
 (let (($x722 (= $x669 true)))
 (let ((?x595 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x15 (= (_ bv0 3) ?x595)))
 (let (($x319 (= $x15 true)))
 (let (($x373 (= $x319 true)))
 (let ((?x345 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x456 (bvneg ?x345)))
 (let (($x480 (= ?x456 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x792 (= $x480 true)))
 (let (($x525 (= $x792 true)))
 (let (($x277 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x176 (= $x277 true)))
 (let (($x144 (= $x176 true)))
 (let (($x196 (= $x144 true)))
 (let (($x798 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x607 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x276 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x607) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x607))))
 (let (($x426 (and true $x276)))
 (let (($x336 (and $x276 $x426)))
 (let ((?x989 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x989 (_ bv1 32))) (select input.dst.llvm-mem ?x989))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x989 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x989 (_ bv2 32))) ?x110))))
 (let (($x940 (= (bvand ?x132 (_ bv4294967288 32)) ?x132)))
 (let (($x748 (= (bvand ?x989 (_ bv4294967292 32)) ?x989)))
 (let (($x422 (and $x748 $x940)))
 (let (($x121 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x989 (bvsub ?x989 (_ bv4 32))) (bvult ?x989 (bvsub ?x989 (_ bv4 32))))))
 (let (($x295 (and (and (and (and (and $x426 $x121) $x748) $x422) $x336) $x798)))
 (let (($x370 (= true $x295)))
 (let (($x652 (not $x731)))
 (let (($x527 (=> $x652 $x370)))
 (let (($x285 (= $x527 true)))
 (let (($x104 (= $x285 true)))
 (let (($x292 (= $x104 true)))
 (let (($x242 (= $x652 true)))
 (let (($x624 (= $x242 true)))
 (let (($x100 (= $x624 true)))
 (let (($x365 (and $x100 $x292)))
 (let (($x159 (and $x365 $x196)))
 (let (($x190 (and $x159 $x525)))
 (let (($x923 (and $x190 $x373)))
 (let (($x794 (and $x923 $x722)))
 (let (($x352 (and $x794 $x531)))
 (let (($x745 (and $x352 $x234)))
 (let (($x356 (and $x745 $x164)))
 (let (($x298 (and $x699 $x356)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x51 (and $x391 $x298)))
 (let (($x244 (bvugt ?x989 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x989 (_ bv3 32))))
 (let (($x661 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x40 (=> (bvule ?x989 (bvsub (bvadd ?x989 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x661 $x244)))))))
 (let (($x795 (=> (and $x652 (bvule ?x989 (bvsub (bvadd ?x989 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x661 $x244)))))))
 (let (($x709 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x394 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x711)))
 (let (($x618 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x691 (_ bv1 32))) (or false (or false (and true (or $x394 $x709)))))))
 (let (($x659 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x691 (_ bv1 32)))) (or false (or false (and true (or $x394 $x709)))))))
 (let (($x611 (and $x659 $x795)))
 (let (($x919 (and $x611 $x51)))
 (let (($x396 (=> $x919 $x641)))
 (not $x396)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_16)
(= input.dst.llvm-mem @fun_29)
(function @fun_16
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_16 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_29
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_8667 (_ BitVec 32)) (BOUND_VARIABLE_8668 (_ BitVec 32)) (BOUND_VARIABLE_8669 (_ BitVec 32)) (BOUND_VARIABLE_8670 (_ BitVec 32)) (BOUND_VARIABLE_8671 (_ BitVec 32)) (BOUND_VARIABLE_8672 (_ BitVec 32)) (BOUND_VARIABLE_8673 Bool) (BOUND_VARIABLE_8674 (_ BitVec 32)) (BOUND_VARIABLE_8675 (_ BitVec 32)) (BOUND_VARIABLE_8676 (_ BitVec 32)) (BOUND_VARIABLE_8677 (_ BitVec 32)) (BOUND_VARIABLE_8678 (_ BitVec 32)) (BOUND_VARIABLE_8679 (_ BitVec 32)) (BOUND_VARIABLE_8680 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv56221856 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2473198928 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2473198928 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2473198931 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xd5113839)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xd511383e)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xd5113830)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x38383838)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xd5)
                                #xd5113842
                                #x3f)
                         #xd511383d
                         #x38)
                  #xd5113839
                  #x38)))
(let ((a!2 (store (store (store (store a!1 #xd5113841 #x38) #xd5113840 #x38)
                         #xd5113831
                         #x19)
                  #xd5113840
                  #x38)))
(let ((a!3 (store (store (store (store a!2 #xd5113835 #x38) #xd511383b #x38)
                         #xd511383a
                         #x38)
                  #xd5193841
                  #x38)))
(let ((a!4 (store (store (store (store a!3 #xd511383e #x38) #xd511383c #x98)
                         #xd511383f
                         #x19)
                  #xd5113832
                  #x38)))
(let ((a!5 (store (store (store (store a!4 #xd5113830 #x38) #xd5113838 #x38)
                         #xd5113836
                         #x11)
                  #xd5113843
                  #x38)))
(let ((a!6 (store (store (store (store a!5 #xd5113844 #x19) #xd519383f #x38)
                         #xd511383a
                         #x38)
                  #xd511383e
                  #x38)))
(let ((a!7 (store (store (store (store a!6 #xd5113839 #x38) #xd511383f #x19)
                         #xd5193840
                         #x38)
                  #xd511383b
                  #x38)))
  (store (store (store a!7 #xd5193842 #x38) #xd5113834 #x38) #xd5113833 #x38)))))))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x38383838)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x38381938)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x38381938)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xd5113839)
              (= x!8 #xd511383e)
              (= x!9 #x98383838)
              (= x!10 #xd5113839)
              (= x!11 #x38193838)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x407 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x42))))
 (let ((?x139 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x746 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x68 (concat ?x47 (concat ?x746 (concat ?x152 ?x139)))))
 (let ((?x732 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x9 (concat ?x359 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x342 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x455 (concat ?x657 (concat ?x342 ?x9))))
 (let (($x658 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x455 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let ((?x684 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x684)))
 (let ((?x779 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x284)))
 (let (($x558 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x779)))
 (let (($x187 (and $x558 $x658)))
 (let (($x225 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x522 (=> $x225 $x187)))
 (let ((?x537 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x537 (_ bv1 32))))
 (let (($x949 (= $x225 $x19)))
 (let (($x26 (= false false)))
 (let (($x212 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x791 (=> $x212 $x26)))
 (let (($x478 (= ?x537 (_ bv0 32))))
 (let (($x631 (= $x212 $x478)))
 (let (($x78 (and $x631 $x791)))
 (let (($x449 (and $x78 $x949)))
 (let (($x710 (and $x449 $x522)))
 (let (($x647 (= $x710 true)))
 (let (($x760 (= $x647 true)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x455 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x455 (_ bv4 32))))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x455 (_ bv4 32)) (_ bv2 32))) ?x272)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x455 (_ bv4 32)) (_ bv3 32))) ?x548)))
 (let (($x738 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x210 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let ((?x842 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv1 32))) (select input.dst.llvm-mem ?x455))))
 (let ((?x597 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv2 32))) ?x842))))
 (let (($x708 (= input.spec-%var-l-1.2.1.2.0 ?x597)))
 (let (($x733 (and $x708 $x738)))
 (let (($x252 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x625 (=> $x252 $x733)))
 (let ((?x723 (ite (= (_ bv0 32) ?x455) (_ bv0 32) (_ bv1 32))))
 (let (($x385 (bvuge ?x723 (_ bv1 32))))
 (let (($x839 (= $x252 $x385)))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x638 (=> $x230 $x26)))
 (let (($x12 (= ?x723 (_ bv0 32))))
 (let (($x851 (= $x230 $x12)))
 (let (($x267 (and $x851 $x638)))
 (let (($x850 (and $x267 $x839)))
 (let (($x753 (and $x850 $x625)))
 (let (($x129 (= input.spec-%var-l-1.2.0 ?x779)))
 (let (($x461 (and $x129 $x753)))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x904 (=> $x63 $x461)))
 (let (($x620 (= $x63 $x19)))
 (let (($x325 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x112 (=> $x325 $x26)))
 (let (($x536 (= $x325 $x478)))
 (let (($x756 (and $x536 $x112)))
 (let (($x913 (and $x756 $x620)))
 (let (($x207 (and $x913 $x904)))
 (let (($x20 (= $x207 true)))
 (let (($x728 (= $x20 true)))
 (let (($x603 (= $x728 true)))
 (let (($x815 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x210 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let (($x802 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x597)))
 (let (($x809 (and $x802 $x815)))
 (let (($x380 (=> $x225 $x809)))
 (let (($x706 (= $x225 $x385)))
 (let (($x796 (= $x212 $x12)))
 (let (($x125 (and $x796 $x791)))
 (let (($x700 (and $x125 $x706)))
 (let (($x804 (and $x700 $x380)))
 (let (($x771 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x779)))
 (let (($x174 (and $x771 $x804)))
 (let (($x367 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x836 (=> $x367 $x174)))
 (let (($x992 (= $x367 $x19)))
 (let (($x445 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x307 (=> $x445 $x26)))
 (let (($x543 (= $x445 $x478)))
 (let (($x255 (and $x543 $x307)))
 (let (($x912 (and $x255 $x992)))
 (let (($x444 (and $x912 $x836)))
 (let (($x703 (= $x444 true)))
 (let (($x360 (= $x703 true)))
 (let (($x204 (= $x360 true)))
 (let ((?x378 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x874 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv1 32))) (select input.dst.llvm-mem ?x378))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv2 32))) ?x874))))
 (let ((?x917 (bvadd ?x216 (_ bv4 32))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ?x917 (_ bv1 32))) (select input.dst.llvm-mem ?x917))))
 (let ((?x677 (concat (select input.dst.llvm-mem (bvadd ?x917 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x917 (_ bv2 32))) ?x432))))
 (let (($x719 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x677 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x353))))
 (let (($x987 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x430)))
 (let (($x515 (and $x987 $x719)))
 (let (($x908 (=> $x225 $x515)))
 (let (($x564 (= $x225 (bvuge (ite (= (_ bv0 32) ?x216) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x274 (= $x212 (= (ite (= (_ bv0 32) ?x216) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x921 (and $x274 $x791)))
 (let (($x57 (and $x921 $x564)))
 (let (($x741 (and $x57 $x908)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x834 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x941 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem ?x941) (concat ?x834 (concat ?x397 ?x41)))))
 (let (($x745 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x234)))
 (let (($x11 (and $x745 $x741)))
 (let (($x534 (=> $x367 $x11)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x782 (= $x367 (bvuge ?x218 (_ bv1 32)))))
 (let (($x352 (= $x445 (= ?x218 (_ bv0 32)))))
 (let (($x48 (and $x352 $x307)))
 (let (($x824 (and $x48 $x782)))
 (let (($x253 (and $x824 $x534)))
 (let (($x213 (= $x253 true)))
 (let (($x304 (= $x213 true)))
 (let (($x524 (= $x304 true)))
 (let ((?x722 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x794 (= (_ bv0 32) ?x722)))
 (let ((?x283 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x640 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x669 (and $x640 $x24)))
 (let (($x743 (and $x669 $x794)))
 (let (($x552 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x552 $x743)))
 (let (($x287 (= $x237 true)))
 (let (($x509 (= $x287 true)))
 (let (($x16 (= $x509 true)))
 (let ((?x849 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x453 (= (_ bv0 3) ?x849)))
 (let (($x777 (= $x453 true)))
 (let (($x113 (= $x777 true)))
 (let ((?x190 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x656 (bvneg ?x190)))
 (let (($x15 (= ?x656 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x319 (= $x15 true)))
 (let (($x373 (= $x319 true)))
 (let (($x344 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x345 (= $x344 true)))
 (let (($x456 (= $x345 true)))
 (let (($x428 (= $x456 true)))
 (let (($x370 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x690 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x121 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690))))
 (let (($x818 (and true $x121)))
 (let (($x798 (and $x121 $x818)))
 (let ((?x982 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv1 32))) (select input.dst.llvm-mem ?x982))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv2 32))) ?x110))))
 (let (($x613 (= (bvand ?x422 (_ bv4294967288 32)) ?x422)))
 (let (($x926 (= (bvand ?x982 (_ bv4294967292 32)) ?x982)))
 (let (($x650 (and $x926 $x613)))
 (let (($x601 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x982 (bvsub ?x982 (_ bv4 32))) (bvult ?x982 (bvsub ?x982 (_ bv4 32))))))
 (let (($x365 (and (and (and (and (and $x818 $x601) $x926) $x650) $x798) $x370)))
 (let (($x136 (= true $x365)))
 (let (($x652 (not $x731)))
 (let (($x277 (=> $x652 $x136)))
 (let (($x176 (= $x277 true)))
 (let (($x144 (= $x176 true)))
 (let (($x196 (= $x144 true)))
 (let (($x142 (= $x652 true)))
 (let (($x276 (= $x142 true)))
 (let (($x426 (= $x276 true)))
 (let (($x159 (and $x426 $x196)))
 (let (($x480 (and $x159 $x428)))
 (let (($x923 (and $x480 $x373)))
 (let (($x412 (and $x923 $x113)))
 (let (($x420 (and $x412 $x16)))
 (let (($x10 (and $x420 $x524)))
 (let (($x335 (and $x10 $x204)))
 (let (($x692 (and $x335 $x603)))
 (let (($x463 (and $x367 $x692)))
 (let (($x624 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x206 (and $x624 $x463)))
 (let (($x301 (bvugt ?x982 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x982 (_ bv3 32))))
 (let (($x324 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x391 (=> (bvule ?x982 (bvsub (bvadd ?x982 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x324 $x301)))))))
 (let (($x421 (=> (and $x652 (bvule ?x982 (bvsub (bvadd ?x982 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x324 $x301)))))))
 (let (($x750 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x941)))
 (let (($x495 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x378 (_ bv1 32))) (or false (or false (and true (or $x155 $x750)))))))
 (let (($x451 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x378 (_ bv1 32)))) (or false (or false (and true (or $x155 $x750)))))))
 (let (($x734 (and $x451 $x421)))
 (let (($x6 (and $x734 $x206)))
 (let (($x107 (=> $x6 $x760)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x407 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv1 32))) (select input.dst.llvm-mem ?x407))))
 (let ((?x52 (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x407 (_ bv2 32))) ?x42))))
 (let ((?x139 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x152 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x746 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x68 (concat ?x47 (concat ?x746 (concat ?x152 ?x139)))))
 (let ((?x732 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x9 (concat ?x359 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x342 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x657 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x455 (concat ?x657 (concat ?x342 ?x9))))
 (let (($x658 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x455 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let ((?x684 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x684)))
 (let ((?x779 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x284)))
 (let (($x558 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x779)))
 (let (($x187 (and $x558 $x658)))
 (let (($x225 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x522 (=> $x225 $x187)))
 (let ((?x537 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x19 (bvuge ?x537 (_ bv1 32))))
 (let (($x949 (= $x225 $x19)))
 (let (($x26 (= false false)))
 (let (($x212 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x791 (=> $x212 $x26)))
 (let (($x478 (= ?x537 (_ bv0 32))))
 (let (($x631 (= $x212 $x478)))
 (let (($x78 (and $x631 $x791)))
 (let (($x449 (and $x78 $x949)))
 (let (($x710 (and $x449 $x522)))
 (let (($x647 (= $x710 true)))
 (let (($x760 (= $x647 true)))
 (let ((?x272 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x455 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x455 (_ bv4 32))))))
 (let ((?x548 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x455 (_ bv4 32)) (_ bv2 32))) ?x272)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x455 (_ bv4 32)) (_ bv3 32))) ?x548)))
 (let (($x738 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x210 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let ((?x842 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv1 32))) (select input.dst.llvm-mem ?x455))))
 (let ((?x597 (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x455 (_ bv2 32))) ?x842))))
 (let (($x708 (= input.spec-%var-l-1.2.1.2.0 ?x597)))
 (let (($x733 (and $x708 $x738)))
 (let (($x252 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x625 (=> $x252 $x733)))
 (let ((?x723 (ite (= (_ bv0 32) ?x455) (_ bv0 32) (_ bv1 32))))
 (let (($x385 (bvuge ?x723 (_ bv1 32))))
 (let (($x839 (= $x252 $x385)))
 (let (($x230 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x638 (=> $x230 $x26)))
 (let (($x12 (= ?x723 (_ bv0 32))))
 (let (($x851 (= $x230 $x12)))
 (let (($x267 (and $x851 $x638)))
 (let (($x850 (and $x267 $x839)))
 (let (($x753 (and $x850 $x625)))
 (let (($x129 (= input.spec-%var-l-1.2.0 ?x779)))
 (let (($x461 (and $x129 $x753)))
 (let (($x63 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x904 (=> $x63 $x461)))
 (let (($x620 (= $x63 $x19)))
 (let (($x325 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x112 (=> $x325 $x26)))
 (let (($x536 (= $x325 $x478)))
 (let (($x756 (and $x536 $x112)))
 (let (($x913 (and $x756 $x620)))
 (let (($x207 (and $x913 $x904)))
 (let (($x20 (= $x207 true)))
 (let (($x728 (= $x20 true)))
 (let (($x603 (= $x728 true)))
 (let (($x815 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x210 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let (($x802 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x597)))
 (let (($x809 (and $x802 $x815)))
 (let (($x380 (=> $x225 $x809)))
 (let (($x706 (= $x225 $x385)))
 (let (($x796 (= $x212 $x12)))
 (let (($x125 (and $x796 $x791)))
 (let (($x700 (and $x125 $x706)))
 (let (($x804 (and $x700 $x380)))
 (let (($x771 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x779)))
 (let (($x174 (and $x771 $x804)))
 (let (($x367 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x836 (=> $x367 $x174)))
 (let (($x992 (= $x367 $x19)))
 (let (($x445 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x307 (=> $x445 $x26)))
 (let (($x543 (= $x445 $x478)))
 (let (($x255 (and $x543 $x307)))
 (let (($x912 (and $x255 $x992)))
 (let (($x444 (and $x912 $x836)))
 (let (($x703 (= $x444 true)))
 (let (($x360 (= $x703 true)))
 (let (($x204 (= $x360 true)))
 (let ((?x378 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x874 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv1 32))) (select input.dst.llvm-mem ?x378))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x378 (_ bv2 32))) ?x874))))
 (let ((?x917 (bvadd ?x216 (_ bv4 32))))
 (let ((?x432 (concat (select input.dst.llvm-mem (bvadd ?x917 (_ bv1 32))) (select input.dst.llvm-mem ?x917))))
 (let ((?x677 (concat (select input.dst.llvm-mem (bvadd ?x917 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x917 (_ bv2 32))) ?x432))))
 (let (($x719 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x677 ?x732 false ?x68 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x52)))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x353))))
 (let (($x987 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x430)))
 (let (($x515 (and $x987 $x719)))
 (let (($x908 (=> $x225 $x515)))
 (let (($x564 (= $x225 (bvuge (ite (= (_ bv0 32) ?x216) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x274 (= $x212 (= (ite (= (_ bv0 32) ?x216) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x921 (and $x274 $x791)))
 (let (($x57 (and $x921 $x564)))
 (let (($x741 (and $x57 $x908)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x397 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x834 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x941 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem ?x941) (concat ?x834 (concat ?x397 ?x41)))))
 (let (($x745 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x234)))
 (let (($x11 (and $x745 $x741)))
 (let (($x534 (=> $x367 $x11)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x218 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x782 (= $x367 (bvuge ?x218 (_ bv1 32)))))
 (let (($x352 (= $x445 (= ?x218 (_ bv0 32)))))
 (let (($x48 (and $x352 $x307)))
 (let (($x824 (and $x48 $x782)))
 (let (($x253 (and $x824 $x534)))
 (let (($x213 (= $x253 true)))
 (let (($x304 (= $x213 true)))
 (let (($x524 (= $x304 true)))
 (let ((?x722 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x794 (= (_ bv0 32) ?x722)))
 (let ((?x283 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x24 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x640 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x669 (and $x640 $x24)))
 (let (($x743 (and $x669 $x794)))
 (let (($x552 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x552 $x743)))
 (let (($x287 (= $x237 true)))
 (let (($x509 (= $x287 true)))
 (let (($x16 (= $x509 true)))
 (let ((?x849 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x453 (= (_ bv0 3) ?x849)))
 (let (($x777 (= $x453 true)))
 (let (($x113 (= $x777 true)))
 (let ((?x190 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x656 (bvneg ?x190)))
 (let (($x15 (= ?x656 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x319 (= $x15 true)))
 (let (($x373 (= $x319 true)))
 (let (($x344 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x345 (= $x344 true)))
 (let (($x456 (= $x345 true)))
 (let (($x428 (= $x456 true)))
 (let (($x370 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x690 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x121 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690))))
 (let (($x818 (and true $x121)))
 (let (($x798 (and $x121 $x818)))
 (let ((?x982 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv1 32))) (select input.dst.llvm-mem ?x982))))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv2 32))) ?x110))))
 (let (($x613 (= (bvand ?x422 (_ bv4294967288 32)) ?x422)))
 (let (($x926 (= (bvand ?x982 (_ bv4294967292 32)) ?x982)))
 (let (($x650 (and $x926 $x613)))
 (let (($x601 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x982 (bvsub ?x982 (_ bv4 32))) (bvult ?x982 (bvsub ?x982 (_ bv4 32))))))
 (let (($x365 (and (and (and (and (and $x818 $x601) $x926) $x650) $x798) $x370)))
 (let (($x136 (= true $x365)))
 (let (($x652 (not $x731)))
 (let (($x277 (=> $x652 $x136)))
 (let (($x176 (= $x277 true)))
 (let (($x144 (= $x176 true)))
 (let (($x196 (= $x144 true)))
 (let (($x142 (= $x652 true)))
 (let (($x276 (= $x142 true)))
 (let (($x426 (= $x276 true)))
 (let (($x159 (and $x426 $x196)))
 (let (($x480 (and $x159 $x428)))
 (let (($x923 (and $x480 $x373)))
 (let (($x412 (and $x923 $x113)))
 (let (($x420 (and $x412 $x16)))
 (let (($x10 (and $x420 $x524)))
 (let (($x335 (and $x10 $x204)))
 (let (($x692 (and $x335 $x603)))
 (let (($x463 (and $x367 $x692)))
 (let (($x624 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x206 (and $x624 $x463)))
 (let (($x301 (bvugt ?x982 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x982 (_ bv3 32))))
 (let (($x324 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x391 (=> (bvule ?x982 (bvsub (bvadd ?x982 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x324 $x301)))))))
 (let (($x421 (=> (and $x652 (bvule ?x982 (bvsub (bvadd ?x982 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x324 $x301)))))))
 (let (($x750 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x155 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x941)))
 (let (($x495 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x378 (_ bv1 32))) (or false (or false (and true (or $x155 $x750)))))))
 (let (($x451 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x378 (_ bv1 32)))) (or false (or false (and true (or $x155 $x750)))))))
 (let (($x734 (and $x451 $x421)))
 (let (($x6 (and $x734 $x206)))
 (let (($x107 (=> $x6 $x760)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_20)
(= input.dst.llvm-mem @fun_37)
(function @fun_20
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_20 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_8850 (_ BitVec 32)) (BOUND_VARIABLE_8851 (_ BitVec 32)) (BOUND_VARIABLE_8852 (_ BitVec 32)) (BOUND_VARIABLE_8853 Bool) (BOUND_VARIABLE_8854 (_ BitVec 32)) (BOUND_VARIABLE_8855 (_ BitVec 32)) (BOUND_VARIABLE_8856 (_ BitVec 32)) (BOUND_VARIABLE_8857 (_ BitVec 32)) (BOUND_VARIABLE_8858 (_ BitVec 32)) (BOUND_VARIABLE_8859 (_ BitVec 32)) (BOUND_VARIABLE_8860 Bool) (BOUND_VARIABLE_8861 (_ BitVec 32)) (BOUND_VARIABLE_8862 (_ BitVec 32)) (BOUND_VARIABLE_8863 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv3277288752 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3557589288 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3557589288 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3557589291 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x0808080f)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x0808080e)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x08080810)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x08)
                     #x1808080f
                     #x3d)
              #x08080817
              #x18)
       #x0808080c
       #x5a))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x08080808)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x0808080f)
              (= x!8 #x08080808)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x08080808)
              (= x!12 #x0808080f)
              (= x!13 #x08080808))
      false
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x0808080f)
              (= x!8 #x0808085a)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x08080808)
              (= x!12 #x0808080f)
              (= x!13 #x08080808))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x0808080f)
              (= x!8 #x3d080808)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x08080808)
              (= x!12 #x0808080f)
              (= x!13 #x08080808))
      true
      false))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x664 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x294 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x689))))
 (let ((?x622 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x920 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x702 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x281 (concat ?x249 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x392 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x827 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x608 (concat ?x827 (concat ?x392 ?x281))))
 (let (($x805 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x608 (concat ?x177 (concat ?x702 (concat ?x920 ?x622))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x226 ?x664 false)))
 (let (($x614 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x166 (=> $x614 $x805)))
 (let ((?x266 (ite (= (_ bv0 32) ?x608) (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x266 (_ bv1 32))))
 (let (($x290 (= $x614 $x188)))
 (let (($x311 (= false false)))
 (let (($x585 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x393 (=> $x585 $x311)))
 (let (($x627 (= ?x266 (_ bv0 32))))
 (let (($x707 (= $x585 $x627)))
 (let (($x233 (and $x707 $x393)))
 (let (($x688 (and $x233 $x290)))
 (let (($x437 (and $x688 $x166)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x198)))
 (let ((?x759 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x439)))
 (let (($x435 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x759)))
 (let (($x308 (and $x435 $x437)))
 (let (($x207 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x207 $x308)))
 (let ((?x302 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x814 (bvuge ?x302 (_ bv1 32))))
 (let (($x843 (= $x207 $x814)))
 (let (($x174 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x380 (=> $x174 $x311)))
 (let (($x807 (= ?x302 (_ bv0 32))))
 (let (($x846 (= $x174 $x807)))
 (let (($x820 (and $x846 $x380)))
 (let (($x817 (and $x820 $x843)))
 (let (($x516 (and $x817 $x258)))
 (let (($x696 (= $x516 true)))
 (let (($x549 (= $x696 true)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x608 (_ bv1 32))) (select input.dst.llvm-mem ?x608))))
 (let ((?x523 (concat (select input.dst.llvm-mem (bvadd ?x608 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x608 (_ bv2 32))) ?x340))))
 (let (($x901 (= input.spec-%var-l-1.2.1.2.0 ?x523)))
 (let (($x535 (and $x901 true)))
 (let (($x357 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x889 (=> $x357 $x535)))
 (let (($x464 (= $x357 $x188)))
 (let (($x819 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x681 (=> $x819 $x311)))
 (let (($x725 (= $x819 $x627)))
 (let (($x351 (and $x725 $x681)))
 (let (($x747 (and $x351 $x464)))
 (let (($x897 (and $x747 $x889)))
 (let (($x50 (= input.spec-%var-l-1.2.0 ?x759)))
 (let (($x298 (and $x50 $x897)))
 (let (($x419 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x883 (=> $x419 $x298)))
 (let (($x312 (= $x419 $x814)))
 (let (($x654 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x341 (=> $x654 $x311)))
 (let (($x279 (= $x654 $x807)))
 (let (($x377 (and $x279 $x341)))
 (let (($x278 (and $x377 $x312)))
 (let (($x164 (and $x278 $x883)))
 (let (($x51 (= $x164 true)))
 (let (($x220 (= $x51 true)))
 (let (($x721 (= $x220 true)))
 (let (($x145 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x523)))
 (let (($x632 (and $x145 true)))
 (let (($x563 (=> $x207 $x632)))
 (let (($x49 (= $x207 $x188)))
 (let (($x154 (= $x174 $x627)))
 (let (($x300 (and $x154 $x380)))
 (let (($x349 (and $x300 $x49)))
 (let (($x408 (and $x349 $x563)))
 (let (($x811 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x759)))
 (let (($x778 (and $x811 $x408)))
 (let (($x229 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x399 (=> $x229 $x778)))
 (let (($x797 (= $x229 $x814)))
 (let (($x13 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x106 (=> $x13 $x311)))
 (let (($x983 (= $x13 $x807)))
 (let (($x553 (and $x983 $x106)))
 (let (($x262 (and $x553 $x797)))
 (let (($x663 (and $x262 $x399)))
 (let (($x497 (= $x663 true)))
 (let (($x245 (= $x497 true)))
 (let (($x440 (= $x245 true)))
 (let ((?x394 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv1 32))) (select input.dst.llvm-mem ?x394))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv2 32))) ?x204))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv1 32))) (select input.dst.llvm-mem ?x756))))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv2 32))) ?x169))))
 (let (($x379 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x780)))
 (let (($x328 (and $x379 true)))
 (let (($x768 (=> $x207 $x328)))
 (let (($x461 (= $x207 (bvuge (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x809 (= $x174 (= (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x836 (and $x809 $x380)))
 (let (($x904 (and $x836 $x461)))
 (let (($x492 (and $x904 $x768)))
 (let ((?x556 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x673 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x376 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x284 (concat (select input.dst.llvm-mem ?x376) (concat ?x25 (concat ?x673 ?x556)))))
 (let (($x779 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x284)))
 (let (($x228 (and $x779 $x492)))
 (let (($x617 (=> $x229 $x228)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x160 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x387 (= $x229 (bvuge ?x160 (_ bv1 32)))))
 (let (($x175 (= $x13 (= ?x160 (_ bv0 32)))))
 (let (($x448 (and $x175 $x106)))
 (let (($x47 (and $x448 $x387)))
 (let (($x141 (and $x47 $x617)))
 (let (($x296 (= $x141 true)))
 (let (($x265 (= $x296 true)))
 (let (($x224 (= $x265 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x420 (= (_ bv0 32) ?x16)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x743 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x743 $x287)))
 (let (($x331 (and $x509 $x420)))
 (let (($x794 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (and $x794 $x331)))
 (let (($x218 (= $x445 true)))
 (let (($x531 (= $x218 true)))
 (let (($x352 (= $x531 true)))
 (let ((?x552 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x640 (= (_ bv0 3) ?x552)))
 (let (($x283 (= $x640 true)))
 (let (($x24 (= $x283 true)))
 (let ((?x923 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x769 (bvneg ?x923)))
 (let (($x453 (= ?x769 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x777 (= $x453 true)))
 (let (($x113 (= $x777 true)))
 (let (($x525 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x190 (= $x525 true)))
 (let (($x656 (= $x190 true)))
 (let (($x595 (= $x656 true)))
 (let (($x136 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x557 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x601 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x557) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x557))))
 (let (($x527 (and true $x601)))
 (let (($x370 (and $x601 $x527)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x110))))
 (let (($x292 (= (bvand ?x650 (_ bv4294967288 32)) ?x650)))
 (let (($x132 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x295 (and $x132 $x292)))
 (let (($x540 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x159 (and (and (and (and (and $x527 $x540) $x132) $x295) $x370) $x136)))
 (let (($x938 (= true $x159)))
 (let (($x652 (not $x731)))
 (let (($x344 (=> $x652 $x938)))
 (let (($x345 (= $x344 true)))
 (let (($x456 (= $x345 true)))
 (let (($x428 (= $x456 true)))
 (let (($x39 (= $x652 true)))
 (let (($x121 (= $x39 true)))
 (let (($x818 (= $x121 true)))
 (let (($x480 (and $x818 $x428)))
 (let (($x15 (and $x480 $x595)))
 (let (($x412 (and $x15 $x113)))
 (let (($x669 (and $x412 $x24)))
 (let (($x26 (and $x669 $x352)))
 (let (($x322 (and $x26 $x224)))
 (let (($x417 (and $x322 $x440)))
 (let (($x919 (and $x417 $x721)))
 (let (($x481 (and $x229 $x919)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x903 (and $x276 $x481)))
 (let (($x795 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x22 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x624 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x795)))))))
 (let (($x86 (=> (and $x652 (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x795)))))))
 (let (($x659 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x618 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x376)))
 (let (($x244 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x394 (_ bv1 32))) (or false (or false (and true (or $x618 $x659)))))))
 (let (($x711 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x394 (_ bv1 32)))) (or false (or false (and true (or $x618 $x659)))))))
 (let (($x469 (and $x711 $x86)))
 (let (($x900 (and $x469 $x903)))
 (let (($x101 (=> $x900 $x549)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x664 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x294 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x689 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv1 32))) (select input.dst.llvm-mem ?x294))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x294 (_ bv2 32))) ?x689))))
 (let ((?x622 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x920 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x702 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x249 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x281 (concat ?x249 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x392 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x827 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x608 (concat ?x827 (concat ?x392 ?x281))))
 (let (($x805 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x608 (concat ?x177 (concat ?x702 (concat ?x920 ?x622))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x226 ?x664 false)))
 (let (($x614 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x166 (=> $x614 $x805)))
 (let ((?x266 (ite (= (_ bv0 32) ?x608) (_ bv0 32) (_ bv1 32))))
 (let (($x188 (bvuge ?x266 (_ bv1 32))))
 (let (($x290 (= $x614 $x188)))
 (let (($x311 (= false false)))
 (let (($x585 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x393 (=> $x585 $x311)))
 (let (($x627 (= ?x266 (_ bv0 32))))
 (let (($x707 (= $x585 $x627)))
 (let (($x233 (and $x707 $x393)))
 (let (($x688 (and $x233 $x290)))
 (let (($x437 (and $x688 $x166)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x198)))
 (let ((?x759 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x439)))
 (let (($x435 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x759)))
 (let (($x308 (and $x435 $x437)))
 (let (($x207 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x258 (=> $x207 $x308)))
 (let ((?x302 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x814 (bvuge ?x302 (_ bv1 32))))
 (let (($x843 (= $x207 $x814)))
 (let (($x174 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x380 (=> $x174 $x311)))
 (let (($x807 (= ?x302 (_ bv0 32))))
 (let (($x846 (= $x174 $x807)))
 (let (($x820 (and $x846 $x380)))
 (let (($x817 (and $x820 $x843)))
 (let (($x516 (and $x817 $x258)))
 (let (($x696 (= $x516 true)))
 (let (($x549 (= $x696 true)))
 (let ((?x340 (concat (select input.dst.llvm-mem (bvadd ?x608 (_ bv1 32))) (select input.dst.llvm-mem ?x608))))
 (let ((?x523 (concat (select input.dst.llvm-mem (bvadd ?x608 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x608 (_ bv2 32))) ?x340))))
 (let (($x901 (= input.spec-%var-l-1.2.1.2.0 ?x523)))
 (let (($x535 (and $x901 true)))
 (let (($x357 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x889 (=> $x357 $x535)))
 (let (($x464 (= $x357 $x188)))
 (let (($x819 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x681 (=> $x819 $x311)))
 (let (($x725 (= $x819 $x627)))
 (let (($x351 (and $x725 $x681)))
 (let (($x747 (and $x351 $x464)))
 (let (($x897 (and $x747 $x889)))
 (let (($x50 (= input.spec-%var-l-1.2.0 ?x759)))
 (let (($x298 (and $x50 $x897)))
 (let (($x419 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x883 (=> $x419 $x298)))
 (let (($x312 (= $x419 $x814)))
 (let (($x654 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x341 (=> $x654 $x311)))
 (let (($x279 (= $x654 $x807)))
 (let (($x377 (and $x279 $x341)))
 (let (($x278 (and $x377 $x312)))
 (let (($x164 (and $x278 $x883)))
 (let (($x51 (= $x164 true)))
 (let (($x220 (= $x51 true)))
 (let (($x721 (= $x220 true)))
 (let (($x145 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x523)))
 (let (($x632 (and $x145 true)))
 (let (($x563 (=> $x207 $x632)))
 (let (($x49 (= $x207 $x188)))
 (let (($x154 (= $x174 $x627)))
 (let (($x300 (and $x154 $x380)))
 (let (($x349 (and $x300 $x49)))
 (let (($x408 (and $x349 $x563)))
 (let (($x811 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x759)))
 (let (($x778 (and $x811 $x408)))
 (let (($x229 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x399 (=> $x229 $x778)))
 (let (($x797 (= $x229 $x814)))
 (let (($x13 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x106 (=> $x13 $x311)))
 (let (($x983 (= $x13 $x807)))
 (let (($x553 (and $x983 $x106)))
 (let (($x262 (and $x553 $x797)))
 (let (($x663 (and $x262 $x399)))
 (let (($x497 (= $x663 true)))
 (let (($x245 (= $x497 true)))
 (let (($x440 (= $x245 true)))
 (let ((?x394 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv1 32))) (select input.dst.llvm-mem ?x394))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x394 (_ bv2 32))) ?x204))))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv1 32))) (select input.dst.llvm-mem ?x756))))
 (let ((?x780 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv2 32))) ?x169))))
 (let (($x379 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x780)))
 (let (($x328 (and $x379 true)))
 (let (($x768 (=> $x207 $x328)))
 (let (($x461 (= $x207 (bvuge (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x809 (= $x174 (= (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x836 (and $x809 $x380)))
 (let (($x904 (and $x836 $x461)))
 (let (($x492 (and $x904 $x768)))
 (let ((?x556 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x673 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x376 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x284 (concat (select input.dst.llvm-mem ?x376) (concat ?x25 (concat ?x673 ?x556)))))
 (let (($x779 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x284)))
 (let (($x228 (and $x779 $x492)))
 (let (($x617 (=> $x229 $x228)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x160 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x387 (= $x229 (bvuge ?x160 (_ bv1 32)))))
 (let (($x175 (= $x13 (= ?x160 (_ bv0 32)))))
 (let (($x448 (and $x175 $x106)))
 (let (($x47 (and $x448 $x387)))
 (let (($x141 (and $x47 $x617)))
 (let (($x296 (= $x141 true)))
 (let (($x265 (= $x296 true)))
 (let (($x224 (= $x265 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x420 (= (_ bv0 32) ?x16)))
 (let ((?x237 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x287 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x743 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x509 (and $x743 $x287)))
 (let (($x331 (and $x509 $x420)))
 (let (($x794 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x445 (and $x794 $x331)))
 (let (($x218 (= $x445 true)))
 (let (($x531 (= $x218 true)))
 (let (($x352 (= $x531 true)))
 (let ((?x552 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x640 (= (_ bv0 3) ?x552)))
 (let (($x283 (= $x640 true)))
 (let (($x24 (= $x283 true)))
 (let ((?x923 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x769 (bvneg ?x923)))
 (let (($x453 (= ?x769 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x777 (= $x453 true)))
 (let (($x113 (= $x777 true)))
 (let (($x525 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x190 (= $x525 true)))
 (let (($x656 (= $x190 true)))
 (let (($x595 (= $x656 true)))
 (let (($x136 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x557 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x601 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x557) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x557))))
 (let (($x527 (and true $x601)))
 (let (($x370 (and $x601 $x527)))
 (let ((?x22 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem ?x22))))
 (let ((?x650 (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x22 (_ bv2 32))) ?x110))))
 (let (($x292 (= (bvand ?x650 (_ bv4294967288 32)) ?x650)))
 (let (($x132 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x295 (and $x132 $x292)))
 (let (($x540 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv4 32))) (bvult ?x22 (bvsub ?x22 (_ bv4 32))))))
 (let (($x159 (and (and (and (and (and $x527 $x540) $x132) $x295) $x370) $x136)))
 (let (($x938 (= true $x159)))
 (let (($x652 (not $x731)))
 (let (($x344 (=> $x652 $x938)))
 (let (($x345 (= $x344 true)))
 (let (($x456 (= $x345 true)))
 (let (($x428 (= $x456 true)))
 (let (($x39 (= $x652 true)))
 (let (($x121 (= $x39 true)))
 (let (($x818 (= $x121 true)))
 (let (($x480 (and $x818 $x428)))
 (let (($x15 (and $x480 $x595)))
 (let (($x412 (and $x15 $x113)))
 (let (($x669 (and $x412 $x24)))
 (let (($x26 (and $x669 $x352)))
 (let (($x322 (and $x26 $x224)))
 (let (($x417 (and $x322 $x440)))
 (let (($x919 (and $x417 $x721)))
 (let (($x481 (and $x229 $x919)))
 (let (($x276 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x903 (and $x276 $x481)))
 (let (($x795 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x22 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x624 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x795)))))))
 (let (($x86 (=> (and $x652 (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x795)))))))
 (let (($x659 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x618 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x376)))
 (let (($x244 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x394 (_ bv1 32))) (or false (or false (and true (or $x618 $x659)))))))
 (let (($x711 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x394 (_ bv1 32)))) (or false (or false (and true (or $x618 $x659)))))))
 (let (($x469 (and $x711 $x86)))
 (let (($x900 (and $x469 $x903)))
 (let (($x101 (=> $x900 $x549)))
 (not $x101))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_29)
(= input.dst.llvm-mem @fun_26)
(function @fun_29
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_29 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_26
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_9125 (_ BitVec 32)) (BOUND_VARIABLE_9126 (_ BitVec 32)) (BOUND_VARIABLE_9127 (_ BitVec 32)) (BOUND_VARIABLE_9128 (_ BitVec 32)) (BOUND_VARIABLE_9129 (_ BitVec 32)) (BOUND_VARIABLE_9130 (_ BitVec 32)) (BOUND_VARIABLE_9131 Bool) (BOUND_VARIABLE_9132 (_ BitVec 32)) (BOUND_VARIABLE_9133 (_ BitVec 32)) (BOUND_VARIABLE_9134 (_ BitVec 32)) (BOUND_VARIABLE_9135 (_ BitVec 32)) (BOUND_VARIABLE_9136 (_ BitVec 32)) (BOUND_VARIABLE_9137 (_ BitVec 32)) (BOUND_VARIABLE_9138 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv382737648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1217339648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1217339648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1217339651 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff80)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x41787879)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x4178787f)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x41787078)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x80)
                                #x4178707f
                                #x41)
                         #x4178787d
                         #x78)
                  #x41787886
                  #x41)))
(let ((a!2 (store (store (store (store a!1 #x41787879 #x78) #x41787882 #x78)
                         #x41787880
                         #x41)
                  #x41787079
                  #x41)))
(let ((a!3 (store (store (store (store a!2 #x41787881 #x78) #x4178707d #x78)
                         #x4178787b
                         #x78)
                  #x4178787a
                  #x78)))
(let ((a!4 (store (store (store (store a!3 #x4178787f #x78) #x4178f882 #x78)
                         #x4178787c
                         #x58)
                  #x41787880
                  #x41)))
(let ((a!5 (store (store (store (store a!4 #x4178707a #x78) #x41787078 #x78)
                         #x41787884
                         #xf8)
                  #x4178707e
                  #x78)))
(let ((a!6 (store (store (store (store a!5 #x41787885 #x78) #x41787878 #x78)
                         #x4178f880
                         #x78)
                  #x4178787a
                  #x78)))
(let ((a!7 (store (store (store (store a!6 #x4178787e #x78) #x41787879 #x78)
                         #x4178787f
                         #x78)
                  #x4178f881
                  #x78)))
  (store (store (store (store a!7 #x4178787b #x78) #x4178f883 #x78)
                #x4178707c
                #x78)
         #x4178707b
         #x78)))))))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x78784178)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x78784178)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff83)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff80)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x41787879)
              (= x!8 #x4178f880)
              (= x!9 #x58787878)
              (= x!10 #x41787879)
              (= x!11 #x41787878)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x578))))
 (let ((?x386 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x612 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x582 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x185 (concat ?x582 (concat ?x297 (concat ?x612 ?x386)))))
 (let ((?x199 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x432 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x534 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x253 (concat ?x534 (concat ?x382 ?x189))))
 (let ((?x127 (bvadd ?x253 (_ bv4 32))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x67))))
 (let (($x223 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x705 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x90))))
 (let (($x922 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x361)))
 (let (($x259 (and $x922 $x223)))
 (let (($x138 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x547 (=> $x138 $x259)))
 (let ((?x741 (ite (= (_ bv0 32) ?x253) (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x741 (_ bv1 32))))
 (let (($x835 (= $x138 $x60)))
 (let (($x569 (= false false)))
 (let (($x436 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x546 (=> $x436 $x569)))
 (let (($x52 (= ?x741 (_ bv0 32))))
 (let (($x27 (= $x436 $x52)))
 (let (($x320 (and $x27 $x546)))
 (let (($x425 (and $x320 $x835)))
 (let (($x765 (and $x425 $x547)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x946 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x271)))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x946)))
 (let (($x505 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x695)))
 (let (($x299 (and $x505 $x765)))
 (let (($x516 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x45 (=> $x516 $x299)))
 (let ((?x786 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x589 (bvuge ?x786 (_ bv1 32))))
 (let (($x473 (= $x516 $x589)))
 (let (($x737 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x290 (=> $x737 $x569)))
 (let (($x789 (= ?x786 (_ bv0 32))))
 (let (($x313 (= $x737 $x789)))
 (let (($x18 (and $x313 $x290)))
 (let (($x717 (and $x18 $x473)))
 (let (($x339 (and $x717 $x45)))
 (let (($x305 (= $x339 true)))
 (let (($x572 (= $x305 true)))
 (let (($x263 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x705 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let (($x621 (= input.spec-%var-l-1.2.1.2.0 ?x361)))
 (let (($x829 (and $x621 $x263)))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x821 (=> $x238 $x829)))
 (let (($x602 (= $x238 $x60)))
 (let (($x793 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x682 (=> $x793 $x569)))
 (let (($x82 (= $x793 $x52)))
 (let (($x442 (and $x82 $x682)))
 (let (($x368 (and $x442 $x602)))
 (let (($x371 (and $x368 $x821)))
 (let (($x354 (= input.spec-%var-l-1.2.0 ?x695)))
 (let (($x396 (and $x354 $x371)))
 (let (($x760 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x828 (=> $x760 $x396)))
 (let (($x625 (= $x760 $x589)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x924 (=> $x78 $x569)))
 (let (($x503 (= $x78 $x789)))
 (let (($x156 (and $x503 $x924)))
 (let (($x699 (and $x156 $x625)))
 (let (($x510 (and $x699 $x828)))
 (let (($x990 (= $x510 true)))
 (let (($x314 (= $x990 true)))
 (let (($x485 (= $x314 true)))
 (let (($x710 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x705 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let (($x724 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x361)))
 (let (($x252 (and $x724 $x710)))
 (let (($x839 (=> $x516 $x252)))
 (let (($x799 (= $x516 $x60)))
 (let (($x366 (= $x737 $x52)))
 (let (($x120 (and $x366 $x290)))
 (let (($x454 (and $x120 $x799)))
 (let (($x267 (and $x454 $x839)))
 (let (($x343 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x695)))
 (let (($x850 (and $x343 $x267)))
 (let (($x797 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x520 (=> $x797 $x850)))
 (let (($x398 (= $x797 $x589)))
 (let (($x296 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x844 (=> $x296 $x569)))
 (let (($x388 (= $x296 $x789)))
 (let (($x830 (and $x388 $x844)))
 (let (($x418 (and $x830 $x398)))
 (let (($x598 (and $x418 $x520)))
 (let (($x631 (= $x598 true)))
 (let (($x206 (= $x631 true)))
 (let (($x949 (= $x206 true)))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x668 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x920 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x668))))
 (let ((?x275 (bvadd ?x920 (_ bv4 32))))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem ?x275))))
 (let ((?x670 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv2 32))) ?x470))))
 (let (($x712 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x670 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x920 (_ bv1 32))) (select input.dst.llvm-mem ?x920))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x920 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x920 (_ bv2 32))) ?x219))))
 (let (($x545 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x334)))
 (let (($x441 (and $x545 $x712)))
 (let (($x526 (=> $x516 $x441)))
 (let (($x308 (= $x516 (bvuge (ite (= (_ bv0 32) ?x920) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x614 (= $x737 (= (ite (= (_ bv0 32) ?x920) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x623 (and $x614 $x290)))
 (let (($x258 (and $x623 $x308)))
 (let (($x474 (and $x258 $x526)))
 (let ((?x632 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x408 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x663 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x989 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x440 (concat (select input.dst.llvm-mem ?x989) (concat ?x663 (concat ?x408 ?x632)))))
 (let (($x417 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x440)))
 (let (($x508 (and $x417 $x474)))
 (let (($x538 (=> $x797 $x508)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x72 (= $x797 (bvuge ?x265 (_ bv1 32)))))
 (let (($x322 (= $x296 (= ?x265 (_ bv0 32)))))
 (let (($x302 (and $x322 $x844)))
 (let (($x369 (and $x302 $x72)))
 (let (($x680 (and $x369 $x538)))
 (let (($x134 (= $x680 true)))
 (let (($x329 (= $x134 true)))
 (let (($x215 (= $x329 true)))
 (let ((?x352 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x352)))
 (let ((?x445 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x445)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x531 (and $x331 $x218)))
 (let (($x917 (and $x531 $x26)))
 (let (($x420 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x420 $x917)))
 (let (($x160 (= $x13 true)))
 (let (($x600 (= $x160 true)))
 (let (($x175 (= $x600 true)))
 (let ((?x794 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x743 (= (_ bv0 3) ?x794)))
 (let (($x237 (= $x743 true)))
 (let (($x287 (= $x237 true)))
 (let ((?x412 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x573 (bvneg ?x412)))
 (let (($x640 (= ?x573 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x283 (= $x640 true)))
 (let (($x24 (= $x283 true)))
 (let (($x373 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x923 (= $x373 true)))
 (let (($x769 (= $x923 true)))
 (let (($x849 (= $x769 true)))
 (let (($x938 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x593 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x540 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x593) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x593))))
 (let (($x277 (and true $x540)))
 (let (($x136 (and $x540 $x277)))
 (let ((?x661 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x110))))
 (let (($x196 (= (bvand ?x295 (_ bv4294967288 32)) ?x295)))
 (let (($x422 (= (bvand ?x661 (_ bv4294967292 32)) ?x661)))
 (let (($x365 (and $x422 $x196)))
 (let (($x991 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x661 (bvsub ?x661 (_ bv4 32))) (bvult ?x661 (bvsub ?x661 (_ bv4 32))))))
 (let (($x480 (and (and (and (and (and $x277 $x991) $x422) $x365) $x136) $x938)))
 (let (($x792 (= true $x480)))
 (let (($x652 (not $x731)))
 (let (($x525 (=> $x652 $x792)))
 (let (($x190 (= $x525 true)))
 (let (($x656 (= $x190 true)))
 (let (($x595 (= $x656 true)))
 (let (($x446 (= $x652 true)))
 (let (($x601 (= $x446 true)))
 (let (($x527 (= $x601 true)))
 (let (($x15 (and $x527 $x595)))
 (let (($x453 (and $x15 $x849)))
 (let (($x669 (and $x453 $x24)))
 (let (($x509 (and $x669 $x287)))
 (let (($x311 (and $x509 $x175)))
 (let (($x567 (and $x311 $x215)))
 (let (($x449 (and $x567 $x949)))
 (let (($x630 (and $x449 $x485)))
 (let (($x256 (and $x797 $x630)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x812 (and $x121 $x256)))
 (let (($x421 (bvugt ?x661 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x661 (_ bv3 32))))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x276 (=> (bvule ?x661 (bvsub (bvadd ?x661 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x391 $x421)))))))
 (let (($x242 (=> (and $x652 (bvule ?x661 (bvsub (bvadd ?x661 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x391 $x421)))))))
 (let (($x451 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x495 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x989)))
 (let (($x301 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32))) (or false (or false (and true (or $x495 $x451)))))))
 (let (($x941 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32)))) (or false (or false (and true (or $x495 $x451)))))))
 (let (($x316 (and $x941 $x242)))
 (let (($x55 (and $x316 $x812)))
 (let (($x184 (=> $x55 $x572)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x236 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x578 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv1 32))) (select input.dst.llvm-mem ?x236))))
 (let ((?x559 (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x236 (_ bv2 32))) ?x578))))
 (let ((?x386 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x612 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x297 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x582 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x185 (concat ?x582 (concat ?x297 (concat ?x612 ?x386)))))
 (let ((?x199 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x189 (concat ?x432 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x534 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x253 (concat ?x534 (concat ?x382 ?x189))))
 (let ((?x127 (bvadd ?x253 (_ bv4 32))))
 (let ((?x67 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x67))))
 (let (($x223 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x705 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x90))))
 (let (($x922 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x361)))
 (let (($x259 (and $x922 $x223)))
 (let (($x138 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x547 (=> $x138 $x259)))
 (let ((?x741 (ite (= (_ bv0 32) ?x253) (_ bv0 32) (_ bv1 32))))
 (let (($x60 (bvuge ?x741 (_ bv1 32))))
 (let (($x835 (= $x138 $x60)))
 (let (($x569 (= false false)))
 (let (($x436 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x546 (=> $x436 $x569)))
 (let (($x52 (= ?x741 (_ bv0 32))))
 (let (($x27 (= $x436 $x52)))
 (let (($x320 (and $x27 $x546)))
 (let (($x425 (and $x320 $x835)))
 (let (($x765 (and $x425 $x547)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x946 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x271)))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x946)))
 (let (($x505 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x695)))
 (let (($x299 (and $x505 $x765)))
 (let (($x516 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x45 (=> $x516 $x299)))
 (let ((?x786 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x589 (bvuge ?x786 (_ bv1 32))))
 (let (($x473 (= $x516 $x589)))
 (let (($x737 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x290 (=> $x737 $x569)))
 (let (($x789 (= ?x786 (_ bv0 32))))
 (let (($x313 (= $x737 $x789)))
 (let (($x18 (and $x313 $x290)))
 (let (($x717 (and $x18 $x473)))
 (let (($x339 (and $x717 $x45)))
 (let (($x305 (= $x339 true)))
 (let (($x572 (= $x305 true)))
 (let (($x263 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x705 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let (($x621 (= input.spec-%var-l-1.2.1.2.0 ?x361)))
 (let (($x829 (and $x621 $x263)))
 (let (($x238 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x821 (=> $x238 $x829)))
 (let (($x602 (= $x238 $x60)))
 (let (($x793 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x682 (=> $x793 $x569)))
 (let (($x82 (= $x793 $x52)))
 (let (($x442 (and $x82 $x682)))
 (let (($x368 (and $x442 $x602)))
 (let (($x371 (and $x368 $x821)))
 (let (($x354 (= input.spec-%var-l-1.2.0 ?x695)))
 (let (($x396 (and $x354 $x371)))
 (let (($x760 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x828 (=> $x760 $x396)))
 (let (($x625 (= $x760 $x589)))
 (let (($x78 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x924 (=> $x78 $x569)))
 (let (($x503 (= $x78 $x789)))
 (let (($x156 (and $x503 $x924)))
 (let (($x699 (and $x156 $x625)))
 (let (($x510 (and $x699 $x828)))
 (let (($x990 (= $x510 true)))
 (let (($x314 (= $x990 true)))
 (let (($x485 (= $x314 true)))
 (let (($x710 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x705 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let (($x724 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x361)))
 (let (($x252 (and $x724 $x710)))
 (let (($x839 (=> $x516 $x252)))
 (let (($x799 (= $x516 $x60)))
 (let (($x366 (= $x737 $x52)))
 (let (($x120 (and $x366 $x290)))
 (let (($x454 (and $x120 $x799)))
 (let (($x267 (and $x454 $x839)))
 (let (($x343 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x695)))
 (let (($x850 (and $x343 $x267)))
 (let (($x797 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x520 (=> $x797 $x850)))
 (let (($x398 (= $x797 $x589)))
 (let (($x296 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x844 (=> $x296 $x569)))
 (let (($x388 (= $x296 $x789)))
 (let (($x830 (and $x388 $x844)))
 (let (($x418 (and $x830 $x398)))
 (let (($x598 (and $x418 $x520)))
 (let (($x631 (= $x598 true)))
 (let (($x206 (= $x631 true)))
 (let (($x949 (= $x206 true)))
 (let ((?x155 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x668 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x920 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x668))))
 (let ((?x275 (bvadd ?x920 (_ bv4 32))))
 (let ((?x470 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv1 32))) (select input.dst.llvm-mem ?x275))))
 (let ((?x670 (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x275 (_ bv2 32))) ?x470))))
 (let (($x712 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x670 ?x199 false ?x185 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x559)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x920 (_ bv1 32))) (select input.dst.llvm-mem ?x920))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x920 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x920 (_ bv2 32))) ?x219))))
 (let (($x545 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x334)))
 (let (($x441 (and $x545 $x712)))
 (let (($x526 (=> $x516 $x441)))
 (let (($x308 (= $x516 (bvuge (ite (= (_ bv0 32) ?x920) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x614 (= $x737 (= (ite (= (_ bv0 32) ?x920) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x623 (and $x614 $x290)))
 (let (($x258 (and $x623 $x308)))
 (let (($x474 (and $x258 $x526)))
 (let ((?x632 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x408 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x663 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x989 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x440 (concat (select input.dst.llvm-mem ?x989) (concat ?x663 (concat ?x408 ?x632)))))
 (let (($x417 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x440)))
 (let (($x508 (and $x417 $x474)))
 (let (($x538 (=> $x797 $x508)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x265 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x72 (= $x797 (bvuge ?x265 (_ bv1 32)))))
 (let (($x322 (= $x296 (= ?x265 (_ bv0 32)))))
 (let (($x302 (and $x322 $x844)))
 (let (($x369 (and $x302 $x72)))
 (let (($x680 (and $x369 $x538)))
 (let (($x134 (= $x680 true)))
 (let (($x329 (= $x134 true)))
 (let (($x215 (= $x329 true)))
 (let ((?x352 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x26 (= (_ bv0 32) ?x352)))
 (let ((?x445 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x218 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x445)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x531 (and $x331 $x218)))
 (let (($x917 (and $x531 $x26)))
 (let (($x420 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x13 (and $x420 $x917)))
 (let (($x160 (= $x13 true)))
 (let (($x600 (= $x160 true)))
 (let (($x175 (= $x600 true)))
 (let ((?x794 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x743 (= (_ bv0 3) ?x794)))
 (let (($x237 (= $x743 true)))
 (let (($x287 (= $x237 true)))
 (let ((?x412 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x573 (bvneg ?x412)))
 (let (($x640 (= ?x573 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x283 (= $x640 true)))
 (let (($x24 (= $x283 true)))
 (let (($x373 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x923 (= $x373 true)))
 (let (($x769 (= $x923 true)))
 (let (($x849 (= $x769 true)))
 (let (($x938 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x593 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x540 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x593) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x593))))
 (let (($x277 (and true $x540)))
 (let (($x136 (and $x540 $x277)))
 (let ((?x661 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv1 32))) (select input.dst.llvm-mem ?x661))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x661 (_ bv2 32))) ?x110))))
 (let (($x196 (= (bvand ?x295 (_ bv4294967288 32)) ?x295)))
 (let (($x422 (= (bvand ?x661 (_ bv4294967292 32)) ?x661)))
 (let (($x365 (and $x422 $x196)))
 (let (($x991 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x661 (bvsub ?x661 (_ bv4 32))) (bvult ?x661 (bvsub ?x661 (_ bv4 32))))))
 (let (($x480 (and (and (and (and (and $x277 $x991) $x422) $x365) $x136) $x938)))
 (let (($x792 (= true $x480)))
 (let (($x652 (not $x731)))
 (let (($x525 (=> $x652 $x792)))
 (let (($x190 (= $x525 true)))
 (let (($x656 (= $x190 true)))
 (let (($x595 (= $x656 true)))
 (let (($x446 (= $x652 true)))
 (let (($x601 (= $x446 true)))
 (let (($x527 (= $x601 true)))
 (let (($x15 (and $x527 $x595)))
 (let (($x453 (and $x15 $x849)))
 (let (($x669 (and $x453 $x24)))
 (let (($x509 (and $x669 $x287)))
 (let (($x311 (and $x509 $x175)))
 (let (($x567 (and $x311 $x215)))
 (let (($x449 (and $x567 $x949)))
 (let (($x630 (and $x449 $x485)))
 (let (($x256 (and $x797 $x630)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x812 (and $x121 $x256)))
 (let (($x421 (bvugt ?x661 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x661 (_ bv3 32))))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x276 (=> (bvule ?x661 (bvsub (bvadd ?x661 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x391 $x421)))))))
 (let (($x242 (=> (and $x652 (bvule ?x661 (bvsub (bvadd ?x661 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x391 $x421)))))))
 (let (($x451 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x495 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x989)))
 (let (($x301 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32))) (or false (or false (and true (or $x495 $x451)))))))
 (let (($x941 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x155 (_ bv1 32)))) (or false (or false (and true (or $x495 $x451)))))))
 (let (($x316 (and $x941 $x242)))
 (let (($x55 (and $x316 $x812)))
 (let (($x184 (=> $x55 $x572)))
 (not $x184))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_9374 (_ BitVec 32)) (BOUND_VARIABLE_9375 (_ BitVec 32)) (BOUND_VARIABLE_9376 (_ BitVec 32)) (BOUND_VARIABLE_9377 Bool) (BOUND_VARIABLE_9378 (_ BitVec 32)) (BOUND_VARIABLE_9379 (_ BitVec 32)) (BOUND_VARIABLE_9380 (_ BitVec 32)) (BOUND_VARIABLE_9381 (_ BitVec 32)) (BOUND_VARIABLE_9382 (_ BitVec 32)) (BOUND_VARIABLE_9383 (_ BitVec 32)) (BOUND_VARIABLE_9384 Bool) (BOUND_VARIABLE_9385 (_ BitVec 32)) (BOUND_VARIABLE_9386 (_ BitVec 32)) (BOUND_VARIABLE_9387 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv237785328 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3634226432 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3634226432 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3634226435 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffffc)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x48484848)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x48484850)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #xe1484845)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x4848484e)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x48)
                                #x4848484b
                                #xe1)
                         #x48484857
                         #x08)
                  #x48484856
                  #x08)))
(let ((a!2 (store (store (store (store a!1 #x48484848 #x45) #x4848484b #xe1)
                         #x0808484b
                         #xe1)
                  #x4848484d
                  #x08)))
  (store (store (store a!2 #x48484848 #x45) #x08084848 #x45) #x4848484d #x08))))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xe1484845)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xe1484845)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x48484848)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x48484848)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffffc)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x80000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x48484848)
              (= x!8 #x48484848)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #xe1484845)
              (= x!12 #x48484848)
              (= x!13 #x48480848))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x80000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x48484848)
              (= x!8 #x48480848)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #xe1484845)
              (= x!12 #x48484848)
              (= x!13 #x48480848))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x48484848)
              (= x!8 #x48480848)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #xe1484845)
              (= x!12 #x48484848)
              (= x!13 #x48480848))
      false
      false))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x459 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x496 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x599 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem ?x496))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv2 32))) ?x599))))
 (let ((?x29 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x766 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x438 (concat ?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x660 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x706 (concat ?x660 (concat ?x12 ?x438))))
 (let ((?x790 (bvadd ?x706 (_ bv4 32))))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd ?x790 (_ bv1 32))) (select input.dst.llvm-mem ?x790))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x790 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x790 (_ bv2 32))) ?x655))))
 (let (($x488 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x126 (concat ?x8 (concat ?x766 (concat ?x147 ?x29))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x214 ?x459 false)))
 (let (($x105 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x521 (=> $x105 $x488)))
 (let (($x805 (= $x105 (bvuge (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x153 (= false false)))
 (let (($x89 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x762 (=> $x89 $x153)))
 (let (($x776 (= $x89 (= (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x984 (and $x776 $x762)))
 (let (($x166 (and $x984 $x805)))
 (let (($x837 (and $x166 $x521)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x706 (_ bv1 32))) (select input.dst.llvm-mem ?x706))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x706 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x706 (_ bv2 32))) ?x169))))
 (let (($x523 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x328)))
 (let (($x234 (and $x523 $x837)))
 (let (($x900 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x53 (=> $x900 $x234)))
 (let ((?x455 (ite (= (_ bv0 32) ?x706) (_ bv0 32) (_ bv1 32))))
 (let (($x389 (bvuge ?x455 (_ bv1 32))))
 (let (($x486 (= $x900 $x389)))
 (let (($x585 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x846 (=> $x585 $x153)))
 (let (($x9 (= ?x455 (_ bv0 32))))
 (let (($x707 (= $x585 $x9)))
 (let (($x820 (and $x707 $x846)))
 (let (($x393 (and $x820 $x486)))
 (let (($x504 (and $x393 $x53)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x986 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x65)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x986)))
 (let (($x249 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x362)))
 (let (($x231 (and $x249 $x504)))
 (let (($x510 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x885 (=> $x510 $x231)))
 (let ((?x752 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x752 (_ bv1 32))))
 (let (($x392 (= $x510 $x100)))
 (let (($x850 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x839 (=> $x850 $x153)))
 (let (($x950 (= ?x752 (_ bv0 32))))
 (let (($x759 (= $x850 $x950)))
 (let (($x742 (and $x759 $x839)))
 (let (($x291 (and $x742 $x392)))
 (let (($x270 (and $x291 $x885)))
 (let (($x333 (= $x270 true)))
 (let (($x988 (= $x333 true)))
 (let (($x827 (= input.spec-%var-l-1.2.1.2.0 ?x328)))
 (let (($x822 (and $x827 true)))
 (let (($x183 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x192 (=> $x183 $x822)))
 (let (($x553 (= $x183 $x389)))
 (let (($x228 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x768 (=> $x228 $x153)))
 (let (($x749 (= $x228 $x9)))
 (let (($x617 (and $x749 $x768)))
 (let (($x814 (and $x617 $x553)))
 (let (($x154 (and $x814 $x192)))
 (let (($x484 (= input.spec-%var-l-1.2.0 ?x362)))
 (let (($x168 (and $x484 $x154)))
 (let (($x17 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x608 (=> $x17 $x168)))
 (let (($x636 (= $x17 $x100)))
 (let (($x913 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x461 (=> $x913 $x153)))
 (let (($x836 (= $x913 $x950)))
 (let (($x186 (and $x836 $x461)))
 (let (($x416 (and $x186 $x636)))
 (let (($x266 (and $x416 $x608)))
 (let (($x281 (= $x266 true)))
 (let (($x49 (= $x281 true)))
 (let (($x811 (= $x49 true)))
 (let (($x63 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x328)))
 (let (($x620 (and $x63 true)))
 (let (($x30 (=> $x510 $x620)))
 (let (($x739 (= $x510 $x389)))
 (let (($x562 (= $x850 $x9)))
 (let (($x342 (and $x562 $x839)))
 (let (($x11 (and $x342 $x739)))
 (let (($x909 (and $x11 $x30)))
 (let (($x79 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x362)))
 (let (($x359 (and $x79 $x909)))
 (let (($x137 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x826 (=> $x137 $x359)))
 (let (($x463 (= $x137 $x100)))
 (let (($x701 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x944 (=> $x701 $x153)))
 (let (($x71 (= $x701 $x950)))
 (let (($x187 (and $x71 $x944)))
 (let (($x157 (and $x187 $x463)))
 (let (($x723 (and $x157 $x826)))
 (let (($x125 (= $x723 true)))
 (let (($x756 (= $x125 true)))
 (let (($x202 (= $x756 true)))
 (let ((?x618 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x949 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv1 32))) (select input.dst.llvm-mem ?x618))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv2 32))) ?x949))))
 (let ((?x912 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x912))))
 (let (($x779 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x444)))
 (let (($x804 (and $x779 true)))
 (let (($x102 (=> $x510 $x804)))
 (let (($x396 (= $x510 (bvuge (ite (= (_ bv0 32) ?x156) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x252 (= $x850 (= (ite (= (_ bv0 32) ?x156) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x520 (and $x252 $x839)))
 (let (($x828 (and $x520 $x396)))
 (let (($x522 (and $x828 $x102)))
 (let ((?x637 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x666 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x982 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x946 (concat (select input.dst.llvm-mem ?x982) (concat ?x666 (concat ?x93 ?x637)))))
 (let (($x695 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x946)))
 (let (($x346 (and $x695 $x522)))
 (let (($x107 (=> $x137 $x346)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x483 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x757 (= $x137 (bvuge ?x483 (_ bv1 32)))))
 (let (($x848 (= $x701 (= ?x483 (_ bv0 32)))))
 (let (($x715 (and $x848 $x944)))
 (let (($x582 (and $x715 $x757)))
 (let (($x171 (and $x582 $x107)))
 (let (($x222 (= $x171 true)))
 (let (($x709 (= $x222 true)))
 (let (($x556 (= $x709 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x175)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x917 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x600 (and $x917 $x160)))
 (let (($x141 (and $x600 $x311)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x26 $x141)))
 (let (($x265 (= $x296 true)))
 (let (($x224 (= $x265 true)))
 (let (($x322 (= $x224 true)))
 (let ((?x420 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x331 (= (_ bv0 3) ?x420)))
 (let (($x445 (= $x331 true)))
 (let (($x218 (= $x445 true)))
 (let ((?x669 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x722 (bvneg ?x669)))
 (let (($x743 (= ?x722 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (= $x743 true)))
 (let (($x287 (= $x237 true)))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x412 (= $x113 true)))
 (let (($x573 (= $x412 true)))
 (let (($x552 (= $x573 true)))
 (let (($x792 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x991 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x44) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x44))))
 (let (($x344 (and true $x991)))
 (let (($x938 (and $x991 $x344)))
 (let ((?x324 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x110))))
 (let (($x428 (= (bvand ?x365 (_ bv4294967288 32)) ?x365)))
 (let (($x650 (= (bvand ?x324 (_ bv4294967292 32)) ?x324)))
 (let (($x159 (and $x650 $x428)))
 (let (($x845 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x324 (bvsub ?x324 (_ bv4 32))) (bvult ?x324 (bvsub ?x324 (_ bv4 32))))))
 (let (($x15 (and (and (and (and (and $x344 $x845) $x650) $x159) $x938) $x792)))
 (let (($x319 (= true $x15)))
 (let (($x652 (not $x731)))
 (let (($x373 (=> $x652 $x319)))
 (let (($x923 (= $x373 true)))
 (let (($x769 (= $x923 true)))
 (let (($x849 (= $x769 true)))
 (let (($x285 (= $x652 true)))
 (let (($x540 (= $x285 true)))
 (let (($x277 (= $x540 true)))
 (let (($x453 (and $x277 $x849)))
 (let (($x640 (and $x453 $x552)))
 (let (($x509 (and $x640 $x287)))
 (let (($x531 (and $x509 $x218)))
 (let (($x569 (and $x531 $x322)))
 (let (($x204 (and $x569 $x556)))
 (let (($x904 (and $x204 $x202)))
 (let (($x764 (and $x904 $x811)))
 (let (($x198 (and $x137 $x764)))
 (let (($x601 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x439 (and $x601 $x198)))
 (let (($x86 (bvugt ?x324 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x324 (_ bv3 32))))
 (let (($x624 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x121 (=> (bvule ?x324 (bvsub (bvadd ?x324 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x624 $x86)))))))
 (let (($x142 (=> (and $x652 (bvule ?x324 (bvsub (bvadd ?x324 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x624 $x86)))))))
 (let (($x711 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x982)))
 (let (($x795 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x618 (_ bv1 32))) (or false (or false (and true (or $x244 $x711)))))))
 (let (($x376 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x618 (_ bv1 32)))) (or false (or false (and true (or $x244 $x711)))))))
 (let (($x611 (and $x376 $x142)))
 (let (($x528 (and $x611 $x439)))
 (let (($x318 (=> $x528 $x988)))
 (not $x318))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x459 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x496 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x599 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem ?x496))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv2 32))) ?x599))))
 (let ((?x29 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x147 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x766 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x438 (concat ?x217 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x660 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x706 (concat ?x660 (concat ?x12 ?x438))))
 (let ((?x790 (bvadd ?x706 (_ bv4 32))))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd ?x790 (_ bv1 32))) (select input.dst.llvm-mem ?x790))))
 (let ((?x126 (concat (select input.dst.llvm-mem (bvadd ?x790 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x790 (_ bv2 32))) ?x655))))
 (let (($x488 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x126 (concat ?x8 (concat ?x766 (concat ?x147 ?x29))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x214 ?x459 false)))
 (let (($x105 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x521 (=> $x105 $x488)))
 (let (($x805 (= $x105 (bvuge (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x153 (= false false)))
 (let (($x89 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x762 (=> $x89 $x153)))
 (let (($x776 (= $x89 (= (ite (= (_ bv0 32) ?x126) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x984 (and $x776 $x762)))
 (let (($x166 (and $x984 $x805)))
 (let (($x837 (and $x166 $x521)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd ?x706 (_ bv1 32))) (select input.dst.llvm-mem ?x706))))
 (let ((?x328 (concat (select input.dst.llvm-mem (bvadd ?x706 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x706 (_ bv2 32))) ?x169))))
 (let (($x523 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x328)))
 (let (($x234 (and $x523 $x837)))
 (let (($x900 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x53 (=> $x900 $x234)))
 (let ((?x455 (ite (= (_ bv0 32) ?x706) (_ bv0 32) (_ bv1 32))))
 (let (($x389 (bvuge ?x455 (_ bv1 32))))
 (let (($x486 (= $x900 $x389)))
 (let (($x585 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x846 (=> $x585 $x153)))
 (let (($x9 (= ?x455 (_ bv0 32))))
 (let (($x707 (= $x585 $x9)))
 (let (($x820 (and $x707 $x846)))
 (let (($x393 (and $x820 $x486)))
 (let (($x504 (and $x393 $x53)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x986 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x65)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x986)))
 (let (($x249 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x362)))
 (let (($x231 (and $x249 $x504)))
 (let (($x510 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x885 (=> $x510 $x231)))
 (let ((?x752 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x100 (bvuge ?x752 (_ bv1 32))))
 (let (($x392 (= $x510 $x100)))
 (let (($x850 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x839 (=> $x850 $x153)))
 (let (($x950 (= ?x752 (_ bv0 32))))
 (let (($x759 (= $x850 $x950)))
 (let (($x742 (and $x759 $x839)))
 (let (($x291 (and $x742 $x392)))
 (let (($x270 (and $x291 $x885)))
 (let (($x333 (= $x270 true)))
 (let (($x988 (= $x333 true)))
 (let (($x827 (= input.spec-%var-l-1.2.1.2.0 ?x328)))
 (let (($x822 (and $x827 true)))
 (let (($x183 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x192 (=> $x183 $x822)))
 (let (($x553 (= $x183 $x389)))
 (let (($x228 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x768 (=> $x228 $x153)))
 (let (($x749 (= $x228 $x9)))
 (let (($x617 (and $x749 $x768)))
 (let (($x814 (and $x617 $x553)))
 (let (($x154 (and $x814 $x192)))
 (let (($x484 (= input.spec-%var-l-1.2.0 ?x362)))
 (let (($x168 (and $x484 $x154)))
 (let (($x17 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x608 (=> $x17 $x168)))
 (let (($x636 (= $x17 $x100)))
 (let (($x913 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x461 (=> $x913 $x153)))
 (let (($x836 (= $x913 $x950)))
 (let (($x186 (and $x836 $x461)))
 (let (($x416 (and $x186 $x636)))
 (let (($x266 (and $x416 $x608)))
 (let (($x281 (= $x266 true)))
 (let (($x49 (= $x281 true)))
 (let (($x811 (= $x49 true)))
 (let (($x63 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x328)))
 (let (($x620 (and $x63 true)))
 (let (($x30 (=> $x510 $x620)))
 (let (($x739 (= $x510 $x389)))
 (let (($x562 (= $x850 $x9)))
 (let (($x342 (and $x562 $x839)))
 (let (($x11 (and $x342 $x739)))
 (let (($x909 (and $x11 $x30)))
 (let (($x79 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x362)))
 (let (($x359 (and $x79 $x909)))
 (let (($x137 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x826 (=> $x137 $x359)))
 (let (($x463 (= $x137 $x100)))
 (let (($x701 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x944 (=> $x701 $x153)))
 (let (($x71 (= $x701 $x950)))
 (let (($x187 (and $x71 $x944)))
 (let (($x157 (and $x187 $x463)))
 (let (($x723 (and $x157 $x826)))
 (let (($x125 (= $x723 true)))
 (let (($x756 (= $x125 true)))
 (let (($x202 (= $x756 true)))
 (let ((?x618 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x949 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv1 32))) (select input.dst.llvm-mem ?x618))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x618 (_ bv2 32))) ?x949))))
 (let ((?x912 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv1 32))) (select input.dst.llvm-mem ?x156))))
 (let ((?x444 (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x156 (_ bv2 32))) ?x912))))
 (let (($x779 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x444)))
 (let (($x804 (and $x779 true)))
 (let (($x102 (=> $x510 $x804)))
 (let (($x396 (= $x510 (bvuge (ite (= (_ bv0 32) ?x156) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x252 (= $x850 (= (ite (= (_ bv0 32) ?x156) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x520 (and $x252 $x839)))
 (let (($x828 (and $x520 $x396)))
 (let (($x522 (and $x828 $x102)))
 (let ((?x637 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x666 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x982 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x946 (concat (select input.dst.llvm-mem ?x982) (concat ?x666 (concat ?x93 ?x637)))))
 (let (($x695 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x946)))
 (let (($x346 (and $x695 $x522)))
 (let (($x107 (=> $x137 $x346)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x483 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x757 (= $x137 (bvuge ?x483 (_ bv1 32)))))
 (let (($x848 (= $x701 (= ?x483 (_ bv0 32)))))
 (let (($x715 (and $x848 $x944)))
 (let (($x582 (and $x715 $x757)))
 (let (($x171 (and $x582 $x107)))
 (let (($x222 (= $x171 true)))
 (let (($x709 (= $x222 true)))
 (let (($x556 (= $x709 true)))
 (let ((?x175 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x311 (= (_ bv0 32) ?x175)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x160 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x13)))
 (let (($x917 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x600 (and $x917 $x160)))
 (let (($x141 (and $x600 $x311)))
 (let (($x26 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (and $x26 $x141)))
 (let (($x265 (= $x296 true)))
 (let (($x224 (= $x265 true)))
 (let (($x322 (= $x224 true)))
 (let ((?x420 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x331 (= (_ bv0 3) ?x420)))
 (let (($x445 (= $x331 true)))
 (let (($x218 (= $x445 true)))
 (let ((?x669 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x722 (bvneg ?x669)))
 (let (($x743 (= ?x722 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x237 (= $x743 true)))
 (let (($x287 (= $x237 true)))
 (let (($x113 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x412 (= $x113 true)))
 (let (($x573 (= $x412 true)))
 (let (($x552 (= $x573 true)))
 (let (($x792 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x44 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x991 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x44) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x44))))
 (let (($x344 (and true $x991)))
 (let (($x938 (and $x991 $x344)))
 (let ((?x324 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv1 32))) (select input.dst.llvm-mem ?x324))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x324 (_ bv2 32))) ?x110))))
 (let (($x428 (= (bvand ?x365 (_ bv4294967288 32)) ?x365)))
 (let (($x650 (= (bvand ?x324 (_ bv4294967292 32)) ?x324)))
 (let (($x159 (and $x650 $x428)))
 (let (($x845 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x324 (bvsub ?x324 (_ bv4 32))) (bvult ?x324 (bvsub ?x324 (_ bv4 32))))))
 (let (($x15 (and (and (and (and (and $x344 $x845) $x650) $x159) $x938) $x792)))
 (let (($x319 (= true $x15)))
 (let (($x652 (not $x731)))
 (let (($x373 (=> $x652 $x319)))
 (let (($x923 (= $x373 true)))
 (let (($x769 (= $x923 true)))
 (let (($x849 (= $x769 true)))
 (let (($x285 (= $x652 true)))
 (let (($x540 (= $x285 true)))
 (let (($x277 (= $x540 true)))
 (let (($x453 (and $x277 $x849)))
 (let (($x640 (and $x453 $x552)))
 (let (($x509 (and $x640 $x287)))
 (let (($x531 (and $x509 $x218)))
 (let (($x569 (and $x531 $x322)))
 (let (($x204 (and $x569 $x556)))
 (let (($x904 (and $x204 $x202)))
 (let (($x764 (and $x904 $x811)))
 (let (($x198 (and $x137 $x764)))
 (let (($x601 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x439 (and $x601 $x198)))
 (let (($x86 (bvugt ?x324 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x324 (_ bv3 32))))
 (let (($x624 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x121 (=> (bvule ?x324 (bvsub (bvadd ?x324 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x624 $x86)))))))
 (let (($x142 (=> (and $x652 (bvule ?x324 (bvsub (bvadd ?x324 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x624 $x86)))))))
 (let (($x711 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x244 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x982)))
 (let (($x795 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x618 (_ bv1 32))) (or false (or false (and true (or $x244 $x711)))))))
 (let (($x376 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x618 (_ bv1 32)))) (or false (or false (and true (or $x244 $x711)))))))
 (let (($x611 (and $x376 $x142)))
 (let (($x528 (and $x611 $x439)))
 (let (($x318 (=> $x528 $x988)))
 (not $x318))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_9827 (_ BitVec 32)) (BOUND_VARIABLE_9828 (_ BitVec 32)) (BOUND_VARIABLE_9829 (_ BitVec 32)) (BOUND_VARIABLE_9830 (_ BitVec 32)) (BOUND_VARIABLE_9831 (_ BitVec 32)) (BOUND_VARIABLE_9832 (_ BitVec 32)) (BOUND_VARIABLE_9833 Bool) (BOUND_VARIABLE_9834 (_ BitVec 32)) (BOUND_VARIABLE_9835 (_ BitVec 32)) (BOUND_VARIABLE_9836 (_ BitVec 32)) (BOUND_VARIABLE_9837 (_ BitVec 32)) (BOUND_VARIABLE_9838 (_ BitVec 32)) (BOUND_VARIABLE_9839 (_ BitVec 32)) (BOUND_VARIABLE_9840 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv37384416 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3718078216 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3718078216 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3718078219 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xf67ffdfc)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x707aa0a4)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x707aa0a9)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x707a80a0)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #xa0a0a0a0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xa0)
                                #x707a80a1
                                #x7a)
                         #x707a80a7
                         #x70)
                  #x707aa0aa
                  #x7a)))
(let ((a!2 (store (store (store (store a!1 #x707a80a3 #x30) #x707aa0a6 #x32)
                         #x707aa0a8
                         #x7a)
                  #x707aa0a8
                  #x7a)))
(let ((a!3 (store (store (store (store a!2 #x707aa0a6 #x32) #x707aa0af #x7a)
                         #x707aa0b0
                         #x70)
                  #x707aa0aa
                  #x7a)))
  (store (store (store a!3 #x707a80a6 #x7a) #x707aa0ac #x30) #x707aa0ad #xa2)))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xa0a0a0a0)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #xa0a0a0a0)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x30a07aa0)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x30a07aa0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xf67ffdff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xf67ffdfc)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x707aa0a4)
              (= x!8 #xa07aa032)
              (= x!9 #xa032a0a0)
              (= x!10 #x707aa0a4)
              (= x!11 #xa07aa07a)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x543 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x605))))
 (let ((?x409 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x987 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x338 (concat ?x987 (concat ?x28 (concat ?x268 ?x409)))))
 (let ((?x7 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x687 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x532 (concat ?x687 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x819 (concat ?x357 (concat ?x356 ?x532))))
 (let ((?x355 (bvadd ?x819 (_ bv4 32))))
 (let ((?x830 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem ?x355))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv2 32))) ?x830))))
 (let ((?x994 (bvadd ?x215 (_ bv4 32))))
 (let ((?x998 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv1 32))) (select input.dst.llvm-mem ?x994))))
 (let ((?x1004 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv2 32))) ?x998))))
 (let (($x969 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1004 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let ((?x727 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x877 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x727))))
 (let (($x879 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x877)))
 (let (($x896 (and $x879 $x969)))
 (let (($x103 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x899 (=> $x103 $x896)))
 (let (($x130 (= $x103 (bvuge (ite (= (_ bv0 32) ?x215) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x475 (= false false)))
 (let (($x922 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x18 (=> $x922 $x475)))
 (let (($x299 (= $x922 (= (ite (= (_ bv0 32) ?x215) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x505 (and $x299 $x18)))
 (let (($x810 (and $x505 $x130)))
 (let (($x898 (and $x810 $x899)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x819 (_ bv1 32))) (select input.dst.llvm-mem ?x819))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x819 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x819 (_ bv2 32))) ?x42))))
 (let (($x621 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x354)))
 (let (($x902 (and $x621 $x898)))
 (let (($x793 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x953 (=> $x793 $x902)))
 (let ((?x220 (ite (= (_ bv0 32) ?x819) (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x220 (_ bv1 32))))
 (let (($x448 (= $x793 $x334)))
 (let (($x539 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x818 (=> $x539 $x475)))
 (let (($x889 (= ?x220 (_ bv0 32))))
 (let (($x52 (= $x539 $x889)))
 (let (($x784 (and $x52 $x818)))
 (let (($x387 (and $x784 $x448)))
 (let (($x956 (and $x387 $x953)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x213)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x407)))
 (let (($x45 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x303)))
 (let (($x891 (and $x45 $x956)))
 (let (($x766 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x936 (=> $x766 $x891)))
 (let ((?x791 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x609 (bvuge ?x791 (_ bv1 32))))
 (let (($x413 (= $x766 $x609)))
 (let (($x542 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x486 (=> $x542 $x475)))
 (let (($x274 (= ?x791 (_ bv0 32))))
 (let (($x572 (= $x542 $x274)))
 (let (($x658 (and $x572 $x486)))
 (let (($x120 (and $x658 $x413)))
 (let (($x951 (and $x120 $x936)))
 (let (($x952 (= $x951 true)))
 (let (($x958 (= $x952 true)))
 (let (($x106 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x215 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let (($x366 (= input.spec-%var-l-1.2.1.2.0 ?x354)))
 (let (($x90 (and $x366 $x106)))
 (let (($x60 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x54 (=> $x60 $x90)))
 (let (($x382 (= $x60 $x334)))
 (let (($x651 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x200 (=> $x651 $x475)))
 (let (($x67 (= $x651 $x889)))
 (let (($x388 (and $x67 $x200)))
 (let (($x84 (and $x388 $x382)))
 (let (($x799 (and $x84 $x54)))
 (let (($x586 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x576 (and $x586 $x799)))
 (let (($x559 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x679 (=> $x559 $x576)))
 (let (($x526 (= $x559 $x609)))
 (let (($x83 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x332 (=> $x83 $x475)))
 (let (($x134 (= $x83 $x274)))
 (let (($x594 (and $x134 $x332)))
 (let (($x712 (and $x594 $x526)))
 (let (($x191 (and $x712 $x679)))
 (let (($x284 (= $x191 true)))
 (let (($x229 (= $x284 true)))
 (let (($x339 (= $x229 true)))
 (let (($x710 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x215 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let (($x226 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x354)))
 (let (($x937 (and $x226 $x710)))
 (let (($x612 (=> $x766 $x937)))
 (let (($x622 (= $x766 $x334)))
 (let (($x698 (= $x542 $x889)))
 (let (($x250 (and $x698 $x486)))
 (let (($x135 (and $x250 $x622)))
 (let (($x578 (and $x135 $x612)))
 (let (($x719 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x303)))
 (let (($x538 (and $x719 $x578)))
 (let (($x463 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x680 (=> $x463 $x538)))
 (let (($x943 (= $x463 $x609)))
 (let (($x222 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x118 (=> $x222 $x475)))
 (let (($x921 (= $x222 $x274)))
 (let (($x57 (and $x921 $x118)))
 (let (($x194 (and $x57 $x943)))
 (let (($x236 (and $x194 $x680)))
 (let (($x512 (= $x236 true)))
 (let (($x729 (= $x512 true)))
 (let (($x185 (= $x729 true)))
 (let ((?x495 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x495 (_ bv1 32))) (select input.dst.llvm-mem ?x495))))
 (let ((?x852 (concat (select input.dst.llvm-mem (bvadd ?x495 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x495 (_ bv2 32))) ?x167))))
 (let ((?x803 (bvadd ?x852 (_ bv4 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x803 (_ bv1 32))) (select input.dst.llvm-mem ?x803))))
 (let ((?x825 (concat (select input.dst.llvm-mem (bvadd ?x803 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x803 (_ bv2 32))) ?x209))))
 (let (($x385 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x825 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv1 32))) (select input.dst.llvm-mem ?x852))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv2 32))) ?x369))))
 (let (($x632 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x177)))
 (let (($x847 (and $x632 $x385)))
 (let (($x672 (=> $x766 $x847)))
 (let (($x8 (= $x766 (bvuge (ite (= (_ bv0 32) ?x852) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x900 (= $x542 (= (ite (= (_ bv0 32) ?x852) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x523 (and $x900 $x486)))
 (let (($x46 (and $x523 $x8)))
 (let (($x683 (and $x46 $x672)))
 (let ((?x620 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x909 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x723 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem ?x22) (concat ?x723 (concat ?x909 ?x620)))))
 (let (($x904 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x202)))
 (let (($x80 (and $x904 $x683)))
 (let (($x424 (=> $x463 $x80)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x603 (= $x463 (bvuge ?x709 (_ bv1 32)))))
 (let (($x204 (= $x222 (= ?x709 (_ bv0 32)))))
 (let (($x752 (and $x204 $x118)))
 (let (($x73 (and $x752 $x603)))
 (let (($x809 (and $x73 $x424)))
 (let (($x91 (= $x809 true)))
 (let (($x383 (= $x91 true)))
 (let (($x279 (= $x383 true)))
 (let ((?x322 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x569 (= (_ bv0 32) ?x322)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x296)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x141 $x265)))
 (let (($x275 (and $x224 $x569)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x701 (and $x311 $x275)))
 (let (($x483 (= $x701 true)))
 (let (($x635 (= $x483 true)))
 (let (($x848 (= $x635 true)))
 (let ((?x26 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x917 (= (_ bv0 3) ?x26)))
 (let (($x13 (= $x917 true)))
 (let (($x160 (= $x13 true)))
 (let ((?x509 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x16 (bvneg ?x509)))
 (let (($x331 (= ?x16 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x445 (= $x331 true)))
 (let (($x218 (= $x445 true)))
 (let (($x24 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x669 (= $x24 true)))
 (let (($x722 (= $x669 true)))
 (let (($x794 (= $x722 true)))
 (let (($x319 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x720 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x845 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x720) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x720))))
 (let (($x525 (and true $x845)))
 (let (($x792 (and $x845 $x525)))
 (let ((?x40 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x110))))
 (let (($x595 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x295 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x480 (and $x295 $x595)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x453 (and (and (and (and (and $x525 $x104) $x295) $x480) $x792) $x319)))
 (let (($x777 (= true $x453)))
 (let (($x652 (not $x731)))
 (let (($x113 (=> $x652 $x777)))
 (let (($x412 (= $x113 true)))
 (let (($x573 (= $x412 true)))
 (let (($x552 (= $x573 true)))
 (let (($x176 (= $x652 true)))
 (let (($x991 (= $x176 true)))
 (let (($x344 (= $x991 true)))
 (let (($x640 (and $x344 $x552)))
 (let (($x743 (and $x640 $x794)))
 (let (($x531 (and $x743 $x218)))
 (let (($x600 (and $x531 $x160)))
 (let (($x153 (and $x600 $x848)))
 (let (($x341 (and $x153 $x279)))
 (let (($x783 (and $x341 $x185)))
 (let (($x184 (and $x783 $x339)))
 (let (($x310 (and $x463 $x184)))
 (let (($x540 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x305 (and $x540 $x310)))
 (let (($x242 (bvugt ?x40 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x40 (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x601 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x242)))))))
 (let (($x39 (=> (and $x652 (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x276 $x242)))))))
 (let (($x941 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x421 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x495 (_ bv1 32))) (or false (or false (and true (or $x301 $x941)))))))
 (let (($x989 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x495 (_ bv1 32)))) (or false (or false (and true (or $x301 $x941)))))))
 (let (($x734 (and $x989 $x39)))
 (let (($x315 (and $x734 $x305)))
 (let (($x954 (=> $x315 $x958)))
 (not $x954))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x543 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x605))))
 (let ((?x409 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x268 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x987 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x338 (concat ?x987 (concat ?x28 (concat ?x268 ?x409)))))
 (let ((?x7 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x687 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x532 (concat ?x687 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x356 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x819 (concat ?x357 (concat ?x356 ?x532))))
 (let ((?x355 (bvadd ?x819 (_ bv4 32))))
 (let ((?x830 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv1 32))) (select input.dst.llvm-mem ?x355))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x355 (_ bv2 32))) ?x830))))
 (let ((?x994 (bvadd ?x215 (_ bv4 32))))
 (let ((?x998 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv1 32))) (select input.dst.llvm-mem ?x994))))
 (let ((?x1004 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv2 32))) ?x998))))
 (let (($x969 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1004 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let ((?x727 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv1 32))) (select input.dst.llvm-mem ?x215))))
 (let ((?x877 (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x215 (_ bv2 32))) ?x727))))
 (let (($x879 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x877)))
 (let (($x896 (and $x879 $x969)))
 (let (($x103 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x899 (=> $x103 $x896)))
 (let (($x130 (= $x103 (bvuge (ite (= (_ bv0 32) ?x215) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x475 (= false false)))
 (let (($x922 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x18 (=> $x922 $x475)))
 (let (($x299 (= $x922 (= (ite (= (_ bv0 32) ?x215) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x505 (and $x299 $x18)))
 (let (($x810 (and $x505 $x130)))
 (let (($x898 (and $x810 $x899)))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x819 (_ bv1 32))) (select input.dst.llvm-mem ?x819))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x819 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x819 (_ bv2 32))) ?x42))))
 (let (($x621 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x354)))
 (let (($x902 (and $x621 $x898)))
 (let (($x793 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x953 (=> $x793 $x902)))
 (let ((?x220 (ite (= (_ bv0 32) ?x819) (_ bv0 32) (_ bv1 32))))
 (let (($x334 (bvuge ?x220 (_ bv1 32))))
 (let (($x448 (= $x793 $x334)))
 (let (($x539 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x818 (=> $x539 $x475)))
 (let (($x889 (= ?x220 (_ bv0 32))))
 (let (($x52 (= $x539 $x889)))
 (let (($x784 (and $x52 $x818)))
 (let (($x387 (and $x784 $x448)))
 (let (($x956 (and $x387 $x953)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x407 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x213)))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x407)))
 (let (($x45 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x303)))
 (let (($x891 (and $x45 $x956)))
 (let (($x766 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x936 (=> $x766 $x891)))
 (let ((?x791 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x609 (bvuge ?x791 (_ bv1 32))))
 (let (($x413 (= $x766 $x609)))
 (let (($x542 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x486 (=> $x542 $x475)))
 (let (($x274 (= ?x791 (_ bv0 32))))
 (let (($x572 (= $x542 $x274)))
 (let (($x658 (and $x572 $x486)))
 (let (($x120 (and $x658 $x413)))
 (let (($x951 (and $x120 $x936)))
 (let (($x952 (= $x951 true)))
 (let (($x958 (= $x952 true)))
 (let (($x106 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x215 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let (($x366 (= input.spec-%var-l-1.2.1.2.0 ?x354)))
 (let (($x90 (and $x366 $x106)))
 (let (($x60 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x54 (=> $x60 $x90)))
 (let (($x382 (= $x60 $x334)))
 (let (($x651 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x200 (=> $x651 $x475)))
 (let (($x67 (= $x651 $x889)))
 (let (($x388 (and $x67 $x200)))
 (let (($x84 (and $x388 $x382)))
 (let (($x799 (and $x84 $x54)))
 (let (($x586 (= input.spec-%var-l-1.2.0 ?x303)))
 (let (($x576 (and $x586 $x799)))
 (let (($x559 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x679 (=> $x559 $x576)))
 (let (($x526 (= $x559 $x609)))
 (let (($x83 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x332 (=> $x83 $x475)))
 (let (($x134 (= $x83 $x274)))
 (let (($x594 (and $x134 $x332)))
 (let (($x712 (and $x594 $x526)))
 (let (($x191 (and $x712 $x679)))
 (let (($x284 (= $x191 true)))
 (let (($x229 (= $x284 true)))
 (let (($x339 (= $x229 true)))
 (let (($x710 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x215 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let (($x226 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x354)))
 (let (($x937 (and $x226 $x710)))
 (let (($x612 (=> $x766 $x937)))
 (let (($x622 (= $x766 $x334)))
 (let (($x698 (= $x542 $x889)))
 (let (($x250 (and $x698 $x486)))
 (let (($x135 (and $x250 $x622)))
 (let (($x578 (and $x135 $x612)))
 (let (($x719 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x303)))
 (let (($x538 (and $x719 $x578)))
 (let (($x463 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x680 (=> $x463 $x538)))
 (let (($x943 (= $x463 $x609)))
 (let (($x222 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x118 (=> $x222 $x475)))
 (let (($x921 (= $x222 $x274)))
 (let (($x57 (and $x921 $x118)))
 (let (($x194 (and $x57 $x943)))
 (let (($x236 (and $x194 $x680)))
 (let (($x512 (= $x236 true)))
 (let (($x729 (= $x512 true)))
 (let (($x185 (= $x729 true)))
 (let ((?x495 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x495 (_ bv1 32))) (select input.dst.llvm-mem ?x495))))
 (let ((?x852 (concat (select input.dst.llvm-mem (bvadd ?x495 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x495 (_ bv2 32))) ?x167))))
 (let ((?x803 (bvadd ?x852 (_ bv4 32))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x803 (_ bv1 32))) (select input.dst.llvm-mem ?x803))))
 (let ((?x825 (concat (select input.dst.llvm-mem (bvadd ?x803 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x803 (_ bv2 32))) ?x209))))
 (let (($x385 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x825 ?x7 false ?x338 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x543)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv1 32))) (select input.dst.llvm-mem ?x852))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv2 32))) ?x369))))
 (let (($x632 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x177)))
 (let (($x847 (and $x632 $x385)))
 (let (($x672 (=> $x766 $x847)))
 (let (($x8 (= $x766 (bvuge (ite (= (_ bv0 32) ?x852) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x900 (= $x542 (= (ite (= (_ bv0 32) ?x852) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x523 (and $x900 $x486)))
 (let (($x46 (and $x523 $x8)))
 (let (($x683 (and $x46 $x672)))
 (let ((?x620 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x909 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x723 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x202 (concat (select input.dst.llvm-mem ?x22) (concat ?x723 (concat ?x909 ?x620)))))
 (let (($x904 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x202)))
 (let (($x80 (and $x904 $x683)))
 (let (($x424 (=> $x463 $x80)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x709 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x603 (= $x463 (bvuge ?x709 (_ bv1 32)))))
 (let (($x204 (= $x222 (= ?x709 (_ bv0 32)))))
 (let (($x752 (and $x204 $x118)))
 (let (($x73 (and $x752 $x603)))
 (let (($x809 (and $x73 $x424)))
 (let (($x91 (= $x809 true)))
 (let (($x383 (= $x91 true)))
 (let (($x279 (= $x383 true)))
 (let ((?x322 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x569 (= (_ bv0 32) ?x322)))
 (let ((?x296 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x296)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x141 $x265)))
 (let (($x275 (and $x224 $x569)))
 (let (($x311 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x701 (and $x311 $x275)))
 (let (($x483 (= $x701 true)))
 (let (($x635 (= $x483 true)))
 (let (($x848 (= $x635 true)))
 (let ((?x26 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x917 (= (_ bv0 3) ?x26)))
 (let (($x13 (= $x917 true)))
 (let (($x160 (= $x13 true)))
 (let ((?x509 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x16 (bvneg ?x509)))
 (let (($x331 (= ?x16 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x445 (= $x331 true)))
 (let (($x218 (= $x445 true)))
 (let (($x24 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x669 (= $x24 true)))
 (let (($x722 (= $x669 true)))
 (let (($x794 (= $x722 true)))
 (let (($x319 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x720 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x845 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x720) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x720))))
 (let (($x525 (and true $x845)))
 (let (($x792 (and $x845 $x525)))
 (let ((?x40 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x159 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x110))))
 (let (($x595 (= (bvand ?x159 (_ bv4294967288 32)) ?x159)))
 (let (($x295 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x480 (and $x295 $x595)))
 (let (($x104 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x453 (and (and (and (and (and $x525 $x104) $x295) $x480) $x792) $x319)))
 (let (($x777 (= true $x453)))
 (let (($x652 (not $x731)))
 (let (($x113 (=> $x652 $x777)))
 (let (($x412 (= $x113 true)))
 (let (($x573 (= $x412 true)))
 (let (($x552 (= $x573 true)))
 (let (($x176 (= $x652 true)))
 (let (($x991 (= $x176 true)))
 (let (($x344 (= $x991 true)))
 (let (($x640 (and $x344 $x552)))
 (let (($x743 (and $x640 $x794)))
 (let (($x531 (and $x743 $x218)))
 (let (($x600 (and $x531 $x160)))
 (let (($x153 (and $x600 $x848)))
 (let (($x341 (and $x153 $x279)))
 (let (($x783 (and $x341 $x185)))
 (let (($x184 (and $x783 $x339)))
 (let (($x310 (and $x463 $x184)))
 (let (($x540 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x305 (and $x540 $x310)))
 (let (($x242 (bvugt ?x40 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x40 (_ bv3 32))))
 (let (($x276 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x601 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x276 $x242)))))))
 (let (($x39 (=> (and $x652 (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x276 $x242)))))))
 (let (($x941 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x421 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x495 (_ bv1 32))) (or false (or false (and true (or $x301 $x941)))))))
 (let (($x989 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x495 (_ bv1 32)))) (or false (or false (and true (or $x301 $x941)))))))
 (let (($x734 (and $x989 $x39)))
 (let (($x315 (and $x734 $x305)))
 (let (($x954 (=> $x315 $x958)))
 (not $x954))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_10163 (_ BitVec 32)) (BOUND_VARIABLE_10164 (_ BitVec 32)) (BOUND_VARIABLE_10165 (_ BitVec 32)) (BOUND_VARIABLE_10166 Bool) (BOUND_VARIABLE_10167 (_ BitVec 32)) (BOUND_VARIABLE_10168 (_ BitVec 32)) (BOUND_VARIABLE_10169 (_ BitVec 32)) (BOUND_VARIABLE_10170 (_ BitVec 32)) (BOUND_VARIABLE_10171 (_ BitVec 32)) (BOUND_VARIABLE_10172 (_ BitVec 32)) (BOUND_VARIABLE_10173 Bool) (BOUND_VARIABLE_10174 (_ BitVec 32)) (BOUND_VARIABLE_10175 (_ BitVec 32)) (BOUND_VARIABLE_10176 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv67108864 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv252651152 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3601693032 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3601693032 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3601693035 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1012 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x977 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x1006 (concat (select input.dst.llvm-mem (bvadd ?x977 (_ bv1 32))) (select input.dst.llvm-mem ?x977))))
 (let ((?x1010 (concat (select input.dst.llvm-mem (bvadd ?x977 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x977 (_ bv2 32))) ?x1006))))
 (let ((?x974 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x979 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x964 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x981 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x434 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x983 (concat ?x434 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x833 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x56 (concat ?x833 (concat ?x460 ?x983))))
 (let ((?x346 (bvadd ?x56 (_ bv4 32))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv1 32))) (select input.dst.llvm-mem ?x346))))
 (let ((?x985 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv2 32))) ?x79))))
 (let ((?x85 (bvadd ?x985 (_ bv4 32))))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x587))))
 (let (($x1013 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x588 (concat ?x981 (concat ?x964 (concat ?x979 ?x974))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1010 ?x1012 false)))
 (let (($x263 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x892 (=> $x263 $x1013)))
 (let (($x307 (= $x263 (bvuge (ite (= (_ bv0 32) ?x588) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x246 (= false false)))
 (let (($x234 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x37 (=> $x234 $x246)))
 (let (($x459 (= $x234 (= (ite (= (_ bv0 32) ?x588) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x581 (and $x459 $x37)))
 (let (($x758 (and $x581 $x307)))
 (let (($x959 (and $x758 $x892)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x985 (_ bv1 32))) (select input.dst.llvm-mem ?x985))))
 (let ((?x844 (concat (select input.dst.llvm-mem (bvadd ?x985 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x985 (_ bv2 32))) ?x201))))
 (let (($x297 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x844)))
 (let (($x888 (and $x297 $x959)))
 (let (($x249 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x894 (=> $x249 $x888)))
 (let (($x742 (= $x249 (bvuge (ite (= (_ bv0 32) ?x985) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x71 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x706 (=> $x71 $x246)))
 (let (($x100 (= $x71 (= (ite (= (_ bv0 32) ?x985) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x438 (and $x100 $x706)))
 (let (($x379 (and $x438 $x742)))
 (let (($x931 (and $x379 $x894)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x219))))
 (let (($x462 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x516)))
 (let (($x929 (and $x462 $x931)))
 (let (($x140 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x930 (=> $x140 $x929)))
 (let ((?x478 (ite (= (_ bv0 32) ?x56) (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x478 (_ bv1 32))))
 (let (($x340 (= $x140 $x149)))
 (let (($x673 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x248 (=> $x673 $x246)))
 (let (($x178 (= ?x478 (_ bv0 32))))
 (let (($x436 (= $x673 $x178)))
 (let (($x717 (and $x436 $x248)))
 (let (($x377 (and $x717 $x340)))
 (let (($x932 (and $x377 $x930)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x225)))
 (let ((?x638 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x143)))
 (let (($x314 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x638)))
 (let (($x934 (and $x314 $x932)))
 (let (($x191 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x935 (=> $x191 $x934)))
 (let ((?x418 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x418 (_ bv1 32))))
 (let (($x654 (= $x191 $x6)))
 (let (($x538 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x612 (=> $x538 $x246)))
 (let (($x271 (= ?x418 (_ bv0 32))))
 (let (($x804 (= $x538 $x271)))
 (let (($x828 (and $x804 $x612)))
 (let (($x510 (and $x828 $x654)))
 (let (($x927 (and $x510 $x935)))
 (let (($x928 (= $x927 true)))
 (let (($x884 (= $x928 true)))
 (let (($x165 (= input.spec-%var-l-1.2.1.2.0 ?x516)))
 (let (($x912 (and $x165 true)))
 (let (($x674 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x493 (=> $x674 $x912)))
 (let (($x616 (= $x674 $x149)))
 (let (($x500 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x435 (=> $x500 $x246)))
 (let (($x349 (= $x500 $x178)))
 (let (($x670 (and $x349 $x435)))
 (let (($x514 (and $x670 $x616)))
 (let (($x444 (and $x514 $x493)))
 (let (($x470 (= input.spec-%var-l-1.2.0 ?x638)))
 (let (($x156 (and $x470 $x444)))
 (let (($x243 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x760 (=> $x243 $x156)))
 (let (($x138 (= $x243 $x6)))
 (let (($x765 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x256 (=> $x765 $x246)))
 (let (($x821 (= $x765 $x271)))
 (let (($x442 (and $x821 $x256)))
 (let (($x447 (and $x442 $x138)))
 (let (($x990 (and $x447 $x760)))
 (let (($x625 (= $x990 true)))
 (let (($x779 (= $x625 true)))
 (let (($x47 (= $x779 true)))
 (let (($x35 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x516)))
 (let (($x288 (and $x35 true)))
 (let (($x614 (=> $x191 $x288)))
 (let (($x395 (= $x191 $x149)))
 (let (($x264 (= $x538 $x178)))
 (let (($x851 (and $x264 $x612)))
 (let (($x907 (and $x851 $x395)))
 (let (($x623 (and $x907 $x614)))
 (let (($x806 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x638)))
 (let (($x122 (and $x806 $x623)))
 (let (($x910 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x290 (=> $x910 $x122)))
 (let (($x631 (= $x910 $x6)))
 (let (($x5 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x841 (=> $x5 $x246)))
 (let (($x582 (= $x5 $x271)))
 (let (($x411 (and $x582 $x841)))
 (let (($x503 (and $x411 $x631)))
 (let (($x308 (and $x503 $x290)))
 (let (($x293 (= $x308 true)))
 (let (($x893 (= $x293 true)))
 (let (($x574 (= $x893 true)))
 (let ((?x244 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x594 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x185))))
 (let ((?x956 (concat (select input.dst.llvm-mem (bvadd ?x594 (_ bv1 32))) (select input.dst.llvm-mem ?x594))))
 (let ((?x954 (concat (select input.dst.llvm-mem (bvadd ?x594 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x594 (_ bv2 32))) ?x956))))
 (let (($x969 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x954)))
 (let (($x896 (and $x969 true)))
 (let (($x998 (=> $x191 $x896)))
 (let (($x576 (= $x191 (bvuge (ite (= (_ bv0 32) ?x594) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x937 (= $x538 (= (ite (= (_ bv0 32) ?x594) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x680 (and $x937 $x612)))
 (let (($x679 (and $x680 $x576)))
 (let (($x1001 (and $x679 $x998)))
 (let ((?x895 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x641 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x661 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem ?x661) (concat ?x641 (concat ?x347 ?x895)))))
 (let (($x303 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x407)))
 (let (($x996 (and $x303 $x1001)))
 (let (($x997 (=> $x910 $x996)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x615 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (= $x910 (bvuge ?x615 (_ bv1 32)))))
 (let (($x619 (= $x5 (= ?x615 (_ bv0 32)))))
 (let (($x906 (and $x619 $x841)))
 (let (($x987 (and $x906 $x117)))
 (let (($x999 (and $x987 $x997)))
 (let (($x995 (= $x999 true)))
 (let (($x1004 (= $x995 true)))
 (let (($x899 (= $x1004 true)))
 (let ((?x848 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x848)))
 (let ((?x701 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x483 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x701)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x635 (and $x275 $x483)))
 (let (($x171 (and $x635 $x153)))
 (let (($x569 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x569 $x171)))
 (let (($x709 (= $x222 true)))
 (let (($x556 (= $x709 true)))
 (let (($x204 (= $x556 true)))
 (let ((?x311 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x141 (= (_ bv0 3) ?x311)))
 (let (($x296 (= $x141 true)))
 (let (($x265 (= $x296 true)))
 (let ((?x531 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x352 (bvneg ?x531)))
 (let (($x917 (= ?x352 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x13 (= $x917 true)))
 (let (($x160 (= $x13 true)))
 (let (($x287 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x509 (= $x287 true)))
 (let (($x16 (= $x509 true)))
 (let (($x420 (= $x16 true)))
 (let (($x777 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x336 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x336) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x336))))
 (let (($x373 (and true $x104)))
 (let (($x319 (and $x104 $x373)))
 (let ((?x391 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv1 32))) (select input.dst.llvm-mem ?x391))))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv2 32))) ?x110))))
 (let (($x849 (= (bvand ?x480 (_ bv4294967288 32)) ?x480)))
 (let (($x365 (= (bvand ?x391 (_ bv4294967292 32)) ?x391)))
 (let (($x15 (and $x365 $x849)))
 (let (($x144 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x391 (bvsub ?x391 (_ bv4 32))) (bvult ?x391 (bvsub ?x391 (_ bv4 32))))))
 (let (($x640 (and (and (and (and (and $x373 $x144) $x365) $x15) $x319) $x777)))
 (let (($x283 (= true $x640)))
 (let (($x652 (not $x731)))
 (let (($x24 (=> $x652 $x283)))
 (let (($x669 (= $x24 true)))
 (let (($x722 (= $x669 true)))
 (let (($x794 (= $x722 true)))
 (let (($x345 (= $x652 true)))
 (let (($x845 (= $x345 true)))
 (let (($x525 (= $x845 true)))
 (let (($x743 (and $x525 $x794)))
 (let (($x331 (and $x743 $x420)))
 (let (($x600 (and $x331 $x160)))
 (let (($x224 (and $x600 $x265)))
 (let (($x475 (and $x224 $x204)))
 (let (($x957 (and $x475 $x899)))
 (let (($x371 (and $x957 $x574)))
 (let (($x25 (and $x371 $x47)))
 (let (($x684 (and $x910 $x25)))
 (let (($x991 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x511 (and $x991 $x684)))
 (let (($x142 (bvugt ?x391 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x391 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x540 (=> (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x142)))))))
 (let (($x446 (=> (and $x652 (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x121 $x142)))))))
 (let (($x376 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x795 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x661)))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x244 (_ bv1 32))) (or false (or false (and true (or $x795 $x376)))))))
 (let (($x982 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x244 (_ bv1 32)))) (or false (or false (and true (or $x795 $x376)))))))
 (let (($x469 (and $x982 $x446)))
 (let (($x66 (and $x469 $x511)))
 (let (($x933 (=> $x66 $x884)))
 (not $x933))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1012 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x977 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x1006 (concat (select input.dst.llvm-mem (bvadd ?x977 (_ bv1 32))) (select input.dst.llvm-mem ?x977))))
 (let ((?x1010 (concat (select input.dst.llvm-mem (bvadd ?x977 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x977 (_ bv2 32))) ?x1006))))
 (let ((?x974 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x979 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x964 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x981 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x434 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x983 (concat ?x434 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x833 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x56 (concat ?x833 (concat ?x460 ?x983))))
 (let ((?x346 (bvadd ?x56 (_ bv4 32))))
 (let ((?x79 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv1 32))) (select input.dst.llvm-mem ?x346))))
 (let ((?x985 (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x346 (_ bv2 32))) ?x79))))
 (let ((?x85 (bvadd ?x985 (_ bv4 32))))
 (let ((?x587 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv1 32))) (select input.dst.llvm-mem ?x85))))
 (let ((?x588 (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x85 (_ bv2 32))) ?x587))))
 (let (($x1013 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x588 (concat ?x981 (concat ?x964 (concat ?x979 ?x974))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1010 ?x1012 false)))
 (let (($x263 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x892 (=> $x263 $x1013)))
 (let (($x307 (= $x263 (bvuge (ite (= (_ bv0 32) ?x588) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x246 (= false false)))
 (let (($x234 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x37 (=> $x234 $x246)))
 (let (($x459 (= $x234 (= (ite (= (_ bv0 32) ?x588) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x581 (and $x459 $x37)))
 (let (($x758 (and $x581 $x307)))
 (let (($x959 (and $x758 $x892)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x985 (_ bv1 32))) (select input.dst.llvm-mem ?x985))))
 (let ((?x844 (concat (select input.dst.llvm-mem (bvadd ?x985 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x985 (_ bv2 32))) ?x201))))
 (let (($x297 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x844)))
 (let (($x888 (and $x297 $x959)))
 (let (($x249 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x894 (=> $x249 $x888)))
 (let (($x742 (= $x249 (bvuge (ite (= (_ bv0 32) ?x985) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x71 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x706 (=> $x71 $x246)))
 (let (($x100 (= $x71 (= (ite (= (_ bv0 32) ?x985) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x438 (and $x100 $x706)))
 (let (($x379 (and $x438 $x742)))
 (let (($x931 (and $x379 $x894)))
 (let ((?x219 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv1 32))) (select input.dst.llvm-mem ?x56))))
 (let ((?x516 (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x56 (_ bv2 32))) ?x219))))
 (let (($x462 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x516)))
 (let (($x929 (and $x462 $x931)))
 (let (($x140 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x930 (=> $x140 $x929)))
 (let ((?x478 (ite (= (_ bv0 32) ?x56) (_ bv0 32) (_ bv1 32))))
 (let (($x149 (bvuge ?x478 (_ bv1 32))))
 (let (($x340 (= $x140 $x149)))
 (let (($x673 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x248 (=> $x673 $x246)))
 (let (($x178 (= ?x478 (_ bv0 32))))
 (let (($x436 (= $x673 $x178)))
 (let (($x717 (and $x436 $x248)))
 (let (($x377 (and $x717 $x340)))
 (let (($x932 (and $x377 $x930)))
 (let ((?x225 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x143 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x225)))
 (let ((?x638 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x143)))
 (let (($x314 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x638)))
 (let (($x934 (and $x314 $x932)))
 (let (($x191 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x935 (=> $x191 $x934)))
 (let ((?x418 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x6 (bvuge ?x418 (_ bv1 32))))
 (let (($x654 (= $x191 $x6)))
 (let (($x538 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x612 (=> $x538 $x246)))
 (let (($x271 (= ?x418 (_ bv0 32))))
 (let (($x804 (= $x538 $x271)))
 (let (($x828 (and $x804 $x612)))
 (let (($x510 (and $x828 $x654)))
 (let (($x927 (and $x510 $x935)))
 (let (($x928 (= $x927 true)))
 (let (($x884 (= $x928 true)))
 (let (($x165 (= input.spec-%var-l-1.2.1.2.0 ?x516)))
 (let (($x912 (and $x165 true)))
 (let (($x674 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x493 (=> $x674 $x912)))
 (let (($x616 (= $x674 $x149)))
 (let (($x500 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x435 (=> $x500 $x246)))
 (let (($x349 (= $x500 $x178)))
 (let (($x670 (and $x349 $x435)))
 (let (($x514 (and $x670 $x616)))
 (let (($x444 (and $x514 $x493)))
 (let (($x470 (= input.spec-%var-l-1.2.0 ?x638)))
 (let (($x156 (and $x470 $x444)))
 (let (($x243 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x760 (=> $x243 $x156)))
 (let (($x138 (= $x243 $x6)))
 (let (($x765 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x256 (=> $x765 $x246)))
 (let (($x821 (= $x765 $x271)))
 (let (($x442 (and $x821 $x256)))
 (let (($x447 (and $x442 $x138)))
 (let (($x990 (and $x447 $x760)))
 (let (($x625 (= $x990 true)))
 (let (($x779 (= $x625 true)))
 (let (($x47 (= $x779 true)))
 (let (($x35 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x516)))
 (let (($x288 (and $x35 true)))
 (let (($x614 (=> $x191 $x288)))
 (let (($x395 (= $x191 $x149)))
 (let (($x264 (= $x538 $x178)))
 (let (($x851 (and $x264 $x612)))
 (let (($x907 (and $x851 $x395)))
 (let (($x623 (and $x907 $x614)))
 (let (($x806 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x638)))
 (let (($x122 (and $x806 $x623)))
 (let (($x910 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x290 (=> $x910 $x122)))
 (let (($x631 (= $x910 $x6)))
 (let (($x5 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x841 (=> $x5 $x246)))
 (let (($x582 (= $x5 $x271)))
 (let (($x411 (and $x582 $x841)))
 (let (($x503 (and $x411 $x631)))
 (let (($x308 (and $x503 $x290)))
 (let (($x293 (= $x308 true)))
 (let (($x893 (= $x293 true)))
 (let (($x574 (= $x893 true)))
 (let ((?x244 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x594 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x185))))
 (let ((?x956 (concat (select input.dst.llvm-mem (bvadd ?x594 (_ bv1 32))) (select input.dst.llvm-mem ?x594))))
 (let ((?x954 (concat (select input.dst.llvm-mem (bvadd ?x594 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x594 (_ bv2 32))) ?x956))))
 (let (($x969 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x954)))
 (let (($x896 (and $x969 true)))
 (let (($x998 (=> $x191 $x896)))
 (let (($x576 (= $x191 (bvuge (ite (= (_ bv0 32) ?x594) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x937 (= $x538 (= (ite (= (_ bv0 32) ?x594) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x680 (and $x937 $x612)))
 (let (($x679 (and $x680 $x576)))
 (let (($x1001 (and $x679 $x998)))
 (let ((?x895 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x641 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x661 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem ?x661) (concat ?x641 (concat ?x347 ?x895)))))
 (let (($x303 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x407)))
 (let (($x996 (and $x303 $x1001)))
 (let (($x997 (=> $x910 $x996)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x615 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x117 (= $x910 (bvuge ?x615 (_ bv1 32)))))
 (let (($x619 (= $x5 (= ?x615 (_ bv0 32)))))
 (let (($x906 (and $x619 $x841)))
 (let (($x987 (and $x906 $x117)))
 (let (($x999 (and $x987 $x997)))
 (let (($x995 (= $x999 true)))
 (let (($x1004 (= $x995 true)))
 (let (($x899 (= $x1004 true)))
 (let ((?x848 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x153 (= (_ bv0 32) ?x848)))
 (let ((?x701 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x483 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x701)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x635 (and $x275 $x483)))
 (let (($x171 (and $x635 $x153)))
 (let (($x569 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x569 $x171)))
 (let (($x709 (= $x222 true)))
 (let (($x556 (= $x709 true)))
 (let (($x204 (= $x556 true)))
 (let ((?x311 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x141 (= (_ bv0 3) ?x311)))
 (let (($x296 (= $x141 true)))
 (let (($x265 (= $x296 true)))
 (let ((?x531 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x352 (bvneg ?x531)))
 (let (($x917 (= ?x352 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x13 (= $x917 true)))
 (let (($x160 (= $x13 true)))
 (let (($x287 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x509 (= $x287 true)))
 (let (($x16 (= $x509 true)))
 (let (($x420 (= $x16 true)))
 (let (($x777 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x336 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x104 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x336) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x336))))
 (let (($x373 (and true $x104)))
 (let (($x319 (and $x104 $x373)))
 (let ((?x391 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv1 32))) (select input.dst.llvm-mem ?x391))))
 (let ((?x480 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv2 32))) ?x110))))
 (let (($x849 (= (bvand ?x480 (_ bv4294967288 32)) ?x480)))
 (let (($x365 (= (bvand ?x391 (_ bv4294967292 32)) ?x391)))
 (let (($x15 (and $x365 $x849)))
 (let (($x144 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x391 (bvsub ?x391 (_ bv4 32))) (bvult ?x391 (bvsub ?x391 (_ bv4 32))))))
 (let (($x640 (and (and (and (and (and $x373 $x144) $x365) $x15) $x319) $x777)))
 (let (($x283 (= true $x640)))
 (let (($x652 (not $x731)))
 (let (($x24 (=> $x652 $x283)))
 (let (($x669 (= $x24 true)))
 (let (($x722 (= $x669 true)))
 (let (($x794 (= $x722 true)))
 (let (($x345 (= $x652 true)))
 (let (($x845 (= $x345 true)))
 (let (($x525 (= $x845 true)))
 (let (($x743 (and $x525 $x794)))
 (let (($x331 (and $x743 $x420)))
 (let (($x600 (and $x331 $x160)))
 (let (($x224 (and $x600 $x265)))
 (let (($x475 (and $x224 $x204)))
 (let (($x957 (and $x475 $x899)))
 (let (($x371 (and $x957 $x574)))
 (let (($x25 (and $x371 $x47)))
 (let (($x684 (and $x910 $x25)))
 (let (($x991 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x511 (and $x991 $x684)))
 (let (($x142 (bvugt ?x391 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x391 (_ bv3 32))))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x540 (=> (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x142)))))))
 (let (($x446 (=> (and $x652 (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x121 $x142)))))))
 (let (($x376 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x795 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x661)))
 (let (($x86 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x244 (_ bv1 32))) (or false (or false (and true (or $x795 $x376)))))))
 (let (($x982 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x244 (_ bv1 32)))) (or false (or false (and true (or $x795 $x376)))))))
 (let (($x469 (and $x982 $x446)))
 (let (($x66 (and $x469 $x511)))
 (let (($x933 (=> $x66 $x884)))
 (not $x933))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_10608 (_ BitVec 32)) (BOUND_VARIABLE_10609 (_ BitVec 32)) (BOUND_VARIABLE_10610 (_ BitVec 32)) (BOUND_VARIABLE_10611 (_ BitVec 32)) (BOUND_VARIABLE_10612 (_ BitVec 32)) (BOUND_VARIABLE_10613 (_ BitVec 32)) (BOUND_VARIABLE_10614 Bool) (BOUND_VARIABLE_10615 (_ BitVec 32)) (BOUND_VARIABLE_10616 (_ BitVec 32)) (BOUND_VARIABLE_10617 (_ BitVec 32)) (BOUND_VARIABLE_10618 (_ BitVec 32)) (BOUND_VARIABLE_10619 (_ BitVec 32)) (BOUND_VARIABLE_10620 (_ BitVec 32)) (BOUND_VARIABLE_10621 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv51507232 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2581461272 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2581461272 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2581461275 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffff80)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x7c787878)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x3c78787a)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x3c787881)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x78)
                                #x3c787885
                                #x7b)
                         #x7c78787f
                         #x3c)
                  #x3c78787f
                  #x7c)))
(let ((a!2 (store (store (store (store a!1 #x3c787882 #x3c) #x3c787888 #x3c)
                         #x3c787882
                         #x3c)
                  #x7c787879
                  #x3c)))
  (store (store a!2 #x3c787882 #x3c) #x3c78787f #x7c))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x7c787878)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x78783c78)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x78783c78)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xffffff83)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xffffff80)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x3c78787a)
              (= x!8 #x783c7878)
              (= x!9 #x78787878)
              (= x!10 #x3c78787a)
              (= x!11 #x78787c78)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x637 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x602 (concat (select input.dst.llvm-mem (bvadd ?x637 (_ bv1 32))) (select input.dst.llvm-mem ?x637))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x637 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x637 (_ bv2 32))) ?x602))))
 (let ((?x380 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x659 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x584 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x916 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x267 (concat ?x916 (concat ?x584 (concat ?x659 ?x380)))))
 (let ((?x579 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x253 (concat ?x691 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x513 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x746 (concat ?x489 (concat ?x513 ?x253))))
 (let ((?x825 (bvadd ?x746 (_ bv4 32))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x825 (_ bv1 32))) (select input.dst.llvm-mem ?x825))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x825 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x825 (_ bv2 32))) ?x424))))
 (let ((?x861 (bvadd ?x430 (_ bv4 32))))
 (let ((?x772 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv1 32))) (select input.dst.llvm-mem ?x861))))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv2 32))) ?x772))))
 (let ((?x1149 (bvadd ?x313 (_ bv4 32))))
 (let ((?x1153 (concat (select input.dst.llvm-mem (bvadd ?x1149 (_ bv1 32))) (select input.dst.llvm-mem ?x1149))))
 (let ((?x1159 (concat (select input.dst.llvm-mem (bvadd ?x1149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1149 (_ bv2 32))) ?x1153))))
 (let (($x1116 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1159 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x1078 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x1082 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x1078))))
 (let (($x1062 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.0 ?x1082)))
 (let (($x1086 (and $x1062 $x1116)))
 (let (($x878 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1090 (=> $x878 $x1086)))
 (let (($x887 (= $x878 (bvuge (ite (= (_ bv0 32) ?x313) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x626 (= false false)))
 (let (($x270 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x53 (=> $x270 $x626)))
 (let (($x521 (= $x270 (= (ite (= (_ bv0 32) ?x313) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x241 (and $x521 $x53)))
 (let (($x882 (and $x241 $x887)))
 (let (($x1093 (and $x882 $x1090)))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x553))))
 (let (($x337 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x494)))
 (let (($x1084 (and $x337 $x1093)))
 (let (($x382 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1087 (=> $x382 $x1084)))
 (let (($x84 (= $x382 (bvuge (ite (= (_ bv0 32) ?x430) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x130 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x774 (=> $x130 $x626)))
 (let (($x858 (= $x130 (= (ite (= (_ bv0 32) ?x430) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x853 (and $x858 $x774)))
 (let (($x922 (and $x853 $x84)))
 (let (($x1104 (and $x922 $x1087)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x746 (_ bv1 32))) (select input.dst.llvm-mem ?x746))))
 (let ((?x660 (concat (select input.dst.llvm-mem (bvadd ?x746 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x746 (_ bv2 32))) ?x342))))
 (let (($x819 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x660)))
 (let (($x1112 (and $x819 $x1104)))
 (let (($x919 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1110 (=> $x919 $x1112)))
 (let ((?x690 (ite (= (_ bv0 32) ?x746) (_ bv0 32) (_ bv1 32))))
 (let (($x557 (bvuge ?x690 (_ bv1 32))))
 (let (($x534 (= $x919 $x557)))
 (let (($x789 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x646 (=> $x789 $x626)))
 (let (($x398 (= ?x690 (_ bv0 32))))
 (let (($x226 (= $x789 $x398)))
 (let (($x135 (and $x226 $x646)))
 (let (($x397 (and $x135 $x534)))
 (let (($x1106 (and $x397 $x1110)))
 (let ((?x751 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x633 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x751)))
 (let ((?x914 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x633)))
 (let (($x786 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x914)))
 (let (($x1113 (and $x786 $x1106)))
 (let (($x99 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1109 (=> $x99 $x1113)))
 (let ((?x206 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x843 (bvuge ?x206 (_ bv1 32))))
 (let (($x921 (= $x99 $x843)))
 (let (($x812 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x340 (=> $x812 $x626)))
 (let (($x850 (= ?x206 (_ bv0 32))))
 (let (($x791 (= $x812 $x850)))
 (let (($x634 (and $x791 $x340)))
 (let (($x567 (and $x634 $x921)))
 (let (($x1107 (and $x567 $x1109)))
 (let (($x1105 (= $x1107 true)))
 (let (($x1108 (= $x1105 true)))
 (let (($x356 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x430 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let (($x710 (= input.spec-%var-l-1.2.1.2.0 ?x660)))
 (let (($x354 (and $x710 $x356)))
 (let (($x491 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x58 (=> $x491 $x354)))
 (let (($x257 (= $x491 $x557)))
 (let (($x847 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x21 (=> $x847 $x626)))
 (let (($x27 (= $x847 $x398)))
 (let (($x80 (and $x27 $x21)))
 (let (($x128 (and $x80 $x257)))
 (let (($x560 (and $x128 $x58)))
 (let (($x193 (= input.spec-%var-l-1.2.0 ?x914)))
 (let (($x338 (and $x193 $x560)))
 (let (($x755 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x939 (=> $x755 $x338)))
 (let (($x291 (= $x755 $x843)))
 (let (($x699 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x759 (=> $x699 $x626)))
 (let (($x648 (= $x699 $x850)))
 (let (($x846 (and $x648 $x759)))
 (let (($x528 (and $x846 $x291)))
 (let (($x215 (and $x528 $x939)))
 (let (($x279 (= $x215 true)))
 (let (($x427 (= $x279 true)))
 (let (($x274 (= $x427 true)))
 (let (($x131 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x430 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let (($x486 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x660)))
 (let (($x17 (and $x486 $x131)))
 (let (($x266 (=> $x99 $x17)))
 (let (($x750 (= $x99 $x557)))
 (let (($x548 (= $x812 $x398)))
 (let (($x714 (and $x548 $x340)))
 (let (($x522 (and $x714 $x750)))
 (let (($x168 (and $x522 $x266)))
 (let (($x801 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x914)))
 (let (($x627 (and $x801 $x168)))
 (let (($x631 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x119 (=> $x631 $x627)))
 (let (($x111 (= $x631 $x843)))
 (let (($x995 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x575 (=> $x995 $x626)))
 (let (($x78 (= $x995 $x850)))
 (let (($x151 (and $x78 $x575)))
 (let (($x304 (and $x151 $x111)))
 (let (($x328 (and $x304 $x119)))
 (let (($x284 (= $x328 true)))
 (let (($x339 (= $x284 true)))
 (let (($x839 (= $x339 true)))
 (let ((?x301 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x327))))
 (let ((?x944 (bvadd ?x107 (_ bv4 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x944 (_ bv1 32))) (select input.dst.llvm-mem ?x944))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x944 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x944 (_ bv2 32))) ?x137))))
 (let (($x360 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x223 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x935 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x935))))
 (let (($x894 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x309)))
 (let (($x14 (and $x894 $x360)))
 (let (($x74 (=> $x99 $x14)))
 (let (($x926 (= $x99 (bvuge (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x140 (= $x812 (= (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x462 (and $x140 $x340)))
 (let (($x201 (and $x462 $x926)))
 (let (($x667 (and $x201 $x74)))
 (let ((?x288 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x623 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x324 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x574 (concat (select input.dst.llvm-mem ?x324) (concat ?x308 (concat ?x623 ?x288)))))
 (let (($x371 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x574)))
 (let (($x479 (and $x371 $x667)))
 (let (($x506 (=> $x631 $x479)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1004 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (= $x631 (bvuge ?x1004 (_ bv1 32)))))
 (let (($x957 (= $x995 (= ?x1004 (_ bv0 32)))))
 (let (($x418 (and $x957 $x575)))
 (let (($x753 (and $x418 $x123)))
 (let (($x826 (and $x753 $x506)))
 (let (($x583 (= $x826 true)))
 (let (($x542 (= $x583 true)))
 (let (($x150 (= $x542 true)))
 (let ((?x204 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x475 (= (_ bv0 32) ?x204)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x709 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x556 (and $x171 $x709)))
 (let (($x803 (and $x556 $x475)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x153 $x803)))
 (let (($x615 (= $x5 true)))
 (let (($x686 (= $x615 true)))
 (let (($x619 (= $x686 true)))
 (let ((?x569 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x275 (= (_ bv0 3) ?x569)))
 (let (($x701 (= $x275 true)))
 (let (($x483 (= $x701 true)))
 (let ((?x600 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x175 (bvneg ?x600)))
 (let (($x141 (= ?x175 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x296 (= $x141 true)))
 (let (($x265 (= $x296 true)))
 (let (($x218 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x531 (= $x218 true)))
 (let (($x352 (= $x531 true)))
 (let (($x26 (= $x352 true)))
 (let (($x283 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x798 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x798) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x798))))
 (let (($x113 (and true $x144)))
 (let (($x777 (and $x144 $x113)))
 (let ((?x624 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x624 (_ bv1 32))) (select input.dst.llvm-mem ?x624))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x624 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x624 (_ bv2 32))) ?x110))))
 (let (($x552 (= (bvand ?x15 (_ bv4294967288 32)) ?x15)))
 (let (($x159 (= (bvand ?x624 (_ bv4294967292 32)) ?x624)))
 (let (($x453 (and $x159 $x552)))
 (let (($x456 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x624 (bvsub ?x624 (_ bv4 32))) (bvult ?x624 (bvsub ?x624 (_ bv4 32))))))
 (let (($x743 (and (and (and (and (and $x113 $x456) $x159) $x453) $x777) $x283)))
 (let (($x237 (= true $x743)))
 (let (($x652 (not $x731)))
 (let (($x287 (=> $x652 $x237)))
 (let (($x509 (= $x287 true)))
 (let (($x16 (= $x509 true)))
 (let (($x420 (= $x16 true)))
 (let (($x190 (= $x652 true)))
 (let (($x104 (= $x190 true)))
 (let (($x373 (= $x104 true)))
 (let (($x331 (and $x373 $x420)))
 (let (($x917 (and $x331 $x26)))
 (let (($x224 (and $x917 $x265)))
 (let (($x635 (and $x224 $x483)))
 (let (($x246 (and $x635 $x619)))
 (let (($x89 (and $x246 $x150)))
 (let (($x306 (and $x89 $x839)))
 (let (($x341 (and $x306 $x274)))
 (let (($x57 (and $x631 $x341)))
 (let (($x845 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x609 (and $x845 $x57)))
 (let (($x39 (bvugt ?x624 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x624 (_ bv3 32))))
 (let (($x601 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x991 (=> (bvule ?x624 (bvsub (bvadd ?x624 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x601 $x39)))))))
 (let (($x285 (=> (and $x652 (bvule ?x624 (bvsub (bvadd ?x624 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x601 $x39)))))))
 (let (($x989 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x242 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x301 (_ bv1 32))) (or false (or false (and true (or $x421 $x989)))))))
 (let (($x22 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x301 (_ bv1 32)))) (or false (or false (and true (or $x421 $x989)))))))
 (let (($x316 (and $x22 $x285)))
 (let (($x383 (and $x316 $x609)))
 (let (($x1111 (=> $x383 $x1108)))
 (not $x1111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x637 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x602 (concat (select input.dst.llvm-mem (bvadd ?x637 (_ bv1 32))) (select input.dst.llvm-mem ?x637))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x637 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x637 (_ bv2 32))) ?x602))))
 (let ((?x380 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x659 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x584 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x916 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x267 (concat ?x916 (concat ?x584 (concat ?x659 ?x380)))))
 (let ((?x579 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x253 (concat ?x691 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x513 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x489 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x746 (concat ?x489 (concat ?x513 ?x253))))
 (let ((?x825 (bvadd ?x746 (_ bv4 32))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd ?x825 (_ bv1 32))) (select input.dst.llvm-mem ?x825))))
 (let ((?x430 (concat (select input.dst.llvm-mem (bvadd ?x825 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x825 (_ bv2 32))) ?x424))))
 (let ((?x861 (bvadd ?x430 (_ bv4 32))))
 (let ((?x772 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv1 32))) (select input.dst.llvm-mem ?x861))))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x861 (_ bv2 32))) ?x772))))
 (let ((?x1149 (bvadd ?x313 (_ bv4 32))))
 (let ((?x1153 (concat (select input.dst.llvm-mem (bvadd ?x1149 (_ bv1 32))) (select input.dst.llvm-mem ?x1149))))
 (let ((?x1159 (concat (select input.dst.llvm-mem (bvadd ?x1149 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1149 (_ bv2 32))) ?x1153))))
 (let (($x1116 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1159 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x1078 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem ?x313))))
 (let ((?x1082 (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x313 (_ bv2 32))) ?x1078))))
 (let (($x1062 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.0 ?x1082)))
 (let (($x1086 (and $x1062 $x1116)))
 (let (($x878 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1090 (=> $x878 $x1086)))
 (let (($x887 (= $x878 (bvuge (ite (= (_ bv0 32) ?x313) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x626 (= false false)))
 (let (($x270 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x53 (=> $x270 $x626)))
 (let (($x521 (= $x270 (= (ite (= (_ bv0 32) ?x313) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x241 (and $x521 $x53)))
 (let (($x882 (and $x241 $x887)))
 (let (($x1093 (and $x882 $x1090)))
 (let ((?x553 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv1 32))) (select input.dst.llvm-mem ?x430))))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x430 (_ bv2 32))) ?x553))))
 (let (($x337 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x494)))
 (let (($x1084 (and $x337 $x1093)))
 (let (($x382 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1087 (=> $x382 $x1084)))
 (let (($x84 (= $x382 (bvuge (ite (= (_ bv0 32) ?x430) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x130 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x774 (=> $x130 $x626)))
 (let (($x858 (= $x130 (= (ite (= (_ bv0 32) ?x430) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x853 (and $x858 $x774)))
 (let (($x922 (and $x853 $x84)))
 (let (($x1104 (and $x922 $x1087)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x746 (_ bv1 32))) (select input.dst.llvm-mem ?x746))))
 (let ((?x660 (concat (select input.dst.llvm-mem (bvadd ?x746 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x746 (_ bv2 32))) ?x342))))
 (let (($x819 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x660)))
 (let (($x1112 (and $x819 $x1104)))
 (let (($x919 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1110 (=> $x919 $x1112)))
 (let ((?x690 (ite (= (_ bv0 32) ?x746) (_ bv0 32) (_ bv1 32))))
 (let (($x557 (bvuge ?x690 (_ bv1 32))))
 (let (($x534 (= $x919 $x557)))
 (let (($x789 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x646 (=> $x789 $x626)))
 (let (($x398 (= ?x690 (_ bv0 32))))
 (let (($x226 (= $x789 $x398)))
 (let (($x135 (and $x226 $x646)))
 (let (($x397 (and $x135 $x534)))
 (let (($x1106 (and $x397 $x1110)))
 (let ((?x751 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x633 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x751)))
 (let ((?x914 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x633)))
 (let (($x786 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x914)))
 (let (($x1113 (and $x786 $x1106)))
 (let (($x99 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1109 (=> $x99 $x1113)))
 (let ((?x206 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x843 (bvuge ?x206 (_ bv1 32))))
 (let (($x921 (= $x99 $x843)))
 (let (($x812 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x340 (=> $x812 $x626)))
 (let (($x850 (= ?x206 (_ bv0 32))))
 (let (($x791 (= $x812 $x850)))
 (let (($x634 (and $x791 $x340)))
 (let (($x567 (and $x634 $x921)))
 (let (($x1107 (and $x567 $x1109)))
 (let (($x1105 (= $x1107 true)))
 (let (($x1108 (= $x1105 true)))
 (let (($x356 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x430 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let (($x710 (= input.spec-%var-l-1.2.1.2.0 ?x660)))
 (let (($x354 (and $x710 $x356)))
 (let (($x491 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x58 (=> $x491 $x354)))
 (let (($x257 (= $x491 $x557)))
 (let (($x847 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x21 (=> $x847 $x626)))
 (let (($x27 (= $x847 $x398)))
 (let (($x80 (and $x27 $x21)))
 (let (($x128 (and $x80 $x257)))
 (let (($x560 (and $x128 $x58)))
 (let (($x193 (= input.spec-%var-l-1.2.0 ?x914)))
 (let (($x338 (and $x193 $x560)))
 (let (($x755 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x939 (=> $x755 $x338)))
 (let (($x291 (= $x755 $x843)))
 (let (($x699 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x759 (=> $x699 $x626)))
 (let (($x648 (= $x699 $x850)))
 (let (($x846 (and $x648 $x759)))
 (let (($x528 (and $x846 $x291)))
 (let (($x215 (and $x528 $x939)))
 (let (($x279 (= $x215 true)))
 (let (($x427 (= $x279 true)))
 (let (($x274 (= $x427 true)))
 (let (($x131 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x430 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let (($x486 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x660)))
 (let (($x17 (and $x486 $x131)))
 (let (($x266 (=> $x99 $x17)))
 (let (($x750 (= $x99 $x557)))
 (let (($x548 (= $x812 $x398)))
 (let (($x714 (and $x548 $x340)))
 (let (($x522 (and $x714 $x750)))
 (let (($x168 (and $x522 $x266)))
 (let (($x801 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x914)))
 (let (($x627 (and $x801 $x168)))
 (let (($x631 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x119 (=> $x631 $x627)))
 (let (($x111 (= $x631 $x843)))
 (let (($x995 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x575 (=> $x995 $x626)))
 (let (($x78 (= $x995 $x850)))
 (let (($x151 (and $x78 $x575)))
 (let (($x304 (and $x151 $x111)))
 (let (($x328 (and $x304 $x119)))
 (let (($x284 (= $x328 true)))
 (let (($x339 (= $x284 true)))
 (let (($x839 (= $x339 true)))
 (let ((?x301 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv1 32))) (select input.dst.llvm-mem ?x301))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x301 (_ bv2 32))) ?x327))))
 (let ((?x944 (bvadd ?x107 (_ bv4 32))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x944 (_ bv1 32))) (select input.dst.llvm-mem ?x944))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x944 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x944 (_ bv2 32))) ?x137))))
 (let (($x360 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x223 ?x579 false ?x267 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x935 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem ?x107))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x107 (_ bv2 32))) ?x935))))
 (let (($x894 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x309)))
 (let (($x14 (and $x894 $x360)))
 (let (($x74 (=> $x99 $x14)))
 (let (($x926 (= $x99 (bvuge (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x140 (= $x812 (= (ite (= (_ bv0 32) ?x107) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x462 (and $x140 $x340)))
 (let (($x201 (and $x462 $x926)))
 (let (($x667 (and $x201 $x74)))
 (let ((?x288 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x623 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x324 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x574 (concat (select input.dst.llvm-mem ?x324) (concat ?x308 (concat ?x623 ?x288)))))
 (let (($x371 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x574)))
 (let (($x479 (and $x371 $x667)))
 (let (($x506 (=> $x631 $x479)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1004 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x123 (= $x631 (bvuge ?x1004 (_ bv1 32)))))
 (let (($x957 (= $x995 (= ?x1004 (_ bv0 32)))))
 (let (($x418 (and $x957 $x575)))
 (let (($x753 (and $x418 $x123)))
 (let (($x826 (and $x753 $x506)))
 (let (($x583 (= $x826 true)))
 (let (($x542 (= $x583 true)))
 (let (($x150 (= $x542 true)))
 (let ((?x204 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x475 (= (_ bv0 32) ?x204)))
 (let ((?x222 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x709 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x222)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x556 (and $x171 $x709)))
 (let (($x803 (and $x556 $x475)))
 (let (($x153 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (and $x153 $x803)))
 (let (($x615 (= $x5 true)))
 (let (($x686 (= $x615 true)))
 (let (($x619 (= $x686 true)))
 (let ((?x569 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x275 (= (_ bv0 3) ?x569)))
 (let (($x701 (= $x275 true)))
 (let (($x483 (= $x701 true)))
 (let ((?x600 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x175 (bvneg ?x600)))
 (let (($x141 (= ?x175 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x296 (= $x141 true)))
 (let (($x265 (= $x296 true)))
 (let (($x218 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x531 (= $x218 true)))
 (let (($x352 (= $x531 true)))
 (let (($x26 (= $x352 true)))
 (let (($x283 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x798 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x144 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x798) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x798))))
 (let (($x113 (and true $x144)))
 (let (($x777 (and $x144 $x113)))
 (let ((?x624 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x624 (_ bv1 32))) (select input.dst.llvm-mem ?x624))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x624 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x624 (_ bv2 32))) ?x110))))
 (let (($x552 (= (bvand ?x15 (_ bv4294967288 32)) ?x15)))
 (let (($x159 (= (bvand ?x624 (_ bv4294967292 32)) ?x624)))
 (let (($x453 (and $x159 $x552)))
 (let (($x456 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x624 (bvsub ?x624 (_ bv4 32))) (bvult ?x624 (bvsub ?x624 (_ bv4 32))))))
 (let (($x743 (and (and (and (and (and $x113 $x456) $x159) $x453) $x777) $x283)))
 (let (($x237 (= true $x743)))
 (let (($x652 (not $x731)))
 (let (($x287 (=> $x652 $x237)))
 (let (($x509 (= $x287 true)))
 (let (($x16 (= $x509 true)))
 (let (($x420 (= $x16 true)))
 (let (($x190 (= $x652 true)))
 (let (($x104 (= $x190 true)))
 (let (($x373 (= $x104 true)))
 (let (($x331 (and $x373 $x420)))
 (let (($x917 (and $x331 $x26)))
 (let (($x224 (and $x917 $x265)))
 (let (($x635 (and $x224 $x483)))
 (let (($x246 (and $x635 $x619)))
 (let (($x89 (and $x246 $x150)))
 (let (($x306 (and $x89 $x839)))
 (let (($x341 (and $x306 $x274)))
 (let (($x57 (and $x631 $x341)))
 (let (($x845 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x609 (and $x845 $x57)))
 (let (($x39 (bvugt ?x624 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x624 (_ bv3 32))))
 (let (($x601 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x991 (=> (bvule ?x624 (bvsub (bvadd ?x624 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x601 $x39)))))))
 (let (($x285 (=> (and $x652 (bvule ?x624 (bvsub (bvadd ?x624 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x601 $x39)))))))
 (let (($x989 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x421 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x324)))
 (let (($x242 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x301 (_ bv1 32))) (or false (or false (and true (or $x421 $x989)))))))
 (let (($x22 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x301 (_ bv1 32)))) (or false (or false (and true (or $x421 $x989)))))))
 (let (($x316 (and $x22 $x285)))
 (let (($x383 (and $x316 $x609)))
 (let (($x1111 (=> $x383 $x1108)))
 (not $x1111))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x10002004)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!58))
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x10002007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x10002004)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000001)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      false
      true)))
  (define-fun k!58 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x08
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000002) #x00
      #x00)))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000002)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!60))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfe179800)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x10000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfe179803)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfe179800)
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #xfffffff8)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #xfffffff8)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x857 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x494))))
 (let ((?x378 ((_ extract 2 0) ?x857)))
 (let (($x410 (= (_ bv0 3) ?x378)))
 (let (($x432 (= $x410 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x461 (= (_ bv0 3) ?x97)))
 (let (($x741 (= $x461 true)))
 (let (($x102 (= $x741 true)))
 (let (($x518 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x551 (= $x518 true)))
 (let (($x836 (= $x551 true)))
 (let (($x381 (= $x836 true)))
 (let ((?x795 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x671 (concat (select input.dst.llvm-mem (bvadd ?x795 (_ bv1 32))) (select input.dst.llvm-mem ?x795))))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd ?x795 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x795 (_ bv2 32))) ?x671))))
 (let ((?x591 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x591))))
 (let (($x163 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x170)))
 (let (($x321 (and $x163 true)))
 (let (($x127 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x778 (=> $x127 $x321)))
 (let (($x180 (= $x127 (bvuge (ite (= (_ bv0 32) ?x485) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x204 (= false false)))
 (let (($x32 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x255 (=> $x32 $x204)))
 (let (($x464 (= $x32 (= (ite (= (_ bv0 32) ?x485) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x41 (and $x464 $x255)))
 (let (($x68 (and $x41 $x180)))
 (let (($x406 (and $x68 $x778)))
 (let ((?x538 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x729 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x909 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x40 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x490 (concat (select input.dst.llvm-mem ?x40) (concat ?x909 (concat ?x729 ?x538)))))
 (let (($x182 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x490)))
 (let (($x501 (and $x182 $x406)))
 (let (($x1114 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x38 (=> $x1114 $x501)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1112 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (= $x1114 (bvuge ?x1112 (_ bv1 32)))))
 (let (($x1104 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1113 (=> $x1104 $x204)))
 (let (($x1106 (= $x1104 (= ?x1112 (_ bv0 32)))))
 (let (($x1109 (and $x1106 $x1113)))
 (let (($x525 (and $x1109 $x184)))
 (let (($x91 (and $x525 $x38)))
 (let (($x239 (= $x91 true)))
 (let (($x771 (= $x239 true)))
 (let (($x816 (= $x771 true)))
 (let (($x772 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x858 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x366 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x858) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x858))))
 (let (($x84 (and true $x366)))
 (let (($x905 (and $x366 $x84)))
 (let (($x788 (= (bvand ?x857 (_ bv4294967288 32)) ?x857)))
 (let (($x440 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let (($x866 (and $x440 $x788)))
 (let (($x207 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv4 32))) (bvult ?x276 (bvsub ?x276 (_ bv4 32))))))
 (let (($x55 (and (and (and (and (and $x84 $x207) $x440) $x866) $x905) $x772)))
 (let (($x521 (= true $x55)))
 (let (($x652 (not $x731)))
 (let (($x53 (=> $x652 $x521)))
 (let (($x241 (= $x53 true)))
 (let (($x878 (= $x241 true)))
 (let (($x948 (= $x878 true)))
 (let (($x130 (= $x652 true)))
 (let (($x103 (= $x130 true)))
 (let (($x384 (= $x103 true)))
 (let ((?x646 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x646)))
 (let ((?x830 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x789 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x830)))
 (let (($x786 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x786 $x789)))
 (let (($x919 (and $x226 $x135)))
 (let (($x567 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x534 (and $x567 $x919)))
 (let (($x397 (= $x534 true)))
 (let (($x554 (= $x397 true)))
 (let (($x819 (= $x554 true)))
 (let ((?x274 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x341 (bvneg ?x274)))
 (let (($x609 (= ?x341 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x383 (= $x609 true)))
 (let (($x791 (= $x383 true)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x151 (concat ?x78 (concat ?x449 ?x89))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x356))))
 (let (($x491 (= input.spec-%var-l-1.2.1.2.0 ?x215)))
 (let (($x257 (and $x491 true)))
 (let (($x253 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x27 (=> $x253 $x257)))
 (let (($x691 (= $x253 (bvuge (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x479 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x479 $x204)))
 (let (($x14 (= $x479 (= (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x506 (and $x14 $x74)))
 (let (($x471 (and $x506 $x691)))
 (let (($x21 (and $x471 $x27)))
 (let ((?x880 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x932 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x880)))
 (let ((?x935 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x932)))
 (let (($x884 (= input.spec-%var-l-1.2.0 ?x935)))
 (let (($x193 (and $x884 $x21)))
 (let (($x995 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x726 (=> $x995 $x193)))
 (let (($x899 (= $x995 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x153 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x475 (=> $x153 $x204)))
 (let (($x556 (= $x153 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x803 (and $x556 $x475)))
 (let (($x957 (and $x803 $x899)))
 (let (($x528 (and $x957 $x726)))
 (let (($x847 (= $x528 true)))
 (let (($x80 (= $x847 true)))
 (let (($x128 (= $x80 true)))
 (let (($x634 (and $x128 $x791)))
 (let (($x505 (and $x634 $x819)))
 (let (($x643 (and $x505 $x384)))
 (let (($x887 (and $x643 $x948)))
 (let (($x48 (and $x887 $x816)))
 (let (($x404 (and $x48 $x381)))
 (let (($x29 (and $x404 $x102)))
 (let (($x33 (and $x1114 $x29)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x152 (and $x104 $x33)))
 (let (($x446 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x276 (_ bv3 32))))
 (let (($x540 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x845 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x540 $x446)))))))
 (let (($x176 (=> (and $x652 (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x540 $x446)))))))
 (let (($x982 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x142 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x795 (_ bv1 32))) (or false (or false (and true (or $x86 $x982)))))))
 (let (($x661 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x795 (_ bv1 32)))) (or false (or false (and true (or $x86 $x982)))))))
 (let (($x611 (and $x661 $x176)))
 (let (($x189 (and $x611 $x152)))
 (let (($x273 (=> $x189 $x432)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x276 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x494 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem ?x276))))
 (let ((?x857 (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x276 (_ bv2 32))) ?x494))))
 (let ((?x378 ((_ extract 2 0) ?x857)))
 (let (($x410 (= (_ bv0 3) ?x378)))
 (let (($x432 (= $x410 true)))
 (let ((?x97 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x461 (= (_ bv0 3) ?x97)))
 (let (($x741 (= $x461 true)))
 (let (($x102 (= $x741 true)))
 (let (($x518 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x551 (= $x518 true)))
 (let (($x836 (= $x551 true)))
 (let (($x381 (= $x836 true)))
 (let ((?x795 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x671 (concat (select input.dst.llvm-mem (bvadd ?x795 (_ bv1 32))) (select input.dst.llvm-mem ?x795))))
 (let ((?x485 (concat (select input.dst.llvm-mem (bvadd ?x795 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x795 (_ bv2 32))) ?x671))))
 (let ((?x591 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv1 32))) (select input.dst.llvm-mem ?x485))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x485 (_ bv2 32))) ?x591))))
 (let (($x163 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x170)))
 (let (($x321 (and $x163 true)))
 (let (($x127 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x778 (=> $x127 $x321)))
 (let (($x180 (= $x127 (bvuge (ite (= (_ bv0 32) ?x485) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x204 (= false false)))
 (let (($x32 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x255 (=> $x32 $x204)))
 (let (($x464 (= $x32 (= (ite (= (_ bv0 32) ?x485) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x41 (and $x464 $x255)))
 (let (($x68 (and $x41 $x180)))
 (let (($x406 (and $x68 $x778)))
 (let ((?x538 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x729 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x909 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x40 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x490 (concat (select input.dst.llvm-mem ?x40) (concat ?x909 (concat ?x729 ?x538)))))
 (let (($x182 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x490)))
 (let (($x501 (and $x182 $x406)))
 (let (($x1114 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x38 (=> $x1114 $x501)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1112 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x184 (= $x1114 (bvuge ?x1112 (_ bv1 32)))))
 (let (($x1104 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1113 (=> $x1104 $x204)))
 (let (($x1106 (= $x1104 (= ?x1112 (_ bv0 32)))))
 (let (($x1109 (and $x1106 $x1113)))
 (let (($x525 (and $x1109 $x184)))
 (let (($x91 (and $x525 $x38)))
 (let (($x239 (= $x91 true)))
 (let (($x771 (= $x239 true)))
 (let (($x816 (= $x771 true)))
 (let (($x772 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x858 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x366 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x858) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x858))))
 (let (($x84 (and true $x366)))
 (let (($x905 (and $x366 $x84)))
 (let (($x788 (= (bvand ?x857 (_ bv4294967288 32)) ?x857)))
 (let (($x440 (= (bvand ?x276 (_ bv4294967292 32)) ?x276)))
 (let (($x866 (and $x440 $x788)))
 (let (($x207 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x276 (bvsub ?x276 (_ bv4 32))) (bvult ?x276 (bvsub ?x276 (_ bv4 32))))))
 (let (($x55 (and (and (and (and (and $x84 $x207) $x440) $x866) $x905) $x772)))
 (let (($x521 (= true $x55)))
 (let (($x652 (not $x731)))
 (let (($x53 (=> $x652 $x521)))
 (let (($x241 (= $x53 true)))
 (let (($x878 (= $x241 true)))
 (let (($x948 (= $x878 true)))
 (let (($x130 (= $x652 true)))
 (let (($x103 (= $x130 true)))
 (let (($x384 (= $x103 true)))
 (let ((?x646 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x135 (= (_ bv0 32) ?x646)))
 (let ((?x830 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x789 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x830)))
 (let (($x786 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x226 (and $x786 $x789)))
 (let (($x919 (and $x226 $x135)))
 (let (($x567 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x534 (and $x567 $x919)))
 (let (($x397 (= $x534 true)))
 (let (($x554 (= $x397 true)))
 (let (($x819 (= $x554 true)))
 (let ((?x274 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x341 (bvneg ?x274)))
 (let (($x609 (= ?x341 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x383 (= $x609 true)))
 (let (($x791 (= $x383 true)))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x150 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x151 (concat ?x78 (concat ?x449 ?x89))))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x356))))
 (let (($x491 (= input.spec-%var-l-1.2.1.2.0 ?x215)))
 (let (($x257 (and $x491 true)))
 (let (($x253 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x27 (=> $x253 $x257)))
 (let (($x691 (= $x253 (bvuge (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x479 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x74 (=> $x479 $x204)))
 (let (($x14 (= $x479 (= (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x506 (and $x14 $x74)))
 (let (($x471 (and $x506 $x691)))
 (let (($x21 (and $x471 $x27)))
 (let ((?x880 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x932 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x880)))
 (let ((?x935 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x932)))
 (let (($x884 (= input.spec-%var-l-1.2.0 ?x935)))
 (let (($x193 (and $x884 $x21)))
 (let (($x995 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x726 (=> $x995 $x193)))
 (let (($x899 (= $x995 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x153 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x475 (=> $x153 $x204)))
 (let (($x556 (= $x153 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x803 (and $x556 $x475)))
 (let (($x957 (and $x803 $x899)))
 (let (($x528 (and $x957 $x726)))
 (let (($x847 (= $x528 true)))
 (let (($x80 (= $x847 true)))
 (let (($x128 (= $x80 true)))
 (let (($x634 (and $x128 $x791)))
 (let (($x505 (and $x634 $x819)))
 (let (($x643 (and $x505 $x384)))
 (let (($x887 (and $x643 $x948)))
 (let (($x48 (and $x887 $x816)))
 (let (($x404 (and $x48 $x381)))
 (let (($x29 (and $x404 $x102)))
 (let (($x33 (and $x1114 $x29)))
 (let (($x104 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x152 (and $x104 $x33)))
 (let (($x446 (bvugt ?x276 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x276 (_ bv3 32))))
 (let (($x540 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x845 (=> (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x540 $x446)))))))
 (let (($x176 (=> (and $x652 (bvule ?x276 (bvsub (bvadd ?x276 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x540 $x446)))))))
 (let (($x982 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x142 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x795 (_ bv1 32))) (or false (or false (and true (or $x86 $x982)))))))
 (let (($x661 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x795 (_ bv1 32)))) (or false (or false (and true (or $x86 $x982)))))))
 (let (($x611 (and $x661 $x176)))
 (let (($x189 (and $x611 $x152)))
 (let (($x273 (=> $x189 $x432)))
 (not $x273)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x660 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x605 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x391 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x522 (concat (select input.dst.llvm-mem ?x391) (concat ?x605 (concat ?x389 ?x660)))))
 (let ((?x824 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x522)))
 (let ((?x51 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x164 (bvmul (_ bv4294967295 32) ?x51)))
 (let ((?x945 (bvneg ?x164)))
 (let (($x920 (= ?x945 ?x824)))
 (let (($x162 (= $x920 true)))
 (let ((?x677 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x897 (bvneg ?x677)))
 (let (($x443 (= ?x897 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x221 (= $x443 true)))
 (let (($x549 (= $x221 true)))
 (let ((?x409 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= (_ bv0 3) ?x409)))
 (let (($x278 (= $x94 true)))
 (let (($x725 (= $x278 true)))
 (let (($x802 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x272 (= $x802 true)))
 (let (($x188 (= $x272 true)))
 (let (($x323 (= $x188 true)))
 (let ((?x421 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv1 32))) (select input.dst.llvm-mem ?x421))))
 (let ((?x895 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv2 32))) ?x303))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv1 32))) (select input.dst.llvm-mem ?x895))))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv2 32))) ?x10))))
 (let (($x563 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x541)))
 (let (($x177 (and $x563 true)))
 (let (($x529 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x632 (=> $x529 $x177)))
 (let (($x372 (= $x529 (bvuge (ite (= (_ bv0 32) ?x895) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x427 (= false false)))
 (let (($x1111 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1105 (=> $x1111 $x427)))
 (let (($x1107 (= $x1111 (= (ite (= (_ bv0 32) ?x895) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x7 (and $x1107 $x1105)))
 (let (($x675 (and $x7 $x372)))
 (let (($x369 (and $x675 $x632)))
 (let (($x198 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x522)))
 (let (($x245 (and $x198 $x369)))
 (let (($x266 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x355 (=> $x266 $x245)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x944 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x430 (= $x266 (bvuge ?x944 (_ bv1 32)))))
 (let (($x915 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x757 (=> $x915 $x427)))
 (let (($x44 (= $x915 (= ?x944 (_ bv0 32)))))
 (let (($x690 (and $x44 $x757)))
 (let (($x424 (and $x690 $x430)))
 (let (($x145 (and $x424 $x355)))
 (let (($x704 (= $x145 true)))
 (let (($x668 (= $x704 true)))
 (let (($x408 (= $x668 true)))
 (let (($x267 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x999 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x346 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x999) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x999))))
 (let (($x761 (and true $x346)))
 (let (($x808 (and $x346 $x761)))
 (let ((?x121 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x123))))
 (let (($x205 (= (bvand ?x288 (_ bv4294967288 32)) ?x288)))
 (let (($x614 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x940 (and $x614 $x205)))
 (let (($x187 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x121 (bvsub ?x121 (_ bv4 32))) (bvult ?x121 (bvsub ?x121 (_ bv4 32))))))
 (let (($x666 (and (and (and (and (and $x761 $x187) $x614) $x940) $x808) $x267)))
 (let (($x368 (= true $x666)))
 (let (($x652 (not $x731)))
 (let (($x924 (=> $x652 $x368)))
 (let (($x93 (= $x924 true)))
 (let (($x949 (= $x93 true)))
 (let (($x116 (= $x949 true)))
 (let (($x615 (= $x652 true)))
 (let (($x686 (= $x615 true)))
 (let (($x619 (= $x686 true)))
 (let ((?x917 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x917)))
 (let ((?x509 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x331 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x509)))
 (let (($x420 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x531 (and $x420 $x331)))
 (let (($x370 (and $x531 $x113)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x16 $x370)))
 (let (($x701 (= $x275 true)))
 (let (($x483 (= $x701 true)))
 (let (($x635 (= $x483 true)))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x75 (concat ?x689 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x947 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x767 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x767 (concat ?x947 ?x75))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x160))))
 (let (($x224 (= input.spec-%var-l-1.2.1.2.0 ?x445)))
 (let (($x322 (and $x224 true)))
 (let (($x29 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x237 (=> $x29 $x322)))
 (let (($x741 (= $x29 (bvuge (ite (= (_ bv0 32) ?x170) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x180 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x127 (=> $x180 $x427)))
 (let (($x41 (= $x180 (= (ite (= (_ bv0 32) ?x170) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x68 (and $x41 $x127)))
 (let (($x102 (and $x68 $x741)))
 (let (($x287 (and $x102 $x237)))
 (let ((?x876 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x855 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x876)))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x855)))
 (let (($x53 (= input.spec-%var-l-1.2.0 ?x521)))
 (let (($x777 (and $x53 $x287)))
 (let (($x567 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x283 (=> $x567 $x777)))
 (let (($x830 (= $x567 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x528 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x274 (=> $x528 $x427)))
 (let (($x279 (= $x528 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x341 (and $x279 $x274)))
 (let (($x789 (and $x341 $x830)))
 (let (($x15 (and $x789 $x283)))
 (let (($x743 (= $x15 true)))
 (let (($x13 (= $x743 true)))
 (let (($x141 (= $x13 true)))
 (let (($x5 (and $x141 $x635)))
 (let (($x246 (and $x5 $x619)))
 (let (($x423 (and $x246 $x116)))
 (let (($x610 (and $x423 $x408)))
 (let (($x901 (and $x610 $x323)))
 (let (($x419 (and $x901 $x725)))
 (let (($x212 (and $x419 $x549)))
 (let (($x535 (and $x266 $x212)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x472 (and $x153 $x535)))
 (let (($x285 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x121 (_ bv3 32))))
 (let (($x991 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x104 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x991 $x285)))))))
 (let (($x345 (=> (and $x652 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x991 $x285)))))))
 (let (($x22 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x391)))
 (let (($x39 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x421 (_ bv1 32))) (or false (or false (and true (or $x242 $x22)))))))
 (let (($x324 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x421 (_ bv1 32)))) (or false (or false (and true (or $x242 $x22)))))))
 (let (($x734 (and $x324 $x345)))
 (let (($x298 (and $x734 $x472)))
 (let (($x87 (=> $x298 $x162)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x660 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x605 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x391 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x522 (concat (select input.dst.llvm-mem ?x391) (concat ?x605 (concat ?x389 ?x660)))))
 (let ((?x824 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x522)))
 (let ((?x51 (bvadd input.spec-%var-sum-0.L2%6%bbentry input.spec-%var-l-0.L2%6%bbentry.2.0)))
 (let ((?x164 (bvmul (_ bv4294967295 32) ?x51)))
 (let ((?x945 (bvneg ?x164)))
 (let (($x920 (= ?x945 ?x824)))
 (let (($x162 (= $x920 true)))
 (let ((?x677 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x897 (bvneg ?x677)))
 (let (($x443 (= ?x897 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x221 (= $x443 true)))
 (let (($x549 (= $x221 true)))
 (let ((?x409 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x94 (= (_ bv0 3) ?x409)))
 (let (($x278 (= $x94 true)))
 (let (($x725 (= $x278 true)))
 (let (($x802 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x272 (= $x802 true)))
 (let (($x188 (= $x272 true)))
 (let (($x323 (= $x188 true)))
 (let ((?x421 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv1 32))) (select input.dst.llvm-mem ?x421))))
 (let ((?x895 (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x421 (_ bv2 32))) ?x303))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv1 32))) (select input.dst.llvm-mem ?x895))))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv2 32))) ?x10))))
 (let (($x563 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x541)))
 (let (($x177 (and $x563 true)))
 (let (($x529 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x632 (=> $x529 $x177)))
 (let (($x372 (= $x529 (bvuge (ite (= (_ bv0 32) ?x895) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x427 (= false false)))
 (let (($x1111 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1105 (=> $x1111 $x427)))
 (let (($x1107 (= $x1111 (= (ite (= (_ bv0 32) ?x895) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x7 (and $x1107 $x1105)))
 (let (($x675 (and $x7 $x372)))
 (let (($x369 (and $x675 $x632)))
 (let (($x198 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x522)))
 (let (($x245 (and $x198 $x369)))
 (let (($x266 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x355 (=> $x266 $x245)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x944 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x430 (= $x266 (bvuge ?x944 (_ bv1 32)))))
 (let (($x915 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x757 (=> $x915 $x427)))
 (let (($x44 (= $x915 (= ?x944 (_ bv0 32)))))
 (let (($x690 (and $x44 $x757)))
 (let (($x424 (and $x690 $x430)))
 (let (($x145 (and $x424 $x355)))
 (let (($x704 (= $x145 true)))
 (let (($x668 (= $x704 true)))
 (let (($x408 (= $x668 true)))
 (let (($x267 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x999 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x346 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x999) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x999))))
 (let (($x761 (and true $x346)))
 (let (($x808 (and $x346 $x761)))
 (let ((?x121 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem ?x121))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x121 (_ bv2 32))) ?x123))))
 (let (($x205 (= (bvand ?x288 (_ bv4294967288 32)) ?x288)))
 (let (($x614 (= (bvand ?x121 (_ bv4294967292 32)) ?x121)))
 (let (($x940 (and $x614 $x205)))
 (let (($x187 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x121 (bvsub ?x121 (_ bv4 32))) (bvult ?x121 (bvsub ?x121 (_ bv4 32))))))
 (let (($x666 (and (and (and (and (and $x761 $x187) $x614) $x940) $x808) $x267)))
 (let (($x368 (= true $x666)))
 (let (($x652 (not $x731)))
 (let (($x924 (=> $x652 $x368)))
 (let (($x93 (= $x924 true)))
 (let (($x949 (= $x93 true)))
 (let (($x116 (= $x949 true)))
 (let (($x615 (= $x652 true)))
 (let (($x686 (= $x615 true)))
 (let (($x619 (= $x686 true)))
 (let ((?x917 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x113 (= (_ bv0 32) ?x917)))
 (let ((?x509 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x331 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x509)))
 (let (($x420 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x531 (and $x420 $x331)))
 (let (($x370 (and $x531 $x113)))
 (let (($x16 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x275 (and $x16 $x370)))
 (let (($x701 (= $x275 true)))
 (let (($x483 (= $x701 true)))
 (let (($x635 (= $x483 true)))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x75 (concat ?x689 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x947 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x767 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x170 (concat ?x767 (concat ?x947 ?x75))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x445 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x160))))
 (let (($x224 (= input.spec-%var-l-1.2.1.2.0 ?x445)))
 (let (($x322 (and $x224 true)))
 (let (($x29 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x237 (=> $x29 $x322)))
 (let (($x741 (= $x29 (bvuge (ite (= (_ bv0 32) ?x170) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x180 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x127 (=> $x180 $x427)))
 (let (($x41 (= $x180 (= (ite (= (_ bv0 32) ?x170) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x68 (and $x41 $x127)))
 (let (($x102 (and $x68 $x741)))
 (let (($x287 (and $x102 $x237)))
 (let ((?x876 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x855 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x876)))
 (let ((?x521 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x855)))
 (let (($x53 (= input.spec-%var-l-1.2.0 ?x521)))
 (let (($x777 (and $x53 $x287)))
 (let (($x567 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x283 (=> $x567 $x777)))
 (let (($x830 (= $x567 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x528 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x274 (=> $x528 $x427)))
 (let (($x279 (= $x528 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x341 (and $x279 $x274)))
 (let (($x789 (and $x341 $x830)))
 (let (($x15 (and $x789 $x283)))
 (let (($x743 (= $x15 true)))
 (let (($x13 (= $x743 true)))
 (let (($x141 (= $x13 true)))
 (let (($x5 (and $x141 $x635)))
 (let (($x246 (and $x5 $x619)))
 (let (($x423 (and $x246 $x116)))
 (let (($x610 (and $x423 $x408)))
 (let (($x901 (and $x610 $x323)))
 (let (($x419 (and $x901 $x725)))
 (let (($x212 (and $x419 $x549)))
 (let (($x535 (and $x266 $x212)))
 (let (($x153 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x472 (and $x153 $x535)))
 (let (($x285 (bvugt ?x121 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x121 (_ bv3 32))))
 (let (($x991 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x104 (=> (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x991 $x285)))))))
 (let (($x345 (=> (and $x652 (bvule ?x121 (bvsub (bvadd ?x121 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x991 $x285)))))))
 (let (($x22 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x242 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x391)))
 (let (($x39 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x421 (_ bv1 32))) (or false (or false (and true (or $x242 $x22)))))))
 (let (($x324 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x421 (_ bv1 32)))) (or false (or false (and true (or $x242 $x22)))))))
 (let (($x734 (and $x324 $x345)))
 (let (($x298 (and $x734 $x472)))
 (let (($x87 (=> $x298 $x162)))
 (not $x87))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x601 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x858 (concat (select input.dst.llvm-mem (bvadd ?x601 (_ bv1 32))) (select input.dst.llvm-mem ?x601))))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x601 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x601 (_ bv2 32))) ?x858))))
 (let (($x400 (bvule ?x854 (_ bv4294967294 32))))
 (let (($x512 (= $x400 true)))
 (let (($x194 (= $x512 true)))
 (let ((?x348 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x114 (= (_ bv0 3) ?x348)))
 (let (($x252 (= $x114 true)))
 (let (($x647 (= $x252 true)))
 (let (($x325 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x50 (= $x325 true)))
 (let (($x61 (= $x50 true)))
 (let (($x115 (= $x61 true)))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x801 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x755 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x801))))
 (let ((?x502 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv1 32))) (select input.dst.llvm-mem ?x755))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv2 32))) ?x502))))
 (let (($x117 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x386)))
 (let (($x405 (and $x117 true)))
 (let (($x326 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x364 (=> $x326 $x405)))
 (let (($x211 (= $x326 (bvuge (ite (= (_ bv0 32) ?x755) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x16 (= false false)))
 (let (($x607 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x751 (=> $x607 $x16)))
 (let (($x426 (= $x607 (= (ite (= (_ bv0 32) ?x755) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x361 (and $x426 $x751)))
 (let (($x1093 (and $x361 $x211)))
 (let (($x495 (and $x1093 $x364)))
 (let ((?x533 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x624 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x196 (concat (select input.dst.llvm-mem ?x624) (concat ?x320 (concat ?x144 ?x533)))))
 (let (($x412 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x196)))
 (let (($x282 (and $x412 $x495)))
 (let (($x136 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x744 (=> $x136 $x282)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x849 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x722 (= $x136 (bvuge ?x849 (_ bv1 32)))))
 (let (($x418 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x769 (=> $x418 $x16)))
 (let (($x792 (= $x418 (= ?x849 (_ bv0 32)))))
 (let (($x894 (and $x792 $x769)))
 (let (($x573 (and $x894 $x722)))
 (let (($x852 (and $x573 $x744)))
 (let (($x401 (= $x852 true)))
 (let (($x336 (= $x401 true)))
 (let (($x650 (= $x336 true)))
 (let (($x485 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x797 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x922 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x797) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x797))))
 (let (($x207 (and true $x922)))
 (let (($x708 (and $x922 $x207)))
 (let (($x261 (= (bvand ?x854 (_ bv4294967288 32)) ?x854)))
 (let (($x534 (= (bvand ?x601 (_ bv4294967292 32)) ?x601)))
 (let (($x415 (and $x534 $x261)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x601 (bvsub ?x601 (_ bv4 32))) (bvult ?x601 (bvsub ?x601 (_ bv4 32))))))
 (let (($x481 (and (and (and (and (and $x207 $x130) $x534) $x415) $x708) $x485)))
 (let (($x464 (= true $x481)))
 (let (($x652 (not $x731)))
 (let (($x440 (=> $x652 $x464)))
 (let (($x494 (= $x440 true)))
 (let (($x270 (= $x494 true)))
 (let (($x553 (= $x270 true)))
 (let (($x382 (= $x652 true)))
 (let (($x754 (= $x382 true)))
 (let (($x527 (= $x754 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x193)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x803 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x803 $x27)))
 (let (($x609 (and $x21 $x57)))
 (let (($x475 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x475 $x609)))
 (let (($x791 (= $x383 true)))
 (let (($x634 (= $x791 true)))
 (let (($x921 (= $x634 true)))
 (let ((?x506 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x253 (bvneg ?x506)))
 (let (($x14 (= ?x253 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x14 true)))
 (let (($x74 (= $x111 true)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x632 (concat ?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x704 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x668 (concat ?x704 (concat ?x245 ?x632))))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem ?x668))))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv2 32))) ?x353))))
 (let (($x151 (= input.spec-%var-l-1.2.1.2.0 ?x491)))
 (let (($x843 (and $x151 true)))
 (let (($x212 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x542 (=> $x212 $x843)))
 (let (($x221 (= $x212 (bvuge (ite (= (_ bv0 32) ?x668) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x721 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x300 (=> $x721 $x16)))
 (let (($x597 (= $x721 (= (ite (= (_ bv0 32) ?x668) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x10 (and $x597 $x300)))
 (let (($x549 (and $x10 $x221)))
 (let (($x89 (and $x549 $x542)))
 (let ((?x949 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x949)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x132)))
 (let (($x44 (= input.spec-%var-l-1.2.0 ?x199)))
 (let (($x850 (and $x44 $x89)))
 (let (($x701 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x479 (=> $x701 $x850)))
 (let (($x635 (= $x701 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x15 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x420 (=> $x15 $x16)))
 (let (($x218 (= $x15 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x509 (and $x218 $x420)))
 (let (($x5 (and $x509 $x635)))
 (let (($x449 (and $x5 $x479)))
 (let (($x78 (= $x449 true)))
 (let (($x206 (= $x78 true)))
 (let (($x338 (= $x206 true)))
 (let (($x746 (and $x338 $x74)))
 (let (($x919 (and $x746 $x921)))
 (let (($x333 (and $x919 $x527)))
 (let (($x555 (and $x333 $x553)))
 (let (($x317 (and $x555 $x650)))
 (let (($x620 (and $x317 $x115)))
 (let (($x213 (and $x620 $x647)))
 (let (($x347 (and $x136 $x213)))
 (let (($x528 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x236 (and $x528 $x347)))
 (let (($x176 (bvugt ?x601 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x601 (_ bv3 32))))
 (let (($x845 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x153 (=> (bvule ?x601 (bvsub (bvadd ?x601 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x845 $x176)))))))
 (let (($x190 (=> (and $x652 (bvule ?x601 (bvsub (bvadd ?x601 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x845 $x176)))))))
 (let (($x661 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x624)))
 (let (($x446 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32))) (or false (or false (and true (or $x142 $x661)))))))
 (let (($x40 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32)))) (or false (or false (and true (or $x142 $x661)))))))
 (let (($x469 (and $x40 $x190)))
 (let (($x987 (and $x469 $x236)))
 (let (($x992 (=> $x987 $x194)))
 (not $x992)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x601 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x858 (concat (select input.dst.llvm-mem (bvadd ?x601 (_ bv1 32))) (select input.dst.llvm-mem ?x601))))
 (let ((?x854 (concat (select input.dst.llvm-mem (bvadd ?x601 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x601 (_ bv2 32))) ?x858))))
 (let (($x400 (bvule ?x854 (_ bv4294967294 32))))
 (let (($x512 (= $x400 true)))
 (let (($x194 (= $x512 true)))
 (let ((?x348 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x114 (= (_ bv0 3) ?x348)))
 (let (($x252 (= $x114 true)))
 (let (($x647 (= $x252 true)))
 (let (($x325 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x50 (= $x325 true)))
 (let (($x61 (= $x50 true)))
 (let (($x115 (= $x61 true)))
 (let ((?x86 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x801 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv1 32))) (select input.dst.llvm-mem ?x86))))
 (let ((?x755 (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x86 (_ bv2 32))) ?x801))))
 (let ((?x502 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv1 32))) (select input.dst.llvm-mem ?x755))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x755 (_ bv2 32))) ?x502))))
 (let (($x117 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x386)))
 (let (($x405 (and $x117 true)))
 (let (($x326 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x364 (=> $x326 $x405)))
 (let (($x211 (= $x326 (bvuge (ite (= (_ bv0 32) ?x755) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x16 (= false false)))
 (let (($x607 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x751 (=> $x607 $x16)))
 (let (($x426 (= $x607 (= (ite (= (_ bv0 32) ?x755) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x361 (and $x426 $x751)))
 (let (($x1093 (and $x361 $x211)))
 (let (($x495 (and $x1093 $x364)))
 (let ((?x533 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x320 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x624 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x196 (concat (select input.dst.llvm-mem ?x624) (concat ?x320 (concat ?x144 ?x533)))))
 (let (($x412 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x196)))
 (let (($x282 (and $x412 $x495)))
 (let (($x136 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x744 (=> $x136 $x282)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x849 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x722 (= $x136 (bvuge ?x849 (_ bv1 32)))))
 (let (($x418 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x769 (=> $x418 $x16)))
 (let (($x792 (= $x418 (= ?x849 (_ bv0 32)))))
 (let (($x894 (and $x792 $x769)))
 (let (($x573 (and $x894 $x722)))
 (let (($x852 (and $x573 $x744)))
 (let (($x401 (= $x852 true)))
 (let (($x336 (= $x401 true)))
 (let (($x650 (= $x336 true)))
 (let (($x485 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x797 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x922 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x797) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x797))))
 (let (($x207 (and true $x922)))
 (let (($x708 (and $x922 $x207)))
 (let (($x261 (= (bvand ?x854 (_ bv4294967288 32)) ?x854)))
 (let (($x534 (= (bvand ?x601 (_ bv4294967292 32)) ?x601)))
 (let (($x415 (and $x534 $x261)))
 (let (($x130 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x601 (bvsub ?x601 (_ bv4 32))) (bvult ?x601 (bvsub ?x601 (_ bv4 32))))))
 (let (($x481 (and (and (and (and (and $x207 $x130) $x534) $x415) $x708) $x485)))
 (let (($x464 (= true $x481)))
 (let (($x652 (not $x731)))
 (let (($x440 (=> $x652 $x464)))
 (let (($x494 (= $x440 true)))
 (let (($x270 (= $x494 true)))
 (let (($x553 (= $x270 true)))
 (let (($x382 (= $x652 true)))
 (let (($x754 (= $x382 true)))
 (let (($x527 (= $x754 true)))
 (let ((?x193 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x57 (= (_ bv0 32) ?x193)))
 (let ((?x257 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x257)))
 (let (($x803 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x803 $x27)))
 (let (($x609 (and $x21 $x57)))
 (let (($x475 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x383 (and $x475 $x609)))
 (let (($x791 (= $x383 true)))
 (let (($x634 (= $x791 true)))
 (let (($x921 (= $x634 true)))
 (let ((?x506 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x253 (bvneg ?x506)))
 (let (($x14 (= ?x253 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x111 (= $x14 true)))
 (let (($x74 (= $x111 true)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x632 (concat ?x177 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x245 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x704 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x668 (concat ?x704 (concat ?x245 ?x632))))
 (let ((?x353 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv1 32))) (select input.dst.llvm-mem ?x668))))
 (let ((?x491 (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x668 (_ bv2 32))) ?x353))))
 (let (($x151 (= input.spec-%var-l-1.2.1.2.0 ?x491)))
 (let (($x843 (and $x151 true)))
 (let (($x212 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x542 (=> $x212 $x843)))
 (let (($x221 (= $x212 (bvuge (ite (= (_ bv0 32) ?x668) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x721 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x300 (=> $x721 $x16)))
 (let (($x597 (= $x721 (= (ite (= (_ bv0 32) ?x668) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x10 (and $x597 $x300)))
 (let (($x549 (and $x10 $x221)))
 (let (($x89 (and $x549 $x542)))
 (let ((?x949 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x949)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x132)))
 (let (($x44 (= input.spec-%var-l-1.2.0 ?x199)))
 (let (($x850 (and $x44 $x89)))
 (let (($x701 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x479 (=> $x701 $x850)))
 (let (($x635 (= $x701 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x15 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x420 (=> $x15 $x16)))
 (let (($x218 (= $x15 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x509 (and $x218 $x420)))
 (let (($x5 (and $x509 $x635)))
 (let (($x449 (and $x5 $x479)))
 (let (($x78 (= $x449 true)))
 (let (($x206 (= $x78 true)))
 (let (($x338 (= $x206 true)))
 (let (($x746 (and $x338 $x74)))
 (let (($x919 (and $x746 $x921)))
 (let (($x333 (and $x919 $x527)))
 (let (($x555 (and $x333 $x553)))
 (let (($x317 (and $x555 $x650)))
 (let (($x620 (and $x317 $x115)))
 (let (($x213 (and $x620 $x647)))
 (let (($x347 (and $x136 $x213)))
 (let (($x528 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x236 (and $x528 $x347)))
 (let (($x176 (bvugt ?x601 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x601 (_ bv3 32))))
 (let (($x845 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x153 (=> (bvule ?x601 (bvsub (bvadd ?x601 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x845 $x176)))))))
 (let (($x190 (=> (and $x652 (bvule ?x601 (bvsub (bvadd ?x601 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x845 $x176)))))))
 (let (($x661 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x624)))
 (let (($x446 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32))) (or false (or false (and true (or $x142 $x661)))))))
 (let (($x40 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x86 (_ bv1 32)))) (or false (or false (and true (or $x142 $x661)))))))
 (let (($x469 (and $x40 $x190)))
 (let (($x987 (and $x469 $x236)))
 (let (($x992 (=> $x987 $x194)))
 (not $x992)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x409 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x535))))
 (let ((?x934 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x583 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x933 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x278 (concat ?x94 (concat ?x933 (concat ?x583 ?x934)))))
 (let ((?x932 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x540 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x549 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv1 32))) (select input.dst.llvm-mem ?x540))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv2 32))) ?x549))))
 (let (($x684 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x215 ?x932 false ?x278 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let (($x6 (= $x684 true)))
 (let (($x363 (= $x6 true)))
 (let ((?x413 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x120 (= (_ bv0 3) ?x413)))
 (let (($x572 (= $x120 true)))
 (let (($x425 (= $x572 true)))
 (let ((?x874 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x452 (concat ?x874 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x723 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x756 (concat ?x723 (concat ?x63 ?x452))))
 (let ((?x892 (bvadd ?x756 (_ bv4 32))))
 (let ((?x885 (concat (select input.dst.llvm-mem (bvadd ?x892 (_ bv1 32))) (select input.dst.llvm-mem ?x892))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x892 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x892 (_ bv2 32))) ?x885))))
 (let (($x310 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x334 ?x932 false ?x278 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x969 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv1 32))) (select input.dst.llvm-mem ?x756))))
 (let ((?x953 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv2 32))) ?x969))))
 (let (($x796 (= input.spec-%var-l-1.2.1.2.0 ?x953)))
 (let (($x200 (and $x796 $x310)))
 (let (($x1078 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x106 (=> $x1078 $x200)))
 (let (($x1150 (= $x1078 (bvuge (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x494 (= false false)))
 (let (($x1074 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x903 (=> $x1074 $x494)))
 (let (($x1154 (= $x1074 (= (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1079 (and $x1154 $x903)))
 (let (($x1157 (and $x1079 $x1150)))
 (let (($x651 (and $x1157 $x106)))
 (let ((?x906 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x906)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x119)))
 (let (($x715 (= input.spec-%var-l-1.2.0 ?x604)))
 (let (($x67 (and $x715 $x651)))
 (let (($x1104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x968 (=> $x1104 $x67)))
 (let (($x1112 (= $x1104 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x525 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x32 (=> $x525 $x494)))
 (let (($x909 (= $x525 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1114 (and $x909 $x32)))
 (let (($x681 (and $x1114 $x1112)))
 (let (($x658 (and $x681 $x968)))
 (let (($x60 (= $x658 true)))
 (let (($x732 (= $x60 true)))
 (let (($x45 (= $x732 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x486 (= $x198 true)))
 (let (($x51 (= $x486 true)))
 (let (($x201 (= $x51 true)))
 (let ((?x242 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x757 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x876 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x757))))
 (let ((?x802 (bvadd ?x876 (_ bv4 32))))
 (let ((?x901 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv1 32))) (select input.dst.llvm-mem ?x802))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv2 32))) ?x901))))
 (let (($x327 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x312 ?x932 false ?x278 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x876 (_ bv1 32))) (select input.dst.llvm-mem ?x876))))
 (let ((?x675 (concat (select input.dst.llvm-mem (bvadd ?x876 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x876 (_ bv2 32))) ?x335))))
 (let (($x515 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x675)))
 (let (($x303 (and $x515 $x327)))
 (let (($x569 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x431 (=> $x569 $x303)))
 (let (($x163 (= $x569 (bvuge (ite (= (_ bv0 32) ?x876) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x24 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x640 (=> $x24 $x494)))
 (let (($x794 (= $x24 (= (ite (= (_ bv0 32) ?x876) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x244 (and $x794 $x640)))
 (let (($x352 (and $x244 $x163)))
 (let (($x139 (and $x352 $x431)))
 (let ((?x834 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x765 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x276 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x386 (concat (select input.dst.llvm-mem ?x276) (concat ?x210 (concat ?x765 ?x834)))))
 (let (($x117 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x386)))
 (let (($x785 (and $x117 $x139)))
 (let (($x938 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x711 (=> $x938 $x785)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x481 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x769 (= $x938 (bvuge ?x481 (_ bv1 32)))))
 (let (($x485 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x270 (=> $x485 $x494)))
 (let (($x440 (= $x485 (= ?x481 (_ bv0 32)))))
 (let (($x553 (and $x440 $x270)))
 (let (($x894 (and $x553 $x769)))
 (let (($x585 (and $x894 $x711)))
 (let (($x878 (= $x585 true)))
 (let (($x376 (= $x878 true)))
 (let (($x557 (= $x376 true)))
 (let (($x843 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x704 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x177 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x704) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x704))))
 (let (($x541 (and true $x177)))
 (let (($x491 (and $x177 $x541)))
 (let (($x353 (= (bvand ?x215 (_ bv4294967288 32)) ?x215)))
 (let (($x300 (= (bvand ?x540 (_ bv4294967292 32)) ?x540)))
 (let (($x939 (and $x300 $x353)))
 (let (($x610 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x540 (bvsub ?x540 (_ bv4 32))) (bvult ?x540 (bvsub ?x540 (_ bv4 32))))))
 (let (($x449 (and (and (and (and (and $x541 $x610) $x300) $x939) $x491) $x843)))
 (let (($x78 (= true $x449)))
 (let (($x652 (not $x731)))
 (let (($x206 (=> $x652 $x78)))
 (let (($x338 (= $x206 true)))
 (let (($x691 (= $x338 true)))
 (let (($x471 (= $x691 true)))
 (let (($x95 (= $x652 true)))
 (let (($x721 (= $x95 true)))
 (let (($x289 (= $x721 true)))
 (let ((?x423 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x924 (= (_ bv0 32) ?x423)))
 (let ((?x944 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x905 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x944)))
 (let (($x915 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x915 $x905)))
 (let (($x93 (and $x116 $x924)))
 (let (($x789 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (and $x789 $x93)))
 (let (($x949 (= $x368 true)))
 (let (($x132 (= $x949 true)))
 (let (($x199 (= $x132 true)))
 (let ((?x420 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x509 (bvneg ?x420)))
 (let (($x483 (= ?x509 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x635 (= $x483 true)))
 (let (($x5 (= $x635 true)))
 (let (($x44 (and $x5 $x199)))
 (let (($x145 (and $x44 $x289)))
 (let (($x506 (and $x145 $x471)))
 (let (($x667 (and $x506 $x557)))
 (let (($x646 (and $x667 $x201)))
 (let (($x784 (and $x646 $x45)))
 (let (($x448 (and $x784 $x425)))
 (let (($x52 (and $x938 $x448)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x818 (and $x15 $x52)))
 (let (($x345 (bvugt ?x540 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x540 (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x528 (=> (bvule ?x540 (bvsub (bvadd ?x540 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x345)))))))
 (let (($x848 (=> (and $x652 (bvule ?x540 (bvsub (bvadd ?x540 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x104 $x345)))))))
 (let (($x324 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x276)))
 (let (($x285 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x242 (_ bv1 32))) (or false (or false (and true (or $x39 $x324)))))))
 (let (($x391 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x242 (_ bv1 32)))) (or false (or false (and true (or $x39 $x324)))))))
 (let (($x316 (and $x391 $x848)))
 (let (($x90 (and $x316 $x818)))
 (let (($x738 (=> $x90 $x363)))
 (not $x738))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x409 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x535 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv1 32))) (select input.dst.llvm-mem ?x409))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x409 (_ bv2 32))) ?x535))))
 (let ((?x934 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x583 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x933 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x278 (concat ?x94 (concat ?x933 (concat ?x583 ?x934)))))
 (let ((?x932 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x540 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x549 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv1 32))) (select input.dst.llvm-mem ?x540))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv2 32))) ?x549))))
 (let (($x684 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x215 ?x932 false ?x278 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let (($x6 (= $x684 true)))
 (let (($x363 (= $x6 true)))
 (let ((?x413 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x120 (= (_ bv0 3) ?x413)))
 (let (($x572 (= $x120 true)))
 (let (($x425 (= $x572 true)))
 (let ((?x874 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x452 (concat ?x874 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x723 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x756 (concat ?x723 (concat ?x63 ?x452))))
 (let ((?x892 (bvadd ?x756 (_ bv4 32))))
 (let ((?x885 (concat (select input.dst.llvm-mem (bvadd ?x892 (_ bv1 32))) (select input.dst.llvm-mem ?x892))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x892 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x892 (_ bv2 32))) ?x885))))
 (let (($x310 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x334 ?x932 false ?x278 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x969 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv1 32))) (select input.dst.llvm-mem ?x756))))
 (let ((?x953 (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x756 (_ bv2 32))) ?x969))))
 (let (($x796 (= input.spec-%var-l-1.2.1.2.0 ?x953)))
 (let (($x200 (and $x796 $x310)))
 (let (($x1078 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x106 (=> $x1078 $x200)))
 (let (($x1150 (= $x1078 (bvuge (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x494 (= false false)))
 (let (($x1074 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x903 (=> $x1074 $x494)))
 (let (($x1154 (= $x1074 (= (ite (= (_ bv0 32) ?x756) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1079 (and $x1154 $x903)))
 (let (($x1157 (and $x1079 $x1150)))
 (let (($x651 (and $x1157 $x106)))
 (let ((?x906 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x906)))
 (let ((?x604 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x119)))
 (let (($x715 (= input.spec-%var-l-1.2.0 ?x604)))
 (let (($x67 (and $x715 $x651)))
 (let (($x1104 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x968 (=> $x1104 $x67)))
 (let (($x1112 (= $x1104 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x525 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x32 (=> $x525 $x494)))
 (let (($x909 (= $x525 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1114 (and $x909 $x32)))
 (let (($x681 (and $x1114 $x1112)))
 (let (($x658 (and $x681 $x968)))
 (let (($x60 (= $x658 true)))
 (let (($x732 (= $x60 true)))
 (let (($x45 (= $x732 true)))
 (let (($x198 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x486 (= $x198 true)))
 (let (($x51 (= $x486 true)))
 (let (($x201 (= $x51 true)))
 (let ((?x242 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x757 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x876 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x757))))
 (let ((?x802 (bvadd ?x876 (_ bv4 32))))
 (let ((?x901 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv1 32))) (select input.dst.llvm-mem ?x802))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv2 32))) ?x901))))
 (let (($x327 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x312 ?x932 false ?x278 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x23)))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x876 (_ bv1 32))) (select input.dst.llvm-mem ?x876))))
 (let ((?x675 (concat (select input.dst.llvm-mem (bvadd ?x876 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x876 (_ bv2 32))) ?x335))))
 (let (($x515 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x675)))
 (let (($x303 (and $x515 $x327)))
 (let (($x569 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x431 (=> $x569 $x303)))
 (let (($x163 (= $x569 (bvuge (ite (= (_ bv0 32) ?x876) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x24 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x640 (=> $x24 $x494)))
 (let (($x794 (= $x24 (= (ite (= (_ bv0 32) ?x876) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x244 (and $x794 $x640)))
 (let (($x352 (and $x244 $x163)))
 (let (($x139 (and $x352 $x431)))
 (let ((?x834 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x765 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x210 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x276 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x386 (concat (select input.dst.llvm-mem ?x276) (concat ?x210 (concat ?x765 ?x834)))))
 (let (($x117 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x386)))
 (let (($x785 (and $x117 $x139)))
 (let (($x938 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x711 (=> $x938 $x785)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x481 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x769 (= $x938 (bvuge ?x481 (_ bv1 32)))))
 (let (($x485 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x270 (=> $x485 $x494)))
 (let (($x440 (= $x485 (= ?x481 (_ bv0 32)))))
 (let (($x553 (and $x440 $x270)))
 (let (($x894 (and $x553 $x769)))
 (let (($x585 (and $x894 $x711)))
 (let (($x878 (= $x585 true)))
 (let (($x376 (= $x878 true)))
 (let (($x557 (= $x376 true)))
 (let (($x843 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x704 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x177 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x704) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x704))))
 (let (($x541 (and true $x177)))
 (let (($x491 (and $x177 $x541)))
 (let (($x353 (= (bvand ?x215 (_ bv4294967288 32)) ?x215)))
 (let (($x300 (= (bvand ?x540 (_ bv4294967292 32)) ?x540)))
 (let (($x939 (and $x300 $x353)))
 (let (($x610 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x540 (bvsub ?x540 (_ bv4 32))) (bvult ?x540 (bvsub ?x540 (_ bv4 32))))))
 (let (($x449 (and (and (and (and (and $x541 $x610) $x300) $x939) $x491) $x843)))
 (let (($x78 (= true $x449)))
 (let (($x652 (not $x731)))
 (let (($x206 (=> $x652 $x78)))
 (let (($x338 (= $x206 true)))
 (let (($x691 (= $x338 true)))
 (let (($x471 (= $x691 true)))
 (let (($x95 (= $x652 true)))
 (let (($x721 (= $x95 true)))
 (let (($x289 (= $x721 true)))
 (let ((?x423 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x924 (= (_ bv0 32) ?x423)))
 (let ((?x944 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x905 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x944)))
 (let (($x915 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x116 (and $x915 $x905)))
 (let (($x93 (and $x116 $x924)))
 (let (($x789 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (and $x789 $x93)))
 (let (($x949 (= $x368 true)))
 (let (($x132 (= $x949 true)))
 (let (($x199 (= $x132 true)))
 (let ((?x420 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x509 (bvneg ?x420)))
 (let (($x483 (= ?x509 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x635 (= $x483 true)))
 (let (($x5 (= $x635 true)))
 (let (($x44 (and $x5 $x199)))
 (let (($x145 (and $x44 $x289)))
 (let (($x506 (and $x145 $x471)))
 (let (($x667 (and $x506 $x557)))
 (let (($x646 (and $x667 $x201)))
 (let (($x784 (and $x646 $x45)))
 (let (($x448 (and $x784 $x425)))
 (let (($x52 (and $x938 $x448)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x818 (and $x15 $x52)))
 (let (($x345 (bvugt ?x540 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x540 (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x528 (=> (bvule ?x540 (bvsub (bvadd ?x540 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x345)))))))
 (let (($x848 (=> (and $x652 (bvule ?x540 (bvsub (bvadd ?x540 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x104 $x345)))))))
 (let (($x324 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x276)))
 (let (($x285 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x242 (_ bv1 32))) (or false (or false (and true (or $x39 $x324)))))))
 (let (($x391 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x242 (_ bv1 32)))) (or false (or false (and true (or $x39 $x324)))))))
 (let (($x316 (and $x391 $x848)))
 (let (($x90 (and $x316 $x818)))
 (let (($x738 (=> $x90 $x363)))
 (not $x738))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_20)
(= input.dst.llvm-mem @fun_37)
(function @fun_20
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_20 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_10889 (_ BitVec 32)) (BOUND_VARIABLE_10890 (_ BitVec 32)) (BOUND_VARIABLE_10891 (_ BitVec 32)) (BOUND_VARIABLE_10892 Bool) (BOUND_VARIABLE_10893 (_ BitVec 32)) (BOUND_VARIABLE_10894 (_ BitVec 32)) (BOUND_VARIABLE_10895 (_ BitVec 32)) (BOUND_VARIABLE_10896 (_ BitVec 32)) (BOUND_VARIABLE_10897 (_ BitVec 32)) (BOUND_VARIABLE_10898 (_ BitVec 32)) (BOUND_VARIABLE_10899 Bool) (BOUND_VARIABLE_10900 (_ BitVec 32)) (BOUND_VARIABLE_10901 (_ BitVec 32)) (BOUND_VARIABLE_10902 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv98328168 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1107395472 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1107395472 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1107395475 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xfd)
                                #x00fe0101
                                #x01)
                         #x00000008
                         #x00)
                  #x00fe0104
                  #x00)))
(let ((a!2 (store (store (store (store a!1 #x00000004 #x00) #x00000005 #xfe)
                         #x00000005
                         #xfe)
                  #xfffffffe
                  #x00)))
(let ((a!3 (store (store (store (store a!2 #x00000004 #x00) #x00fe0102 #x00)
                         #xffffffff
                         #x00)
                  #x00fe0103
                  #xfe)))
(let ((a!4 (store (store (store (store a!3 #x00000006 #x00) #x00000001 #x00)
                         #x00000006
                         #x00)
                  #xfffffffc
                  #x00)))
(let ((a!5 (store (store (store (store a!4 #xfffffffd #x00) #x00000006 #x00)
                         #x00000005
                         #xfe)
                  #x00000004
                  #x00)))
  (store a!5 #x00000002 #x00)))))))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #xfd0000fd)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x0000fd00)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #xfdfdfdfd)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000001)
              (= x!8 #xfd00fe00)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00fd0000)
              (= x!12 #x00000001)
              (= x!13 #x00fd00fe))
      false
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000001)
              (= x!8 #x00fe0001)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00fd0000)
              (= x!12 #x00000001)
              (= x!13 #x00fd00fe))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000001)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00fd0000)
              (= x!12 #x00000001)
              (= x!13 #x00fd00fe))
      false
      false))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1001 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x321))))
 (let ((?x331 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x777 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x778 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x991 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x549 (concat (select input.dst.llvm-mem (bvadd ?x991 (_ bv1 32))) (select input.dst.llvm-mem ?x991))))
 (let ((?x939 (concat (select input.dst.llvm-mem (bvadd ?x991 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x991 (_ bv2 32))) ?x549))))
 (let (($x996 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x939 (concat ?x600 (concat ?x778 (concat ?x777 ?x331))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x271 ?x1001 false)))
 (let (($x684 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x940 (=> $x684 $x996)))
 (let (($x950 (= $x684 (bvuge (ite (= (_ bv0 32) ?x939) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x188 (= false false)))
 (let (($x796 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x936 (=> $x796 $x188)))
 (let (($x623 (= $x796 (= (ite (= (_ bv0 32) ?x939) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x275 (and $x623 $x936)))
 (let (($x999 (and $x275 $x950)))
 (let (($x678 (and $x999 $x940)))
 (let (($x35 (= $x678 true)))
 (let (($x75 (= $x35 true)))
 (let ((?x699 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x211 (= (_ bv0 3) ?x699)))
 (let (($x1093 (= $x211 true)))
 (let (($x361 (= $x1093 true)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x937 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x952 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x994 (concat ?x952 (concat ?x937 ?x523))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv1 32))) (select input.dst.llvm-mem ?x994))))
 (let ((?x786 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv2 32))) ?x128))))
 (let (($x992 (= input.spec-%var-l-1.2.1.2.0 ?x786)))
 (let (($x831 (and $x992 true)))
 (let (($x858 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x196 (=> $x858 $x831)))
 (let (($x745 (= $x858 (bvuge (ite (= (_ bv0 32) ?x994) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1155 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x571 (=> $x1155 $x188)))
 (let (($x1156 (= $x1155 (= (ite (= (_ bv0 32) ?x994) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x914 (and $x1156 $x571)))
 (let (($x255 (and $x914 $x745)))
 (let (($x412 (and $x255 $x196)))
 (let ((?x838 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x838)))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x154)))
 (let (($x764 (= input.spec-%var-l-1.2.0 ?x392)))
 (let (($x575 (and $x764 $x412)))
 (let (($x790 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x320 (=> $x790 $x575)))
 (let (($x189 (= $x790 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x692 (=> $x297 $x188)))
 (let (($x380 (= $x297 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1076 (and $x380 $x692)))
 (let (($x319 (and $x1076 $x189)))
 (let (($x923 (and $x319 $x320)))
 (let (($x533 (= $x923 true)))
 (let (($x489 (= $x533 true)))
 (let (($x279 (= $x489 true)))
 (let (($x428 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x20 (= $x428 true)))
 (let (($x522 (= $x20 true)))
 (let (($x504 (= $x522 true)))
 (let ((?x142 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x329))))
 (let ((?x714 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv1 32))) (select input.dst.llvm-mem ?x705))))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv2 32))) ?x714))))
 (let (($x824 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x389)))
 (let (($x920 (and $x824 true)))
 (let (($x1004 (=> $x684 $x920)))
 (let (($x90 (= $x684 (bvuge (ite (= (_ bv0 32) ?x705) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x969 (= $x796 (= (ite (= (_ bv0 32) ?x705) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x793 (and $x969 $x936)))
 (let (($x717 (and $x793 $x90)))
 (let (($x162 (and $x717 $x1004)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x490 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x1114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x121 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x1112 (concat (select input.dst.llvm-mem ?x121) (concat ?x1114 (concat ?x490 ?x332)))))
 (let (($x681 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x1112)))
 (let (($x473 (and $x681 $x162)))
 (let (($x456 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x87 (=> $x456 $x473)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x419 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (= $x456 (bvuge ?x419 (_ bv1 32)))))
 (let (($x897 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x323 (=> $x897 $x188)))
 (let (($x747 (= $x897 (= ?x419 (_ bv0 32)))))
 (let (($x272 (and $x747 $x323)))
 (let (($x94 (and $x272 $x125)))
 (let (($x641 (and $x94 $x87)))
 (let (($x935 (= $x641 true)))
 (let (($x556 (= $x935 true)))
 (let (($x630 (= $x556 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x355 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x610 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x355) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x355))))
 (let (($x542 (and true $x610)))
 (let (($x843 (and $x610 $x542)))
 (let (($x479 (= (bvand ?x939 (_ bv4294967288 32)) ?x939)))
 (let (($x710 (= (bvand ?x991 (_ bv4294967292 32)) ?x991)))
 (let (($x151 (and $x710 $x479)))
 (let (($x10 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x991 (bvsub ?x991 (_ bv4 32))) (bvult ?x991 (bvsub ?x991 (_ bv4 32))))))
 (let (($x506 (and (and (and (and (and $x542 $x10) $x710) $x151) $x843) $x78)))
 (let (($x561 (= true $x506)))
 (let (($x652 (not $x731)))
 (let (($x485 (=> $x652 $x561)))
 (let (($x481 (= $x485 true)))
 (let (($x464 (= $x481 true)))
 (let (($x440 (= $x464 true)))
 (let (($x245 (= $x652 true)))
 (let (($x563 (= $x245 true)))
 (let (($x177 (= $x563 true)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x199)))
 (let ((?x368 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x949 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x368)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x93 $x949)))
 (let (($x95 (and $x132 $x44)))
 (let (($x924 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x721 (and $x924 $x95)))
 (let (($x289 (= $x721 true)))
 (let (($x145 (= $x289 true)))
 (let (($x369 (= $x145 true)))
 (let ((?x666 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x789 (bvneg ?x666)))
 (let (($x944 (= ?x789 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x905 (= $x944 true)))
 (let (($x116 (= $x905 true)))
 (let (($x704 (and $x116 $x369)))
 (let (($x541 (and $x704 $x177)))
 (let (($x494 (and $x541 $x440)))
 (let (($x222 (and $x494 $x630)))
 (let (($x318 (and $x222 $x504)))
 (let (($x795 (and $x318 $x279)))
 (let (($x326 (and $x795 $x361)))
 (let (($x648 (and $x456 $x326)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x426 (and $x16 $x648)))
 (let (($x190 (bvugt ?x991 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x991 (_ bv3 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x15 (=> (bvule ?x991 (bvsub (bvadd ?x991 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x190)))))))
 (let (($x726 (=> (and $x652 (bvule ?x991 (bvsub (bvadd ?x991 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x153 $x190)))))))
 (let (($x40 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x446 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x176 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32))) (or false (or false (and true (or $x446 $x40)))))))
 (let (($x624 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32)))) (or false (or false (and true (or $x446 $x40)))))))
 (let (($x611 (and $x624 $x726)))
 (let (($x846 (and $x611 $x426)))
 (let (($x517 (=> $x846 $x75)))
 (not $x517)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1001 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x26 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv1 32))) (select input.dst.llvm-mem ?x26))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x26 (_ bv2 32))) ?x321))))
 (let ((?x331 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x777 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x778 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x600 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x991 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x549 (concat (select input.dst.llvm-mem (bvadd ?x991 (_ bv1 32))) (select input.dst.llvm-mem ?x991))))
 (let ((?x939 (concat (select input.dst.llvm-mem (bvadd ?x991 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x991 (_ bv2 32))) ?x549))))
 (let (($x996 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x939 (concat ?x600 (concat ?x778 (concat ?x777 ?x331))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x271 ?x1001 false)))
 (let (($x684 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x940 (=> $x684 $x996)))
 (let (($x950 (= $x684 (bvuge (ite (= (_ bv0 32) ?x939) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x188 (= false false)))
 (let (($x796 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x936 (=> $x796 $x188)))
 (let (($x623 (= $x796 (= (ite (= (_ bv0 32) ?x939) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x275 (and $x623 $x936)))
 (let (($x999 (and $x275 $x950)))
 (let (($x678 (and $x999 $x940)))
 (let (($x35 (= $x678 true)))
 (let (($x75 (= $x35 true)))
 (let ((?x699 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x211 (= (_ bv0 3) ?x699)))
 (let (($x1093 (= $x211 true)))
 (let (($x361 (= $x1093 true)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x523 (concat ?x294 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x937 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x952 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x994 (concat ?x952 (concat ?x937 ?x523))))
 (let ((?x128 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv1 32))) (select input.dst.llvm-mem ?x994))))
 (let ((?x786 (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x994 (_ bv2 32))) ?x128))))
 (let (($x992 (= input.spec-%var-l-1.2.1.2.0 ?x786)))
 (let (($x831 (and $x992 true)))
 (let (($x858 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x196 (=> $x858 $x831)))
 (let (($x745 (= $x858 (bvuge (ite (= (_ bv0 32) ?x994) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1155 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x571 (=> $x1155 $x188)))
 (let (($x1156 (= $x1155 (= (ite (= (_ bv0 32) ?x994) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x914 (and $x1156 $x571)))
 (let (($x255 (and $x914 $x745)))
 (let (($x412 (and $x255 $x196)))
 (let ((?x838 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x838)))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x154)))
 (let (($x764 (= input.spec-%var-l-1.2.0 ?x392)))
 (let (($x575 (and $x764 $x412)))
 (let (($x790 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x320 (=> $x790 $x575)))
 (let (($x189 (= $x790 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x297 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x692 (=> $x297 $x188)))
 (let (($x380 (= $x297 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1076 (and $x380 $x692)))
 (let (($x319 (and $x1076 $x189)))
 (let (($x923 (and $x319 $x320)))
 (let (($x533 (= $x923 true)))
 (let (($x489 (= $x533 true)))
 (let (($x279 (= $x489 true)))
 (let (($x428 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x20 (= $x428 true)))
 (let (($x522 (= $x20 true)))
 (let (($x504 (= $x522 true)))
 (let ((?x142 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x705 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x329))))
 (let ((?x714 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv1 32))) (select input.dst.llvm-mem ?x705))))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv2 32))) ?x714))))
 (let (($x824 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x389)))
 (let (($x920 (and $x824 true)))
 (let (($x1004 (=> $x684 $x920)))
 (let (($x90 (= $x684 (bvuge (ite (= (_ bv0 32) ?x705) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x969 (= $x796 (= (ite (= (_ bv0 32) ?x705) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x793 (and $x969 $x936)))
 (let (($x717 (and $x793 $x90)))
 (let (($x162 (and $x717 $x1004)))
 (let ((?x332 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x490 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x1114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x121 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x1112 (concat (select input.dst.llvm-mem ?x121) (concat ?x1114 (concat ?x490 ?x332)))))
 (let (($x681 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x1112)))
 (let (($x473 (and $x681 $x162)))
 (let (($x456 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x87 (=> $x456 $x473)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x419 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x125 (= $x456 (bvuge ?x419 (_ bv1 32)))))
 (let (($x897 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x323 (=> $x897 $x188)))
 (let (($x747 (= $x897 (= ?x419 (_ bv0 32)))))
 (let (($x272 (and $x747 $x323)))
 (let (($x94 (and $x272 $x125)))
 (let (($x641 (and $x94 $x87)))
 (let (($x935 (= $x641 true)))
 (let (($x556 (= $x935 true)))
 (let (($x630 (= $x556 true)))
 (let (($x78 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x355 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x610 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x355) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x355))))
 (let (($x542 (and true $x610)))
 (let (($x843 (and $x610 $x542)))
 (let (($x479 (= (bvand ?x939 (_ bv4294967288 32)) ?x939)))
 (let (($x710 (= (bvand ?x991 (_ bv4294967292 32)) ?x991)))
 (let (($x151 (and $x710 $x479)))
 (let (($x10 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x991 (bvsub ?x991 (_ bv4 32))) (bvult ?x991 (bvsub ?x991 (_ bv4 32))))))
 (let (($x506 (and (and (and (and (and $x542 $x10) $x710) $x151) $x843) $x78)))
 (let (($x561 (= true $x506)))
 (let (($x652 (not $x731)))
 (let (($x485 (=> $x652 $x561)))
 (let (($x481 (= $x485 true)))
 (let (($x464 (= $x481 true)))
 (let (($x440 (= $x464 true)))
 (let (($x245 (= $x652 true)))
 (let (($x563 (= $x245 true)))
 (let (($x177 (= $x563 true)))
 (let ((?x199 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x44 (= (_ bv0 32) ?x199)))
 (let ((?x368 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x949 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x368)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x93 $x949)))
 (let (($x95 (and $x132 $x44)))
 (let (($x924 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x721 (and $x924 $x95)))
 (let (($x289 (= $x721 true)))
 (let (($x145 (= $x289 true)))
 (let (($x369 (= $x145 true)))
 (let ((?x666 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x789 (bvneg ?x666)))
 (let (($x944 (= ?x789 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x905 (= $x944 true)))
 (let (($x116 (= $x905 true)))
 (let (($x704 (and $x116 $x369)))
 (let (($x541 (and $x704 $x177)))
 (let (($x494 (and $x541 $x440)))
 (let (($x222 (and $x494 $x630)))
 (let (($x318 (and $x222 $x504)))
 (let (($x795 (and $x318 $x279)))
 (let (($x326 (and $x795 $x361)))
 (let (($x648 (and $x456 $x326)))
 (let (($x16 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x426 (and $x16 $x648)))
 (let (($x190 (bvugt ?x991 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x991 (_ bv3 32))))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x15 (=> (bvule ?x991 (bvsub (bvadd ?x991 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x190)))))))
 (let (($x726 (=> (and $x652 (bvule ?x991 (bvsub (bvadd ?x991 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x153 $x190)))))))
 (let (($x40 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x446 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x176 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32))) (or false (or false (and true (or $x446 $x40)))))))
 (let (($x624 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x142 (_ bv1 32)))) (or false (or false (and true (or $x446 $x40)))))))
 (let (($x611 (and $x624 $x726)))
 (let (($x846 (and $x611 $x426)))
 (let (($x517 (=> $x846 $x75)))
 (not $x517)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_29)
(= input.dst.llvm-mem @fun_54)
(function @fun_29
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_29 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_54
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_54 #b10000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x733ffffc)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xcb064009)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xc0000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x6173fe6a)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xc0000012)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x6f30d882)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x40)
              #xc0000006
              #x00)
       #xc0000004
       #x00))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x733ffffc)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x733fffff)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xc0000012)
              (= x!8 #x40004000)
              (= x!9 #x40404040)
              (= x!10 #xc0000012)
              (= x!11 #x40404040)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_10595 (_ BitVec 32)) (BOUND_VARIABLE_10596 (_ BitVec 32)) (BOUND_VARIABLE_10597 (_ BitVec 32)) (BOUND_VARIABLE_10598 (_ BitVec 32)) (BOUND_VARIABLE_10599 (_ BitVec 32)) (BOUND_VARIABLE_10600 (_ BitVec 32)) (BOUND_VARIABLE_10601 Bool) (BOUND_VARIABLE_10602 (_ BitVec 32)) (BOUND_VARIABLE_10603 (_ BitVec 32)) (BOUND_VARIABLE_10604 (_ BitVec 32)) (BOUND_VARIABLE_10605 (_ BitVec 32)) (BOUND_VARIABLE_10606 (_ BitVec 32)) (BOUND_VARIABLE_10607 (_ BitVec 32)) (BOUND_VARIABLE_10608 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv505482324 32) (_ bv8 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv505482320 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3700220200 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3700220200 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3700220203 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1075 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x708 (concat (select input.dst.llvm-mem (bvadd ?x1075 (_ bv1 32))) (select input.dst.llvm-mem ?x1075))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x1075 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1075 (_ bv2 32))) ?x708))))
 (let ((?x594 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x842 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x694 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x108 (concat ?x694 (concat ?x842 (concat ?x18 ?x594)))))
 (let ((?x1084 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x845 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x549 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv1 32))) (select input.dst.llvm-mem ?x845))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv2 32))) ?x549))))
 (let ((?x344 (bvadd ?x151 (_ bv4 32))))
 (let ((?x888 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem ?x344))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv2 32))) ?x888))))
 (let (($x706 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x100 ?x1084 false ?x108 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x912 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x514))))
 (let (($x233 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x912)))
 (let (($x967 (and $x233 $x706)))
 (let (($x270 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1005 (=> $x270 $x967)))
 (let (($x230 (= $x270 (bvuge (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x131 (= false false)))
 (let (($x917 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x777 (=> $x917 $x131)))
 (let (($x806 (= $x917 (= (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x693 (and $x806 $x777)))
 (let (($x441 (and $x693 $x230)))
 (let (($x1008 (and $x441 $x1005)))
 (let (($x973 (= $x1008 true)))
 (let (($x975 (= $x973 true)))
 (let ((?x346 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x308 (= (_ bv0 3) ?x346)))
 (let (($x893 (= $x308 true)))
 (let (($x761 (= $x893 true)))
 (let ((?x557 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x198 (concat ?x557 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x841 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x450 (concat ?x841 (concat ?x525 ?x198))))
 (let ((?x895 (bvadd ?x450 (_ bv4 32))))
 (let ((?x927 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv1 32))) (select input.dst.llvm-mem ?x895))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv2 32))) ?x927))))
 (let (($x180 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x388 ?x1084 false ?x108 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x450 (_ bv1 32))) (select input.dst.llvm-mem ?x450))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x450 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x450 (_ bv2 32))) ?x620))))
 (let (($x751 (= input.spec-%var-l-1.2.1.2.0 ?x50)))
 (let (($x482 (and $x751 $x180)))
 (let (($x803 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x753 (=> $x803 $x482)))
 (let (($x791 (= $x803 (bvuge (ite (= (_ bv0 32) ?x450) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1106 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x376 (=> $x1106 $x131)))
 (let (($x954 (= $x1106 (= (ite (= (_ bv0 32) ?x450) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x486 (and $x954 $x376)))
 (let (($x746 (and $x486 $x791)))
 (let (($x574 (and $x746 $x753)))
 (let ((?x851 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x851)))
 (let ((?x928 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x6)))
 (let (($x884 (= input.spec-%var-l-1.2.0 ?x928)))
 (let (($x385 (and $x884 $x574)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x424 (=> $x55 $x385)))
 (let (($x311 (= $x55 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x679 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x229 (=> $x679 $x131)))
 (let (($x562 (= $x679 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x384 (and $x562 $x229)))
 (let (($x872 (and $x384 $x311)))
 (let (($x683 (and $x872 $x424)))
 (let (($x371 (= $x683 true)))
 (let (($x187 (= $x371 true)))
 (let (($x812 (= $x187 true)))
 (let (($x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x698 (= $x134 true)))
 (let (($x856 (= $x698 true)))
 (let (($x543 (= $x856 true)))
 (let ((?x39 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x748 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x748))))
 (let ((?x1090 (bvadd ?x321 (_ bv4 32))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x1090 (_ bv1 32))) (select input.dst.llvm-mem ?x1090))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x1090 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1090 (_ bv2 32))) ?x367))))
 (let (($x671 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x499 ?x1084 false ?x108 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem ?x321))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv2 32))) ?x584))))
 (let (($x1113 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x239)))
 (let (($x406 (and $x1113 $x671)))
 (let (($x595 (=> $x270 $x406)))
 (let (($x701 (= $x270 (bvuge (ite (= (_ bv0 32) ?x321) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x322 (= $x917 (= (ite (= (_ bv0 32) ?x321) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x741 (and $x322 $x777)))
 (let (($x483 (and $x741 $x701)))
 (let (($x410 (and $x483 $x595)))
 (let ((?x858 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x745 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x521 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x601 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x730 (concat (select input.dst.llvm-mem ?x601) (concat ?x521 (concat ?x745 ?x858)))))
 (let (($x427 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x730)))
 (let (($x107 (and $x427 $x410)))
 (let (($x297 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x986 (=> $x297 $x107)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x556 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x750 (= $x297 (bvuge ?x556 (_ bv1 32)))))
 (let (($x935 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x428 (=> $x935 $x131)))
 (let (($x222 (= $x935 (= ?x556 (_ bv0 32)))))
 (let (($x20 (and $x222 $x428)))
 (let (($x269 (and $x20 $x750)))
 (let (($x73 (and $x269 $x986)))
 (let (($x910 (= $x73 true)))
 (let (($x766 (= $x910 true)))
 (let (($x1062 (= $x766 true)))
 (let (($x561 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x597 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x10 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x597) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x597))))
 (let (($x206 (and true $x10)))
 (let (($x78 (and $x10 $x206)))
 (let (($x471 (= (bvand ?x151 (_ bv4294967288 32)) ?x151)))
 (let (($x215 (= (bvand ?x845 (_ bv4294967292 32)) ?x845)))
 (let (($x449 (and $x215 $x471)))
 (let (($x356 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x845 (bvsub ?x845 (_ bv4 32))) (bvult ?x845 (bvsub ?x845 (_ bv4 32))))))
 (let (($x494 (and (and (and (and (and $x206 $x356) $x215) $x449) $x78) $x561)))
 (let (($x802 (= true $x494)))
 (let (($x652 (not $x731)))
 (let (($x897 (=> $x652 $x802)))
 (let (($x419 (= $x897 true)))
 (let (($x443 (= $x419 true)))
 (let (($x747 (= $x443 true)))
 (let (($x668 (= $x652 true)))
 (let (($x408 (= $x668 true)))
 (let (($x610 (= $x408 true)))
 (let ((?x369 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x704 (= (_ bv0 32) ?x369)))
 (let ((?x721 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x721)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x95 $x289)))
 (let (($x245 (and $x145 $x704)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x563 (and $x44 $x245)))
 (let (($x177 (= $x563 true)))
 (let (($x541 (= $x177 true)))
 (let (($x632 (= $x541 true)))
 (let ((?x423 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x924 (bvneg ?x423)))
 (let (($x368 (= ?x924 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x949 (= $x368 true)))
 (let (($x132 (= $x949 true)))
 (let (($x355 (and $x132 $x632)))
 (let (($x542 (and $x355 $x610)))
 (let (($x188 (and $x542 $x747)))
 (let (($x220 (and $x188 $x1062)))
 (let (($x147 (and $x220 $x543)))
 (let (($x123 (and $x147 $x812)))
 (let (($x122 (and $x123 $x761)))
 (let (($x808 (and $x297 $x122)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x129 (and $x5 $x808)))
 (let (($x848 (bvugt ?x845 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x845 (_ bv3 32))))
 (let (($x528 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x16 (=> (bvule ?x845 (bvsub (bvadd ?x845 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x528 $x848)))))))
 (let (($x283 (=> (and $x652 (bvule ?x845 (bvsub (bvadd ?x845 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x528 $x848)))))))
 (let (($x391 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x601)))
 (let (($x345 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x39 (_ bv1 32))) (or false (or false (and true (or $x285 $x391)))))))
 (let (($x276 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x39 (_ bv1 32)))) (or false (or false (and true (or $x285 $x391)))))))
 (let (($x734 (and $x276 $x283)))
 (let (($x430 (and $x734 $x129)))
 (let (($x181 (=> $x430 $x975)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1075 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x708 (concat (select input.dst.llvm-mem (bvadd ?x1075 (_ bv1 32))) (select input.dst.llvm-mem ?x1075))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x1075 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1075 (_ bv2 32))) ?x708))))
 (let ((?x594 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x18 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x842 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x694 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x108 (concat ?x694 (concat ?x842 (concat ?x18 ?x594)))))
 (let ((?x1084 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x845 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x549 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv1 32))) (select input.dst.llvm-mem ?x845))))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x845 (_ bv2 32))) ?x549))))
 (let ((?x344 (bvadd ?x151 (_ bv4 32))))
 (let ((?x888 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv1 32))) (select input.dst.llvm-mem ?x344))))
 (let ((?x100 (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x344 (_ bv2 32))) ?x888))))
 (let (($x706 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x100 ?x1084 false ?x108 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x514 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv1 32))) (select input.dst.llvm-mem ?x151))))
 (let ((?x912 (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x151 (_ bv2 32))) ?x514))))
 (let (($x233 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x912)))
 (let (($x967 (and $x233 $x706)))
 (let (($x270 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1005 (=> $x270 $x967)))
 (let (($x230 (= $x270 (bvuge (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x131 (= false false)))
 (let (($x917 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x777 (=> $x917 $x131)))
 (let (($x806 (= $x917 (= (ite (= (_ bv0 32) ?x151) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x693 (and $x806 $x777)))
 (let (($x441 (and $x693 $x230)))
 (let (($x1008 (and $x441 $x1005)))
 (let (($x973 (= $x1008 true)))
 (let (($x975 (= $x973 true)))
 (let ((?x346 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x308 (= (_ bv0 3) ?x346)))
 (let (($x893 (= $x308 true)))
 (let (($x761 (= $x893 true)))
 (let ((?x557 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x198 (concat ?x557 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x525 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x841 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x450 (concat ?x841 (concat ?x525 ?x198))))
 (let ((?x895 (bvadd ?x450 (_ bv4 32))))
 (let ((?x927 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv1 32))) (select input.dst.llvm-mem ?x895))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x895 (_ bv2 32))) ?x927))))
 (let (($x180 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x388 ?x1084 false ?x108 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x620 (concat (select input.dst.llvm-mem (bvadd ?x450 (_ bv1 32))) (select input.dst.llvm-mem ?x450))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x450 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x450 (_ bv2 32))) ?x620))))
 (let (($x751 (= input.spec-%var-l-1.2.1.2.0 ?x50)))
 (let (($x482 (and $x751 $x180)))
 (let (($x803 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x753 (=> $x803 $x482)))
 (let (($x791 (= $x803 (bvuge (ite (= (_ bv0 32) ?x450) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1106 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x376 (=> $x1106 $x131)))
 (let (($x954 (= $x1106 (= (ite (= (_ bv0 32) ?x450) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x486 (and $x954 $x376)))
 (let (($x746 (and $x486 $x791)))
 (let (($x574 (and $x746 $x753)))
 (let ((?x851 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x851)))
 (let ((?x928 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x6)))
 (let (($x884 (= input.spec-%var-l-1.2.0 ?x928)))
 (let (($x385 (and $x884 $x574)))
 (let (($x55 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x424 (=> $x55 $x385)))
 (let (($x311 (= $x55 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x679 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x229 (=> $x679 $x131)))
 (let (($x562 (= $x679 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x384 (and $x562 $x229)))
 (let (($x872 (and $x384 $x311)))
 (let (($x683 (and $x872 $x424)))
 (let (($x371 (= $x683 true)))
 (let (($x187 (= $x371 true)))
 (let (($x812 (= $x187 true)))
 (let (($x134 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x698 (= $x134 true)))
 (let (($x856 (= $x698 true)))
 (let (($x543 (= $x856 true)))
 (let ((?x39 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x748 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv1 32))) (select input.dst.llvm-mem ?x39))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x39 (_ bv2 32))) ?x748))))
 (let ((?x1090 (bvadd ?x321 (_ bv4 32))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd ?x1090 (_ bv1 32))) (select input.dst.llvm-mem ?x1090))))
 (let ((?x499 (concat (select input.dst.llvm-mem (bvadd ?x1090 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1090 (_ bv2 32))) ?x367))))
 (let (($x671 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x499 ?x1084 false ?x108 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x378)))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv1 32))) (select input.dst.llvm-mem ?x321))))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x321 (_ bv2 32))) ?x584))))
 (let (($x1113 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x239)))
 (let (($x406 (and $x1113 $x671)))
 (let (($x595 (=> $x270 $x406)))
 (let (($x701 (= $x270 (bvuge (ite (= (_ bv0 32) ?x321) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x322 (= $x917 (= (ite (= (_ bv0 32) ?x321) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x741 (and $x322 $x777)))
 (let (($x483 (and $x741 $x701)))
 (let (($x410 (and $x483 $x595)))
 (let ((?x858 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x745 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x521 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x601 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x730 (concat (select input.dst.llvm-mem ?x601) (concat ?x521 (concat ?x745 ?x858)))))
 (let (($x427 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x730)))
 (let (($x107 (and $x427 $x410)))
 (let (($x297 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x986 (=> $x297 $x107)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x556 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x750 (= $x297 (bvuge ?x556 (_ bv1 32)))))
 (let (($x935 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x428 (=> $x935 $x131)))
 (let (($x222 (= $x935 (= ?x556 (_ bv0 32)))))
 (let (($x20 (and $x222 $x428)))
 (let (($x269 (and $x20 $x750)))
 (let (($x73 (and $x269 $x986)))
 (let (($x910 (= $x73 true)))
 (let (($x766 (= $x910 true)))
 (let (($x1062 (= $x766 true)))
 (let (($x561 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x597 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x10 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x597) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x597))))
 (let (($x206 (and true $x10)))
 (let (($x78 (and $x10 $x206)))
 (let (($x471 (= (bvand ?x151 (_ bv4294967288 32)) ?x151)))
 (let (($x215 (= (bvand ?x845 (_ bv4294967292 32)) ?x845)))
 (let (($x449 (and $x215 $x471)))
 (let (($x356 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x845 (bvsub ?x845 (_ bv4 32))) (bvult ?x845 (bvsub ?x845 (_ bv4 32))))))
 (let (($x494 (and (and (and (and (and $x206 $x356) $x215) $x449) $x78) $x561)))
 (let (($x802 (= true $x494)))
 (let (($x652 (not $x731)))
 (let (($x897 (=> $x652 $x802)))
 (let (($x419 (= $x897 true)))
 (let (($x443 (= $x419 true)))
 (let (($x747 (= $x443 true)))
 (let (($x668 (= $x652 true)))
 (let (($x408 (= $x668 true)))
 (let (($x610 (= $x408 true)))
 (let ((?x369 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x704 (= (_ bv0 32) ?x369)))
 (let ((?x721 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x289 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x721)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (and $x95 $x289)))
 (let (($x245 (and $x145 $x704)))
 (let (($x44 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x563 (and $x44 $x245)))
 (let (($x177 (= $x563 true)))
 (let (($x541 (= $x177 true)))
 (let (($x632 (= $x541 true)))
 (let ((?x423 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x924 (bvneg ?x423)))
 (let (($x368 (= ?x924 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x949 (= $x368 true)))
 (let (($x132 (= $x949 true)))
 (let (($x355 (and $x132 $x632)))
 (let (($x542 (and $x355 $x610)))
 (let (($x188 (and $x542 $x747)))
 (let (($x220 (and $x188 $x1062)))
 (let (($x147 (and $x220 $x543)))
 (let (($x123 (and $x147 $x812)))
 (let (($x122 (and $x123 $x761)))
 (let (($x808 (and $x297 $x122)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x129 (and $x5 $x808)))
 (let (($x848 (bvugt ?x845 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x845 (_ bv3 32))))
 (let (($x528 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x16 (=> (bvule ?x845 (bvsub (bvadd ?x845 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x528 $x848)))))))
 (let (($x283 (=> (and $x652 (bvule ?x845 (bvsub (bvadd ?x845 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x528 $x848)))))))
 (let (($x391 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x601)))
 (let (($x345 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x39 (_ bv1 32))) (or false (or false (and true (or $x285 $x391)))))))
 (let (($x276 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x39 (_ bv1 32)))) (or false (or false (and true (or $x285 $x391)))))))
 (let (($x734 (and $x276 $x283)))
 (let (($x430 (and $x734 $x129)))
 (let (($x181 (=> $x430 $x975)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x12 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x204 (or $x12 $x731)))
 (let (($x313 (= $x204 true)))
 (let (($x709 (= $x313 true)))
 (let ((?x301 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x389 (= (_ bv0 3) ?x301)))
 (let (($x824 (= $x389 true)))
 (let (($x945 (= $x824 true)))
 (let (($x655 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x655 true)))
 (let (($x852 (= $x252 true)))
 (let (($x705 (= $x852 true)))
 (let ((?x446 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv1 32))) (select input.dst.llvm-mem ?x446))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv2 32))) ?x164))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x203))))
 (let (($x676 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x74)))
 (let (($x61 (and $x676 true)))
 (let (($x99 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x401 (=> $x99 $x61)))
 (let (($x13 (= $x99 (bvuge (ite (= (_ bv0 32) ?x23) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x641 (= false false)))
 (let (($x351 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x298 (=> $x351 $x641)))
 (let (($x535 (= $x351 (= (ite (= (_ bv0 32) ?x23) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1010 (and $x535 $x298)))
 (let (($x14 (and $x1010 $x13)))
 (let (($x113 (and $x14 $x401)))
 (let ((?x876 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x399 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x788 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x540 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x675 (concat (select input.dst.llvm-mem ?x540) (concat ?x788 (concat ?x399 ?x876)))))
 (let (($x335 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x675)))
 (let (($x253 (and $x335 $x113)))
 (let (($x809 (=> $x12 $x253)))
 (let (($x796 (= $x12 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1114 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x94 (=> $x1114 $x641)))
 (let (($x857 (= $x1114 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x32 (and $x857 $x94)))
 (let (($x330 (and $x32 $x796)))
 (let (($x797 (and $x330 $x809)))
 (let (($x383 (= $x797 true)))
 (let (($x246 (= $x383 true)))
 (let (($x348 (= $x246 true)))
 (let ((?x1013 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x463 (= (_ bv0 32) ?x1013)))
 (let ((?x980 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x929 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x980)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x682 (and $x217 $x929)))
 (let (($x888 (and $x682 $x463)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x613 (and $x157 $x888)))
 (let (($x100 (= $x613 true)))
 (let (($x706 (= $x100 true)))
 (let (($x967 (= $x706 true)))
 (let ((?x243 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x138 (bvneg ?x243)))
 (let (($x514 (= ?x138 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x444 (= $x514 true)))
 (let (($x912 (= $x444 true)))
 (let ((?x559 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x679 (concat ?x559 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x497 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x229 (concat ?x562 (concat ?x497 ?x679))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x806))))
 (let (($x808 (= input.spec-%var-l-1.2.1.2.0 ?x165)))
 (let (($x129 (and $x808 true)))
 (let (($x201 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x893 (=> $x201 $x129)))
 (let (($x403 (= $x201 (bvuge (ite (= (_ bv0 32) ?x229) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x134 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x220 (=> $x134 $x641)))
 (let (($x1062 (= $x134 (= (ite (= (_ bv0 32) ?x229) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x698 (and $x1062 $x220)))
 (let (($x841 (and $x698 $x403)))
 (let (($x761 (and $x841 $x893)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x882 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x239)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x882)))
 (let (($x1090 (= input.spec-%var-l-1.2.0 ?x250)))
 (let (($x362 (and $x1090 $x761)))
 (let (($x167 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x346 (=> $x167 $x362)))
 (let (($x269 (= $x167 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x897 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x935 (=> $x897 $x641)))
 (let (($x188 (= $x897 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x556 (and $x188 $x935)))
 (let (($x914 (and $x556 $x269)))
 (let (($x812 (and $x914 $x346)))
 (let (($x308 (= $x812 true)))
 (let (($x122 (= $x308 true)))
 (let (($x430 (= $x122 true)))
 (let (($x233 (and $x430 $x912)))
 (let (($x1005 (and $x233 $x967)))
 (let (($x304 (and $x1005 $x348)))
 (let (($x334 (and $x304 $x705)))
 (let (($x714 (and $x334 $x945)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x926 (and $x116 $x714)))
 (let ((?x104 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x726 (bvugt ?x104 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x104 (_ bv3 32)))))
 (let (($x5 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x726)))))))
 (let (($x652 (not $x731)))
 (let (($x218 (=> (and $x652 (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x15 $x726)))))))
 (let (($x624 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x540)))
 (let (($x190 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x446 (_ bv1 32))) (or false (or false (and true (or $x176 $x624)))))))
 (let (($x121 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x446 (_ bv1 32)))) (or false (or false (and true (or $x176 $x624)))))))
 (let (($x469 (and $x121 $x218)))
 (let (($x171 (and $x469 $x926)))
 (let (($x920 (=> $x171 $x709)))
 (not $x920))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x12 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x204 (or $x12 $x731)))
 (let (($x313 (= $x204 true)))
 (let (($x709 (= $x313 true)))
 (let ((?x301 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x389 (= (_ bv0 3) ?x301)))
 (let (($x824 (= $x389 true)))
 (let (($x945 (= $x824 true)))
 (let (($x655 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x252 (= $x655 true)))
 (let (($x852 (= $x252 true)))
 (let (($x705 (= $x852 true)))
 (let ((?x446 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x164 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv1 32))) (select input.dst.llvm-mem ?x446))))
 (let ((?x23 (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x446 (_ bv2 32))) ?x164))))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x203))))
 (let (($x676 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x74)))
 (let (($x61 (and $x676 true)))
 (let (($x99 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x401 (=> $x99 $x61)))
 (let (($x13 (= $x99 (bvuge (ite (= (_ bv0 32) ?x23) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x641 (= false false)))
 (let (($x351 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x298 (=> $x351 $x641)))
 (let (($x535 (= $x351 (= (ite (= (_ bv0 32) ?x23) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1010 (and $x535 $x298)))
 (let (($x14 (and $x1010 $x13)))
 (let (($x113 (and $x14 $x401)))
 (let ((?x876 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x399 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x788 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x540 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x675 (concat (select input.dst.llvm-mem ?x540) (concat ?x788 (concat ?x399 ?x876)))))
 (let (($x335 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x675)))
 (let (($x253 (and $x335 $x113)))
 (let (($x809 (=> $x12 $x253)))
 (let (($x796 (= $x12 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1114 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x94 (=> $x1114 $x641)))
 (let (($x857 (= $x1114 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x32 (and $x857 $x94)))
 (let (($x330 (and $x32 $x796)))
 (let (($x797 (and $x330 $x809)))
 (let (($x383 (= $x797 true)))
 (let (($x246 (= $x383 true)))
 (let (($x348 (= $x246 true)))
 (let ((?x1013 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x463 (= (_ bv0 32) ?x1013)))
 (let ((?x980 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x929 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x980)))
 (let (($x217 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x682 (and $x217 $x929)))
 (let (($x888 (and $x682 $x463)))
 (let (($x157 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x613 (and $x157 $x888)))
 (let (($x100 (= $x613 true)))
 (let (($x706 (= $x100 true)))
 (let (($x967 (= $x706 true)))
 (let ((?x243 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x138 (bvneg ?x243)))
 (let (($x514 (= ?x138 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x444 (= $x514 true)))
 (let (($x912 (= $x444 true)))
 (let ((?x559 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x679 (concat ?x559 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x497 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x562 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x229 (concat ?x562 (concat ?x497 ?x679))))
 (let ((?x806 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv1 32))) (select input.dst.llvm-mem ?x229))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x229 (_ bv2 32))) ?x806))))
 (let (($x808 (= input.spec-%var-l-1.2.1.2.0 ?x165)))
 (let (($x129 (and $x808 true)))
 (let (($x201 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x893 (=> $x201 $x129)))
 (let (($x403 (= $x201 (bvuge (ite (= (_ bv0 32) ?x229) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x134 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x220 (=> $x134 $x641)))
 (let (($x1062 (= $x134 (= (ite (= (_ bv0 32) ?x229) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x698 (and $x1062 $x220)))
 (let (($x841 (and $x698 $x403)))
 (let (($x761 (and $x841 $x893)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x882 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x239)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x882)))
 (let (($x1090 (= input.spec-%var-l-1.2.0 ?x250)))
 (let (($x362 (and $x1090 $x761)))
 (let (($x167 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x346 (=> $x167 $x362)))
 (let (($x269 (= $x167 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x897 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x935 (=> $x897 $x641)))
 (let (($x188 (= $x897 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x556 (and $x188 $x935)))
 (let (($x914 (and $x556 $x269)))
 (let (($x812 (and $x914 $x346)))
 (let (($x308 (= $x812 true)))
 (let (($x122 (= $x308 true)))
 (let (($x430 (= $x122 true)))
 (let (($x233 (and $x430 $x912)))
 (let (($x1005 (and $x233 $x967)))
 (let (($x304 (and $x1005 $x348)))
 (let (($x334 (and $x304 $x705)))
 (let (($x714 (and $x334 $x945)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x926 (and $x116 $x714)))
 (let ((?x104 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x726 (bvugt ?x104 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x104 (_ bv3 32)))))
 (let (($x5 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x726)))))))
 (let (($x652 (not $x731)))
 (let (($x218 (=> (and $x652 (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x15 $x726)))))))
 (let (($x624 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x176 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x540)))
 (let (($x190 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x446 (_ bv1 32))) (or false (or false (and true (or $x176 $x624)))))))
 (let (($x121 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x446 (_ bv1 32)))) (or false (or false (and true (or $x176 $x624)))))))
 (let (($x469 (and $x121 $x218)))
 (let (($x171 (and $x469 $x926)))
 (let (($x920 (=> $x171 $x709)))
 (not $x920))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x525))))
 (let ((?x999 ((_ extract 2 0) ?x194)))
 (let (($x287 (= (_ bv0 3) ?x999)))
 (let (($x531 (= $x287 true)))
 (let ((?x950 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= (_ bv0 3) ?x950)))
 (let (($x600 (= $x102 true)))
 (let (($x341 (= $x600 true)))
 (let (($x532 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x687 (= $x532 true)))
 (let (($x623 (= $x687 true)))
 (let (($x275 (= $x623 true)))
 (let ((?x285 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x475))))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x739))))
 (let (($x764 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x319)))
 (let (($x154 (and $x764 true)))
 (let (($x369 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1155 (=> $x369 $x154)))
 (let (($x604 (= $x369 (bvuge (ite (= (_ bv0 32) ?x257) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x308 (= false false)))
 (let (($x920 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x313 (=> $x920 $x308)))
 (let (($x818 (= $x920 (= (ite (= (_ bv0 32) ?x257) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x968 (and $x818 $x313)))
 (let (($x1074 (and $x968 $x604)))
 (let (($x342 (and $x1074 $x1155)))
 (let ((?x569 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x772 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x991 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x991) (concat ?x241 (concat ?x772 ?x569)))))
 (let (($x887 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x296)))
 (let (($x838 (and $x887 $x342)))
 (let (($x444 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x952 (=> $x444 $x838)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x722 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x892 (= $x444 (bvuge ?x722 (_ bv1 32)))))
 (let (($x893 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x122 (=> $x893 $x308)))
 (let (($x139 (= $x893 (= ?x722 (_ bv0 32)))))
 (let (($x982 (and $x139 $x122)))
 (let (($x329 (and $x982 $x892)))
 (let (($x1076 (and $x329 $x952)))
 (let (($x46 (= $x1076 true)))
 (let (($x392 (= $x46 true)))
 (let (($x1152 (= $x392 true)))
 (let (($x114 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x311 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x880 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x311) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x311))))
 (let (($x51 (and true $x880)))
 (let (($x213 (and $x880 $x51)))
 (let (($x115 (= (bvand ?x194 (_ bv4294967288 32)) ?x194)))
 (let (($x651 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x325 (and $x651 $x115)))
 (let (($x6 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x954 (and (and (and (and (and $x51 $x6) $x651) $x325) $x213) $x114)))
 (let (($x450 (= true $x954)))
 (let (($x652 (not $x731)))
 (let (($x451 (=> $x652 $x450)))
 (let (($x350 (= $x451 true)))
 (let (($x466 (= $x350 true)))
 (let (($x376 (= $x466 true)))
 (let (($x388 (= $x652 true)))
 (let (($x753 (= $x388 true)))
 (let (($x424 (= $x753 true)))
 (let (($x574 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x385 (= $x574 true)))
 (let (($x180 (= $x385 true)))
 (let (($x360 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x927 (= $x360 true)))
 (let (($x197 (= $x927 true)))
 (let ((?x751 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x751)))
 (let ((?x1086 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x842 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1086)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x667 (and $x292 $x842)))
 (let (($x71 (and $x667 $x216)))
 (let (($x367 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x367 $x71)))
 (let (($x689 (= $x170 true)))
 (let (($x895 (= $x689 true)))
 (let (($x821 (= $x895 true)))
 (let ((?x973 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x668 (concat ?x973 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x490 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1104 (concat ?x490 (concat ?x199 ?x668))))
 (let ((?x858 (concat (select input.dst.llvm-mem (bvadd ?x1104 (_ bv1 32))) (select input.dst.llvm-mem ?x1104))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x1104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1104 (_ bv2 32))) ?x858))))
 (let (($x985 (= input.spec-%var-l-1.2.1.2.0 ?x127)))
 (let (($x1158 (and $x985 true)))
 (let (($x1149 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x573 (=> $x1149 $x1158)))
 (let ((?x181 (ite (= (_ bv0 32) ?x1104) (_ bv0 32) (_ bv1 32))))
 (let (($x355 (bvuge ?x181 (_ bv1 32))))
 (let (($x596 (= $x1149 $x355)))
 (let (($x483 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x701 (=> $x483 $x308)))
 (let (($x437 (= ?x181 (_ bv0 32))))
 (let (($x135 (= $x483 $x437)))
 (let (($x579 (and $x135 $x701)))
 (let (($x735 (and $x579 $x596)))
 (let (($x759 (and $x735 $x573)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x713 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x168)))
 (let ((?x585 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x713)))
 (let (($x741 (= input.spec-%var-l-1.2.0 ?x585)))
 (let (($x186 (and $x741 $x759)))
 (let (($x410 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (=> $x410 $x186)))
 (let ((?x362 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x912 (bvuge ?x362 (_ bv1 32))))
 (let (($x378 (= $x410 $x912)))
 (let (($x1117 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x708 (=> $x1117 $x308)))
 (let (($x346 (= ?x362 (_ bv0 32))))
 (let (($x766 (= $x1117 $x346)))
 (let (($x986 (and $x766 $x708)))
 (let (($x671 (and $x986 $x378)))
 (let (($x1075 (and $x671 $x18)))
 (let (($x1077 (= $x1075 true)))
 (let (($x694 (= $x1077 true)))
 (let (($x1084 (= $x694 true)))
 (let (($x271 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x127)))
 (let (($x777 (and $x271 true)))
 (let (($x748 (=> $x369 $x777)))
 (let (($x145 (= $x369 $x355)))
 (let (($x204 (= $x920 $x437)))
 (let (($x717 (and $x204 $x313)))
 (let (($x721 (and $x717 $x145)))
 (let (($x34 (and $x721 $x748)))
 (let (($x431 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x585)))
 (let (($x321 (and $x431 $x34)))
 (let (($x727 (=> $x444 $x321)))
 (let (($x233 (= $x444 $x912)))
 (let (($x812 (= $x893 $x346)))
 (let (($x430 (and $x812 $x122)))
 (let (($x344 (and $x430 $x233)))
 (let (($x582 (and $x344 $x727)))
 (let (($x160 (= $x582 true)))
 (let (($x68 (= $x160 true)))
 (let (($x917 (= $x68 true)))
 (let (($x240 (and $x917 $x1084)))
 (let (($x642 (and $x240 $x821)))
 (let (($x683 (and $x642 $x197)))
 (let (($x482 (and $x683 $x180)))
 (let (($x187 (and $x482 $x424)))
 (let (($x209 (and $x187 $x376)))
 (let (($x814 (and $x209 $x1152)))
 (let (($x637 (and $x814 $x275)))
 (let (($x552 (and $x637 $x341)))
 (let (($x897 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x237 (and $x897 $x552)))
 (let (($x283 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x153 (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x116 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x283)))))))
 (let (($x635 (=> (and $x652 (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x16 $x283)))))))
 (let (($x276 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x991)))
 (let (($x848 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x285 (_ bv1 32))) (or false (or false (and true (or $x345 $x276)))))))
 (let (($x601 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x285 (_ bv1 32)))) (or false (or false (and true (or $x345 $x276)))))))
 (let (($x316 (and $x601 $x635)))
 (let (($x274 (and $x316 $x237)))
 (let (($x29 (=> $x274 $x531)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x153 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x525))))
 (let ((?x999 ((_ extract 2 0) ?x194)))
 (let (($x287 (= (_ bv0 3) ?x999)))
 (let (($x531 (= $x287 true)))
 (let ((?x950 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x102 (= (_ bv0 3) ?x950)))
 (let (($x600 (= $x102 true)))
 (let (($x341 (= $x600 true)))
 (let (($x532 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x687 (= $x532 true)))
 (let (($x623 (= $x687 true)))
 (let (($x275 (= $x623 true)))
 (let ((?x285 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x475 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem ?x285))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x285 (_ bv2 32))) ?x475))))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv1 32))) (select input.dst.llvm-mem ?x257))))
 (let ((?x319 (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x257 (_ bv2 32))) ?x739))))
 (let (($x764 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x319)))
 (let (($x154 (and $x764 true)))
 (let (($x369 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1155 (=> $x369 $x154)))
 (let (($x604 (= $x369 (bvuge (ite (= (_ bv0 32) ?x257) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x308 (= false false)))
 (let (($x920 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x313 (=> $x920 $x308)))
 (let (($x818 (= $x920 (= (ite (= (_ bv0 32) ?x257) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x968 (and $x818 $x313)))
 (let (($x1074 (and $x968 $x604)))
 (let (($x342 (and $x1074 $x1155)))
 (let ((?x569 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x772 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x991 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x991) (concat ?x241 (concat ?x772 ?x569)))))
 (let (($x887 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x296)))
 (let (($x838 (and $x887 $x342)))
 (let (($x444 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x952 (=> $x444 $x838)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x722 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x892 (= $x444 (bvuge ?x722 (_ bv1 32)))))
 (let (($x893 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x122 (=> $x893 $x308)))
 (let (($x139 (= $x893 (= ?x722 (_ bv0 32)))))
 (let (($x982 (and $x139 $x122)))
 (let (($x329 (and $x982 $x892)))
 (let (($x1076 (and $x329 $x952)))
 (let (($x46 (= $x1076 true)))
 (let (($x392 (= $x46 true)))
 (let (($x1152 (= $x392 true)))
 (let (($x114 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x311 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x880 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x311) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x311))))
 (let (($x51 (and true $x880)))
 (let (($x213 (and $x880 $x51)))
 (let (($x115 (= (bvand ?x194 (_ bv4294967288 32)) ?x194)))
 (let (($x651 (= (bvand ?x153 (_ bv4294967292 32)) ?x153)))
 (let (($x325 (and $x651 $x115)))
 (let (($x6 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x153 (bvsub ?x153 (_ bv4 32))) (bvult ?x153 (bvsub ?x153 (_ bv4 32))))))
 (let (($x954 (and (and (and (and (and $x51 $x6) $x651) $x325) $x213) $x114)))
 (let (($x450 (= true $x954)))
 (let (($x652 (not $x731)))
 (let (($x451 (=> $x652 $x450)))
 (let (($x350 (= $x451 true)))
 (let (($x466 (= $x350 true)))
 (let (($x376 (= $x466 true)))
 (let (($x388 (= $x652 true)))
 (let (($x753 (= $x388 true)))
 (let (($x424 (= $x753 true)))
 (let (($x574 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x385 (= $x574 true)))
 (let (($x180 (= $x385 true)))
 (let (($x360 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x927 (= $x360 true)))
 (let (($x197 (= $x927 true)))
 (let ((?x751 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x216 (= (_ bv0 32) ?x751)))
 (let ((?x1086 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x842 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1086)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x667 (and $x292 $x842)))
 (let (($x71 (and $x667 $x216)))
 (let (($x367 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (and $x367 $x71)))
 (let (($x689 (= $x170 true)))
 (let (($x895 (= $x689 true)))
 (let (($x821 (= $x895 true)))
 (let ((?x973 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x668 (concat ?x973 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x490 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1104 (concat ?x490 (concat ?x199 ?x668))))
 (let ((?x858 (concat (select input.dst.llvm-mem (bvadd ?x1104 (_ bv1 32))) (select input.dst.llvm-mem ?x1104))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x1104 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1104 (_ bv2 32))) ?x858))))
 (let (($x985 (= input.spec-%var-l-1.2.1.2.0 ?x127)))
 (let (($x1158 (and $x985 true)))
 (let (($x1149 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x573 (=> $x1149 $x1158)))
 (let ((?x181 (ite (= (_ bv0 32) ?x1104) (_ bv0 32) (_ bv1 32))))
 (let (($x355 (bvuge ?x181 (_ bv1 32))))
 (let (($x596 (= $x1149 $x355)))
 (let (($x483 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x701 (=> $x483 $x308)))
 (let (($x437 (= ?x181 (_ bv0 32))))
 (let (($x135 (= $x483 $x437)))
 (let (($x579 (and $x135 $x701)))
 (let (($x735 (and $x579 $x596)))
 (let (($x759 (and $x735 $x573)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x713 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x168)))
 (let ((?x585 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x713)))
 (let (($x741 (= input.spec-%var-l-1.2.0 ?x585)))
 (let (($x186 (and $x741 $x759)))
 (let (($x410 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x18 (=> $x410 $x186)))
 (let ((?x362 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x912 (bvuge ?x362 (_ bv1 32))))
 (let (($x378 (= $x410 $x912)))
 (let (($x1117 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x708 (=> $x1117 $x308)))
 (let (($x346 (= ?x362 (_ bv0 32))))
 (let (($x766 (= $x1117 $x346)))
 (let (($x986 (and $x766 $x708)))
 (let (($x671 (and $x986 $x378)))
 (let (($x1075 (and $x671 $x18)))
 (let (($x1077 (= $x1075 true)))
 (let (($x694 (= $x1077 true)))
 (let (($x1084 (= $x694 true)))
 (let (($x271 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x127)))
 (let (($x777 (and $x271 true)))
 (let (($x748 (=> $x369 $x777)))
 (let (($x145 (= $x369 $x355)))
 (let (($x204 (= $x920 $x437)))
 (let (($x717 (and $x204 $x313)))
 (let (($x721 (and $x717 $x145)))
 (let (($x34 (and $x721 $x748)))
 (let (($x431 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x585)))
 (let (($x321 (and $x431 $x34)))
 (let (($x727 (=> $x444 $x321)))
 (let (($x233 (= $x444 $x912)))
 (let (($x812 (= $x893 $x346)))
 (let (($x430 (and $x812 $x122)))
 (let (($x344 (and $x430 $x233)))
 (let (($x582 (and $x344 $x727)))
 (let (($x160 (= $x582 true)))
 (let (($x68 (= $x160 true)))
 (let (($x917 (= $x68 true)))
 (let (($x240 (and $x917 $x1084)))
 (let (($x642 (and $x240 $x821)))
 (let (($x683 (and $x642 $x197)))
 (let (($x482 (and $x683 $x180)))
 (let (($x187 (and $x482 $x424)))
 (let (($x209 (and $x187 $x376)))
 (let (($x814 (and $x209 $x1152)))
 (let (($x637 (and $x814 $x275)))
 (let (($x552 (and $x637 $x341)))
 (let (($x897 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x237 (and $x897 $x552)))
 (let (($x283 (bvugt ?x153 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x153 (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x116 (=> (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x283)))))))
 (let (($x635 (=> (and $x652 (bvule ?x153 (bvsub (bvadd ?x153 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x16 $x283)))))))
 (let (($x276 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x991)))
 (let (($x848 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x285 (_ bv1 32))) (or false (or false (and true (or $x345 $x276)))))))
 (let (($x601 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x285 (_ bv1 32)))) (or false (or false (and true (or $x345 $x276)))))))
 (let (($x316 (and $x601 $x635)))
 (let (($x274 (and $x316 $x237)))
 (let (($x29 (=> $x274 $x531)))
 (not $x29))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x746 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x932 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x845 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x915 (concat (select input.dst.llvm-mem ?x845) (concat ?x932 (concat ?x80 ?x746)))))
 (let ((?x8 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x915)))
 (let (($x193 (= (_ bv0 32) ?x8)))
 (let (($x904 (= $x193 true)))
 (let ((?x63 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x476 (= (_ bv0 3) ?x63)))
 (let (($x564 (= $x476 true)))
 (let (($x119 (= $x564 true)))
 (let (($x874 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x421 (= $x874 true)))
 (let (($x723 (= $x421 true)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x684 (= $x268 true)))
 (let (($x363 (= $x684 true)))
 (let (($x756 (= $x363 true)))
 (let ((?x176 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x365))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x64))))
 (let (($x57 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x137)))
 (let (($x462 (and $x57 true)))
 (let (($x739 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x522 (=> $x739 $x462)))
 (let (($x352 (= $x739 (bvuge (ite (= (_ bv0 32) ?x607) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x160 (= false false)))
 (let (($x495 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x892 (=> $x495 $x160)))
 (let (($x373 (= $x495 (= (ite (= (_ bv0 32) ?x607) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x251 (and $x373 $x892)))
 (let (($x583 (and $x251 $x352)))
 (let (($x627 (and $x583 $x522)))
 (let (($x266 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x915)))
 (let (($x1004 (and $x266 $x627)))
 (let (($x378 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x553 (=> $x378 $x1004)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x20 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x632 (= $x378 (bvuge ?x20 (_ bv1 32)))))
 (let (($x748 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x68 (=> $x748 $x160)))
 (let (($x31 (= $x748 (= ?x20 (_ bv0 32)))))
 (let (($x1082 (and $x31 $x68)))
 (let (($x245 (and $x1082 $x632)))
 (let (($x933 (and $x245 $x553)))
 (let (($x162 (= $x933 true)))
 (let (($x425 (= $x162 true)))
 (let (($x364 (= $x425 true)))
 (let (($x246 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x655 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x714 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x655) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x655))))
 (let (($x301 (and true $x714)))
 (let (($x74 (and $x714 $x301)))
 (let ((?x528 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x675 (concat (select input.dst.llvm-mem (bvadd ?x528 (_ bv1 32))) (select input.dst.llvm-mem ?x528))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x528 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x528 (_ bv2 32))) ?x675))))
 (let (($x13 (= (bvand ?x335 (_ bv4294967288 32)) ?x335)))
 (let (($x788 (= (bvand ?x528 (_ bv4294967292 32)) ?x528)))
 (let (($x14 (and $x788 $x13)))
 (let (($x310 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x528 (bvsub ?x528 (_ bv4 32))) (bvult ?x528 (bvsub ?x528 (_ bv4 32))))))
 (let (($x676 (and (and (and (and (and $x301 $x310) $x788) $x14) $x74) $x246)))
 (let (($x113 (= true $x676)))
 (let (($x652 (not $x731)))
 (let (($x797 (=> $x652 $x113)))
 (let (($x348 (= $x797 true)))
 (let (($x347 (= $x348 true)))
 (let (($x203 (= $x347 true)))
 (let (($x836 (= $x652 true)))
 (let (($x916 (= $x836 true)))
 (let (($x304 (= $x916 true)))
 (let (($x706 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x909 (= $x706 true)))
 (let (($x1114 (= $x909 true)))
 (let ((?x474 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x967 (= (_ bv0 32) ?x474)))
 (let ((?x857 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x857)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (and $x32 $x12)))
 (let (($x1005 (and $x330 $x967)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x613 (and $x94 $x1005)))
 (let (($x100 (= $x613 true)))
 (let (($x1013 (= $x100 true)))
 (let (($x463 (= $x1013 true)))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x226 (concat ?x569 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x21 (concat ?x84 (concat ?x296 ?x226))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x750))))
 (let (($x578 (= input.spec-%var-l-1.2.1.2.0 ?x134)))
 (let (($x781 (and $x578 true)))
 (let (($x174 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x442 (=> $x174 $x781)))
 (let ((?x609 (ite (= (_ bv0 32) ?x21) (_ bv0 32) (_ bv1 32))))
 (let (($x319 (bvuge ?x609 (_ bv1 32))))
 (let (($x201 (= $x174 $x319)))
 (let (($x229 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x957 (=> $x229 $x160)))
 (let (($x919 (= ?x609 (_ bv0 32))))
 (let (($x55 (= $x229 $x919)))
 (let (($x679 (and $x55 $x957)))
 (let (($x558 (and $x679 $x201)))
 (let (($x514 (and $x558 $x442)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x753 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x872 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x753)))
 (let (($x441 (= input.spec-%var-l-1.2.0 ?x872)))
 (let (($x595 (and $x441 $x514)))
 (let (($x621 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x243 (=> $x621 $x595)))
 (let ((?x321 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x671 (bvuge ?x321 (_ bv1 32))))
 (let (($x149 (= $x621 $x671)))
 (let (($x896 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (=> $x896 $x160)))
 (let (($x727 (= ?x321 (_ bv0 32))))
 (let (($x497 (= $x896 $x727)))
 (let (($x559 (and $x497 $x147)))
 (let (($x156 (and $x559 $x149)))
 (let (($x808 (and $x156 $x243)))
 (let (($x138 (= $x808 true)))
 (let (($x929 (= $x138 true)))
 (let (($x881 (= $x929 true)))
 (let (($x1113 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x134)))
 (let (($x1151 (and $x1113 true)))
 (let (($x40 (=> $x739 $x1151)))
 (let (($x126 (= $x739 $x319)))
 (let (($x332 (= $x495 $x919)))
 (let (($x377 (and $x332 $x892)))
 (let (($x454 (and $x377 $x126)))
 (let (($x110 (and $x454 $x40)))
 (let (($x311 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x872)))
 (let (($x107 (and $x311 $x110)))
 (let (($x659 (=> $x378 $x107)))
 (let (($x910 (= $x378 $x671)))
 (let (($x582 (= $x748 $x727)))
 (let (($x917 (and $x582 $x68)))
 (let (($x741 (and $x917 $x910)))
 (let (($x849 (and $x741 $x659)))
 (let (($x913 (= $x849 true)))
 (let (($x239 (= $x913 true)))
 (let (($x407 (= $x239 true)))
 (let (($x885 (and $x407 $x881)))
 (let (($x682 (and $x885 $x463)))
 (let (($x538 (and $x682 $x1114)))
 (let (($x567 (and $x538 $x304)))
 (let (($x400 (and $x567 $x203)))
 (let (($x783 (and $x400 $x364)))
 (let (($x404 (and $x783 $x756)))
 (let (($x1111 (and $x404 $x723)))
 (let (($x906 (and $x1111 $x119)))
 (let (($x893 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1159 (and $x893 $x906)))
 (let (($x218 (bvugt ?x528 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x528 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x897 (=> (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x218)))))))
 (let (($x905 (=> (and $x652 (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x5 $x218)))))))
 (let (($x121 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x845)))
 (let (($x726 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32))) (or false (or false (and true (or $x190 $x121)))))))
 (let (($x540 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32)))) (or false (or false (and true (or $x190 $x121)))))))
 (let (($x611 (and $x540 $x905)))
 (let (($x715 (and $x611 $x1159)))
 (let (($x393 (=> $x715 $x904)))
 (not $x393))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x746 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x932 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x845 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x915 (concat (select input.dst.llvm-mem ?x845) (concat ?x932 (concat ?x80 ?x746)))))
 (let ((?x8 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x915)))
 (let (($x193 (= (_ bv0 32) ?x8)))
 (let (($x904 (= $x193 true)))
 (let ((?x63 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x476 (= (_ bv0 3) ?x63)))
 (let (($x564 (= $x476 true)))
 (let (($x119 (= $x564 true)))
 (let (($x874 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x421 (= $x874 true)))
 (let (($x723 (= $x421 true)))
 (let (($x268 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x684 (= $x268 true)))
 (let (($x363 (= $x684 true)))
 (let (($x756 (= $x363 true)))
 (let ((?x176 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x365))))
 (let ((?x64 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv1 32))) (select input.dst.llvm-mem ?x607))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x607 (_ bv2 32))) ?x64))))
 (let (($x57 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x137)))
 (let (($x462 (and $x57 true)))
 (let (($x739 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x522 (=> $x739 $x462)))
 (let (($x352 (= $x739 (bvuge (ite (= (_ bv0 32) ?x607) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x160 (= false false)))
 (let (($x495 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x892 (=> $x495 $x160)))
 (let (($x373 (= $x495 (= (ite (= (_ bv0 32) ?x607) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x251 (and $x373 $x892)))
 (let (($x583 (and $x251 $x352)))
 (let (($x627 (and $x583 $x522)))
 (let (($x266 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x915)))
 (let (($x1004 (and $x266 $x627)))
 (let (($x378 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x553 (=> $x378 $x1004)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x20 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x632 (= $x378 (bvuge ?x20 (_ bv1 32)))))
 (let (($x748 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x68 (=> $x748 $x160)))
 (let (($x31 (= $x748 (= ?x20 (_ bv0 32)))))
 (let (($x1082 (and $x31 $x68)))
 (let (($x245 (and $x1082 $x632)))
 (let (($x933 (and $x245 $x553)))
 (let (($x162 (= $x933 true)))
 (let (($x425 (= $x162 true)))
 (let (($x364 (= $x425 true)))
 (let (($x246 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x655 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x714 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x655) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x655))))
 (let (($x301 (and true $x714)))
 (let (($x74 (and $x714 $x301)))
 (let ((?x528 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x675 (concat (select input.dst.llvm-mem (bvadd ?x528 (_ bv1 32))) (select input.dst.llvm-mem ?x528))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x528 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x528 (_ bv2 32))) ?x675))))
 (let (($x13 (= (bvand ?x335 (_ bv4294967288 32)) ?x335)))
 (let (($x788 (= (bvand ?x528 (_ bv4294967292 32)) ?x528)))
 (let (($x14 (and $x788 $x13)))
 (let (($x310 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x528 (bvsub ?x528 (_ bv4 32))) (bvult ?x528 (bvsub ?x528 (_ bv4 32))))))
 (let (($x676 (and (and (and (and (and $x301 $x310) $x788) $x14) $x74) $x246)))
 (let (($x113 (= true $x676)))
 (let (($x652 (not $x731)))
 (let (($x797 (=> $x652 $x113)))
 (let (($x348 (= $x797 true)))
 (let (($x347 (= $x348 true)))
 (let (($x203 (= $x347 true)))
 (let (($x836 (= $x652 true)))
 (let (($x916 (= $x836 true)))
 (let (($x304 (= $x916 true)))
 (let (($x706 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x909 (= $x706 true)))
 (let (($x1114 (= $x909 true)))
 (let ((?x474 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x967 (= (_ bv0 32) ?x474)))
 (let ((?x857 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x857)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (and $x32 $x12)))
 (let (($x1005 (and $x330 $x967)))
 (let (($x94 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x613 (and $x94 $x1005)))
 (let (($x100 (= $x613 true)))
 (let (($x1013 (= $x100 true)))
 (let (($x463 (= $x1013 true)))
 (let ((?x569 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x226 (concat ?x569 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x21 (concat ?x84 (concat ?x296 ?x226))))
 (let ((?x750 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x750))))
 (let (($x578 (= input.spec-%var-l-1.2.1.2.0 ?x134)))
 (let (($x781 (and $x578 true)))
 (let (($x174 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x442 (=> $x174 $x781)))
 (let ((?x609 (ite (= (_ bv0 32) ?x21) (_ bv0 32) (_ bv1 32))))
 (let (($x319 (bvuge ?x609 (_ bv1 32))))
 (let (($x201 (= $x174 $x319)))
 (let (($x229 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x957 (=> $x229 $x160)))
 (let (($x919 (= ?x609 (_ bv0 32))))
 (let (($x55 (= $x229 $x919)))
 (let (($x679 (and $x55 $x957)))
 (let (($x558 (and $x679 $x201)))
 (let (($x514 (and $x558 $x442)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x753 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x180)))
 (let ((?x872 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x753)))
 (let (($x441 (= input.spec-%var-l-1.2.0 ?x872)))
 (let (($x595 (and $x441 $x514)))
 (let (($x621 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x243 (=> $x621 $x595)))
 (let ((?x321 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x671 (bvuge ?x321 (_ bv1 32))))
 (let (($x149 (= $x621 $x671)))
 (let (($x896 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x147 (=> $x896 $x160)))
 (let (($x727 (= ?x321 (_ bv0 32))))
 (let (($x497 (= $x896 $x727)))
 (let (($x559 (and $x497 $x147)))
 (let (($x156 (and $x559 $x149)))
 (let (($x808 (and $x156 $x243)))
 (let (($x138 (= $x808 true)))
 (let (($x929 (= $x138 true)))
 (let (($x881 (= $x929 true)))
 (let (($x1113 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x134)))
 (let (($x1151 (and $x1113 true)))
 (let (($x40 (=> $x739 $x1151)))
 (let (($x126 (= $x739 $x319)))
 (let (($x332 (= $x495 $x919)))
 (let (($x377 (and $x332 $x892)))
 (let (($x454 (and $x377 $x126)))
 (let (($x110 (and $x454 $x40)))
 (let (($x311 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x872)))
 (let (($x107 (and $x311 $x110)))
 (let (($x659 (=> $x378 $x107)))
 (let (($x910 (= $x378 $x671)))
 (let (($x582 (= $x748 $x727)))
 (let (($x917 (and $x582 $x68)))
 (let (($x741 (and $x917 $x910)))
 (let (($x849 (and $x741 $x659)))
 (let (($x913 (= $x849 true)))
 (let (($x239 (= $x913 true)))
 (let (($x407 (= $x239 true)))
 (let (($x885 (and $x407 $x881)))
 (let (($x682 (and $x885 $x463)))
 (let (($x538 (and $x682 $x1114)))
 (let (($x567 (and $x538 $x304)))
 (let (($x400 (and $x567 $x203)))
 (let (($x783 (and $x400 $x364)))
 (let (($x404 (and $x783 $x756)))
 (let (($x1111 (and $x404 $x723)))
 (let (($x906 (and $x1111 $x119)))
 (let (($x893 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1159 (and $x893 $x906)))
 (let (($x218 (bvugt ?x528 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x528 (_ bv3 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x897 (=> (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x5 $x218)))))))
 (let (($x905 (=> (and $x652 (bvule ?x528 (bvsub (bvadd ?x528 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x5 $x218)))))))
 (let (($x121 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x190 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x845)))
 (let (($x726 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32))) (or false (or false (and true (or $x190 $x121)))))))
 (let (($x540 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x176 (_ bv1 32)))) (or false (or false (and true (or $x190 $x121)))))))
 (let (($x611 (and $x540 $x905)))
 (let (($x715 (and $x611 $x1159)))
 (let (($x393 (=> $x715 $x904)))
 (not $x393))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_27)
(function @fun_27
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_27 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv126643200 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv1 8)) (_ bv126643200 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv174288768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv174288768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv174288771 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffe)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00004f00)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000001
                                #x4f)
                         #x80000003
                         #x4f)
                  #x00000001
                  #x4f)))
  (store a!1 #x00000001 #x4f)))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffb0ff)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x4f000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x4f000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x336 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x104 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x353 (concat (select input.dst.llvm-mem ?x104) (concat ?x440 (concat ?x354 ?x336)))))
 (let ((?x794 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x353)))
 (let (($x951 (= (_ bv0 32) ?x794)))
 (let (($x312 (= $x951 true)))
 (let ((?x922 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x902 (= (_ bv0 3) ?x922)))
 (let (($x7 (= $x902 true)))
 (let (($x774 (= $x7 true)))
 (let (($x891 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x1079 (= $x891 true)))
 (let (($x898 (= $x1079 true)))
 (let (($x1078 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x956 (= $x1078 true)))
 (let (($x534 (= $x956 true)))
 (let (($x958 (= $x534 true)))
 (let ((?x345 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x1080 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x1080))))
 (let ((?x1154 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x1154))))
 (let (($x921 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x634)))
 (let (($x505 (and $x921 false)))
 (let (($x522 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x504 (=> $x522 $x505)))
 (let (($x449 (= $x522 (bvuge (ite (= (_ bv0 32) ?x78) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x913 (= false false)))
 (let (($x746 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x746 $x913)))
 (let (($x356 (= $x746 (= (ite (= (_ bv0 32) ?x78) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x555 (and $x356 $x28)))
 (let (($x542 (and $x555 $x449)))
 (let (($x87 (and $x542 $x504)))
 (let (($x215 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x353)))
 (let (($x605 (and $x215 $x87)))
 (let (($x149 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x90 (=> $x149 $x605)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x790 (= $x149 (bvuge ?x217 (_ bv1 32)))))
 (let (($x40 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x239 (=> $x40 $x913)))
 (let (($x384 (= $x40 (= ?x217 (_ bv0 32)))))
 (let (($x1062 (and $x384 $x239)))
 (let (($x810 (and $x1062 $x790)))
 (let (($x200 (and $x810 $x90)))
 (let (($x930 (= $x200 true)))
 (let (($x524 (= $x930 true)))
 (let (($x244 (= $x524 true)))
 (let (($x325 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x987 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x711 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x987) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x987))))
 (let (($x466 (and true $x711)))
 (let (($x928 (and $x711 $x466)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x931 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x642))))
 (let (($x106 (= (bvand ?x931 (_ bv4294967288 32)) ?x931)))
 (let (($x216 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x646 (and $x216 $x106)))
 (let (($x350 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x1106 (and (and (and (and (and $x466 $x350) $x216) $x646) $x928) $x325)))
 (let (($x743 (= true $x1106)))
 (let (($x652 (not $x731)))
 (let (($x317 (=> $x652 $x743)))
 (let (($x803 (= $x317 true)))
 (let (($x620 (= $x803 true)))
 (let (($x557 (= $x620 true)))
 (let (($x220 (= $x652 true)))
 (let (($x698 (= $x220 true)))
 (let (($x213 (= $x698 true)))
 (let (($x1158 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x186 (= $x1158 true)))
 (let (($x18 (= $x186 true)))
 (let ((?x751 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x573 (= (_ bv0 32) ?x751)))
 (let ((?x694 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x499 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x694)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1086 (and $x240 $x499)))
 (let (($x759 (and $x1086 $x573)))
 (let (($x1084 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x594 (and $x1084 $x759)))
 (let (($x985 (= $x594 true)))
 (let (($x1149 (= $x985 true)))
 (let (($x596 (= $x1149 true)))
 (let ((?x649 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x513 (concat ?x649 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x755 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x365 (concat ?x755 (concat ?x432 ?x513))))
 (let ((?x912 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x920 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x912))))
 (let (($x1077 (= input.spec-%var-l-1.2.1.2.0 ?x920)))
 (let (($x842 (and $x1077 false)))
 (let (($x882 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x986 (=> $x882 $x842)))
 (let ((?x607 (ite (= (_ bv0 32) ?x365) (_ bv0 32) (_ bv1 32))))
 (let (($x1004 (bvuge ?x607 (_ bv1 32))))
 (let (($x369 (= $x882 $x1004)))
 (let (($x1104 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x437 (=> $x1104 $x913)))
 (let (($x520 (= ?x607 (_ bv0 32))))
 (let (($x181 (= $x1104 $x520)))
 (let (($x668 (and $x181 $x437)))
 (let (($x1090 (and $x668 $x369)))
 (let (($x410 (and $x1090 $x986)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x567)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x252)))
 (let (($x331 (= input.spec-%var-l-1.2.0 ?x301)))
 (let (($x825 (and $x331 $x410)))
 (let (($x730 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x766 (=> $x730 $x825)))
 (let ((?x107 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x107 (_ bv1 32))))
 (let (($x427 (= $x730 $x156)))
 (let (($x142 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x1008 (=> $x142 $x913)))
 (let (($x659 (= ?x107 (_ bv0 32))))
 (let (($x199 (= $x142 $x659)))
 (let (($x973 (and $x199 $x1008)))
 (let (($x224 (and $x973 $x427)))
 (let (($x271 (and $x224 $x766)))
 (let (($x708 (= $x271 true)))
 (let (($x701 (= $x708 true)))
 (let (($x667 (= $x701 true)))
 (let (($x934 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x920)))
 (let (($x164 (and $x934 false)))
 (let (($x391 (=> $x522 $x164)))
 (let (($x57 (= $x522 $x1004)))
 (let (($x932 (= $x746 $x520)))
 (let (($x1112 (and $x932 $x28)))
 (let (($x462 (and $x1112 $x57)))
 (let (($x656 (and $x462 $x391)))
 (let (($x705 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x301)))
 (let (($x123 (and $x705 $x656)))
 (let (($x143 (=> $x149 $x123)))
 (let (($x403 (= $x149 $x156)))
 (let (($x849 (= $x40 $x659)))
 (let (($x407 (and $x849 $x239)))
 (let (($x441 (and $x407 $x403)))
 (let (($x693 (and $x441 $x143)))
 (let (($x299 (= $x693 true)))
 (let (($x168 (= $x299 true)))
 (let (($x23 (= $x168 true)))
 (let (($x367 (and $x23 $x667)))
 (let (($x579 (and $x367 $x596)))
 (let (($x1075 (and $x579 $x18)))
 (let (($x452 (and $x1075 $x213)))
 (let (($x92 (and $x452 $x557)))
 (let (($x1002 (and $x92 $x244)))
 (let (($x554 (and $x1002 $x958)))
 (let (($x903 (and $x554 $x898)))
 (let (($x191 (and $x903 $x774)))
 (let (($x748 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x733 (and $x748 $x191)))
 (let (($x635 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x15 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x893 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x635)))))))
 (let (($x802 (=> (and $x652 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x635)))))))
 (let (($x601 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x848 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x283 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x345 (_ bv1 32))) (or false (or false (and true (or $x848 $x601)))))))
 (let (($x991 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x345 (_ bv1 32)))) (or false (or false (and true (or $x848 $x601)))))))
 (let (($x734 (and $x991 $x802)))
 (let (($x900 (and $x734 $x733)))
 (let (($x725 (=> $x900 $x312)))
 (not $x725))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x336 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x440 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x104 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x353 (concat (select input.dst.llvm-mem ?x104) (concat ?x440 (concat ?x354 ?x336)))))
 (let ((?x794 (bvadd input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry ?x353)))
 (let (($x951 (= (_ bv0 32) ?x794)))
 (let (($x312 (= $x951 true)))
 (let ((?x922 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x902 (= (_ bv0 3) ?x922)))
 (let (($x7 (= $x902 true)))
 (let (($x774 (= $x7 true)))
 (let (($x891 (= (_ bv0 32) input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x1079 (= $x891 true)))
 (let (($x898 (= $x1079 true)))
 (let (($x1078 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x956 (= $x1078 true)))
 (let (($x534 (= $x956 true)))
 (let (($x958 (= $x534 true)))
 (let ((?x345 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x1080 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv1 32))) (select input.dst.llvm-mem ?x345))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x345 (_ bv2 32))) ?x1080))))
 (let ((?x1154 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x634 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x1154))))
 (let (($x921 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x634)))
 (let (($x505 (and $x921 false)))
 (let (($x522 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x504 (=> $x522 $x505)))
 (let (($x449 (= $x522 (bvuge (ite (= (_ bv0 32) ?x78) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x913 (= false false)))
 (let (($x746 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x746 $x913)))
 (let (($x356 (= $x746 (= (ite (= (_ bv0 32) ?x78) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x555 (and $x356 $x28)))
 (let (($x542 (and $x555 $x449)))
 (let (($x87 (and $x542 $x504)))
 (let (($x215 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x353)))
 (let (($x605 (and $x215 $x87)))
 (let (($x149 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x90 (=> $x149 $x605)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x217 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x790 (= $x149 (bvuge ?x217 (_ bv1 32)))))
 (let (($x40 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x239 (=> $x40 $x913)))
 (let (($x384 (= $x40 (= ?x217 (_ bv0 32)))))
 (let (($x1062 (and $x384 $x239)))
 (let (($x810 (and $x1062 $x790)))
 (let (($x200 (and $x810 $x90)))
 (let (($x930 (= $x200 true)))
 (let (($x524 (= $x930 true)))
 (let (($x244 (= $x524 true)))
 (let (($x325 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x987 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x711 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x987) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x987))))
 (let (($x466 (and true $x711)))
 (let (($x928 (and $x711 $x466)))
 (let ((?x15 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x642 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv1 32))) (select input.dst.llvm-mem ?x15))))
 (let ((?x931 (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x15 (_ bv2 32))) ?x642))))
 (let (($x106 (= (bvand ?x931 (_ bv4294967288 32)) ?x931)))
 (let (($x216 (= (bvand ?x15 (_ bv4294967292 32)) ?x15)))
 (let (($x646 (and $x216 $x106)))
 (let (($x350 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x15 (bvsub ?x15 (_ bv4 32))) (bvult ?x15 (bvsub ?x15 (_ bv4 32))))))
 (let (($x1106 (and (and (and (and (and $x466 $x350) $x216) $x646) $x928) $x325)))
 (let (($x743 (= true $x1106)))
 (let (($x652 (not $x731)))
 (let (($x317 (=> $x652 $x743)))
 (let (($x803 (= $x317 true)))
 (let (($x620 (= $x803 true)))
 (let (($x557 (= $x620 true)))
 (let (($x220 (= $x652 true)))
 (let (($x698 (= $x220 true)))
 (let (($x213 (= $x698 true)))
 (let (($x1158 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x186 (= $x1158 true)))
 (let (($x18 (= $x186 true)))
 (let ((?x751 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x573 (= (_ bv0 32) ?x751)))
 (let ((?x694 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x499 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x694)))
 (let (($x240 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1086 (and $x240 $x499)))
 (let (($x759 (and $x1086 $x573)))
 (let (($x1084 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x594 (and $x1084 $x759)))
 (let (($x985 (= $x594 true)))
 (let (($x1149 (= $x985 true)))
 (let (($x596 (= $x1149 true)))
 (let ((?x649 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x513 (concat ?x649 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x432 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x755 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x365 (concat ?x755 (concat ?x432 ?x513))))
 (let ((?x912 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x920 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x912))))
 (let (($x1077 (= input.spec-%var-l-1.2.1.2.0 ?x920)))
 (let (($x842 (and $x1077 false)))
 (let (($x882 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x986 (=> $x882 $x842)))
 (let ((?x607 (ite (= (_ bv0 32) ?x365) (_ bv0 32) (_ bv1 32))))
 (let (($x1004 (bvuge ?x607 (_ bv1 32))))
 (let (($x369 (= $x882 $x1004)))
 (let (($x1104 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x437 (=> $x1104 $x913)))
 (let (($x520 (= ?x607 (_ bv0 32))))
 (let (($x181 (= $x1104 $x520)))
 (let (($x668 (and $x181 $x437)))
 (let (($x1090 (and $x668 $x369)))
 (let (($x410 (and $x1090 $x986)))
 (let ((?x567 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x567)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x252)))
 (let (($x331 (= input.spec-%var-l-1.2.0 ?x301)))
 (let (($x825 (and $x331 $x410)))
 (let (($x730 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x766 (=> $x730 $x825)))
 (let ((?x107 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x156 (bvuge ?x107 (_ bv1 32))))
 (let (($x427 (= $x730 $x156)))
 (let (($x142 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x1008 (=> $x142 $x913)))
 (let (($x659 (= ?x107 (_ bv0 32))))
 (let (($x199 (= $x142 $x659)))
 (let (($x973 (and $x199 $x1008)))
 (let (($x224 (and $x973 $x427)))
 (let (($x271 (and $x224 $x766)))
 (let (($x708 (= $x271 true)))
 (let (($x701 (= $x708 true)))
 (let (($x667 (= $x701 true)))
 (let (($x934 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x920)))
 (let (($x164 (and $x934 false)))
 (let (($x391 (=> $x522 $x164)))
 (let (($x57 (= $x522 $x1004)))
 (let (($x932 (= $x746 $x520)))
 (let (($x1112 (and $x932 $x28)))
 (let (($x462 (and $x1112 $x57)))
 (let (($x656 (and $x462 $x391)))
 (let (($x705 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x301)))
 (let (($x123 (and $x705 $x656)))
 (let (($x143 (=> $x149 $x123)))
 (let (($x403 (= $x149 $x156)))
 (let (($x849 (= $x40 $x659)))
 (let (($x407 (and $x849 $x239)))
 (let (($x441 (and $x407 $x403)))
 (let (($x693 (and $x441 $x143)))
 (let (($x299 (= $x693 true)))
 (let (($x168 (= $x299 true)))
 (let (($x23 (= $x168 true)))
 (let (($x367 (and $x23 $x667)))
 (let (($x579 (and $x367 $x596)))
 (let (($x1075 (and $x579 $x18)))
 (let (($x452 (and $x1075 $x213)))
 (let (($x92 (and $x452 $x557)))
 (let (($x1002 (and $x92 $x244)))
 (let (($x554 (and $x1002 $x958)))
 (let (($x903 (and $x554 $x898)))
 (let (($x191 (and $x903 $x774)))
 (let (($x748 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x733 (and $x748 $x191)))
 (let (($x635 (bvugt ?x15 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x15 (_ bv3 32))))
 (let (($x116 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x893 (=> (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x116 $x635)))))))
 (let (($x802 (=> (and $x652 (bvule ?x15 (bvsub (bvadd ?x15 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x116 $x635)))))))
 (let (($x601 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x848 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x283 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x345 (_ bv1 32))) (or false (or false (and true (or $x848 $x601)))))))
 (let (($x991 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x345 (_ bv1 32)))) (or false (or false (and true (or $x848 $x601)))))))
 (let (($x734 (and $x991 $x802)))
 (let (($x900 (and $x734 $x733)))
 (let (($x725 (=> $x900 $x312)))
 (not $x725))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_19)
(function @fun_19
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_19 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfc7a9a5c)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xf8)
                                #x80000007
                                #x00)
                         #x80000006
                         #x00)
                  #x80000005
                  #x00)))
(let ((a!2 (store (store (store (store a!1 #x80000007 #x00) #x80000006 #x00)
                         #x80000005
                         #x00)
                  #x80000004
                  #x00)))
  (store a!2 #x80000004 #x00))))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #xf8f8f8f8)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xf8f8f8f8)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfc7a9a5f)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfc7a9a5c)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv149476976 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv1 32) (_ bv1 8)) (_ bv149476976 32) (_ bv1 8)))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2615092992 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2615092992 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2615092995 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x682 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x888 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x682))))
 (let (($x791 (bvule ?x888 (_ bv4294967294 32))))
 (let (($x944 (= $x791 true)))
 (let (($x206 (= $x944 true)))
 (let ((?x99 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x58 (= (_ bv0 3) ?x99)))
 (let (($x439 (= $x58 true)))
 (let (($x445 (= $x439 true)))
 (let (($x826 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x282 (= $x826 true)))
 (let (($x260 (= $x282 true)))
 (let (($x242 (= $x260 true)))
 (let ((?x190 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x968 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x968))))
 (let ((?x1000 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x1000))))
 (let (($x1081 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x306)))
 (let (($x953 (and $x1081 true)))
 (let (($x504 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x318 (=> $x504 $x953)))
 (let (($x623 (= $x504 (bvuge (ite (= (_ bv0 32) ?x237) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x299 (= false false)))
 (let (($x336 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x236 (=> $x336 $x299)))
 (let (($x519 (= $x336 (= (ite (= (_ bv0 32) ?x237) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x806 (and $x519 $x236)))
 (let (($x1076 (and $x806 $x623)))
 (let (($x996 (and $x1076 $x318)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x935 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x153 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x54 (concat (select input.dst.llvm-mem ?x153) (concat ?x935 (concat ?x29 ?x6)))))
 (let (($x1073 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x54)))
 (let (($x247 (and $x1073 $x996)))
 (let (($x427 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x415 (=> $x427 $x247)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x483 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (= $x427 (bvuge ?x483 (_ bv1 32)))))
 (let (($x391 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x168 (=> $x391 $x299)))
 (let (($x975 (= $x391 (= ?x483 (_ bv0 32)))))
 (let (($x204 (and $x975 $x168)))
 (let (($x64 (and $x204 $x45)))
 (let (($x819 (and $x64 $x415)))
 (let (($x83 (= $x819 true)))
 (let (($x801 (= $x83 true)))
 (let (($x472 (= $x801 true)))
 (let (($x246 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x348 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x348) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x348))))
 (let (($x31 (and true $x245)))
 (let (($x335 (and $x245 $x31)))
 (let (($x824 (= (bvand ?x888 (_ bv4294967288 32)) ?x888)))
 (let (($x967 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x926 (and $x967 $x824)))
 (let (($x26 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x303 (and (and (and (and (and $x31 $x26) $x967) $x926) $x335) $x246)))
 (let (($x14 (= true $x303)))
 (let (($x652 (not $x731)))
 (let (($x401 (=> $x652 $x14)))
 (let (($x676 (= $x401 true)))
 (let (($x328 (= $x676 true)))
 (let (($x675 (= $x328 true)))
 (let (($x313 (= $x652 true)))
 (let (($x717 (= $x313 true)))
 (let (($x113 (= $x717 true)))
 (let (($x781 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x595 (= $x781 true)))
 (let (($x243 (= $x595 true)))
 (let ((?x474 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x442 (= (_ bv0 32) ?x474)))
 (let ((?x929 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x796 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x929)))
 (let (($x885 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x857 (and $x885 $x796)))
 (let (($x514 (and $x857 $x442)))
 (let (($x881 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x881 $x514)))
 (let (($x578 (= $x73 true)))
 (let (($x174 (= $x578 true)))
 (let (($x201 (= $x174 true)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x464 (concat ?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x521 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1080 (concat ?x324 (concat ?x521 ?x464))))
 (let ((?x671 (concat (select input.dst.llvm-mem (bvadd ?x1080 (_ bv1 32))) (select input.dst.llvm-mem ?x1080))))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x1080 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1080 (_ bv2 32))) ?x671))))
 (let (($x138 (= input.spec-%var-l-1.2.1.2.0 ?x495)))
 (let (($x12 (and $x138 true)))
 (let (($x713 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x559 (=> $x713 $x12)))
 (let ((?x78 (ite (= (_ bv0 32) ?x1080) (_ bv0 32) (_ bv1 32))))
 (let (($x605 (bvuge ?x78 (_ bv1 32))))
 (let (($x739 (= $x713 $x605)))
 (let (($x21 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x919 (=> $x21 $x299)))
 (let (($x159 (= ?x78 (_ bv0 32))))
 (let (($x609 (= $x21 $x159)))
 (let (($x226 (and $x609 $x919)))
 (let (($x431 (and $x226 $x739)))
 (let (($x621 (and $x431 $x559)))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x452)))
 (let ((?x466 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x114)))
 (let (($x562 (= input.spec-%var-l-1.2.0 ?x466)))
 (let (($x355 (and $x562 $x621)))
 (let (($x269 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x497 (=> $x269 $x355)))
 (let ((?x123 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x224 (bvuge ?x123 (_ bv1 32))))
 (let (($x914 (= $x269 $x224)))
 (let (($x382 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x772 (=> $x382 $x299)))
 (let (($x143 (= ?x123 (_ bv0 32))))
 (let (($x296 (= $x382 $x143)))
 (let (($x569 (and $x296 $x772)))
 (let (($x636 (and $x569 $x914)))
 (let (($x1113 (and $x636 $x497)))
 (let (($x147 (= $x1113 true)))
 (let (($x957 (= $x147 true)))
 (let (($x330 (= $x957 true)))
 (let (($x482 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x495)))
 (let (($x388 (and $x482 true)))
 (let (($x624 (=> $x504 $x388)))
 (let (($x921 (= $x504 $x605)))
 (let (($x440 (= $x336 $x159)))
 (let (($x103 (and $x440 $x236)))
 (let (($x505 (and $x103 $x921)))
 (let (($x371 (and $x505 $x624)))
 (let (($x450 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x466)))
 (let (($x322 (and $x450 $x371)))
 (let (($x745 (=> $x427 $x322)))
 (let (($x145 (= $x427 $x224)))
 (let (($x693 (= $x391 $x143)))
 (let (($x23 (and $x693 $x168)))
 (let (($x331 (and $x23 $x145)))
 (let (($x255 (and $x331 $x745)))
 (let (($x41 (= $x255 true)))
 (let (($x180 (= $x41 true)))
 (let (($x424 (= $x180 true)))
 (let (($x94 (and $x424 $x330)))
 (let (($x679 (and $x94 $x201)))
 (let (($x808 (and $x679 $x243)))
 (let (($x797 (and $x808 $x113)))
 (let (($x876 (and $x797 $x675)))
 (let (($x300 (and $x876 $x472)))
 (let (($x261 (and $x300 $x242)))
 (let (($x272 (and $x261 $x445)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x456 (and $x40 $x272)))
 (let (($x905 (bvugt ?x16 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x16 (_ bv3 32))))
 (let (($x897 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x748 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x897 $x905)))))))
 (let (($x129 (=> (and $x652 (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x897 $x905)))))))
 (let (($x540 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x726 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x218 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x190 (_ bv1 32))) (or false (or false (and true (or $x726 $x540)))))))
 (let (($x845 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x190 (_ bv1 32)))) (or false (or false (and true (or $x726 $x540)))))))
 (let (($x469 (and $x845 $x129)))
 (let (($x1010 (and $x469 $x456)))
 (let (($x10 (=> $x1010 $x206)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x682 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv1 32))) (select input.dst.llvm-mem ?x16))))
 (let ((?x888 (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x16 (_ bv2 32))) ?x682))))
 (let (($x791 (bvule ?x888 (_ bv4294967294 32))))
 (let (($x944 (= $x791 true)))
 (let (($x206 (= $x944 true)))
 (let ((?x99 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x58 (= (_ bv0 3) ?x99)))
 (let (($x439 (= $x58 true)))
 (let (($x445 (= $x439 true)))
 (let (($x826 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x282 (= $x826 true)))
 (let (($x260 (= $x282 true)))
 (let (($x242 (= $x260 true)))
 (let ((?x190 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x968 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem ?x190))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x190 (_ bv2 32))) ?x968))))
 (let ((?x1000 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem ?x237))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x237 (_ bv2 32))) ?x1000))))
 (let (($x1081 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x306)))
 (let (($x953 (and $x1081 true)))
 (let (($x504 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x318 (=> $x504 $x953)))
 (let (($x623 (= $x504 (bvuge (ite (= (_ bv0 32) ?x237) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x299 (= false false)))
 (let (($x336 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x236 (=> $x336 $x299)))
 (let (($x519 (= $x336 (= (ite (= (_ bv0 32) ?x237) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x806 (and $x519 $x236)))
 (let (($x1076 (and $x806 $x623)))
 (let (($x996 (and $x1076 $x318)))
 (let ((?x6 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x29 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x935 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x153 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x54 (concat (select input.dst.llvm-mem ?x153) (concat ?x935 (concat ?x29 ?x6)))))
 (let (($x1073 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x54)))
 (let (($x247 (and $x1073 $x996)))
 (let (($x427 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x415 (=> $x427 $x247)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x483 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x45 (= $x427 (bvuge ?x483 (_ bv1 32)))))
 (let (($x391 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x168 (=> $x391 $x299)))
 (let (($x975 (= $x391 (= ?x483 (_ bv0 32)))))
 (let (($x204 (and $x975 $x168)))
 (let (($x64 (and $x204 $x45)))
 (let (($x819 (and $x64 $x415)))
 (let (($x83 (= $x819 true)))
 (let (($x801 (= $x83 true)))
 (let (($x472 (= $x801 true)))
 (let (($x246 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x348 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x245 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x348) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x348))))
 (let (($x31 (and true $x245)))
 (let (($x335 (and $x245 $x31)))
 (let (($x824 (= (bvand ?x888 (_ bv4294967288 32)) ?x888)))
 (let (($x967 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x926 (and $x967 $x824)))
 (let (($x26 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x303 (and (and (and (and (and $x31 $x26) $x967) $x926) $x335) $x246)))
 (let (($x14 (= true $x303)))
 (let (($x652 (not $x731)))
 (let (($x401 (=> $x652 $x14)))
 (let (($x676 (= $x401 true)))
 (let (($x328 (= $x676 true)))
 (let (($x675 (= $x328 true)))
 (let (($x313 (= $x652 true)))
 (let (($x717 (= $x313 true)))
 (let (($x113 (= $x717 true)))
 (let (($x781 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x595 (= $x781 true)))
 (let (($x243 (= $x595 true)))
 (let ((?x474 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x442 (= (_ bv0 32) ?x474)))
 (let ((?x929 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x796 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x929)))
 (let (($x885 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x857 (and $x885 $x796)))
 (let (($x514 (and $x857 $x442)))
 (let (($x881 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x881 $x514)))
 (let (($x578 (= $x73 true)))
 (let (($x174 (= $x578 true)))
 (let (($x201 (= $x174 true)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x464 (concat ?x89 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x521 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1080 (concat ?x324 (concat ?x521 ?x464))))
 (let ((?x671 (concat (select input.dst.llvm-mem (bvadd ?x1080 (_ bv1 32))) (select input.dst.llvm-mem ?x1080))))
 (let ((?x495 (concat (select input.dst.llvm-mem (bvadd ?x1080 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1080 (_ bv2 32))) ?x671))))
 (let (($x138 (= input.spec-%var-l-1.2.1.2.0 ?x495)))
 (let (($x12 (and $x138 true)))
 (let (($x713 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x559 (=> $x713 $x12)))
 (let ((?x78 (ite (= (_ bv0 32) ?x1080) (_ bv0 32) (_ bv1 32))))
 (let (($x605 (bvuge ?x78 (_ bv1 32))))
 (let (($x739 (= $x713 $x605)))
 (let (($x21 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x919 (=> $x21 $x299)))
 (let (($x159 (= ?x78 (_ bv0 32))))
 (let (($x609 (= $x21 $x159)))
 (let (($x226 (and $x609 $x919)))
 (let (($x431 (and $x226 $x739)))
 (let (($x621 (and $x431 $x559)))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x452)))
 (let ((?x466 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x114)))
 (let (($x562 (= input.spec-%var-l-1.2.0 ?x466)))
 (let (($x355 (and $x562 $x621)))
 (let (($x269 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x497 (=> $x269 $x355)))
 (let ((?x123 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x224 (bvuge ?x123 (_ bv1 32))))
 (let (($x914 (= $x269 $x224)))
 (let (($x382 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x772 (=> $x382 $x299)))
 (let (($x143 (= ?x123 (_ bv0 32))))
 (let (($x296 (= $x382 $x143)))
 (let (($x569 (and $x296 $x772)))
 (let (($x636 (and $x569 $x914)))
 (let (($x1113 (and $x636 $x497)))
 (let (($x147 (= $x1113 true)))
 (let (($x957 (= $x147 true)))
 (let (($x330 (= $x957 true)))
 (let (($x482 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x495)))
 (let (($x388 (and $x482 true)))
 (let (($x624 (=> $x504 $x388)))
 (let (($x921 (= $x504 $x605)))
 (let (($x440 (= $x336 $x159)))
 (let (($x103 (and $x440 $x236)))
 (let (($x505 (and $x103 $x921)))
 (let (($x371 (and $x505 $x624)))
 (let (($x450 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x466)))
 (let (($x322 (and $x450 $x371)))
 (let (($x745 (=> $x427 $x322)))
 (let (($x145 (= $x427 $x224)))
 (let (($x693 (= $x391 $x143)))
 (let (($x23 (and $x693 $x168)))
 (let (($x331 (and $x23 $x145)))
 (let (($x255 (and $x331 $x745)))
 (let (($x41 (= $x255 true)))
 (let (($x180 (= $x41 true)))
 (let (($x424 (= $x180 true)))
 (let (($x94 (and $x424 $x330)))
 (let (($x679 (and $x94 $x201)))
 (let (($x808 (and $x679 $x243)))
 (let (($x797 (and $x808 $x113)))
 (let (($x876 (and $x797 $x675)))
 (let (($x300 (and $x876 $x472)))
 (let (($x261 (and $x300 $x242)))
 (let (($x272 (and $x261 $x445)))
 (let (($x40 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x456 (and $x40 $x272)))
 (let (($x905 (bvugt ?x16 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x16 (_ bv3 32))))
 (let (($x897 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x748 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x897 $x905)))))))
 (let (($x129 (=> (and $x652 (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x897 $x905)))))))
 (let (($x540 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x726 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x153)))
 (let (($x218 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x190 (_ bv1 32))) (or false (or false (and true (or $x726 $x540)))))))
 (let (($x845 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x190 (_ bv1 32)))) (or false (or false (and true (or $x726 $x540)))))))
 (let (($x469 (and $x845 $x129)))
 (let (($x1010 (and $x469 $x456)))
 (let (($x10 (=> $x1010 $x206)))
 (not $x10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x229))))
 (let ((?x821 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x895 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x727 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x811 (concat ?x727 (concat ?x170 (concat ?x895 ?x821)))))
 (let ((?x385 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x5 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x78))))
 (let (($x544 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x605 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let (($x293 (= $x544 true)))
 (let (($x158 (= $x293 true)))
 (let ((?x771 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x386 (= (_ bv0 3) ?x771)))
 (let (($x547 (= $x386 true)))
 (let (($x765 (= $x547 true)))
 (let ((?x684 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x425 (concat ?x684 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x852 (concat ?x157 (concat ?x651 ?x425))))
 (let ((?x1109 (bvadd ?x852 (_ bv4 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x1109 (_ bv1 32))) (select input.dst.llvm-mem ?x1109))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x1109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1109 (_ bv2 32))) ?x97))))
 (let (($x615 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x295 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv1 32))) (select input.dst.llvm-mem ?x852))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv2 32))) ?x561))))
 (let (($x678 (= input.spec-%var-l-1.2.1.2.0 ?x177)))
 (let (($x724 (and $x678 $x615)))
 (let (($x501 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x816 (=> $x501 $x724)))
 (let ((?x39 (ite (= (_ bv0 32) ?x852) (_ bv0 32) (_ bv1 32))))
 (let (($x481 (bvuge ?x39 (_ bv1 32))))
 (let (($x798 (= $x501 $x481)))
 (let (($x31 (= false false)))
 (let (($x223 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x381 (=> $x223 $x31)))
 (let (($x627 (= ?x39 (_ bv0 32))))
 (let (($x69 (= $x223 $x627)))
 (let (($x548 (and $x69 $x381)))
 (let (($x461 (and $x548 $x798)))
 (let (($x518 (and $x461 $x816)))
 (let ((?x1117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x1117)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x373)))
 (let (($x184 (= input.spec-%var-l-1.2.0 ?x137)))
 (let (($x728 (and $x184 $x518)))
 (let (($x846 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x309 (=> $x846 $x728)))
 (let ((?x922 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x956 (bvuge ?x922 (_ bv1 32))))
 (let (($x211 (= $x846 $x956)))
 (let (($x690 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x412 (=> $x690 $x31)))
 (let (($x903 (= ?x922 (_ bv0 32))))
 (let (($x533 (= $x690 $x903)))
 (let (($x279 (and $x533 $x412)))
 (let (($x290 (and $x279 $x211)))
 (let (($x357 (and $x290 $x309)))
 (let (($x502 (= $x357 true)))
 (let (($x235 (= $x502 true)))
 (let (($x757 (= $x235 true)))
 (let (($x182 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x295 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let (($x392 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x177)))
 (let (($x614 (and $x392 $x182)))
 (let (($x441 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x648 (=> $x441 $x614)))
 (let (($x287 (= $x441 $x481)))
 (let (($x206 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x791 (=> $x206 $x31)))
 (let (($x874 (= $x206 $x627)))
 (let (($x421 (and $x874 $x791)))
 (let (($x851 (and $x421 $x287)))
 (let (($x426 (and $x851 $x648)))
 (let (($x136 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x137)))
 (let (($x1093 (and $x136 $x426)))
 (let (($x967 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x361 (=> $x967 $x1093)))
 (let (($x244 (= $x967 $x956)))
 (let (($x348 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x400 (=> $x348 $x31)))
 (let (($x902 (= $x348 $x903)))
 (let (($x191 (and $x902 $x400)))
 (let (($x1002 (and $x191 $x244)))
 (let (($x196 (and $x1002 $x361)))
 (let (($x124 (= $x196 true)))
 (let (($x24 (= $x124 true)))
 (let (($x1087 (= $x24 true)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x115 true)))
 (let (($x325 (= $x139 true)))
 (let (($x884 (= $x325 true)))
 (let ((?x848 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x582 (concat (select input.dst.llvm-mem (bvadd ?x848 (_ bv1 32))) (select input.dst.llvm-mem ?x848))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x848 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x848 (_ bv2 32))) ?x582))))
 (let ((?x585 (bvadd ?x176 (_ bv4 32))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv1 32))) (select input.dst.llvm-mem ?x585))))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv2 32))) ?x312))))
 (let (($x634 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x389 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let ((?x543 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x842 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x543))))
 (let (($x701 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x842)))
 (let (($x298 (and $x701 $x634)))
 (let (($x899 (=> $x441 $x298)))
 (let (($x714 (= $x441 (bvuge (ite (= (_ bv0 32) ?x176) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1010 (= $x206 (= (ite (= (_ bv0 32) ?x176) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x10 (and $x1010 $x791)))
 (let (($x403 (and $x10 $x714)))
 (let (($x479 (and $x403 $x899)))
 (let ((?x1073 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x528 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x968 (concat (select input.dst.llvm-mem ?x528) (concat ?x189 (concat ?x275 ?x1073)))))
 (let (($x281 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x968)))
 (let (($x573 (and $x281 $x479)))
 (let (($x1158 (=> $x967 $x573)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x1013 (= $x967 (bvuge ?x347 (_ bv1 32)))))
 (let (($x245 (= $x348 (= ?x347 (_ bv0 32)))))
 (let (($x1082 (and $x245 $x400)))
 (let (($x613 (and $x1082 $x1013)))
 (let (($x209 (and $x613 $x1158)))
 (let (($x106 (= $x209 true)))
 (let (($x197 (= $x106 true)))
 (let (($x1107 (= $x197 true)))
 (let (($x556 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x452 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x354 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x452) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x452))))
 (let (($x336 (and true $x354)))
 (let (($x860 (and $x354 $x336)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x353 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x84 (and $x353 $x721)))
 (let (($x521 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x574 (and (and (and (and (and $x336 $x521) $x353) $x84) $x860) $x556)))
 (let (($x495 (= true $x574)))
 (let (($x652 (not $x731)))
 (let (($x482 (=> $x652 $x495)))
 (let (($x388 (= $x482 true)))
 (let (($x624 (= $x388 true)))
 (let (($x371 (= $x624 true)))
 (let (($x987 (= $x652 true)))
 (let (($x698 (= $x987 true)))
 (let (($x213 (= $x698 true)))
 (let (($x722 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x711 (= $x722 true)))
 (let (($x917 (= $x711 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x168)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x693 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (and $x123 $x693)))
 (let (($x427 (and $x299 $x23)))
 (let (($x656 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x656 $x427)))
 (let (($x145 (= $x224 true)))
 (let (($x331 (= $x145 true)))
 (let (($x1075 (= $x331 true)))
 (let (($x982 (and $x1075 $x917)))
 (let (($x220 (and $x982 $x213)))
 (let (($x322 (and $x220 $x371)))
 (let (($x928 (and $x322 $x1107)))
 (let (($x646 (and $x928 $x884)))
 (let (($x48 (and $x646 $x1087)))
 (let (($x989 (and $x48 $x757)))
 (let (($x894 (and $x989 $x765)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x265 (and $x391 $x894)))
 (let (($x802 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x5 (_ bv3 32))))
 (let (($x893 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x40 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x893 $x802)))))))
 (let (($x777 (=> (and $x652 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x893 $x802)))))))
 (let (($x991 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x528)))
 (let (($x635 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x848 (_ bv1 32))) (or false (or false (and true (or $x283 $x991)))))))
 (let (($x104 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x848 (_ bv1 32)))) (or false (or false (and true (or $x283 $x991)))))))
 (let (($x316 (and $x104 $x777)))
 (let (($x729 (and $x316 $x265)))
 (let (($x835 (=> $x729 $x158)))
 (not $x835))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x185 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x229))))
 (let ((?x821 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x895 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x170 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x727 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x811 (concat ?x727 (concat ?x170 (concat ?x895 ?x821)))))
 (let ((?x385 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x5 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv1 32))) (select input.dst.llvm-mem ?x5))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x5 (_ bv2 32))) ?x78))))
 (let (($x544 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x605 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let (($x293 (= $x544 true)))
 (let (($x158 (= $x293 true)))
 (let ((?x771 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x386 (= (_ bv0 3) ?x771)))
 (let (($x547 (= $x386 true)))
 (let (($x765 (= $x547 true)))
 (let ((?x684 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x425 (concat ?x684 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x651 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x852 (concat ?x157 (concat ?x651 ?x425))))
 (let ((?x1109 (bvadd ?x852 (_ bv4 32))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x1109 (_ bv1 32))) (select input.dst.llvm-mem ?x1109))))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x1109 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1109 (_ bv2 32))) ?x97))))
 (let (($x615 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x295 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let ((?x561 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv1 32))) (select input.dst.llvm-mem ?x852))))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x852 (_ bv2 32))) ?x561))))
 (let (($x678 (= input.spec-%var-l-1.2.1.2.0 ?x177)))
 (let (($x724 (and $x678 $x615)))
 (let (($x501 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x816 (=> $x501 $x724)))
 (let ((?x39 (ite (= (_ bv0 32) ?x852) (_ bv0 32) (_ bv1 32))))
 (let (($x481 (bvuge ?x39 (_ bv1 32))))
 (let (($x798 (= $x501 $x481)))
 (let (($x31 (= false false)))
 (let (($x223 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x381 (=> $x223 $x31)))
 (let (($x627 (= ?x39 (_ bv0 32))))
 (let (($x69 (= $x223 $x627)))
 (let (($x548 (and $x69 $x381)))
 (let (($x461 (and $x548 $x798)))
 (let (($x518 (and $x461 $x816)))
 (let ((?x1117 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x1117)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x373)))
 (let (($x184 (= input.spec-%var-l-1.2.0 ?x137)))
 (let (($x728 (and $x184 $x518)))
 (let (($x846 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x309 (=> $x846 $x728)))
 (let ((?x922 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x956 (bvuge ?x922 (_ bv1 32))))
 (let (($x211 (= $x846 $x956)))
 (let (($x690 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x412 (=> $x690 $x31)))
 (let (($x903 (= ?x922 (_ bv0 32))))
 (let (($x533 (= $x690 $x903)))
 (let (($x279 (and $x533 $x412)))
 (let (($x290 (and $x279 $x211)))
 (let (($x357 (and $x290 $x309)))
 (let (($x502 (= $x357 true)))
 (let (($x235 (= $x502 true)))
 (let (($x757 (= $x235 true)))
 (let (($x182 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x295 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let (($x392 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x177)))
 (let (($x614 (and $x392 $x182)))
 (let (($x441 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x648 (=> $x441 $x614)))
 (let (($x287 (= $x441 $x481)))
 (let (($x206 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x791 (=> $x206 $x31)))
 (let (($x874 (= $x206 $x627)))
 (let (($x421 (and $x874 $x791)))
 (let (($x851 (and $x421 $x287)))
 (let (($x426 (and $x851 $x648)))
 (let (($x136 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x137)))
 (let (($x1093 (and $x136 $x426)))
 (let (($x967 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x361 (=> $x967 $x1093)))
 (let (($x244 (= $x967 $x956)))
 (let (($x348 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x400 (=> $x348 $x31)))
 (let (($x902 (= $x348 $x903)))
 (let (($x191 (and $x902 $x400)))
 (let (($x1002 (and $x191 $x244)))
 (let (($x196 (and $x1002 $x361)))
 (let (($x124 (= $x196 true)))
 (let (($x24 (= $x124 true)))
 (let (($x1087 (= $x24 true)))
 (let (($x115 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x139 (= $x115 true)))
 (let (($x325 (= $x139 true)))
 (let (($x884 (= $x325 true)))
 (let ((?x848 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x582 (concat (select input.dst.llvm-mem (bvadd ?x848 (_ bv1 32))) (select input.dst.llvm-mem ?x848))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x848 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x848 (_ bv2 32))) ?x582))))
 (let ((?x585 (bvadd ?x176 (_ bv4 32))))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv1 32))) (select input.dst.llvm-mem ?x585))))
 (let ((?x389 (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x585 (_ bv2 32))) ?x312))))
 (let (($x634 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x389 ?x385 false ?x811 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x19)))
 (let ((?x543 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x842 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x543))))
 (let (($x701 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x842)))
 (let (($x298 (and $x701 $x634)))
 (let (($x899 (=> $x441 $x298)))
 (let (($x714 (= $x441 (bvuge (ite (= (_ bv0 32) ?x176) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1010 (= $x206 (= (ite (= (_ bv0 32) ?x176) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x10 (and $x1010 $x791)))
 (let (($x403 (and $x10 $x714)))
 (let (($x479 (and $x403 $x899)))
 (let ((?x1073 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x528 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x968 (concat (select input.dst.llvm-mem ?x528) (concat ?x189 (concat ?x275 ?x1073)))))
 (let (($x281 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x968)))
 (let (($x573 (and $x281 $x479)))
 (let (($x1158 (=> $x967 $x573)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x347 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x1013 (= $x967 (bvuge ?x347 (_ bv1 32)))))
 (let (($x245 (= $x348 (= ?x347 (_ bv0 32)))))
 (let (($x1082 (and $x245 $x400)))
 (let (($x613 (and $x1082 $x1013)))
 (let (($x209 (and $x613 $x1158)))
 (let (($x106 (= $x209 true)))
 (let (($x197 (= $x106 true)))
 (let (($x1107 (= $x197 true)))
 (let (($x556 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x452 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x354 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x452) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x452))))
 (let (($x336 (and true $x354)))
 (let (($x860 (and $x354 $x336)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x353 (= (bvand ?x5 (_ bv4294967292 32)) ?x5)))
 (let (($x84 (and $x353 $x721)))
 (let (($x521 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x5 (bvsub ?x5 (_ bv4 32))) (bvult ?x5 (bvsub ?x5 (_ bv4 32))))))
 (let (($x574 (and (and (and (and (and $x336 $x521) $x353) $x84) $x860) $x556)))
 (let (($x495 (= true $x574)))
 (let (($x652 (not $x731)))
 (let (($x482 (=> $x652 $x495)))
 (let (($x388 (= $x482 true)))
 (let (($x624 (= $x388 true)))
 (let (($x371 (= $x624 true)))
 (let (($x987 (= $x652 true)))
 (let (($x698 (= $x987 true)))
 (let (($x213 (= $x698 true)))
 (let (($x722 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x711 (= $x722 true)))
 (let (($x917 (= $x711 true)))
 (let ((?x168 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x23 (= (_ bv0 32) ?x168)))
 (let ((?x143 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x693 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x143)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x299 (and $x123 $x693)))
 (let (($x427 (and $x299 $x23)))
 (let (($x656 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x224 (and $x656 $x427)))
 (let (($x145 (= $x224 true)))
 (let (($x331 (= $x145 true)))
 (let (($x1075 (= $x331 true)))
 (let (($x982 (and $x1075 $x917)))
 (let (($x220 (and $x982 $x213)))
 (let (($x322 (and $x220 $x371)))
 (let (($x928 (and $x322 $x1107)))
 (let (($x646 (and $x928 $x884)))
 (let (($x48 (and $x646 $x1087)))
 (let (($x989 (and $x48 $x757)))
 (let (($x894 (and $x989 $x765)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x265 (and $x391 $x894)))
 (let (($x802 (bvugt ?x5 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x5 (_ bv3 32))))
 (let (($x893 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x40 (=> (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x893 $x802)))))))
 (let (($x777 (=> (and $x652 (bvule ?x5 (bvsub (bvadd ?x5 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x893 $x802)))))))
 (let (($x991 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x283 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x528)))
 (let (($x635 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x848 (_ bv1 32))) (or false (or false (and true (or $x283 $x991)))))))
 (let (($x104 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x848 (_ bv1 32)))) (or false (or false (and true (or $x283 $x991)))))))
 (let (($x316 (and $x104 $x777)))
 (let (($x729 (and $x316 $x265)))
 (let (($x835 (=> $x729 $x158)))
 (not $x835))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_20)
(= input.dst.llvm-mem @fun_37)
(function @fun_20
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_20 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_37
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_11442 (_ BitVec 32)) (BOUND_VARIABLE_11443 (_ BitVec 32)) (BOUND_VARIABLE_11444 (_ BitVec 32)) (BOUND_VARIABLE_11445 Bool) (BOUND_VARIABLE_11446 (_ BitVec 32)) (BOUND_VARIABLE_11447 (_ BitVec 32)) (BOUND_VARIABLE_11448 (_ BitVec 32)) (BOUND_VARIABLE_11449 (_ BitVec 32)) (BOUND_VARIABLE_11450 (_ BitVec 32)) (BOUND_VARIABLE_11451 (_ BitVec 32)) (BOUND_VARIABLE_11452 Bool) (BOUND_VARIABLE_11453 (_ BitVec 32)) (BOUND_VARIABLE_11454 (_ BitVec 32)) (BOUND_VARIABLE_11455 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv16181992 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv33740032 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv33740032 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv33740035 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x10101011)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x10101018)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x10101016)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x10))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x10101010)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x10101011)
              (= x!8 #x10101010)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x10101010)
              (= x!12 #x10101011)
              (= x!13 #x10101010))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x80000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x10101011)
              (= x!8 #x10101010)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x10101010)
              (= x!12 #x10101011)
              (= x!13 #x10101010))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1108 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x125 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x266))))
 (let ((?x1004 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x785 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x116 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x236))))
 (let (($x22 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x605 (concat ?x252 (concat ?x140 (concat ?x785 ?x1004))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x117 ?x1108 false)))
 (let (($x951 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x892 (=> $x951 $x22)))
 (let (($x311 (= $x951 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x423 (= false false)))
 (let (($x650 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x34 (=> $x650 $x423)))
 (let (($x365 (= $x650 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x513 (and $x365 $x34)))
 (let (($x753 (and $x513 $x311)))
 (let (($x377 (and $x753 $x892)))
 (let (($x825 (= $x377 true)))
 (let (($x567 (= $x825 true)))
 (let ((?x352 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x6 (= (_ bv0 3) ?x352)))
 (let (($x535 (= $x6 true)))
 (let (($x935 (= $x535 true)))
 (let ((?x553 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x933 (concat ?x553 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x508 (concat ?x198 (concat ?x397 ?x933))))
 (let ((?x442 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv1 32))) (select input.dst.llvm-mem ?x508))))
 (let ((?x659 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv2 32))) ?x442))))
 (let (($x242 (= input.spec-%var-l-1.2.1.2.0 ?x659)))
 (let (($x282 (and $x242 true)))
 (let (($x383 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x844 (=> $x383 $x282)))
 (let ((?x990 (ite (= (_ bv0 32) ?x508) (_ bv0 32) (_ bv1 32))))
 (let (($x333 (bvuge ?x990 (_ bv1 32))))
 (let (($x926 (= $x383 $x333)))
 (let (($x1005 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x253 (=> $x1005 $x423)))
 (let (($x310 (= ?x990 (_ bv0 32))))
 (let (($x335 (= $x1005 $x310)))
 (let (($x888 (and $x335 $x253)))
 (let (($x13 (and $x888 $x926)))
 (let (($x99 (and $x13 $x844)))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x681)))
 (let ((?x1159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x756)))
 (let (($x14 (= input.spec-%var-l-1.2.0 ?x1159)))
 (let (($x826 (and $x14 $x99)))
 (let (($x303 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x439 (=> $x303 $x826)))
 (let ((?x250 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x250 (_ bv1 32))))
 (let (($x738 (= $x303 $x308)))
 (let (($x797 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x61 (=> $x797 $x423)))
 (let (($x127 (= ?x250 (_ bv0 32))))
 (let (($x26 (= $x797 $x127)))
 (let (($x273 (and $x26 $x61)))
 (let (($x975 (and $x273 $x738)))
 (let (($x710 (and $x975 $x439)))
 (let (($x445 (= $x710 true)))
 (let (($x260 (= $x445 true)))
 (let (($x261 (= $x260 true)))
 (let (($x929 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x659)))
 (let (($x94 (and $x929 true)))
 (let (($x615 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x857 (=> $x615 $x94)))
 (let (($x664 (= $x615 $x333)))
 (let (($x695 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x941 (=> $x695 $x423)))
 (let (($x154 (= $x695 $x310)))
 (let (($x35 (and $x154 $x941)))
 (let (($x473 (and $x35 $x664)))
 (let (($x474 (and $x473 $x857)))
 (let (($x583 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x1159)))
 (let (($x201 (and $x583 $x474)))
 (let (($x781 (=> $x951 $x201)))
 (let (($x193 (= $x951 $x308)))
 (let (($x135 (= $x650 $x127)))
 (let (($x270 (and $x135 $x34)))
 (let (($x515 (and $x270 $x193)))
 (let (($x73 (and $x515 $x781)))
 (let (($x808 (= $x73 true)))
 (let (($x885 (= $x808 true)))
 (let (($x32 (= $x885 true)))
 (let (($x60 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x584 (= $x60 true)))
 (let (($x930 (= $x584 true)))
 (let (($x413 (= $x930 true)))
 (let ((?x726 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv1 32))) (select input.dst.llvm-mem ?x726))))
 (let ((?x1087 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv2 32))) ?x426))))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x1087 (_ bv1 32))) (select input.dst.llvm-mem ?x1087))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x1087 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1087 (_ bv2 32))) ?x739))))
 (let (($x126 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x18)))
 (let (($x21 (and $x126 true)))
 (let (($x569 (=> $x615 $x21)))
 (let (($x678 (= $x615 (bvuge (ite (= (_ bv0 32) ?x1087) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x195 (= $x695 (= (ite (= (_ bv0 32) ?x1087) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x295 (and $x195 $x941)))
 (let (($x942 (and $x295 $x678)))
 (let (($x296 (and $x942 $x569)))
 (let ((?x903 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x1002 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x15 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x446 (concat (select input.dst.llvm-mem ?x15) (concat ?x1002 (concat ?x191 ?x903)))))
 (let (($x362 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x446)))
 (let (($x914 (and $x362 $x296)))
 (let (($x636 (=> $x951 $x914)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x585 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (= $x951 (bvuge ?x585 (_ bv1 32)))))
 (let (($x55 (= $x650 (= ?x585 (_ bv0 32)))))
 (let (($x725 (and $x55 $x34)))
 (let (($x727 (and $x725 $x160)))
 (let (($x562 (and $x727 $x636)))
 (let (($x772 (= $x562 true)))
 (let (($x269 (= $x772 true)))
 (let (($x621 (= $x269 true)))
 (let (($x671 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x466 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x815 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466))))
 (let (($x506 (and true $x815)))
 (let (($x187 (and $x815 $x506)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x741 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let (($x84 (and $x741 $x721)))
 (let (($x215 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv4 32))) (bvult ?x116 (bvsub ?x116 (_ bv4 32))))))
 (let (($x482 (and (and (and (and (and $x506 $x215) $x741) $x84) $x187) $x671)))
 (let (($x388 (= true $x482)))
 (let (($x652 (not $x731)))
 (let (($x624 (=> $x652 $x388)))
 (let (($x371 (= $x624 true)))
 (let (($x322 (= $x371 true)))
 (let (($x666 (= $x322 true)))
 (let (($x213 (= $x652 true)))
 (let (($x220 (= $x213 true)))
 (let (($x114 (= $x220 true)))
 (let (($x917 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x982 (= $x917 true)))
 (let (($x987 (= $x982 true)))
 (let ((?x427 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x427)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x693 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x693 $x168)))
 (let (($x145 (and $x23 $x224)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x143 $x145)))
 (let (($x1075 (= $x331 true)))
 (let (($x407 (= $x1075 true)))
 (let (($x722 (= $x407 true)))
 (let (($x698 (and $x722 $x987)))
 (let (($x452 (and $x698 $x114)))
 (let (($x348 (and $x452 $x666)))
 (let (($x985 (and $x348 $x621)))
 (let (($x658 (and $x985 $x413)))
 (let (($x95 (and $x658 $x32)))
 (let (($x58 (and $x95 $x261)))
 (let (($x50 (and $x58 $x935)))
 (let (($x656 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x64 (and $x656 $x50)))
 (let (($x129 (bvugt ?x116 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x116 (_ bv3 32))))
 (let (($x748 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x391 (=> (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x748 $x129)))))))
 (let (($x1151 (=> (and $x652 (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x748 $x129)))))))
 (let (($x845 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x905 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x726 (_ bv1 32))) (or false (or false (and true (or $x218 $x845)))))))
 (let (($x153 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x726 (_ bv1 32)))) (or false (or false (and true (or $x218 $x845)))))))
 (let (($x611 (and $x153 $x1151)))
 (let (($x531 (and $x611 $x64)))
 (let (($x836 (=> $x531 $x567)))
 (not $x836))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1108 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x125 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x117 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x266))))
 (let ((?x1004 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x785 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x116 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv1 32))) (select input.dst.llvm-mem ?x116))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x116 (_ bv2 32))) ?x236))))
 (let (($x22 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x605 (concat ?x252 (concat ?x140 (concat ?x785 ?x1004))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x117 ?x1108 false)))
 (let (($x951 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x892 (=> $x951 $x22)))
 (let (($x311 (= $x951 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x423 (= false false)))
 (let (($x650 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x34 (=> $x650 $x423)))
 (let (($x365 (= $x650 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x513 (and $x365 $x34)))
 (let (($x753 (and $x513 $x311)))
 (let (($x377 (and $x753 $x892)))
 (let (($x825 (= $x377 true)))
 (let (($x567 (= $x825 true)))
 (let ((?x352 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x6 (= (_ bv0 3) ?x352)))
 (let (($x535 (= $x6 true)))
 (let (($x935 (= $x535 true)))
 (let ((?x553 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x933 (concat ?x553 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x508 (concat ?x198 (concat ?x397 ?x933))))
 (let ((?x442 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv1 32))) (select input.dst.llvm-mem ?x508))))
 (let ((?x659 (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x508 (_ bv2 32))) ?x442))))
 (let (($x242 (= input.spec-%var-l-1.2.1.2.0 ?x659)))
 (let (($x282 (and $x242 true)))
 (let (($x383 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x844 (=> $x383 $x282)))
 (let ((?x990 (ite (= (_ bv0 32) ?x508) (_ bv0 32) (_ bv1 32))))
 (let (($x333 (bvuge ?x990 (_ bv1 32))))
 (let (($x926 (= $x383 $x333)))
 (let (($x1005 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x253 (=> $x1005 $x423)))
 (let (($x310 (= ?x990 (_ bv0 32))))
 (let (($x335 (= $x1005 $x310)))
 (let (($x888 (and $x335 $x253)))
 (let (($x13 (and $x888 $x926)))
 (let (($x99 (and $x13 $x844)))
 (let ((?x681 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x681)))
 (let ((?x1159 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x756)))
 (let (($x14 (= input.spec-%var-l-1.2.0 ?x1159)))
 (let (($x826 (and $x14 $x99)))
 (let (($x303 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x439 (=> $x303 $x826)))
 (let ((?x250 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x308 (bvuge ?x250 (_ bv1 32))))
 (let (($x738 (= $x303 $x308)))
 (let (($x797 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x61 (=> $x797 $x423)))
 (let (($x127 (= ?x250 (_ bv0 32))))
 (let (($x26 (= $x797 $x127)))
 (let (($x273 (and $x26 $x61)))
 (let (($x975 (and $x273 $x738)))
 (let (($x710 (and $x975 $x439)))
 (let (($x445 (= $x710 true)))
 (let (($x260 (= $x445 true)))
 (let (($x261 (= $x260 true)))
 (let (($x929 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x659)))
 (let (($x94 (and $x929 true)))
 (let (($x615 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x857 (=> $x615 $x94)))
 (let (($x664 (= $x615 $x333)))
 (let (($x695 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x941 (=> $x695 $x423)))
 (let (($x154 (= $x695 $x310)))
 (let (($x35 (and $x154 $x941)))
 (let (($x473 (and $x35 $x664)))
 (let (($x474 (and $x473 $x857)))
 (let (($x583 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x1159)))
 (let (($x201 (and $x583 $x474)))
 (let (($x781 (=> $x951 $x201)))
 (let (($x193 (= $x951 $x308)))
 (let (($x135 (= $x650 $x127)))
 (let (($x270 (and $x135 $x34)))
 (let (($x515 (and $x270 $x193)))
 (let (($x73 (and $x515 $x781)))
 (let (($x808 (= $x73 true)))
 (let (($x885 (= $x808 true)))
 (let (($x32 (= $x885 true)))
 (let (($x60 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x584 (= $x60 true)))
 (let (($x930 (= $x584 true)))
 (let (($x413 (= $x930 true)))
 (let ((?x726 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x426 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv1 32))) (select input.dst.llvm-mem ?x726))))
 (let ((?x1087 (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x726 (_ bv2 32))) ?x426))))
 (let ((?x739 (concat (select input.dst.llvm-mem (bvadd ?x1087 (_ bv1 32))) (select input.dst.llvm-mem ?x1087))))
 (let ((?x18 (concat (select input.dst.llvm-mem (bvadd ?x1087 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1087 (_ bv2 32))) ?x739))))
 (let (($x126 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x18)))
 (let (($x21 (and $x126 true)))
 (let (($x569 (=> $x615 $x21)))
 (let (($x678 (= $x615 (bvuge (ite (= (_ bv0 32) ?x1087) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x195 (= $x695 (= (ite (= (_ bv0 32) ?x1087) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x295 (and $x195 $x941)))
 (let (($x942 (and $x295 $x678)))
 (let (($x296 (and $x942 $x569)))
 (let ((?x903 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x1002 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x15 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x446 (concat (select input.dst.llvm-mem ?x15) (concat ?x1002 (concat ?x191 ?x903)))))
 (let (($x362 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x446)))
 (let (($x914 (and $x362 $x296)))
 (let (($x636 (=> $x951 $x914)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x585 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x160 (= $x951 (bvuge ?x585 (_ bv1 32)))))
 (let (($x55 (= $x650 (= ?x585 (_ bv0 32)))))
 (let (($x725 (and $x55 $x34)))
 (let (($x727 (and $x725 $x160)))
 (let (($x562 (and $x727 $x636)))
 (let (($x772 (= $x562 true)))
 (let (($x269 (= $x772 true)))
 (let (($x621 (= $x269 true)))
 (let (($x671 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x466 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x815 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x466))))
 (let (($x506 (and true $x815)))
 (let (($x187 (and $x815 $x506)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x741 (= (bvand ?x116 (_ bv4294967292 32)) ?x116)))
 (let (($x84 (and $x741 $x721)))
 (let (($x215 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x116 (bvsub ?x116 (_ bv4 32))) (bvult ?x116 (bvsub ?x116 (_ bv4 32))))))
 (let (($x482 (and (and (and (and (and $x506 $x215) $x741) $x84) $x187) $x671)))
 (let (($x388 (= true $x482)))
 (let (($x652 (not $x731)))
 (let (($x624 (=> $x652 $x388)))
 (let (($x371 (= $x624 true)))
 (let (($x322 (= $x371 true)))
 (let (($x666 (= $x322 true)))
 (let (($x213 (= $x652 true)))
 (let (($x220 (= $x213 true)))
 (let (($x114 (= $x220 true)))
 (let (($x917 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x982 (= $x917 true)))
 (let (($x987 (= $x982 true)))
 (let ((?x427 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x224 (= (_ bv0 32) ?x427)))
 (let ((?x299 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x693 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (and $x693 $x168)))
 (let (($x145 (and $x23 $x224)))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x143 $x145)))
 (let (($x1075 (= $x331 true)))
 (let (($x407 (= $x1075 true)))
 (let (($x722 (= $x407 true)))
 (let (($x698 (and $x722 $x987)))
 (let (($x452 (and $x698 $x114)))
 (let (($x348 (and $x452 $x666)))
 (let (($x985 (and $x348 $x621)))
 (let (($x658 (and $x985 $x413)))
 (let (($x95 (and $x658 $x32)))
 (let (($x58 (and $x95 $x261)))
 (let (($x50 (and $x58 $x935)))
 (let (($x656 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x64 (and $x656 $x50)))
 (let (($x129 (bvugt ?x116 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x116 (_ bv3 32))))
 (let (($x748 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x391 (=> (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x748 $x129)))))))
 (let (($x1151 (=> (and $x652 (bvule ?x116 (bvsub (bvadd ?x116 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x748 $x129)))))))
 (let (($x845 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x218 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x905 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x726 (_ bv1 32))) (or false (or false (and true (or $x218 $x845)))))))
 (let (($x153 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x726 (_ bv1 32)))) (or false (or false (and true (or $x218 $x845)))))))
 (let (($x611 (and $x153 $x1151)))
 (let (($x531 (and $x611 $x64)))
 (let (($x836 (=> $x531 $x567)))
 (not $x836))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_16)
(= input.dst.llvm-mem @fun_29)
(function @fun_16
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_16 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_29
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_11329 (_ BitVec 32)) (BOUND_VARIABLE_11330 (_ BitVec 32)) (BOUND_VARIABLE_11331 (_ BitVec 32)) (BOUND_VARIABLE_11332 (_ BitVec 32)) (BOUND_VARIABLE_11333 (_ BitVec 32)) (BOUND_VARIABLE_11334 (_ BitVec 32)) (BOUND_VARIABLE_11335 Bool) (BOUND_VARIABLE_11336 (_ BitVec 32)) (BOUND_VARIABLE_11337 (_ BitVec 32)) (BOUND_VARIABLE_11338 (_ BitVec 32)) (BOUND_VARIABLE_11339 (_ BitVec 32)) (BOUND_VARIABLE_11340 (_ BitVec 32)) (BOUND_VARIABLE_11341 (_ BitVec 32)) (BOUND_VARIABLE_11342 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv16181992 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv33740032 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv33740032 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv33740035 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfe7cfeec)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xfa186860)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfa18686a)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xea186860)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x68686868)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #xfa)
                                #xfa18686e
                                #x6e)
                         #xfa186864
                         #xe8)
                  #xfa186871
                  #xba)))
(let ((a!2 (store (store (store (store a!1 #xfa186869 #x68) #xba186870 #x68)
                         #xfa186867
                         #x34)
                  #xea186861
                  #x68)))
(let ((a!3 (store (store (store (store a!2 #xfa18686c #x68) #xea186865 #x68)
                         #xfa18686b
                         #x68)
                  #xfa18686a
                  #x68)))
(let ((a!4 (store (store (store (store a!3 #xfa18686a #x68) #xfa18686d #xe8)
                         #xfa186863
                         #x68)
                  #xfa18686b
                  #x68)))
(let ((a!5 (store (store (store (store a!4 #xea186862 #x68) #xea186860 #x68)
                         #xfa186868
                         #x68)
                  #xea186866
                  #x18)))
(let ((a!6 (store (store (store (store a!5 #xfa18686f #x68) #xfa186870 #x18)
                         #xba18686e
                         #x68)
                  #xfa186861
                  #x68)))
(let ((a!7 (store (store (store (store a!6 #xfa186865 #xb8) #xfa186860 #x68)
                         #xfa186866
                         #x18)
                  #xba18686f
                  #x68)))
  (store (store (store (store a!7 #xfa186862 #x68) #xba186871 #x68)
                #xea186864
                #x68)
         #xea186863
         #xe8)))))))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x68686868)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xe8686868)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #xe8686868)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfe7cfeec)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfe7cfeef)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xfa186860)
              (= x!8 #xfa186868)
              (= x!9 #x68686868)
              (= x!10 #xfa186860)
              (= x!11 #x3418b8e8)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x315 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x289))))
 (let ((?x338 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x494 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x732 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x572 (concat ?x732 (concat ?x494 (concat ?x46 ?x338)))))
 (let ((?x1152 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x897 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x897 (_ bv1 32))) (select input.dst.llvm-mem ?x897))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x897 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x897 (_ bv2 32))) ?x541))))
 (let ((?x343 (bvadd ?x605 (_ bv4 32))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x965 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x379))))
 (let (($x770 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x965 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let ((?x907 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x907))))
 (let (($x219 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x429)))
 (let (($x349 (and $x219 $x770)))
 (let (($x444 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x447 (=> $x444 $x349)))
 (let (($x267 (= $x444 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x621 (= false false)))
 (let (($x636 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x985 (=> $x636 $x621)))
 (let (($x598 (= $x636 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x539 (and $x598 $x985)))
 (let (($x631 (and $x539 $x267)))
 (let (($x616 (and $x631 $x447)))
 (let (($x645 (= $x616 true)))
 (let (($x422 (= $x645 true)))
 (let ((?x454 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x276 (= (_ bv0 3) ?x454)))
 (let (($x704 (= $x276 true)))
 (let (($x181 (= $x704 true)))
 (let ((?x634 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x332 (concat ?x634 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x573 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x988 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x185 (concat ?x988 (concat ?x573 ?x332))))
 (let ((?x519 (bvadd ?x185 (_ bv4 32))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x519 (_ bv1 32))) (select input.dst.llvm-mem ?x519))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd ?x519 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x519 (_ bv2 32))) ?x83))))
 (let (($x437 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x607 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let ((?x619 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x619))))
 (let (($x912 (= input.spec-%var-l-1.2.1.2.0 ?x290)))
 (let (($x730 (and $x912 $x437)))
 (let (($x1062 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x384 (=> $x1062 $x730)))
 (let ((?x216 (ite (= (_ bv0 32) ?x185) (_ bv0 32) (_ bv1 32))))
 (let (($x532 (bvuge ?x216 (_ bv1 32))))
 (let (($x317 (= $x1062 $x532)))
 (let (($x520 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x996 (=> $x520 $x621)))
 (let (($x134 (= ?x216 (_ bv0 32))))
 (let (($x801 (= $x520 $x134)))
 (let (($x1112 (and $x801 $x996)))
 (let (($x790 (and $x1112 $x317)))
 (let (($x803 (and $x790 $x384)))
 (let ((?x507 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x692 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x507)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x692)))
 (let (($x700 (= input.spec-%var-l-1.2.0 ?x342)))
 (let (($x810 (and $x700 $x803)))
 (let (($x386 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x557 (=> $x386 $x810)))
 (let ((?x475 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x957 (bvuge ?x475 (_ bv1 32))))
 (let (($x489 (= $x386 $x957)))
 (let (($x576 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x357 (=> $x576 $x621)))
 (let (($x612 (= ?x475 (_ bv0 32))))
 (let (($x235 (= $x576 $x612)))
 (let (($x989 (and $x235 $x357)))
 (let (($x547 (and $x989 $x489)))
 (let (($x657 (and $x547 $x557)))
 (let (($x694 (= $x657 true)))
 (let (($x271 (= $x694 true)))
 (let (($x755 (= $x271 true)))
 (let (($x415 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x607 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let (($x1110 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x290)))
 (let (($x256 (and $x1110 $x415)))
 (let (($x1108 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x544 (=> $x1108 $x256)))
 (let (($x1109 (= $x1108 $x532)))
 (let (($x522 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x522 $x621)))
 (let (($x229 (= $x522 $x134)))
 (let (($x1158 (and $x229 $x28)))
 (let (($x561 (and $x1158 $x1109)))
 (let (($x293 (and $x561 $x544)))
 (let (($x582 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x342)))
 (let (($x638 (and $x582 $x293)))
 (let (($x158 (=> $x444 $x638)))
 (let (($x1113 (= $x444 $x957)))
 (let (($x712 (= $x636 $x612)))
 (let (($x558 (and $x712 $x985)))
 (let (($x514 (and $x558 $x1113)))
 (let (($x771 (and $x514 $x158)))
 (let (($x633 (= $x771 true)))
 (let (($x1076 (= $x633 true)))
 (let (($x747 (= $x1076 true)))
 (let (($x534 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x891 (= $x534 true)))
 (let (($x1079 (= $x891 true)))
 (let (($x122 (= $x1079 true)))
 (let ((?x283 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x753 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x753))))
 (let ((?x778 (bvadd ?x44 (_ bv4 32))))
 (let ((?x661 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem ?x778))))
 (let ((?x1105 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv2 32))) ?x661))))
 (let (($x843 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1105 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x733))))
 (let (($x326 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x194)))
 (let (($x761 (and $x326 $x843)))
 (let (($x393 (=> $x1108 $x761)))
 (let (($x117 (= $x1108 (bvuge (ite (= (_ bv0 32) ?x44) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x531 (= $x522 (= (ite (= (_ bv0 32) ?x44) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x365 (and $x531 $x28)))
 (let (($x210 (and $x365 $x117)))
 (let (($x257 (and $x210 $x393)))
 (let ((?x796 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x442 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x929 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x474 (concat (select input.dst.llvm-mem ?x16) (concat ?x929 (concat ?x442 ?x796)))))
 (let (($x201 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x474)))
 (let (($x999 (and $x201 $x257)))
 (let (($x600 (=> $x444 $x999)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x562 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (= $x444 (bvuge ?x562 (_ bv1 32)))))
 (let (($x269 (= $x636 (= ?x562 (_ bv0 32)))))
 (let (($x759 (and $x269 $x985)))
 (let (($x135 (and $x759 $x127)))
 (let (($x640 (and $x135 $x600)))
 (let (($x339 (= $x640 true)))
 (let (($x775 (= $x339 true)))
 (let (($x1157 (= $x775 true)))
 (let (($x495 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x354 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x610 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x354) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x354))))
 (let (($x324 (and true $x610)))
 (let (($x574 (and $x610 $x324)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x556 (= (bvand ?x897 (_ bv4294967292 32)) ?x897)))
 (let (($x84 (and $x556 $x721)))
 (let (($x89 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x897 (bvsub ?x897 (_ bv4 32))) (bvult ?x897 (bvsub ?x897 (_ bv4 32))))))
 (let (($x624 (and (and (and (and (and $x324 $x89) $x556) $x84) $x574) $x495)))
 (let (($x371 (= true $x624)))
 (let (($x652 (not $x731)))
 (let (($x322 (=> $x652 $x371)))
 (let (($x666 (= $x322 true)))
 (let (($x348 (= $x666 true)))
 (let (($x642 (= $x348 true)))
 (let (($x114 (= $x652 true)))
 (let (($x452 (= $x114 true)))
 (let (($x450 (= $x452 true)))
 (let (($x987 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x698 (= $x987 true)))
 (let (($x213 (= $x698 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x331 (= (_ bv0 32) ?x145)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x427 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x168 $x427)))
 (let (($x1075 (and $x224 $x331)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (and $x299 $x1075)))
 (let (($x722 (= $x407 true)))
 (let (($x711 (= $x722 true)))
 (let (($x917 (= $x711 true)))
 (let (($x220 (and $x917 $x213)))
 (let (($x466 (and $x220 $x450)))
 (let (($x650 (and $x466 $x642)))
 (let (($x809 (and $x650 $x1157)))
 (let (($x204 (and $x809 $x122)))
 (let (($x29 (and $x204 $x747)))
 (let (($x1104 (and $x29 $x755)))
 (let (($x1084 (and $x1104 $x181)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1086 (and $x143 $x1084)))
 (let (($x777 (bvugt ?x897 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x897 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x656 (=> (bvule ?x897 (bvsub (bvadd ?x897 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x777)))))))
 (let (($x164 (=> (and $x652 (bvule ?x897 (bvsub (bvadd ?x897 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x777)))))))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x635 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x802 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x283 (_ bv1 32))) (or false (or false (and true (or $x635 $x104)))))))
 (let (($x528 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x283 (_ bv1 32)))) (or false (or false (and true (or $x635 $x104)))))))
 (let (($x734 (and $x528 $x164)))
 (let (($x406 (and $x734 $x1086)))
 (let (($x1006 (=> $x406 $x422)))
 (not $x1006)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x315 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x289 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv1 32))) (select input.dst.llvm-mem ?x315))))
 (let ((?x221 (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x315 (_ bv2 32))) ?x289))))
 (let ((?x338 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x46 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x494 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x732 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x572 (concat ?x732 (concat ?x494 (concat ?x46 ?x338)))))
 (let ((?x1152 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x897 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x897 (_ bv1 32))) (select input.dst.llvm-mem ?x897))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x897 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x897 (_ bv2 32))) ?x541))))
 (let ((?x343 (bvadd ?x605 (_ bv4 32))))
 (let ((?x379 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x965 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x379))))
 (let (($x770 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x965 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let ((?x907 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x429 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x907))))
 (let (($x219 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x429)))
 (let (($x349 (and $x219 $x770)))
 (let (($x444 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x447 (=> $x444 $x349)))
 (let (($x267 (= $x444 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x621 (= false false)))
 (let (($x636 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x985 (=> $x636 $x621)))
 (let (($x598 (= $x636 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x539 (and $x598 $x985)))
 (let (($x631 (and $x539 $x267)))
 (let (($x616 (and $x631 $x447)))
 (let (($x645 (= $x616 true)))
 (let (($x422 (= $x645 true)))
 (let ((?x454 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x276 (= (_ bv0 3) ?x454)))
 (let (($x704 (= $x276 true)))
 (let (($x181 (= $x704 true)))
 (let ((?x634 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x332 (concat ?x634 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x573 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x988 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x185 (concat ?x988 (concat ?x573 ?x332))))
 (let ((?x519 (bvadd ?x185 (_ bv4 32))))
 (let ((?x83 (concat (select input.dst.llvm-mem (bvadd ?x519 (_ bv1 32))) (select input.dst.llvm-mem ?x519))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd ?x519 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x519 (_ bv2 32))) ?x83))))
 (let (($x437 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x607 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let ((?x619 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv1 32))) (select input.dst.llvm-mem ?x185))))
 (let ((?x290 (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x185 (_ bv2 32))) ?x619))))
 (let (($x912 (= input.spec-%var-l-1.2.1.2.0 ?x290)))
 (let (($x730 (and $x912 $x437)))
 (let (($x1062 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x384 (=> $x1062 $x730)))
 (let ((?x216 (ite (= (_ bv0 32) ?x185) (_ bv0 32) (_ bv1 32))))
 (let (($x532 (bvuge ?x216 (_ bv1 32))))
 (let (($x317 (= $x1062 $x532)))
 (let (($x520 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x996 (=> $x520 $x621)))
 (let (($x134 (= ?x216 (_ bv0 32))))
 (let (($x801 (= $x520 $x134)))
 (let (($x1112 (and $x801 $x996)))
 (let (($x790 (and $x1112 $x317)))
 (let (($x803 (and $x790 $x384)))
 (let ((?x507 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x692 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x507)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x692)))
 (let (($x700 (= input.spec-%var-l-1.2.0 ?x342)))
 (let (($x810 (and $x700 $x803)))
 (let (($x386 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x557 (=> $x386 $x810)))
 (let ((?x475 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x957 (bvuge ?x475 (_ bv1 32))))
 (let (($x489 (= $x386 $x957)))
 (let (($x576 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x357 (=> $x576 $x621)))
 (let (($x612 (= ?x475 (_ bv0 32))))
 (let (($x235 (= $x576 $x612)))
 (let (($x989 (and $x235 $x357)))
 (let (($x547 (and $x989 $x489)))
 (let (($x657 (and $x547 $x557)))
 (let (($x694 (= $x657 true)))
 (let (($x271 (= $x694 true)))
 (let (($x755 (= $x271 true)))
 (let (($x415 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x607 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let (($x1110 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x290)))
 (let (($x256 (and $x1110 $x415)))
 (let (($x1108 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x544 (=> $x1108 $x256)))
 (let (($x1109 (= $x1108 $x532)))
 (let (($x522 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x28 (=> $x522 $x621)))
 (let (($x229 (= $x522 $x134)))
 (let (($x1158 (and $x229 $x28)))
 (let (($x561 (and $x1158 $x1109)))
 (let (($x293 (and $x561 $x544)))
 (let (($x582 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x342)))
 (let (($x638 (and $x582 $x293)))
 (let (($x158 (=> $x444 $x638)))
 (let (($x1113 (= $x444 $x957)))
 (let (($x712 (= $x636 $x612)))
 (let (($x558 (and $x712 $x985)))
 (let (($x514 (and $x558 $x1113)))
 (let (($x771 (and $x514 $x158)))
 (let (($x633 (= $x771 true)))
 (let (($x1076 (= $x633 true)))
 (let (($x747 (= $x1076 true)))
 (let (($x534 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x891 (= $x534 true)))
 (let (($x1079 (= $x891 true)))
 (let (($x122 (= $x1079 true)))
 (let ((?x283 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x753 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv1 32))) (select input.dst.llvm-mem ?x283))))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x283 (_ bv2 32))) ?x753))))
 (let ((?x778 (bvadd ?x44 (_ bv4 32))))
 (let ((?x661 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv1 32))) (select input.dst.llvm-mem ?x778))))
 (let ((?x1105 (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x778 (_ bv2 32))) ?x661))))
 (let (($x843 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1105 ?x1152 false ?x572 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x221)))
 (let ((?x733 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv1 32))) (select input.dst.llvm-mem ?x44))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x44 (_ bv2 32))) ?x733))))
 (let (($x326 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x194)))
 (let (($x761 (and $x326 $x843)))
 (let (($x393 (=> $x1108 $x761)))
 (let (($x117 (= $x1108 (bvuge (ite (= (_ bv0 32) ?x44) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x531 (= $x522 (= (ite (= (_ bv0 32) ?x44) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x365 (and $x531 $x28)))
 (let (($x210 (and $x365 $x117)))
 (let (($x257 (and $x210 $x393)))
 (let ((?x796 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x442 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x929 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x16 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x474 (concat (select input.dst.llvm-mem ?x16) (concat ?x929 (concat ?x442 ?x796)))))
 (let (($x201 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x474)))
 (let (($x999 (and $x201 $x257)))
 (let (($x600 (=> $x444 $x999)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x562 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x127 (= $x444 (bvuge ?x562 (_ bv1 32)))))
 (let (($x269 (= $x636 (= ?x562 (_ bv0 32)))))
 (let (($x759 (and $x269 $x985)))
 (let (($x135 (and $x759 $x127)))
 (let (($x640 (and $x135 $x600)))
 (let (($x339 (= $x640 true)))
 (let (($x775 (= $x339 true)))
 (let (($x1157 (= $x775 true)))
 (let (($x495 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x354 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x610 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x354) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x354))))
 (let (($x324 (and true $x610)))
 (let (($x574 (and $x610 $x324)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x556 (= (bvand ?x897 (_ bv4294967292 32)) ?x897)))
 (let (($x84 (and $x556 $x721)))
 (let (($x89 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x897 (bvsub ?x897 (_ bv4 32))) (bvult ?x897 (bvsub ?x897 (_ bv4 32))))))
 (let (($x624 (and (and (and (and (and $x324 $x89) $x556) $x84) $x574) $x495)))
 (let (($x371 (= true $x624)))
 (let (($x652 (not $x731)))
 (let (($x322 (=> $x652 $x371)))
 (let (($x666 (= $x322 true)))
 (let (($x348 (= $x666 true)))
 (let (($x642 (= $x348 true)))
 (let (($x114 (= $x652 true)))
 (let (($x452 (= $x114 true)))
 (let (($x450 (= $x452 true)))
 (let (($x987 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x698 (= $x987 true)))
 (let (($x213 (= $x698 true)))
 (let ((?x145 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x331 (= (_ bv0 32) ?x145)))
 (let ((?x23 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x427 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x23)))
 (let (($x168 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x168 $x427)))
 (let (($x1075 (and $x224 $x331)))
 (let (($x299 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (and $x299 $x1075)))
 (let (($x722 (= $x407 true)))
 (let (($x711 (= $x722 true)))
 (let (($x917 (= $x711 true)))
 (let (($x220 (and $x917 $x213)))
 (let (($x466 (and $x220 $x450)))
 (let (($x650 (and $x466 $x642)))
 (let (($x809 (and $x650 $x1157)))
 (let (($x204 (and $x809 $x122)))
 (let (($x29 (and $x204 $x747)))
 (let (($x1104 (and $x29 $x755)))
 (let (($x1084 (and $x1104 $x181)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1086 (and $x143 $x1084)))
 (let (($x777 (bvugt ?x897 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x897 (_ bv3 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x656 (=> (bvule ?x897 (bvsub (bvadd ?x897 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x40 $x777)))))))
 (let (($x164 (=> (and $x652 (bvule ?x897 (bvsub (bvadd ?x897 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x40 $x777)))))))
 (let (($x104 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x635 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x802 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x283 (_ bv1 32))) (or false (or false (and true (or $x635 $x104)))))))
 (let (($x528 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x283 (_ bv1 32)))) (or false (or false (and true (or $x635 $x104)))))))
 (let (($x734 (and $x528 $x164)))
 (let (($x406 (and $x734 $x1086)))
 (let (($x1006 (=> $x406 $x422)))
 (not $x1006)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_29)
(= input.dst.llvm-mem @fun_54)
(function @fun_29
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_29 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_54
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_54 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_10032 (_ BitVec 32)) (BOUND_VARIABLE_10033 (_ BitVec 32)) (BOUND_VARIABLE_10034 (_ BitVec 32)) (BOUND_VARIABLE_10035 Bool) (BOUND_VARIABLE_10036 (_ BitVec 32)) (BOUND_VARIABLE_10037 (_ BitVec 32)) (BOUND_VARIABLE_10038 (_ BitVec 32)) (BOUND_VARIABLE_10039 (_ BitVec 32)) (BOUND_VARIABLE_10040 (_ BitVec 32)) (BOUND_VARIABLE_10041 (_ BitVec 32)) (BOUND_VARIABLE_10042 Bool) (BOUND_VARIABLE_10043 (_ BitVec 32)) (BOUND_VARIABLE_10044 (_ BitVec 32)) (BOUND_VARIABLE_10045 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv4 32) (_ bv255 8)) (_ bv1062035 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv1062032 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4278190080 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4278190080 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2638640 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2638640 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2638643 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x20202085)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x20202028)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x20202026)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x20)
              #x2020208b
              #x24)
       #x20202085
       #x30))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x80000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x20202085)
              (= x!8 #x20202020)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x20202030)
              (= x!12 #x20202085)
              (= x!13 #x20242020))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x20202085)
              (= x!8 #x20202020)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x20202030)
              (= x!12 #x20202085)
              (= x!13 #x20242020))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x470 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x981 (concat (select input.dst.llvm-mem (bvadd ?x470 (_ bv1 32))) (select input.dst.llvm-mem ?x470))))
 (let ((?x963 (concat (select input.dst.llvm-mem (bvadd ?x470 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x470 (_ bv2 32))) ?x981))))
 (let ((?x248 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x674 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x817 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x964 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x893 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x893 (_ bv1 32))) (select input.dst.llvm-mem ?x893))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x893 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x893 (_ bv2 32))) ?x504))))
 (let ((?x31 (bvadd ?x605 (_ bv4 32))))
 (let ((?x948 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x948))))
 (let (($x959 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x655 (concat ?x964 (concat ?x817 (concat ?x674 ?x248))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x963 ?x72 false)))
 (let (($x437 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x828 (=> $x437 $x959)))
 (let (($x367 (= $x437 (bvuge (ite (= (_ bv0 32) ?x655) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x604 (= false false)))
 (let (($x800 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x806 (=> $x800 $x604)))
 (let (($x876 (= $x800 (= (ite (= (_ bv0 32) ?x655) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x71 (and $x876 $x806)))
 (let (($x453 (and $x71 $x367)))
 (let (($x511 (and $x453 $x828)))
 (let ((?x1073 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x597 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x1073))))
 (let (($x542 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x597)))
 (let (($x654 (and $x542 $x511)))
 (let (($x51 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x602 (=> $x51 $x654)))
 (let (($x95 (= $x51 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x764 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x950 (=> $x764 $x604)))
 (let (($x154 (= $x764 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x35 (and $x154 $x950)))
 (let (($x113 (and $x35 $x95)))
 (let (($x395 (and $x113 $x602)))
 (let (($x478 (= $x395 true)))
 (let (($x47 (= $x478 true)))
 (let ((?x641 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x397 (= (_ bv0 3) ?x641)))
 (let (($x198 (= $x397 true)))
 (let (($x27 (= $x198 true)))
 (let ((?x986 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x543 (concat ?x986 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x668 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x627 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x783 (concat ?x627 (concat ?x668 ?x543))))
 (let ((?x798 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv1 32))) (select input.dst.llvm-mem ?x783))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv2 32))) ?x798))))
 (let (($x1116 (= input.spec-%var-l-1.2.1.2.0 ?x345)))
 (let (($x486 (and $x1116 true)))
 (let (($x233 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x658 (=> $x233 $x486)))
 (let ((?x364 (ite (= (_ bv0 32) ?x783) (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x364 (_ bv1 32))))
 (let (($x130 (= $x233 $x175)))
 (let (($x808 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x615 (=> $x808 $x604)))
 (let (($x425 (= ?x364 (_ bv0 32))))
 (let (($x195 (= $x808 $x425)))
 (let (($x885 (and $x195 $x615)))
 (let (($x140 (and $x885 $x130)))
 (let (($x677 (and $x140 $x658)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x853 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x853)))
 (let (($x941 (= input.spec-%var-l-1.2.0 ?x306)))
 (let (($x296 (and $x941 $x677)))
 (let (($x431 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x930 (=> $x431 $x296)))
 (let ((?x428 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x952 (bvuge ?x428 (_ bv1 32))))
 (let (($x559 (= $x431 $x952)))
 (let (($x887 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x924 (=> $x887 $x604)))
 (let (($x119 (= ?x428 (_ bv0 32))))
 (let (($x739 (= $x887 $x119)))
 (let (($x138 (and $x739 $x924)))
 (let (($x713 (and $x138 $x559)))
 (let (($x21 (and $x713 $x930)))
 (let (($x413 (= $x21 true)))
 (let (($x515 (= $x413 true)))
 (let (($x508 (= $x515 true)))
 (let (($x291 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x345)))
 (let (($x223 (and $x291 true)))
 (let (($x745 (=> $x437 $x223)))
 (let (($x609 (= $x437 $x175)))
 (let (($x87 (= $x800 $x425)))
 (let (($x882 (and $x87 $x806)))
 (let (($x20 (and $x882 $x609)))
 (let (($x461 (and $x20 $x745)))
 (let (($x144 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x306)))
 (let (($x121 (and $x144 $x461)))
 (let (($x184 (=> $x51 $x121)))
 (let (($x476 (= $x51 $x952)))
 (let (($x300 (= $x764 $x119)))
 (let (($x784 (and $x300 $x950)))
 (let (($x404 (and $x784 $x476)))
 (let (($x463 (and $x404 $x184)))
 (let (($x861 (= $x463 true)))
 (let (($x309 (= $x861 true)))
 (let (($x30 (= $x309 true)))
 (let (($x781 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x781 true)))
 (let (($x502 (= $x73 true)))
 (let (($x757 (= $x502 true)))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x747 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x293))))
 (let ((?x951 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv1 32))) (select input.dst.llvm-mem ?x747))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv2 32))) ?x951))))
 (let (($x265 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x270)))
 (let (($x585 (and $x265 true)))
 (let (($x1006 (=> $x437 $x585)))
 (let (($x912 (= $x437 (bvuge (ite (= (_ bv0 32) ?x747) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x838 (= $x800 (= (ite (= (_ bv0 32) ?x747) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x607 (and $x838 $x806)))
 (let (($x766 (and $x607 $x912)))
 (let (($x438 (and $x766 $x1006)))
 (let ((?x612 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x558 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x514 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x5 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x128 (concat (select input.dst.llvm-mem ?x5) (concat ?x514 (concat ?x558 ?x612)))))
 (let (($x832 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x128)))
 (let (($x616 (and $x832 $x438)))
 (let (($x645 (=> $x51 $x616)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x778 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x93 (= $x51 (bvuge ?x778 (_ bv1 32)))))
 (let (($x188 (= $x764 (= ?x778 (_ bv0 32)))))
 (let (($x788 (and $x188 $x950)))
 (let (($x732 (and $x788 $x93)))
 (let (($x349 (and $x732 $x645)))
 (let (($x422 (= $x349 true)))
 (let (($x894 (= $x422 true)))
 (let (($x378 (= $x894 true)))
 (let (($x388 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x815 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x910 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x815) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x815))))
 (let (($x521 (and true $x910)))
 (let (($x482 (and $x910 $x521)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x671 (= (bvand ?x893 (_ bv4294967292 32)) ?x893)))
 (let (($x84 (and $x671 $x721)))
 (let (($x353 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x893 (bvsub ?x893 (_ bv4 32))) (bvult ?x893 (bvsub ?x893 (_ bv4 32))))))
 (let (($x322 (and (and (and (and (and $x521 $x353) $x671) $x84) $x482) $x388)))
 (let (($x666 (= true $x322)))
 (let (($x652 (not $x731)))
 (let (($x348 (=> $x652 $x666)))
 (let (($x642 (= $x348 true)))
 (let (($x650 (= $x642 true)))
 (let (($x914 (= $x650 true)))
 (let (($x450 (= $x652 true)))
 (let (($x466 (= $x450 true)))
 (let (($x336 (= $x466 true)))
 (let (($x213 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x220 (= $x213 true)))
 (let (($x114 (= $x220 true)))
 (let ((?x1075 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x407 (= (_ bv0 32) ?x1075)))
 (let ((?x224 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x224)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (and $x427 $x145)))
 (let (($x722 (and $x331 $x407)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x711 (and $x23 $x722)))
 (let (($x917 (= $x711 true)))
 (let (($x982 (= $x917 true)))
 (let (($x987 (= $x982 true)))
 (let (($x452 (and $x987 $x114)))
 (let (($x354 (and $x452 $x336)))
 (let (($x636 (and $x354 $x914)))
 (let (($x308 (and $x636 $x378)))
 (let (($x247 (and $x308 $x757)))
 (let (($x909 (and $x247 $x30)))
 (let (($x553 (and $x909 $x508)))
 (let (($x933 (and $x553 $x27)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x854 (and $x299 $x933)))
 (let (($x1151 (bvugt ?x893 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x893 (_ bv3 32))))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x143 (=> (bvule ?x893 (bvsub (bvadd ?x893 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x391 $x1151)))))))
 (let (($x849 (=> (and $x652 (bvule ?x893 (bvsub (bvadd ?x893 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x391 $x1151)))))))
 (let (($x153 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x905 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x129 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32))) (or false (or false (and true (or $x905 $x153)))))))
 (let (($x15 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32)))) (or false (or false (and true (or $x905 $x153)))))))
 (let (($x469 (and $x15 $x849)))
 (let (($x681 (and $x469 $x854)))
 (let (($x983 (=> $x681 $x47)))
 (not $x983)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x72 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x470 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x981 (concat (select input.dst.llvm-mem (bvadd ?x470 (_ bv1 32))) (select input.dst.llvm-mem ?x470))))
 (let ((?x963 (concat (select input.dst.llvm-mem (bvadd ?x470 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x470 (_ bv2 32))) ?x981))))
 (let ((?x248 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x674 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x817 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x964 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x893 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x893 (_ bv1 32))) (select input.dst.llvm-mem ?x893))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x893 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x893 (_ bv2 32))) ?x504))))
 (let ((?x31 (bvadd ?x605 (_ bv4 32))))
 (let ((?x948 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv1 32))) (select input.dst.llvm-mem ?x31))))
 (let ((?x655 (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x31 (_ bv2 32))) ?x948))))
 (let (($x959 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x655 (concat ?x964 (concat ?x817 (concat ?x674 ?x248))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x963 ?x72 false)))
 (let (($x437 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x828 (=> $x437 $x959)))
 (let (($x367 (= $x437 (bvuge (ite (= (_ bv0 32) ?x655) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x604 (= false false)))
 (let (($x800 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x806 (=> $x800 $x604)))
 (let (($x876 (= $x800 (= (ite (= (_ bv0 32) ?x655) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x71 (and $x876 $x806)))
 (let (($x453 (and $x71 $x367)))
 (let (($x511 (and $x453 $x828)))
 (let ((?x1073 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x597 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x1073))))
 (let (($x542 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x597)))
 (let (($x654 (and $x542 $x511)))
 (let (($x51 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x602 (=> $x51 $x654)))
 (let (($x95 (= $x51 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x764 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x950 (=> $x764 $x604)))
 (let (($x154 (= $x764 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x35 (and $x154 $x950)))
 (let (($x113 (and $x35 $x95)))
 (let (($x395 (and $x113 $x602)))
 (let (($x478 (= $x395 true)))
 (let (($x47 (= $x478 true)))
 (let ((?x641 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x397 (= (_ bv0 3) ?x641)))
 (let (($x198 (= $x397 true)))
 (let (($x27 (= $x198 true)))
 (let ((?x986 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x543 (concat ?x986 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x668 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x627 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x783 (concat ?x627 (concat ?x668 ?x543))))
 (let ((?x798 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv1 32))) (select input.dst.llvm-mem ?x783))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x783 (_ bv2 32))) ?x798))))
 (let (($x1116 (= input.spec-%var-l-1.2.1.2.0 ?x345)))
 (let (($x486 (and $x1116 true)))
 (let (($x233 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x658 (=> $x233 $x486)))
 (let ((?x364 (ite (= (_ bv0 32) ?x783) (_ bv0 32) (_ bv1 32))))
 (let (($x175 (bvuge ?x364 (_ bv1 32))))
 (let (($x130 (= $x233 $x175)))
 (let (($x808 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x615 (=> $x808 $x604)))
 (let (($x425 (= ?x364 (_ bv0 32))))
 (let (($x195 (= $x808 $x425)))
 (let (($x885 (and $x195 $x615)))
 (let (($x140 (and $x885 $x130)))
 (let (($x677 (and $x140 $x658)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x853 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x174)))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x853)))
 (let (($x941 (= input.spec-%var-l-1.2.0 ?x306)))
 (let (($x296 (and $x941 $x677)))
 (let (($x431 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x930 (=> $x431 $x296)))
 (let ((?x428 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x952 (bvuge ?x428 (_ bv1 32))))
 (let (($x559 (= $x431 $x952)))
 (let (($x887 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x924 (=> $x887 $x604)))
 (let (($x119 (= ?x428 (_ bv0 32))))
 (let (($x739 (= $x887 $x119)))
 (let (($x138 (and $x739 $x924)))
 (let (($x713 (and $x138 $x559)))
 (let (($x21 (and $x713 $x930)))
 (let (($x413 (= $x21 true)))
 (let (($x515 (= $x413 true)))
 (let (($x508 (= $x515 true)))
 (let (($x291 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x345)))
 (let (($x223 (and $x291 true)))
 (let (($x745 (=> $x437 $x223)))
 (let (($x609 (= $x437 $x175)))
 (let (($x87 (= $x800 $x425)))
 (let (($x882 (and $x87 $x806)))
 (let (($x20 (and $x882 $x609)))
 (let (($x461 (and $x20 $x745)))
 (let (($x144 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x306)))
 (let (($x121 (and $x144 $x461)))
 (let (($x184 (=> $x51 $x121)))
 (let (($x476 (= $x51 $x952)))
 (let (($x300 (= $x764 $x119)))
 (let (($x784 (and $x300 $x950)))
 (let (($x404 (and $x784 $x476)))
 (let (($x463 (and $x404 $x184)))
 (let (($x861 (= $x463 true)))
 (let (($x309 (= $x861 true)))
 (let (($x30 (= $x309 true)))
 (let (($x781 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x73 (= $x781 true)))
 (let (($x502 (= $x73 true)))
 (let (($x757 (= $x502 true)))
 (let ((?x218 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x747 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x293))))
 (let ((?x951 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv1 32))) (select input.dst.llvm-mem ?x747))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x747 (_ bv2 32))) ?x951))))
 (let (($x265 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x270)))
 (let (($x585 (and $x265 true)))
 (let (($x1006 (=> $x437 $x585)))
 (let (($x912 (= $x437 (bvuge (ite (= (_ bv0 32) ?x747) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x838 (= $x800 (= (ite (= (_ bv0 32) ?x747) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x607 (and $x838 $x806)))
 (let (($x766 (and $x607 $x912)))
 (let (($x438 (and $x766 $x1006)))
 (let ((?x612 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x558 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x514 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x5 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x128 (concat (select input.dst.llvm-mem ?x5) (concat ?x514 (concat ?x558 ?x612)))))
 (let (($x832 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x128)))
 (let (($x616 (and $x832 $x438)))
 (let (($x645 (=> $x51 $x616)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x778 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x93 (= $x51 (bvuge ?x778 (_ bv1 32)))))
 (let (($x188 (= $x764 (= ?x778 (_ bv0 32)))))
 (let (($x788 (and $x188 $x950)))
 (let (($x732 (and $x788 $x93)))
 (let (($x349 (and $x732 $x645)))
 (let (($x422 (= $x349 true)))
 (let (($x894 (= $x422 true)))
 (let (($x378 (= $x894 true)))
 (let (($x388 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x815 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x910 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x815) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x815))))
 (let (($x521 (and true $x910)))
 (let (($x482 (and $x910 $x521)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x671 (= (bvand ?x893 (_ bv4294967292 32)) ?x893)))
 (let (($x84 (and $x671 $x721)))
 (let (($x353 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x893 (bvsub ?x893 (_ bv4 32))) (bvult ?x893 (bvsub ?x893 (_ bv4 32))))))
 (let (($x322 (and (and (and (and (and $x521 $x353) $x671) $x84) $x482) $x388)))
 (let (($x666 (= true $x322)))
 (let (($x652 (not $x731)))
 (let (($x348 (=> $x652 $x666)))
 (let (($x642 (= $x348 true)))
 (let (($x650 (= $x642 true)))
 (let (($x914 (= $x650 true)))
 (let (($x450 (= $x652 true)))
 (let (($x466 (= $x450 true)))
 (let (($x336 (= $x466 true)))
 (let (($x213 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x220 (= $x213 true)))
 (let (($x114 (= $x220 true)))
 (let ((?x1075 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x407 (= (_ bv0 32) ?x1075)))
 (let ((?x224 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x224)))
 (let (($x427 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (and $x427 $x145)))
 (let (($x722 (and $x331 $x407)))
 (let (($x23 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x711 (and $x23 $x722)))
 (let (($x917 (= $x711 true)))
 (let (($x982 (= $x917 true)))
 (let (($x987 (= $x982 true)))
 (let (($x452 (and $x987 $x114)))
 (let (($x354 (and $x452 $x336)))
 (let (($x636 (and $x354 $x914)))
 (let (($x308 (and $x636 $x378)))
 (let (($x247 (and $x308 $x757)))
 (let (($x909 (and $x247 $x30)))
 (let (($x553 (and $x909 $x508)))
 (let (($x933 (and $x553 $x27)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x854 (and $x299 $x933)))
 (let (($x1151 (bvugt ?x893 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x893 (_ bv3 32))))
 (let (($x391 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x143 (=> (bvule ?x893 (bvsub (bvadd ?x893 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x391 $x1151)))))))
 (let (($x849 (=> (and $x652 (bvule ?x893 (bvsub (bvadd ?x893 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x391 $x1151)))))))
 (let (($x153 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x905 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x129 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32))) (or false (or false (and true (or $x905 $x153)))))))
 (let (($x15 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x218 (_ bv1 32)))) (or false (or false (and true (or $x905 $x153)))))))
 (let (($x469 (and $x15 $x849)))
 (let (($x681 (and $x469 $x854)))
 (let (($x983 (=> $x681 $x47)))
 (not $x983)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_10129 (_ BitVec 32)) (BOUND_VARIABLE_10130 (_ BitVec 32)) (BOUND_VARIABLE_10131 (_ BitVec 32)) (BOUND_VARIABLE_10132 (_ BitVec 32)) (BOUND_VARIABLE_10133 (_ BitVec 32)) (BOUND_VARIABLE_10134 (_ BitVec 32)) (BOUND_VARIABLE_10135 Bool) (BOUND_VARIABLE_10136 (_ BitVec 32)) (BOUND_VARIABLE_10137 (_ BitVec 32)) (BOUND_VARIABLE_10138 (_ BitVec 32)) (BOUND_VARIABLE_10139 (_ BitVec 32)) (BOUND_VARIABLE_10140 (_ BitVec 32)) (BOUND_VARIABLE_10141 (_ BitVec 32)) (BOUND_VARIABLE_10142 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv0 32) (_ bv255 8)) (_ bv4 32) (_ bv255 8)) (_ bv2 32) (_ bv255 8)) (_ bv370228961 32) (_ bv255 8)) (_ bv370228963 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv370228960 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4278255360 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4278255360 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv1208926480 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv1208926480 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv1208926483 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xe0707071)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xe0707078)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xe0707868)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x70707070)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x73)
                                #xe0707073
                                #x70)
                         #xe0707071
                         #x70)
                  #xe0707076
                  #x70)))
(let ((a!2 (store (store (store (store a!1 #xe070786f #xe0) #xe070786d #x70)
                         #xe070707d
                         #x70)
                  #xe0707072
                  #x70)))
(let ((a!3 (store (store (store (store a!2 #xe0707075 #x70) #xe0707868 #x70)
                         #xe0707074
                         #x70)
                  #xe0707078
                  #x70)))
(let ((a!4 (store (store (store (store a!3 #xe070786b #xe0) #xe070786c #x70)
                         #xe0707075
                         #x70)
                  #xe0707077
                  #x70)))
(let ((a!5 (store (store (store (store a!4 #xe0707079 #x70) #xe070707a #x70)
                         #xe070786e
                         #x70)
                  #xe0707073
                  #x70)))
(let ((a!6 (store (store (store (store a!5 #xe0707078 #x70) #xe070786a #x70)
                         #xe0707075
                         #x70)
                  #xe0707077
                  #x70)))
(let ((a!7 (store (store (store (store a!6 #xe0707070 #x70) #xe070707f #xe0)
                         #xe0707076
                         #x70)
                  #xe0707076
                  #x70)))
(let ((a!8 (store (store (store (store a!7 #xe0707071 #x70) #xe070707b #xe0)
                         #xe070707e
                         #x70)
                  #xe0707073
                  #x70)))
  (store (store (store (store a!8 #xe0707869 #x70) #xe0707074 #x70)
                #xe0707074
                #x70)
         #xe0707072
         #x70))))))))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x70707070)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #xe0707070)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #xe0707070)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xe0707071)
              (= x!8 #x70707070)
              (= x!9 #x70707070)
              (= x!10 #xe0707071)
              (= x!11 #x70707070)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x647 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x647 (_ bv1 32))) (select input.dst.llvm-mem ?x647))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x647 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x647 (_ bv2 32))) ?x48))))
 (let ((?x79 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x992 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x503 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x858 (concat ?x341 (concat ?x503 (concat ?x992 ?x79)))))
 (let ((?x255 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x748 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv1 32))) (select input.dst.llvm-mem ?x748))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv2 32))) ?x103))))
 (let ((?x908 (bvadd ?x605 (_ bv4 32))))
 (let ((?x603 (concat (select input.dst.llvm-mem (bvadd ?x908 (_ bv1 32))) (select input.dst.llvm-mem ?x908))))
 (let ((?x718 (concat (select input.dst.llvm-mem (bvadd ?x908 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x908 (_ bv2 32))) ?x603))))
 (let ((?x869 (bvadd ?x718 (_ bv4 32))))
 (let ((?x886 (concat (select input.dst.llvm-mem (bvadd ?x869 (_ bv1 32))) (select input.dst.llvm-mem ?x869))))
 (let ((?x1029 (concat (select input.dst.llvm-mem (bvadd ?x869 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x869 (_ bv2 32))) ?x886))))
 (let (($x1020 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1029 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let ((?x740 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv1 32))) (select input.dst.llvm-mem ?x718))))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv2 32))) ?x740))))
 (let (($x702 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x565)))
 (let (($x590 (and $x702 $x1020)))
 (let (($x367 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x805 (=> $x367 $x590)))
 (let (($x587 (= $x367 (bvuge (ite (= (_ bv0 32) ?x718) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x378 (= false false)))
 (let (($x473 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x807 (=> $x473 $x378)))
 (let (($x436 (= $x473 (= (ite (= (_ bv0 32) ?x718) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x460 (and $x436 $x807)))
 (let (($x568 (and $x460 $x587)))
 (let (($x496 (and $x568 $x805)))
 (let ((?x967 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x822 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x967))))
 (let (($x934 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x822)))
 (let (($x238 (and $x934 $x496)))
 (let (($x512 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x488 (=> $x512 $x238)))
 (let (($x856 (= $x512 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x645 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x308 (=> $x645 $x378)))
 (let (($x601 (= $x645 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x818 (and $x601 $x308)))
 (let (($x111 (and $x818 $x856)))
 (let (($x837 (and $x111 $x488)))
 (let (($x864 (= $x837 true)))
 (let (($x1015 (= $x864 true)))
 (let ((?x310 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x990 (= (_ bv0 3) ?x310)))
 (let (($x333 (= $x990 true)))
 (let (($x1005 (= $x333 true)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x892 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x705 (concat ?x327 (concat ?x28 ?x892))))
 (let ((?x598 (bvadd ?x705 (_ bv4 32))))
 (let ((?x704 (concat (select input.dst.llvm-mem (bvadd ?x598 (_ bv1 32))) (select input.dst.llvm-mem ?x598))))
 (let ((?x755 (concat (select input.dst.llvm-mem (bvadd ?x598 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x598 (_ bv2 32))) ?x704))))
 (let (($x26 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x755 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv1 32))) (select input.dst.llvm-mem ?x705))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv2 32))) ?x229))))
 (let (($x1051 (= input.spec-%var-l-1.2.1.2.0 ?x19)))
 (let (($x260 (and $x1051 $x26)))
 (let (($x350 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x710 (=> $x350 $x260)))
 (let ((?x1108 (ite (= (_ bv0 32) ?x705) (_ bv0 32) (_ bv1 32))))
 (let (($x600 (bvuge ?x1108 (_ bv1 32))))
 (let (($x756 (= $x350 $x600)))
 (let (($x454 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x780 (=> $x454 $x378)))
 (let (($x210 (= ?x1108 (_ bv0 32))))
 (let (($x631 (= $x454 $x210)))
 (let (($x181 (and $x631 $x780)))
 (let (($x409 (and $x181 $x756)))
 (let (($x535 (and $x409 $x710)))
 (let ((?x874 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x625 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x874)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x625)))
 (let (($x545 (= input.spec-%var-l-1.2.0 ?x203)))
 (let (($x272 (and $x545 $x535)))
 (let (($x593 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x64 (=> $x593 $x272)))
 (let ((?x728 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x680 (bvuge ?x728 (_ bv1 32))))
 (let (($x249 (= $x593 $x680)))
 (let (($x520 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x989 (=> $x520 $x378)))
 (let (($x533 (= ?x728 (_ bv0 32))))
 (let (($x770 (= $x520 $x533)))
 (let (($x970 (and $x770 $x989)))
 (let (($x394 (and $x970 $x249)))
 (let (($x50 (and $x394 $x64)))
 (let (($x303 (= $x50 true)))
 (let (($x328 (= $x303 true)))
 (let (($x292 (= $x328 true)))
 (let (($x557 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x755 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let (($x211 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x19)))
 (let (($x429 (and $x211 $x557)))
 (let (($x343 (=> $x367 $x429)))
 (let (($x687 (= $x367 $x600)))
 (let (($x366 (= $x473 $x210)))
 (let (($x1149 (and $x366 $x807)))
 (let (($x46 (and $x1149 $x687)))
 (let (($x653 (and $x46 $x343)))
 (let (($x329 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x203)))
 (let (($x85 (and $x329 $x653)))
 (let (($x965 (=> $x512 $x85)))
 (let (($x360 (= $x512 $x680)))
 (let (($x312 (= $x645 $x533)))
 (let (($x697 (and $x312 $x308)))
 (let (($x108 (and $x697 $x360)))
 (let (($x489 (and $x108 $x965)))
 (let (($x819 (= $x489 true)))
 (let (($x877 (= $x819 true)))
 (let (($x801 (= $x877 true)))
 (let (($x446 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x902 (= $x446 true)))
 (let (($x1150 (= $x902 true)))
 (let (($x426 (= $x1150 true)))
 (let ((?x635 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x635 (_ bv1 32))) (select input.dst.llvm-mem ?x635))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x635 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x635 (_ bv2 32))) ?x113))))
 (let ((?x769 (bvadd ?x189 (_ bv4 32))))
 (let ((?x765 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv1 32))) (select input.dst.llvm-mem ?x769))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv2 32))) ?x765))))
 (let (($x714 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x346 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x94))))
 (let (($x355 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x127)))
 (let (($x251 (and $x355 $x714)))
 (let (($x903 (=> $x367 $x251)))
 (let (($x71 (= $x367 (bvuge (ite (= (_ bv0 32) ?x189) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x681 (= $x473 (= (ite (= (_ bv0 32) ?x189) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x154 (and $x681 $x807)))
 (let (($x62 (and $x154 $x71)))
 (let (($x124 (and $x62 $x903)))
 (let ((?x835 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x798 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x116 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x461 (concat (select input.dst.llvm-mem ?x116) (concat ?x291 (concat ?x798 ?x835)))))
 (let (($x121 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x461)))
 (let (($x361 (and $x121 $x124)))
 (let (($x97 (=> $x512 $x361)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (= $x512 (bvuge ?x349 (_ bv1 32)))))
 (let (($x894 (= $x645 (= ?x349 (_ bv0 32)))))
 (let (($x193 (and $x894 $x308)))
 (let (($x300 (and $x193 $x119)))
 (let (($x160 (and $x300 $x97)))
 (let (($x196 (= $x160 true)))
 (let (($x163 (= $x196 true)))
 (let (($x727 (= $x163 true)))
 (let (($x371 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x610 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x683 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x610) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x610))))
 (let (($x215 (and true $x683)))
 (let (($x624 (and $x683 $x215)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x495 (= (bvand ?x748 (_ bv4294967292 32)) ?x748)))
 (let (($x84 (and $x495 $x721)))
 (let (($x741 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x748 (bvsub ?x748 (_ bv4 32))) (bvult ?x748 (bvsub ?x748 (_ bv4 32))))))
 (let (($x348 (and (and (and (and (and $x215 $x741) $x495) $x84) $x624) $x371)))
 (let (($x642 (= true $x348)))
 (let (($x652 (not $x731)))
 (let (($x650 (=> $x652 $x642)))
 (let (($x914 (= $x650 true)))
 (let (($x636 (= $x914 true)))
 (let (($x549 (= $x636 true)))
 (let (($x336 (= $x652 true)))
 (let (($x354 (= $x336 true)))
 (let (($x506 (= $x354 true)))
 (let (($x114 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x452 (= $x114 true)))
 (let (($x450 (= $x452 true)))
 (let ((?x722 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x711 (= (_ bv0 32) ?x722)))
 (let ((?x331 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1075 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x331)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (and $x145 $x1075)))
 (let (($x917 (and $x407 $x711)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x982 (and $x224 $x917)))
 (let (($x987 (= $x982 true)))
 (let (($x698 (= $x987 true)))
 (let (($x213 (= $x698 true)))
 (let (($x466 (and $x213 $x450)))
 (let (($x815 (and $x466 $x506)))
 (let (($x764 (and $x815 $x549)))
 (let (($x1002 (and $x764 $x727)))
 (let (($x527 (and $x1002 $x426)))
 (let (($x996 (and $x527 $x801)))
 (let (($x830 (and $x996 $x292)))
 (let (($x878 (and $x830 $x1005)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x583 (and $x23 $x878)))
 (let (($x164 (bvugt ?x748 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x748 (_ bv3 32))))
 (let (($x656 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x299 (=> (bvule ?x748 (bvsub (bvadd ?x748 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x656 $x164)))))))
 (let (($x123 (=> (and $x652 (bvule ?x748 (bvsub (bvadd ?x748 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x656 $x164)))))))
 (let (($x528 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x802 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x777 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x635 (_ bv1 32))) (or false (or false (and true (or $x802 $x528)))))))
 (let (($x16 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x635 (_ bv1 32)))) (or false (or false (and true (or $x802 $x528)))))))
 (let (($x316 (and $x16 $x123)))
 (let (($x826 (and $x316 $x583)))
 (let (($x870 (=> $x826 $x1015)))
 (not $x870))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x647 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd ?x647 (_ bv1 32))) (select input.dst.llvm-mem ?x647))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x647 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x647 (_ bv2 32))) ?x48))))
 (let ((?x79 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x992 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x503 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x858 (concat ?x341 (concat ?x503 (concat ?x992 ?x79)))))
 (let ((?x255 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x748 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv1 32))) (select input.dst.llvm-mem ?x748))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x748 (_ bv2 32))) ?x103))))
 (let ((?x908 (bvadd ?x605 (_ bv4 32))))
 (let ((?x603 (concat (select input.dst.llvm-mem (bvadd ?x908 (_ bv1 32))) (select input.dst.llvm-mem ?x908))))
 (let ((?x718 (concat (select input.dst.llvm-mem (bvadd ?x908 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x908 (_ bv2 32))) ?x603))))
 (let ((?x869 (bvadd ?x718 (_ bv4 32))))
 (let ((?x886 (concat (select input.dst.llvm-mem (bvadd ?x869 (_ bv1 32))) (select input.dst.llvm-mem ?x869))))
 (let ((?x1029 (concat (select input.dst.llvm-mem (bvadd ?x869 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x869 (_ bv2 32))) ?x886))))
 (let (($x1020 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1029 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let ((?x740 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv1 32))) (select input.dst.llvm-mem ?x718))))
 (let ((?x565 (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x718 (_ bv2 32))) ?x740))))
 (let (($x702 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x565)))
 (let (($x590 (and $x702 $x1020)))
 (let (($x367 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x805 (=> $x367 $x590)))
 (let (($x587 (= $x367 (bvuge (ite (= (_ bv0 32) ?x718) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x378 (= false false)))
 (let (($x473 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x807 (=> $x473 $x378)))
 (let (($x436 (= $x473 (= (ite (= (_ bv0 32) ?x718) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x460 (and $x436 $x807)))
 (let (($x568 (and $x460 $x587)))
 (let (($x496 (and $x568 $x805)))
 (let ((?x967 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x822 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x967))))
 (let (($x934 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x822)))
 (let (($x238 (and $x934 $x496)))
 (let (($x512 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x488 (=> $x512 $x238)))
 (let (($x856 (= $x512 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x645 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x308 (=> $x645 $x378)))
 (let (($x601 (= $x645 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x818 (and $x601 $x308)))
 (let (($x111 (and $x818 $x856)))
 (let (($x837 (and $x111 $x488)))
 (let (($x864 (= $x837 true)))
 (let (($x1015 (= $x864 true)))
 (let ((?x310 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x990 (= (_ bv0 3) ?x310)))
 (let (($x333 (= $x990 true)))
 (let (($x1005 (= $x333 true)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x892 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x705 (concat ?x327 (concat ?x28 ?x892))))
 (let ((?x598 (bvadd ?x705 (_ bv4 32))))
 (let ((?x704 (concat (select input.dst.llvm-mem (bvadd ?x598 (_ bv1 32))) (select input.dst.llvm-mem ?x598))))
 (let ((?x755 (concat (select input.dst.llvm-mem (bvadd ?x598 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x598 (_ bv2 32))) ?x704))))
 (let (($x26 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x755 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv1 32))) (select input.dst.llvm-mem ?x705))))
 (let ((?x19 (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x705 (_ bv2 32))) ?x229))))
 (let (($x1051 (= input.spec-%var-l-1.2.1.2.0 ?x19)))
 (let (($x260 (and $x1051 $x26)))
 (let (($x350 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x710 (=> $x350 $x260)))
 (let ((?x1108 (ite (= (_ bv0 32) ?x705) (_ bv0 32) (_ bv1 32))))
 (let (($x600 (bvuge ?x1108 (_ bv1 32))))
 (let (($x756 (= $x350 $x600)))
 (let (($x454 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x780 (=> $x454 $x378)))
 (let (($x210 (= ?x1108 (_ bv0 32))))
 (let (($x631 (= $x454 $x210)))
 (let (($x181 (and $x631 $x780)))
 (let (($x409 (and $x181 $x756)))
 (let (($x535 (and $x409 $x710)))
 (let ((?x874 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x625 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x874)))
 (let ((?x203 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x625)))
 (let (($x545 (= input.spec-%var-l-1.2.0 ?x203)))
 (let (($x272 (and $x545 $x535)))
 (let (($x593 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x64 (=> $x593 $x272)))
 (let ((?x728 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x680 (bvuge ?x728 (_ bv1 32))))
 (let (($x249 (= $x593 $x680)))
 (let (($x520 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x989 (=> $x520 $x378)))
 (let (($x533 (= ?x728 (_ bv0 32))))
 (let (($x770 (= $x520 $x533)))
 (let (($x970 (and $x770 $x989)))
 (let (($x394 (and $x970 $x249)))
 (let (($x50 (and $x394 $x64)))
 (let (($x303 (= $x50 true)))
 (let (($x328 (= $x303 true)))
 (let (($x292 (= $x328 true)))
 (let (($x557 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x755 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let (($x211 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x19)))
 (let (($x429 (and $x211 $x557)))
 (let (($x343 (=> $x367 $x429)))
 (let (($x687 (= $x367 $x600)))
 (let (($x366 (= $x473 $x210)))
 (let (($x1149 (and $x366 $x807)))
 (let (($x46 (and $x1149 $x687)))
 (let (($x653 (and $x46 $x343)))
 (let (($x329 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x203)))
 (let (($x85 (and $x329 $x653)))
 (let (($x965 (=> $x512 $x85)))
 (let (($x360 (= $x512 $x680)))
 (let (($x312 (= $x645 $x533)))
 (let (($x697 (and $x312 $x308)))
 (let (($x108 (and $x697 $x360)))
 (let (($x489 (and $x108 $x965)))
 (let (($x819 (= $x489 true)))
 (let (($x877 (= $x819 true)))
 (let (($x801 (= $x877 true)))
 (let (($x446 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x902 (= $x446 true)))
 (let (($x1150 (= $x902 true)))
 (let (($x426 (= $x1150 true)))
 (let ((?x635 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x113 (concat (select input.dst.llvm-mem (bvadd ?x635 (_ bv1 32))) (select input.dst.llvm-mem ?x635))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x635 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x635 (_ bv2 32))) ?x113))))
 (let ((?x769 (bvadd ?x189 (_ bv4 32))))
 (let ((?x765 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv1 32))) (select input.dst.llvm-mem ?x769))))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x769 (_ bv2 32))) ?x765))))
 (let (($x714 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x346 ?x255 false ?x858 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x10)))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x94))))
 (let (($x355 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x127)))
 (let (($x251 (and $x355 $x714)))
 (let (($x903 (=> $x367 $x251)))
 (let (($x71 (= $x367 (bvuge (ite (= (_ bv0 32) ?x189) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x681 (= $x473 (= (ite (= (_ bv0 32) ?x189) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x154 (and $x681 $x807)))
 (let (($x62 (and $x154 $x71)))
 (let (($x124 (and $x62 $x903)))
 (let ((?x835 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x798 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x116 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x461 (concat (select input.dst.llvm-mem ?x116) (concat ?x291 (concat ?x798 ?x835)))))
 (let (($x121 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x461)))
 (let (($x361 (and $x121 $x124)))
 (let (($x97 (=> $x512 $x361)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x349 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x119 (= $x512 (bvuge ?x349 (_ bv1 32)))))
 (let (($x894 (= $x645 (= ?x349 (_ bv0 32)))))
 (let (($x193 (and $x894 $x308)))
 (let (($x300 (and $x193 $x119)))
 (let (($x160 (and $x300 $x97)))
 (let (($x196 (= $x160 true)))
 (let (($x163 (= $x196 true)))
 (let (($x727 (= $x163 true)))
 (let (($x371 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x610 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x683 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x610) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x610))))
 (let (($x215 (and true $x683)))
 (let (($x624 (and $x683 $x215)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x495 (= (bvand ?x748 (_ bv4294967292 32)) ?x748)))
 (let (($x84 (and $x495 $x721)))
 (let (($x741 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x748 (bvsub ?x748 (_ bv4 32))) (bvult ?x748 (bvsub ?x748 (_ bv4 32))))))
 (let (($x348 (and (and (and (and (and $x215 $x741) $x495) $x84) $x624) $x371)))
 (let (($x642 (= true $x348)))
 (let (($x652 (not $x731)))
 (let (($x650 (=> $x652 $x642)))
 (let (($x914 (= $x650 true)))
 (let (($x636 (= $x914 true)))
 (let (($x549 (= $x636 true)))
 (let (($x336 (= $x652 true)))
 (let (($x354 (= $x336 true)))
 (let (($x506 (= $x354 true)))
 (let (($x114 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x452 (= $x114 true)))
 (let (($x450 (= $x452 true)))
 (let ((?x722 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x711 (= (_ bv0 32) ?x722)))
 (let ((?x331 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1075 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x331)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x407 (and $x145 $x1075)))
 (let (($x917 (and $x407 $x711)))
 (let (($x224 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x982 (and $x224 $x917)))
 (let (($x987 (= $x982 true)))
 (let (($x698 (= $x987 true)))
 (let (($x213 (= $x698 true)))
 (let (($x466 (and $x213 $x450)))
 (let (($x815 (and $x466 $x506)))
 (let (($x764 (and $x815 $x549)))
 (let (($x1002 (and $x764 $x727)))
 (let (($x527 (and $x1002 $x426)))
 (let (($x996 (and $x527 $x801)))
 (let (($x830 (and $x996 $x292)))
 (let (($x878 (and $x830 $x1005)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x583 (and $x23 $x878)))
 (let (($x164 (bvugt ?x748 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x748 (_ bv3 32))))
 (let (($x656 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x299 (=> (bvule ?x748 (bvsub (bvadd ?x748 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x656 $x164)))))))
 (let (($x123 (=> (and $x652 (bvule ?x748 (bvsub (bvadd ?x748 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x656 $x164)))))))
 (let (($x528 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x802 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x116)))
 (let (($x777 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x635 (_ bv1 32))) (or false (or false (and true (or $x802 $x528)))))))
 (let (($x16 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x635 (_ bv1 32)))) (or false (or false (and true (or $x802 $x528)))))))
 (let (($x316 (and $x16 $x123)))
 (let (($x826 (and $x316 $x583)))
 (let (($x870 (=> $x826 $x1015)))
 (not $x870))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!52))
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000002) #x00
      #x00)))))))))))))))))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      true
      true))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!54))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfffffff0)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfffffff3)
  (define-fun k!54 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #xfffffff8)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #xfffffff8)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x433 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x829 (concat (select input.dst.llvm-mem (bvadd ?x433 (_ bv1 32))) (select input.dst.llvm-mem ?x433))))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x433 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x433 (_ bv2 32))) ?x829))))
 (let ((?x762 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x813 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x606 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x40 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x78))))
 (let ((?x540 (bvadd ?x605 (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv1 32))) (select input.dst.llvm-mem ?x540))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv2 32))) ?x250))))
 (let ((?x510 (bvadd ?x820 (_ bv4 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem ?x510))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv2 32))) ?x234))))
 (let (($x592 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 (concat ?x606 (concat ?x813 (concat ?x96 ?x762))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x467 ?x173 false)))
 (let (($x618 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x484 (=> $x618 $x592)))
 (let (($x599 (= $x618 (bvuge (ite (= (_ bv0 32) ?x118) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x45 (= false false)))
 (let (($x1003 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x38 (=> $x1003 $x45)))
 (let (($x827 (= $x1003 (= (ite (= (_ bv0 32) ?x118) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x973 (and $x827 $x38)))
 (let (($x879 (and $x973 $x599)))
 (let (($x49 (and $x879 $x484)))
 (let ((?x1078 (concat (select input.dst.llvm-mem (bvadd ?x820 (_ bv1 32))) (select input.dst.llvm-mem ?x820))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x820 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x820 (_ bv2 32))) ?x1078))))
 (let (($x792 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x448)))
 (let (($x617 (and $x792 $x49)))
 (let (($x26 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x192 (=> $x26 $x617)))
 (let (($x981 (= $x26 (bvuge (ite (= (_ bv0 32) ?x820) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x694 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x267 (=> $x694 $x45)))
 (let (($x132 (= $x694 (= (ite (= (_ bv0 32) ?x820) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x522 (and $x132 $x267)))
 (let (($x779 (and $x522 $x981)))
 (let (($x231 (and $x779 $x192)))
 (let ((?x885 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x941 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x885))))
 (let (($x431 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x941)))
 (let (($x105 (and $x431 $x231)))
 (let (($x147 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x823 (=> $x147 $x105)))
 (let (($x936 (= $x147 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x564 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x268 (=> $x564 $x45)))
 (let (($x174 (= $x564 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x853 (and $x174 $x268)))
 (let (($x155 (and $x853 $x936)))
 (let (($x112 (and $x155 $x823)))
 (let (($x183 (= $x112 true)))
 (let (($x88 (= $x183 true)))
 (let ((?x912 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x806 (= (_ bv0 3) ?x912)))
 (let (($x607 (= $x806 true)))
 (let (($x953 (= $x607 true)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x186 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x551 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x551 (concat ?x177 ?x186))))
 (let ((?x939 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x999 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x939))))
 (let (($x55 (= input.spec-%var-l-1.2.1.2.0 ?x999)))
 (let (($x60 (and $x55 true)))
 (let (($x334 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x725 (=> $x334 $x60)))
 (let ((?x1107 (ite (= (_ bv0 32) ?x115) (_ bv0 32) (_ bv1 32))))
 (let (($x884 (bvuge ?x1107 (_ bv1 32))))
 (let (($x212 (= $x334 $x884)))
 (let (($x561 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x988 (=> $x561 $x45)))
 (let (($x139 (= ?x1107 (_ bv0 32))))
 (let (($x264 (= $x561 $x139)))
 (let (($x532 (and $x264 $x988)))
 (let (($x342 (and $x532 $x212)))
 (let (($x423 (and $x342 $x725)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x107)))
 (let ((?x787 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x317)))
 (let (($x498 (= input.spec-%var-l-1.2.0 ?x787)))
 (let (($x951 (and $x498 $x423)))
 (let (($x582 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x584 (=> $x582 $x951)))
 (let ((?x386 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x558 (bvuge ?x386 (_ bv1 32))))
 (let (($x185 (= $x582 $x558)))
 (let (($x221 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x491 (=> $x221 $x45)))
 (let (($x686 (= ?x386 (_ bv0 32))))
 (let (($x761 (= $x221 $x686)))
 (let (($x906 (and $x761 $x491)))
 (let (($x634 (and $x906 $x185)))
 (let (($x747 (and $x634 $x584)))
 (let (($x34 (= $x747 true)))
 (let (($x848 (= $x34 true)))
 (let (($x956 (= $x848 true)))
 (let (($x289 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x999)))
 (let (($x969 (and $x289 true)))
 (let (($x102 (=> $x26 $x969)))
 (let (($x555 (= $x26 $x884)))
 (let (($x753 (= $x694 $x139)))
 (let (($x462 (and $x753 $x267)))
 (let (($x811 (and $x462 $x555)))
 (let (($x439 (and $x811 $x102)))
 (let (($x443 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x787)))
 (let (($x235 (and $x443 $x439)))
 (let (($x803 (=> $x147 $x235)))
 (let (($x1001 (= $x147 $x558)))
 (let (($x539 (= $x564 $x686)))
 (let (($x790 (and $x539 $x268)))
 (let (($x1113 (and $x790 $x1001)))
 (let (($x730 (and $x1113 $x803)))
 (let (($x222 (= $x730 true)))
 (let (($x261 (= $x222 true)))
 (let (($x1111 (= $x261 true)))
 (let (($x873 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x890 (= $x873 true)))
 (let (($x886 (= $x890 true)))
 (let (($x925 (= $x886 true)))
 (let ((?x905 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x653 (concat (select input.dst.llvm-mem (bvadd ?x905 (_ bv1 32))) (select input.dst.llvm-mem ?x905))))
 (let ((?x801 (concat (select input.dst.llvm-mem (bvadd ?x905 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x905 (_ bv2 32))) ?x653))))
 (let ((?x688 (concat (select input.dst.llvm-mem (bvadd ?x801 (_ bv1 32))) (select input.dst.llvm-mem ?x801))))
 (let ((?x1021 (concat (select input.dst.llvm-mem (bvadd ?x801 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x801 (_ bv2 32))) ?x688))))
 (let (($x703 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1021)))
 (let (($x663 (and $x703 true)))
 (let (($x568 (=> $x26 $x663)))
 (let (($x1051 (= $x26 (bvuge (ite (= (_ bv0 32) ?x801) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x276 (= $x694 (= (ite (= (_ bv0 32) ?x801) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x755 (and $x276 $x267)))
 (let (($x975 (and $x755 $x1051)))
 (let (($x98 (and $x975 $x568)))
 (let ((?x533 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x697 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x897 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x287 (concat (select input.dst.llvm-mem ?x897) (concat ?x108 (concat ?x697 ?x533)))))
 (let (($x141 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x287)))
 (let (($x460 (and $x141 $x98)))
 (let (($x782 (=> $x147 $x460)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x769 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x578 (= $x147 (bvuge ?x769 (_ bv1 32)))))
 (let (($x814 (= $x564 (= ?x769 (_ bv0 32)))))
 (let (($x679 (and $x814 $x268)))
 (let (($x341 (and $x679 $x578)))
 (let (($x720 (and $x341 $x782)))
 (let (($x587 (= $x720 true)))
 (let (($x161 (= $x587 true)))
 (let (($x81 (= $x161 true)))
 (let (($x666 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x910 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x860 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x910) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x910))))
 (let (($x89 (and true $x860)))
 (let (($x322 (and $x860 $x89)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x388 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x84 (and $x388 $x721)))
 (let (($x556 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x650 (and (and (and (and (and $x89 $x556) $x388) $x84) $x322) $x666)))
 (let (($x914 (= true $x650)))
 (let (($x652 (not $x731)))
 (let (($x636 (=> $x652 $x914)))
 (let (($x549 (= $x636 true)))
 (let (($x764 (= $x549 true)))
 (let (($x616 (= $x764 true)))
 (let (($x506 (= $x652 true)))
 (let (($x815 (= $x506 true)))
 (let (($x324 (= $x815 true)))
 (let (($x450 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x466 (= $x450 true)))
 (let (($x336 (= $x466 true)))
 (let ((?x917 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x982 (= (_ bv0 32) ?x917)))
 (let ((?x407 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x722 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x407)))
 (let (($x1075 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x711 (and $x1075 $x722)))
 (let (($x987 (and $x711 $x982)))
 (let (($x331 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x698 (and $x331 $x987)))
 (let (($x213 (= $x698 true)))
 (let (($x220 (= $x213 true)))
 (let (($x114 (= $x220 true)))
 (let (($x354 (and $x114 $x336)))
 (let (($x610 (and $x354 $x324)))
 (let (($x645 (and $x610 $x616)))
 (let (($x1019 (and $x645 $x81)))
 (let (($x1029 (and $x1019 $x925)))
 (let (($x339 (and $x1029 $x1111)))
 (let (($x270 (and $x339 $x956)))
 (let (($x576 (and $x270 $x953)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x29 (and $x224 $x576)))
 (let (($x849 (bvugt ?x40 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x40 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x23 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x849)))))))
 (let (($x693 (=> (and $x652 (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x143 $x849)))))))
 (let (($x15 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x897)))
 (let (($x1151 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x905 (_ bv1 32))) (or false (or false (and true (or $x129 $x15)))))))
 (let (($x5 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x905 (_ bv1 32)))) (or false (or false (and true (or $x129 $x15)))))))
 (let (($x611 (and $x5 $x693)))
 (let (($x838 (and $x611 $x29)))
 (let (($x749 (=> $x838 $x88)))
 (not $x749)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x433 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x829 (concat (select input.dst.llvm-mem (bvadd ?x433 (_ bv1 32))) (select input.dst.llvm-mem ?x433))))
 (let ((?x467 (concat (select input.dst.llvm-mem (bvadd ?x433 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x433 (_ bv2 32))) ?x829))))
 (let ((?x762 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x813 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x606 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x40 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv1 32))) (select input.dst.llvm-mem ?x40))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x40 (_ bv2 32))) ?x78))))
 (let ((?x540 (bvadd ?x605 (_ bv4 32))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv1 32))) (select input.dst.llvm-mem ?x540))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x540 (_ bv2 32))) ?x250))))
 (let ((?x510 (bvadd ?x820 (_ bv4 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv1 32))) (select input.dst.llvm-mem ?x510))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x510 (_ bv2 32))) ?x234))))
 (let (($x592 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x118 (concat ?x606 (concat ?x813 (concat ?x96 ?x762))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x467 ?x173 false)))
 (let (($x618 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x484 (=> $x618 $x592)))
 (let (($x599 (= $x618 (bvuge (ite (= (_ bv0 32) ?x118) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x45 (= false false)))
 (let (($x1003 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x38 (=> $x1003 $x45)))
 (let (($x827 (= $x1003 (= (ite (= (_ bv0 32) ?x118) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x973 (and $x827 $x38)))
 (let (($x879 (and $x973 $x599)))
 (let (($x49 (and $x879 $x484)))
 (let ((?x1078 (concat (select input.dst.llvm-mem (bvadd ?x820 (_ bv1 32))) (select input.dst.llvm-mem ?x820))))
 (let ((?x448 (concat (select input.dst.llvm-mem (bvadd ?x820 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x820 (_ bv2 32))) ?x1078))))
 (let (($x792 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x448)))
 (let (($x617 (and $x792 $x49)))
 (let (($x26 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x192 (=> $x26 $x617)))
 (let (($x981 (= $x26 (bvuge (ite (= (_ bv0 32) ?x820) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x694 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x267 (=> $x694 $x45)))
 (let (($x132 (= $x694 (= (ite (= (_ bv0 32) ?x820) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x522 (and $x132 $x267)))
 (let (($x779 (and $x522 $x981)))
 (let (($x231 (and $x779 $x192)))
 (let ((?x885 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x941 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x885))))
 (let (($x431 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x941)))
 (let (($x105 (and $x431 $x231)))
 (let (($x147 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x823 (=> $x147 $x105)))
 (let (($x936 (= $x147 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x564 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x268 (=> $x564 $x45)))
 (let (($x174 (= $x564 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x853 (and $x174 $x268)))
 (let (($x155 (and $x853 $x936)))
 (let (($x112 (and $x155 $x823)))
 (let (($x183 (= $x112 true)))
 (let (($x88 (= $x183 true)))
 (let ((?x912 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x806 (= (_ bv0 3) ?x912)))
 (let (($x607 (= $x806 true)))
 (let (($x953 (= $x607 true)))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x186 (concat ?x44 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x551 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x115 (concat ?x551 (concat ?x177 ?x186))))
 (let ((?x939 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x999 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x939))))
 (let (($x55 (= input.spec-%var-l-1.2.1.2.0 ?x999)))
 (let (($x60 (and $x55 true)))
 (let (($x334 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x725 (=> $x334 $x60)))
 (let ((?x1107 (ite (= (_ bv0 32) ?x115) (_ bv0 32) (_ bv1 32))))
 (let (($x884 (bvuge ?x1107 (_ bv1 32))))
 (let (($x212 (= $x334 $x884)))
 (let (($x561 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x988 (=> $x561 $x45)))
 (let (($x139 (= ?x1107 (_ bv0 32))))
 (let (($x264 (= $x561 $x139)))
 (let (($x532 (and $x264 $x988)))
 (let (($x342 (and $x532 $x212)))
 (let (($x423 (and $x342 $x725)))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x107)))
 (let ((?x787 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x317)))
 (let (($x498 (= input.spec-%var-l-1.2.0 ?x787)))
 (let (($x951 (and $x498 $x423)))
 (let (($x582 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x584 (=> $x582 $x951)))
 (let ((?x386 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x558 (bvuge ?x386 (_ bv1 32))))
 (let (($x185 (= $x582 $x558)))
 (let (($x221 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x491 (=> $x221 $x45)))
 (let (($x686 (= ?x386 (_ bv0 32))))
 (let (($x761 (= $x221 $x686)))
 (let (($x906 (and $x761 $x491)))
 (let (($x634 (and $x906 $x185)))
 (let (($x747 (and $x634 $x584)))
 (let (($x34 (= $x747 true)))
 (let (($x848 (= $x34 true)))
 (let (($x956 (= $x848 true)))
 (let (($x289 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x999)))
 (let (($x969 (and $x289 true)))
 (let (($x102 (=> $x26 $x969)))
 (let (($x555 (= $x26 $x884)))
 (let (($x753 (= $x694 $x139)))
 (let (($x462 (and $x753 $x267)))
 (let (($x811 (and $x462 $x555)))
 (let (($x439 (and $x811 $x102)))
 (let (($x443 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x787)))
 (let (($x235 (and $x443 $x439)))
 (let (($x803 (=> $x147 $x235)))
 (let (($x1001 (= $x147 $x558)))
 (let (($x539 (= $x564 $x686)))
 (let (($x790 (and $x539 $x268)))
 (let (($x1113 (and $x790 $x1001)))
 (let (($x730 (and $x1113 $x803)))
 (let (($x222 (= $x730 true)))
 (let (($x261 (= $x222 true)))
 (let (($x1111 (= $x261 true)))
 (let (($x873 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x890 (= $x873 true)))
 (let (($x886 (= $x890 true)))
 (let (($x925 (= $x886 true)))
 (let ((?x905 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x653 (concat (select input.dst.llvm-mem (bvadd ?x905 (_ bv1 32))) (select input.dst.llvm-mem ?x905))))
 (let ((?x801 (concat (select input.dst.llvm-mem (bvadd ?x905 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x905 (_ bv2 32))) ?x653))))
 (let ((?x688 (concat (select input.dst.llvm-mem (bvadd ?x801 (_ bv1 32))) (select input.dst.llvm-mem ?x801))))
 (let ((?x1021 (concat (select input.dst.llvm-mem (bvadd ?x801 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x801 (_ bv2 32))) ?x688))))
 (let (($x703 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1021)))
 (let (($x663 (and $x703 true)))
 (let (($x568 (=> $x26 $x663)))
 (let (($x1051 (= $x26 (bvuge (ite (= (_ bv0 32) ?x801) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x276 (= $x694 (= (ite (= (_ bv0 32) ?x801) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x755 (and $x276 $x267)))
 (let (($x975 (and $x755 $x1051)))
 (let (($x98 (and $x975 $x568)))
 (let ((?x533 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x697 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x897 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x287 (concat (select input.dst.llvm-mem ?x897) (concat ?x108 (concat ?x697 ?x533)))))
 (let (($x141 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x287)))
 (let (($x460 (and $x141 $x98)))
 (let (($x782 (=> $x147 $x460)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x769 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x578 (= $x147 (bvuge ?x769 (_ bv1 32)))))
 (let (($x814 (= $x564 (= ?x769 (_ bv0 32)))))
 (let (($x679 (and $x814 $x268)))
 (let (($x341 (and $x679 $x578)))
 (let (($x720 (and $x341 $x782)))
 (let (($x587 (= $x720 true)))
 (let (($x161 (= $x587 true)))
 (let (($x81 (= $x161 true)))
 (let (($x666 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x910 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x860 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x910) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x910))))
 (let (($x89 (and true $x860)))
 (let (($x322 (and $x860 $x89)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x388 (= (bvand ?x40 (_ bv4294967292 32)) ?x40)))
 (let (($x84 (and $x388 $x721)))
 (let (($x556 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x40 (bvsub ?x40 (_ bv4 32))) (bvult ?x40 (bvsub ?x40 (_ bv4 32))))))
 (let (($x650 (and (and (and (and (and $x89 $x556) $x388) $x84) $x322) $x666)))
 (let (($x914 (= true $x650)))
 (let (($x652 (not $x731)))
 (let (($x636 (=> $x652 $x914)))
 (let (($x549 (= $x636 true)))
 (let (($x764 (= $x549 true)))
 (let (($x616 (= $x764 true)))
 (let (($x506 (= $x652 true)))
 (let (($x815 (= $x506 true)))
 (let (($x324 (= $x815 true)))
 (let (($x450 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x466 (= $x450 true)))
 (let (($x336 (= $x466 true)))
 (let ((?x917 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x982 (= (_ bv0 32) ?x917)))
 (let ((?x407 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x722 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x407)))
 (let (($x1075 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x711 (and $x1075 $x722)))
 (let (($x987 (and $x711 $x982)))
 (let (($x331 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x698 (and $x331 $x987)))
 (let (($x213 (= $x698 true)))
 (let (($x220 (= $x213 true)))
 (let (($x114 (= $x220 true)))
 (let (($x354 (and $x114 $x336)))
 (let (($x610 (and $x354 $x324)))
 (let (($x645 (and $x610 $x616)))
 (let (($x1019 (and $x645 $x81)))
 (let (($x1029 (and $x1019 $x925)))
 (let (($x339 (and $x1029 $x1111)))
 (let (($x270 (and $x339 $x956)))
 (let (($x576 (and $x270 $x953)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x29 (and $x224 $x576)))
 (let (($x849 (bvugt ?x40 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x40 (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x23 (=> (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x849)))))))
 (let (($x693 (=> (and $x652 (bvule ?x40 (bvsub (bvadd ?x40 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x143 $x849)))))))
 (let (($x15 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x897)))
 (let (($x1151 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x905 (_ bv1 32))) (or false (or false (and true (or $x129 $x15)))))))
 (let (($x5 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x905 (_ bv1 32)))) (or false (or false (and true (or $x129 $x15)))))))
 (let (($x611 (and $x5 $x693)))
 (let (($x838 (and $x611 $x29)))
 (let (($x749 (=> $x838 $x88)))
 (not $x749)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_10775 (_ BitVec 32)) (BOUND_VARIABLE_10776 (_ BitVec 32)) (BOUND_VARIABLE_10777 (_ BitVec 32)) (BOUND_VARIABLE_10778 (_ BitVec 32)) (BOUND_VARIABLE_10779 (_ BitVec 32)) (BOUND_VARIABLE_10780 (_ BitVec 32)) (BOUND_VARIABLE_10781 Bool) (BOUND_VARIABLE_10782 (_ BitVec 32)) (BOUND_VARIABLE_10783 (_ BitVec 32)) (BOUND_VARIABLE_10784 (_ BitVec 32)) (BOUND_VARIABLE_10785 (_ BitVec 32)) (BOUND_VARIABLE_10786 (_ BitVec 32)) (BOUND_VARIABLE_10787 (_ BitVec 32)) (BOUND_VARIABLE_10788 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store (store (store (store (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv56344992 32) (_ bv255 8)) (_ bv1024 32) (_ bv255 8)) (_ bv1025 32) (_ bv255 8)) (_ bv1026 32) (_ bv255 8)) (_ bv1027 32) (_ bv255 8)) (_ bv56344993 32) (_ bv255 8)) (_ bv56344994 32) (_ bv255 8)) (_ bv56344995 32) (_ bv255 8)))
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv56344992 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1024 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv4294967295 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2499500328 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2499500328 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2499500331 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x393))))
 (let ((?x805 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x449 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x590 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x488 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x837 (concat ?x488 (concat ?x590 (concat ?x449 ?x805)))))
 (let ((?x604 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x391 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv1 32))) (select input.dst.llvm-mem ?x391))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv2 32))) ?x236))))
 (let ((?x170 (bvadd ?x605 (_ bv4 32))))
 (let ((?x836 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x836))))
 (let ((?x458 (bvadd ?x529 (_ bv4 32))))
 (let ((?x773 (concat (select input.dst.llvm-mem (bvadd ?x458 (_ bv1 32))) (select input.dst.llvm-mem ?x458))))
 (let ((?x1023 (concat (select input.dst.llvm-mem (bvadd ?x458 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x458 (_ bv2 32))) ?x773))))
 (let ((?x1216 (bvadd ?x1023 (_ bv4 32))))
 (let ((?x1220 (concat (select input.dst.llvm-mem (bvadd ?x1216 (_ bv1 32))) (select input.dst.llvm-mem ?x1216))))
 (let ((?x1226 (concat (select input.dst.llvm-mem (bvadd ?x1216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1216 (_ bv2 32))) ?x1220))))
 (let (($x1194 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1226 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let ((?x1120 (concat (select input.dst.llvm-mem (bvadd ?x1023 (_ bv1 32))) (select input.dst.llvm-mem ?x1023))))
 (let ((?x1135 (concat (select input.dst.llvm-mem (bvadd ?x1023 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1023 (_ bv2 32))) ?x1120))))
 (let (($x1136 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x1135)))
 (let (($x1167 (and $x1136 $x1194)))
 (let (($x1032 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1170 (=> $x1032 $x1167)))
 (let (($x1039 (= $x1032 (bvuge (ite (= (_ bv0 32) ?x1023) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x81 (= false false)))
 (let (($x1009 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x580 (=> $x1009 $x81)))
 (let (($x696 (= $x1009 (= (ite (= (_ bv0 32) ?x1023) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x43 (and $x696 $x580)))
 (let (($x1041 (and $x43 $x1039)))
 (let (($x1171 (and $x1041 $x1170)))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv1 32))) (select input.dst.llvm-mem ?x529))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv2 32))) ?x577))))
 (let (($x499 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x202)))
 (let (($x1168 (and $x499 $x1171)))
 (let (($x981 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1169 (=> $x981 $x1168)))
 (let (($x674 (= $x981 (bvuge (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x980 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x369 (=> $x980 $x81)))
 (let (($x156 (= $x980 (= (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x655 (and $x156 $x369)))
 (let (($x817 (and $x655 $x674)))
 (let (($x1182 (and $x817 $x1169)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x924 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x425))))
 (let (($x828 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x924)))
 (let (($x1190 (and $x828 $x1182)))
 (let (($x379 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1191 (=> $x379 $x1190)))
 (let (($x585 (= $x379 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x782 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1019 (=> $x782 $x81)))
 (let (($x597 (= $x782 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x542 (and $x597 $x1019)))
 (let (($x1077 (and $x542 $x585)))
 (let (($x1187 (and $x1077 $x1191)))
 (let (($x1188 (= $x1187 true)))
 (let (($x1184 (= $x1188 true)))
 (let ((?x665 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x313 (= (_ bv0 3) ?x665)))
 (let (($x944 (= $x313 true)))
 (let (($x376 (= $x944 true)))
 (let ((?x789 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1110 (concat ?x789 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x575 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1000 (concat ?x575 (concat ?x351 ?x1110))))
 (let ((?x934 (bvadd ?x1000 (_ bv4 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x934 (_ bv1 32))) (select input.dst.llvm-mem ?x934))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x934 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x934 (_ bv2 32))) ?x90))))
 (let (($x328 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x302 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x1000 (_ bv1 32))) (select input.dst.llvm-mem ?x1000))))
 (let ((?x690 (concat (select input.dst.llvm-mem (bvadd ?x1000 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1000 (_ bv2 32))) ?x274))))
 (let (($x780 (= input.spec-%var-l-1.2.1.2.0 ?x690)))
 (let (($x756 (and $x780 $x328)))
 (let (($x976 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x249 (=> $x976 $x756)))
 (let ((?x167 (ite (= (_ bv0 32) ?x1000) (_ bv0 32) (_ bv1 32))))
 (let (($x94 (bvuge ?x167 (_ bv1 32))))
 (let (($x977 (= $x976 $x94)))
 (let (($x718 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x117 (=> $x718 $x81)))
 (let (($x290 (= ?x167 (_ bv0 32))))
 (let (($x252 (= $x718 $x290)))
 (let (($x1011 (and $x252 $x117)))
 (let (($x305 (and $x1011 $x977)))
 (let (($x352 (and $x305 $x249)))
 (let ((?x724 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x724)))
 (let ((?x523 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x481)))
 (let (($x327 (= input.spec-%var-l-1.2.0 ?x523)))
 (let (($x970 (and $x327 $x352)))
 (let (($x191 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x394 (=> $x191 $x970)))
 (let ((?x1152 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x707 (bvuge ?x1152 (_ bv1 32))))
 (let (($x1150 (= $x191 $x707)))
 (let (($x573 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x203 (=> $x573 $x81)))
 (let (($x475 (= ?x1152 (_ bv0 32))))
 (let (($x625 (= $x573 $x475)))
 (let (($x446 (and $x625 $x203)))
 (let (($x727 (and $x446 $x1150)))
 (let (($x818 (and $x727 $x394)))
 (let (($x990 (= $x818 true)))
 (let (($x333 (= $x990 true)))
 (let (($x601 (= $x333 true)))
 (let (($x28 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x302 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let (($x361 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x690)))
 (let (($x171 (and $x361 $x28)))
 (let (($x163 (=> $x981 $x171)))
 (let (($x54 (= $x981 $x94)))
 (let (($x157 (= $x980 $x290)))
 (let (($x630 (and $x157 $x369)))
 (let (($x189 (and $x630 $x54)))
 (let (($x527 (and $x189 $x163)))
 (let (($x744 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x523)))
 (let (($x385 (and $x744 $x527)))
 (let (($x902 (=> $x379 $x385)))
 (let (($x639 (= $x379 $x707)))
 (let (($x732 (= $x782 $x475)))
 (let (($x514 (and $x732 $x1019)))
 (let (($x831 (and $x514 $x639)))
 (let (($x705 (and $x831 $x902)))
 (let (($x366 (= $x705 true)))
 (let (($x687 (= $x366 true)))
 (let (($x1108 (= $x687 true)))
 (let (($x345 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x798 (= $x345 true)))
 (let (($x119 (= $x798 true)))
 (let (($x729 (= $x119 true)))
 (let ((?x802 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv1 32))) (select input.dst.llvm-mem ?x802))))
 (let ((?x615 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv2 32))) ?x155))))
 (let ((?x781 (bvadd ?x615 (_ bv4 32))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x781 (_ bv1 32))) (select input.dst.llvm-mem ?x781))))
 (let ((?x870 (concat (select input.dst.llvm-mem (bvadd ?x781 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x781 (_ bv2 32))) ?x51))))
 (let (($x1158 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x870 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem ?x615))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv2 32))) ?x592))))
 (let (($x232 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x105)))
 (let (($x894 (and $x232 $x1158)))
 (let (($x378 (=> $x981 $x894)))
 (let (($x522 (= $x981 (bvuge (ite (= (_ bv0 32) ?x615) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x838 (= $x980 (= (ite (= (_ bv0 32) ?x615) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x174 (and $x838 $x369)))
 (let (($x974 (and $x174 $x522)))
 (let (($x937 (and $x974 $x378)))
 (let ((?x850 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x939 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x893 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x439 (concat (select input.dst.llvm-mem ?x893) (concat ?x289 (concat ?x939 ?x850)))))
 (let (($x235 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x439)))
 (let (($x503 (and $x235 $x937)))
 (let (($x471 (=> $x379 $x503)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x720 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x686 (= $x379 (bvuge ?x720 (_ bv1 32)))))
 (let (($x161 (= $x782 (= ?x720 (_ bv0 32)))))
 (let (($x865 (and $x161 $x1019)))
 (let (($x539 (and $x865 $x686)))
 (let (($x548 (and $x539 $x471)))
 (let (($x291 (= $x548 true)))
 (let (($x835 (= $x291 true)))
 (let (($x300 (= $x835 true)))
 (let (($x642 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x683 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x683) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x683))))
 (let (($x353 (and true $x187)))
 (let (($x348 (and $x187 $x353)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x371 (= (bvand ?x391 (_ bv4294967292 32)) ?x391)))
 (let (($x84 (and $x371 $x721)))
 (let (($x671 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x391 (bvsub ?x391 (_ bv4 32))) (bvult ?x391 (bvsub ?x391 (_ bv4 32))))))
 (let (($x636 (and (and (and (and (and $x353 $x671) $x371) $x84) $x348) $x642)))
 (let (($x549 (= true $x636)))
 (let (($x652 (not $x731)))
 (let (($x764 (=> $x652 $x549)))
 (let (($x616 (= $x764 true)))
 (let (($x645 (= $x616 true)))
 (let (($x497 (= $x645 true)))
 (let (($x324 (= $x652 true)))
 (let (($x610 (= $x324 true)))
 (let (($x521 (= $x610 true)))
 (let (($x336 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x354 (= $x336 true)))
 (let (($x506 (= $x354 true)))
 (let ((?x987 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x698 (= (_ bv0 32) ?x987)))
 (let ((?x711 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x917 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x711)))
 (let (($x722 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x982 (and $x722 $x917)))
 (let (($x213 (and $x982 $x698)))
 (let (($x407 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x407 $x213)))
 (let (($x114 (= $x220 true)))
 (let (($x452 (= $x114 true)))
 (let (($x450 (= $x452 true)))
 (let (($x815 (and $x450 $x506)))
 (let (($x910 (and $x815 $x521)))
 (let (($x564 (and $x910 $x497)))
 (let (($x428 (and $x564 $x300)))
 (let (($x32 (and $x428 $x729)))
 (let (($x210 (and $x32 $x1108)))
 (let (($x856 (and $x210 $x601)))
 (let (($x830 (and $x856 $x376)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x826 (and $x331 $x830)))
 (let (($x123 (bvugt ?x391 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x391 (_ bv3 32))))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x224 (=> (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x299 $x123)))))))
 (let (($x168 (=> (and $x652 (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x299 $x123)))))))
 (let (($x16 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x777 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x893)))
 (let (($x164 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x802 (_ bv1 32))) (or false (or false (and true (or $x777 $x16)))))))
 (let (($x116 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x802 (_ bv1 32)))) (or false (or false (and true (or $x777 $x16)))))))
 (let (($x734 (and $x116 $x168)))
 (let (($x111 (and $x734 $x826)))
 (let (($x1185 (=> $x111 $x1184)))
 (not $x1185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x238 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x393))))
 (let ((?x805 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x449 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x590 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x488 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x837 (concat ?x488 (concat ?x590 (concat ?x449 ?x805)))))
 (let ((?x604 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x391 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv1 32))) (select input.dst.llvm-mem ?x391))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x391 (_ bv2 32))) ?x236))))
 (let ((?x170 (bvadd ?x605 (_ bv4 32))))
 (let ((?x836 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv1 32))) (select input.dst.llvm-mem ?x170))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x170 (_ bv2 32))) ?x836))))
 (let ((?x458 (bvadd ?x529 (_ bv4 32))))
 (let ((?x773 (concat (select input.dst.llvm-mem (bvadd ?x458 (_ bv1 32))) (select input.dst.llvm-mem ?x458))))
 (let ((?x1023 (concat (select input.dst.llvm-mem (bvadd ?x458 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x458 (_ bv2 32))) ?x773))))
 (let ((?x1216 (bvadd ?x1023 (_ bv4 32))))
 (let ((?x1220 (concat (select input.dst.llvm-mem (bvadd ?x1216 (_ bv1 32))) (select input.dst.llvm-mem ?x1216))))
 (let ((?x1226 (concat (select input.dst.llvm-mem (bvadd ?x1216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1216 (_ bv2 32))) ?x1220))))
 (let (($x1194 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1226 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let ((?x1120 (concat (select input.dst.llvm-mem (bvadd ?x1023 (_ bv1 32))) (select input.dst.llvm-mem ?x1023))))
 (let ((?x1135 (concat (select input.dst.llvm-mem (bvadd ?x1023 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1023 (_ bv2 32))) ?x1120))))
 (let (($x1136 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x1135)))
 (let (($x1167 (and $x1136 $x1194)))
 (let (($x1032 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1170 (=> $x1032 $x1167)))
 (let (($x1039 (= $x1032 (bvuge (ite (= (_ bv0 32) ?x1023) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x81 (= false false)))
 (let (($x1009 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x580 (=> $x1009 $x81)))
 (let (($x696 (= $x1009 (= (ite (= (_ bv0 32) ?x1023) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x43 (and $x696 $x580)))
 (let (($x1041 (and $x43 $x1039)))
 (let (($x1171 (and $x1041 $x1170)))
 (let ((?x577 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv1 32))) (select input.dst.llvm-mem ?x529))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv2 32))) ?x577))))
 (let (($x499 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x202)))
 (let (($x1168 (and $x499 $x1171)))
 (let (($x981 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1169 (=> $x981 $x1168)))
 (let (($x674 (= $x981 (bvuge (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x980 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x369 (=> $x980 $x81)))
 (let (($x156 (= $x980 (= (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x655 (and $x156 $x369)))
 (let (($x817 (and $x655 $x674)))
 (let (($x1182 (and $x817 $x1169)))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x924 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x425))))
 (let (($x828 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x924)))
 (let (($x1190 (and $x828 $x1182)))
 (let (($x379 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1191 (=> $x379 $x1190)))
 (let (($x585 (= $x379 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x782 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1019 (=> $x782 $x81)))
 (let (($x597 (= $x782 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x542 (and $x597 $x1019)))
 (let (($x1077 (and $x542 $x585)))
 (let (($x1187 (and $x1077 $x1191)))
 (let (($x1188 (= $x1187 true)))
 (let (($x1184 (= $x1188 true)))
 (let ((?x665 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x313 (= (_ bv0 3) ?x665)))
 (let (($x944 (= $x313 true)))
 (let (($x376 (= $x944 true)))
 (let ((?x789 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1110 (concat ?x789 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x575 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1000 (concat ?x575 (concat ?x351 ?x1110))))
 (let ((?x934 (bvadd ?x1000 (_ bv4 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x934 (_ bv1 32))) (select input.dst.llvm-mem ?x934))))
 (let ((?x302 (concat (select input.dst.llvm-mem (bvadd ?x934 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x934 (_ bv2 32))) ?x90))))
 (let (($x328 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x302 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x1000 (_ bv1 32))) (select input.dst.llvm-mem ?x1000))))
 (let ((?x690 (concat (select input.dst.llvm-mem (bvadd ?x1000 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1000 (_ bv2 32))) ?x274))))
 (let (($x780 (= input.spec-%var-l-1.2.1.2.0 ?x690)))
 (let (($x756 (and $x780 $x328)))
 (let (($x976 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x249 (=> $x976 $x756)))
 (let ((?x167 (ite (= (_ bv0 32) ?x1000) (_ bv0 32) (_ bv1 32))))
 (let (($x94 (bvuge ?x167 (_ bv1 32))))
 (let (($x977 (= $x976 $x94)))
 (let (($x718 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x117 (=> $x718 $x81)))
 (let (($x290 (= ?x167 (_ bv0 32))))
 (let (($x252 (= $x718 $x290)))
 (let (($x1011 (and $x252 $x117)))
 (let (($x305 (and $x1011 $x977)))
 (let (($x352 (and $x305 $x249)))
 (let ((?x724 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x481 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x724)))
 (let ((?x523 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x481)))
 (let (($x327 (= input.spec-%var-l-1.2.0 ?x523)))
 (let (($x970 (and $x327 $x352)))
 (let (($x191 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x394 (=> $x191 $x970)))
 (let ((?x1152 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x707 (bvuge ?x1152 (_ bv1 32))))
 (let (($x1150 (= $x191 $x707)))
 (let (($x573 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x203 (=> $x573 $x81)))
 (let (($x475 (= ?x1152 (_ bv0 32))))
 (let (($x625 (= $x573 $x475)))
 (let (($x446 (and $x625 $x203)))
 (let (($x727 (and $x446 $x1150)))
 (let (($x818 (and $x727 $x394)))
 (let (($x990 (= $x818 true)))
 (let (($x333 (= $x990 true)))
 (let (($x601 (= $x333 true)))
 (let (($x28 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x302 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let (($x361 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x690)))
 (let (($x171 (and $x361 $x28)))
 (let (($x163 (=> $x981 $x171)))
 (let (($x54 (= $x981 $x94)))
 (let (($x157 (= $x980 $x290)))
 (let (($x630 (and $x157 $x369)))
 (let (($x189 (and $x630 $x54)))
 (let (($x527 (and $x189 $x163)))
 (let (($x744 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x523)))
 (let (($x385 (and $x744 $x527)))
 (let (($x902 (=> $x379 $x385)))
 (let (($x639 (= $x379 $x707)))
 (let (($x732 (= $x782 $x475)))
 (let (($x514 (and $x732 $x1019)))
 (let (($x831 (and $x514 $x639)))
 (let (($x705 (and $x831 $x902)))
 (let (($x366 (= $x705 true)))
 (let (($x687 (= $x366 true)))
 (let (($x1108 (= $x687 true)))
 (let (($x345 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x798 (= $x345 true)))
 (let (($x119 (= $x798 true)))
 (let (($x729 (= $x119 true)))
 (let ((?x802 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv1 32))) (select input.dst.llvm-mem ?x802))))
 (let ((?x615 (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x802 (_ bv2 32))) ?x155))))
 (let ((?x781 (bvadd ?x615 (_ bv4 32))))
 (let ((?x51 (concat (select input.dst.llvm-mem (bvadd ?x781 (_ bv1 32))) (select input.dst.llvm-mem ?x781))))
 (let ((?x870 (concat (select input.dst.llvm-mem (bvadd ?x781 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x781 (_ bv2 32))) ?x51))))
 (let (($x1158 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x870 ?x604 false ?x837 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x315)))
 (let ((?x592 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv1 32))) (select input.dst.llvm-mem ?x615))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x615 (_ bv2 32))) ?x592))))
 (let (($x232 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x105)))
 (let (($x894 (and $x232 $x1158)))
 (let (($x378 (=> $x981 $x894)))
 (let (($x522 (= $x981 (bvuge (ite (= (_ bv0 32) ?x615) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x838 (= $x980 (= (ite (= (_ bv0 32) ?x615) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x174 (and $x838 $x369)))
 (let (($x974 (and $x174 $x522)))
 (let (($x937 (and $x974 $x378)))
 (let ((?x850 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x939 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x289 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x893 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x439 (concat (select input.dst.llvm-mem ?x893) (concat ?x289 (concat ?x939 ?x850)))))
 (let (($x235 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x439)))
 (let (($x503 (and $x235 $x937)))
 (let (($x471 (=> $x379 $x503)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x720 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x686 (= $x379 (bvuge ?x720 (_ bv1 32)))))
 (let (($x161 (= $x782 (= ?x720 (_ bv0 32)))))
 (let (($x865 (and $x161 $x1019)))
 (let (($x539 (and $x865 $x686)))
 (let (($x548 (and $x539 $x471)))
 (let (($x291 (= $x548 true)))
 (let (($x835 (= $x291 true)))
 (let (($x300 (= $x835 true)))
 (let (($x642 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x683 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x187 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x683) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x683))))
 (let (($x353 (and true $x187)))
 (let (($x348 (and $x187 $x353)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x371 (= (bvand ?x391 (_ bv4294967292 32)) ?x391)))
 (let (($x84 (and $x371 $x721)))
 (let (($x671 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x391 (bvsub ?x391 (_ bv4 32))) (bvult ?x391 (bvsub ?x391 (_ bv4 32))))))
 (let (($x636 (and (and (and (and (and $x353 $x671) $x371) $x84) $x348) $x642)))
 (let (($x549 (= true $x636)))
 (let (($x652 (not $x731)))
 (let (($x764 (=> $x652 $x549)))
 (let (($x616 (= $x764 true)))
 (let (($x645 (= $x616 true)))
 (let (($x497 (= $x645 true)))
 (let (($x324 (= $x652 true)))
 (let (($x610 (= $x324 true)))
 (let (($x521 (= $x610 true)))
 (let (($x336 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x354 (= $x336 true)))
 (let (($x506 (= $x354 true)))
 (let ((?x987 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x698 (= (_ bv0 32) ?x987)))
 (let ((?x711 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x917 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x711)))
 (let (($x722 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x982 (and $x722 $x917)))
 (let (($x213 (and $x982 $x698)))
 (let (($x407 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x220 (and $x407 $x213)))
 (let (($x114 (= $x220 true)))
 (let (($x452 (= $x114 true)))
 (let (($x450 (= $x452 true)))
 (let (($x815 (and $x450 $x506)))
 (let (($x910 (and $x815 $x521)))
 (let (($x564 (and $x910 $x497)))
 (let (($x428 (and $x564 $x300)))
 (let (($x32 (and $x428 $x729)))
 (let (($x210 (and $x32 $x1108)))
 (let (($x856 (and $x210 $x601)))
 (let (($x830 (and $x856 $x376)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x826 (and $x331 $x830)))
 (let (($x123 (bvugt ?x391 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x391 (_ bv3 32))))
 (let (($x299 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x224 (=> (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x299 $x123)))))))
 (let (($x168 (=> (and $x652 (bvule ?x391 (bvsub (bvadd ?x391 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x299 $x123)))))))
 (let (($x16 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x777 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x893)))
 (let (($x164 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x802 (_ bv1 32))) (or false (or false (and true (or $x777 $x16)))))))
 (let (($x116 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x802 (_ bv1 32)))) (or false (or false (and true (or $x777 $x16)))))))
 (let (($x734 (and $x116 $x168)))
 (let (($x111 (and $x734 $x826)))
 (let (($x1185 (=> $x111 $x1184)))
 (not $x1185))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!58))
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000013)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000001)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      false
      true)))
  (define-fun k!58 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000002) #x00
      #x00)))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xbff70ff8)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!60))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x9dfd59f8)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x00000400)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x9dfd59f8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x9dfd59fb)
  (define-fun k!60 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #xbff70ff8) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #xbff70fff) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xbff70ffc) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xbff70ff9) #x00
    (ite (= x!0 #xbff70ffa) #x00
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xbff70ffe) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #xbff70ffb) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #xbff70ffd) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #xfffffff8)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #xfffffff8)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1177 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x1132 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x1186 (concat (select input.dst.llvm-mem (bvadd ?x1132 (_ bv1 32))) (select input.dst.llvm-mem ?x1132))))
 (let ((?x1180 (concat (select input.dst.llvm-mem (bvadd ?x1132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1132 (_ bv2 32))) ?x1186))))
 (let ((?x1139 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x1163 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x1147 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x1141 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x656 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x656 (_ bv1 32))) (select input.dst.llvm-mem ?x656))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x656 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x656 (_ bv2 32))) ?x541))))
 (let ((?x550 (bvadd ?x605 (_ bv4 32))))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x550 (_ bv1 32))) (select input.dst.llvm-mem ?x550))))
 (let ((?x827 (concat (select input.dst.llvm-mem (bvadd ?x550 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x550 (_ bv2 32))) ?x761))))
 (let ((?x413 (bvadd ?x827 (_ bv4 32))))
 (let ((?x677 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x677))))
 (let ((?x736 (bvadd ?x21 (_ bv4 32))))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x736 (_ bv1 32))) (select input.dst.llvm-mem ?x736))))
 (let ((?x955 (concat (select input.dst.llvm-mem (bvadd ?x736 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x736 (_ bv2 32))) ?x477))))
 (let (($x1173 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x955 (concat ?x1141 (concat ?x1147 (concat ?x1163 ?x1139))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1180 ?x1177 false)))
 (let (($x455 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1067 (=> $x455 $x1173)))
 (let (($x101 (= $x455 (bvuge (ite (= (_ bv0 32) ?x955) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x73 (= false false)))
 (let (($x883 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x152 (=> $x883 $x73)))
 (let (($x459 (= $x883 (= (ite (= (_ bv0 32) ?x955) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x716 (and $x459 $x152)))
 (let (($x1091 (and $x716 $x101)))
 (let (($x1068 (and $x1091 $x1067)))
 (let ((?x1159 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x888 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x1159))))
 (let (($x926 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x888)))
 (let (($x1085 (and $x926 $x1068)))
 (let (($x772 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1128 (=> $x772 $x1085)))
 (let (($x887 (= $x772 (bvuge (ite (= (_ bv0 32) ?x21) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x198 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (=> $x198 $x73)))
 (let (($x69 (= $x198 (= (ite (= (_ bv0 32) ?x21) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x626 (and $x69 $x230)))
 (let (($x726 (and $x626 $x887)))
 (let (($x1102 (and $x726 $x1128)))
 (let ((?x1078 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv1 32))) (select input.dst.llvm-mem ?x827))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv2 32))) ?x1078))))
 (let (($x1003 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x409)))
 (let (($x1103 (and $x1003 $x1102)))
 (let (($x328 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1124 (=> $x328 $x1103)))
 (let (($x457 (= $x328 (bvuge (ite (= (_ bv0 32) ?x827) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x812 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x908 (=> $x812 $x73)))
 (let (($x334 (= $x812 (= (ite (= (_ bv0 32) ?x827) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x447 (and $x334 $x908)))
 (let (($x59 (and $x447 $x457)))
 (let (($x1095 (and $x59 $x1124)))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x648))))
 (let (($x787 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x695)))
 (let (($x1094 (and $x787 $x1095)))
 (let (($x188 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1098 (=> $x188 $x1094)))
 (let (($x276 (= $x188 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x241 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x784 (=> $x241 $x73)))
 (let (($x710 (= $x241 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1051 (and $x710 $x784)))
 (let (($x26 (and $x1051 $x276)))
 (let (($x1096 (and $x26 $x1098)))
 (let (($x1099 (= $x1096 true)))
 (let (($x1097 (= $x1099 true)))
 (let ((?x196 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x714 (= (_ bv0 3) ?x196)))
 (let (($x913 (= $x714 true)))
 (let (($x254 (= $x913 true)))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x304 (concat ?x689 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x244 (concat ?x182 (concat ?x337 ?x304))))
 (let ((?x546 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x754 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x546))))
 (let (($x659 (= input.spec-%var-l-1.2.1.2.0 ?x754)))
 (let (($x330 (and $x659 true)))
 (let (($x872 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x53 (=> $x872 $x330)))
 (let ((?x847 (ite (= (_ bv0 32) ?x244) (_ bv0 32) (_ bv1 32))))
 (let (($x692 (bvuge ?x847 (_ bv1 32))))
 (let (($x62 (= $x872 $x692)))
 (let (($x154 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x993 (=> $x154 $x73)))
 (let (($x150 (= ?x847 (_ bv0 32))))
 (let (($x998 (= $x154 $x150)))
 (let (($x874 (and $x998 $x993)))
 (let (($x110 (and $x874 $x62)))
 (let (($x991 (and $x110 $x53)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x360)))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x255)))
 (let (($x382 (= input.spec-%var-l-1.2.0 ?x533)))
 (let (($x127 (and $x382 $x991)))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x474 (=> $x113 $x127)))
 (let ((?x1218 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x1170 (bvuge ?x1218 (_ bv1 32))))
 (let (($x445 (= $x113 $x1170)))
 (let (($x350 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x603 (=> $x350 $x73)))
 (let (($x1219 (= ?x1218 (_ bv0 32))))
 (let (($x77 (= $x350 $x1219)))
 (let (($x421 (and $x77 $x603)))
 (let (($x237 (and $x421 $x445)))
 (let (($x432 (and $x237 $x474)))
 (let (($x857 (= $x432 true)))
 (let (($x442 (= $x857 true)))
 (let (($x833 (= $x442 true)))
 (let (($x275 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x754)))
 (let (($x989 (and $x275 true)))
 (let (($x940 (=> $x328 $x989)))
 (let (($x794 (= $x328 $x692)))
 (let (($x426 (= $x812 $x150)))
 (let (($x1002 (and $x426 $x908)))
 (let (($x661 (and $x1002 $x794)))
 (let (($x109 (and $x661 $x940)))
 (let (($x429 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x533)))
 (let (($x623 (and $x429 $x109)))
 (let (($x1012 (=> $x188 $x623)))
 (let (($x1171 (= $x188 $x1170)))
 (let (($x1217 (= $x241 $x1219)))
 (let (($x1220 (and $x1217 $x784)))
 (let (($x1168 (and $x1220 $x1171)))
 (let (($x775 (and $x1168 $x1012)))
 (let (($x206 (= $x775 true)))
 (let (($x898 (= $x206 true)))
 (let (($x260 (= $x898 true)))
 (let (($x1018 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x166 (= $x1018 true)))
 (let (($x763 (= $x166 true)))
 (let (($x536 (= $x763 true)))
 (let ((?x129 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x1108 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x527))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x1108 (_ bv1 32))) (select input.dst.llvm-mem ?x1108))))
 (let ((?x1014 (concat (select input.dst.llvm-mem (bvadd ?x1108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1108 (_ bv2 32))) ?x75))))
 (let (($x804 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1014)))
 (let (($x278 (and $x804 true)))
 (let (($x817 (=> $x328 $x278)))
 (let (($x780 (= $x328 (bvuge (ite (= (_ bv0 32) ?x1108) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x468 (= $x812 (= (ite (= (_ bv0 32) ?x1108) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x302 (and $x468 $x908)))
 (let (($x303 (and $x302 $x780)))
 (let (($x288 (and $x303 $x817)))
 (let ((?x475 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x514 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x831 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x748 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x851 (concat (select input.dst.llvm-mem ?x748) (concat ?x831 (concat ?x514 ?x475)))))
 (let (($x373 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x851)))
 (let (($x655 (and $x373 $x288)))
 (let (($x978 (=> $x188 $x655)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x781 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (= $x188 (bvuge ?x781 (_ bv1 32)))))
 (let (($x1015 (= $x241 (= ?x781 (_ bv0 32)))))
 (let (($x788 (and $x1015 $x784)))
 (let (($x488 (and $x788 $x283)))
 (let (($x52 (and $x488 $x978)))
 (let (($x674 (= $x52 true)))
 (let (($x517 (= $x674 true)))
 (let (($x946 (= $x517 true)))
 (let (($x914 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x860 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x574 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x860) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x860))))
 (let (($x741 (and true $x574)))
 (let (($x650 (and $x574 $x741)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x666 (= (bvand ?x656 (_ bv4294967292 32)) ?x656)))
 (let (($x84 (and $x666 $x721)))
 (let (($x495 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x656 (bvsub ?x656 (_ bv4 32))) (bvult ?x656 (bvsub ?x656 (_ bv4 32))))))
 (let (($x764 (and (and (and (and (and $x741 $x495) $x666) $x84) $x650) $x914)))
 (let (($x616 (= true $x764)))
 (let (($x652 (not $x731)))
 (let (($x645 (=> $x652 $x616)))
 (let (($x497 (= $x645 true)))
 (let (($x564 (= $x497 true)))
 (let (($x460 (= $x564 true)))
 (let (($x521 (= $x652 true)))
 (let (($x910 (= $x521 true)))
 (let (($x215 (= $x910 true)))
 (let (($x506 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x815 (= $x506 true)))
 (let (($x324 (= $x815 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x213)))
 (let ((?x982 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x987 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x982)))
 (let (($x917 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x698 (and $x917 $x987)))
 (let (($x114 (and $x698 $x220)))
 (let (($x711 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x452 (and $x711 $x114)))
 (let (($x450 (= $x452 true)))
 (let (($x466 (= $x450 true)))
 (let (($x336 (= $x466 true)))
 (let (($x610 (and $x336 $x324)))
 (let (($x683 (and $x610 $x215)))
 (let (($x782 (and $x683 $x460)))
 (let (($x1026 (and $x782 $x946)))
 (let (($x773 (and $x1026 $x536)))
 (let (($x162 (and $x773 $x260)))
 (let (($x71 (and $x162 $x833)))
 (let (($x216 (and $x71 $x254)))
 (let (($x407 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x19 (and $x407 $x216)))
 (let (($x693 (bvugt ?x656 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x656 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x331 (=> (bvule ?x656 (bvsub (bvadd ?x656 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x693)))))))
 (let (($x427 (=> (and $x652 (bvule ?x656 (bvsub (bvadd ?x656 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x23 $x693)))))))
 (let (($x5 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x748)))
 (let (($x849 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32))) (or false (or false (and true (or $x1151 $x5)))))))
 (let (($x897 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32)))) (or false (or false (and true (or $x1151 $x5)))))))
 (let (($x469 (and $x897 $x427)))
 (let (($x598 (and $x469 $x19)))
 (let (($x1131 (=> $x598 $x1097)))
 (not $x1131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1177 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x1132 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x1186 (concat (select input.dst.llvm-mem (bvadd ?x1132 (_ bv1 32))) (select input.dst.llvm-mem ?x1132))))
 (let ((?x1180 (concat (select input.dst.llvm-mem (bvadd ?x1132 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1132 (_ bv2 32))) ?x1186))))
 (let ((?x1139 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x1163 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x1147 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x1141 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x656 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x541 (concat (select input.dst.llvm-mem (bvadd ?x656 (_ bv1 32))) (select input.dst.llvm-mem ?x656))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x656 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x656 (_ bv2 32))) ?x541))))
 (let ((?x550 (bvadd ?x605 (_ bv4 32))))
 (let ((?x761 (concat (select input.dst.llvm-mem (bvadd ?x550 (_ bv1 32))) (select input.dst.llvm-mem ?x550))))
 (let ((?x827 (concat (select input.dst.llvm-mem (bvadd ?x550 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x550 (_ bv2 32))) ?x761))))
 (let ((?x413 (bvadd ?x827 (_ bv4 32))))
 (let ((?x677 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv1 32))) (select input.dst.llvm-mem ?x413))))
 (let ((?x21 (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x413 (_ bv2 32))) ?x677))))
 (let ((?x736 (bvadd ?x21 (_ bv4 32))))
 (let ((?x477 (concat (select input.dst.llvm-mem (bvadd ?x736 (_ bv1 32))) (select input.dst.llvm-mem ?x736))))
 (let ((?x955 (concat (select input.dst.llvm-mem (bvadd ?x736 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x736 (_ bv2 32))) ?x477))))
 (let (($x1173 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x955 (concat ?x1141 (concat ?x1147 (concat ?x1163 ?x1139))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1180 ?x1177 false)))
 (let (($x455 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1067 (=> $x455 $x1173)))
 (let (($x101 (= $x455 (bvuge (ite (= (_ bv0 32) ?x955) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x73 (= false false)))
 (let (($x883 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x152 (=> $x883 $x73)))
 (let (($x459 (= $x883 (= (ite (= (_ bv0 32) ?x955) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x716 (and $x459 $x152)))
 (let (($x1091 (and $x716 $x101)))
 (let (($x1068 (and $x1091 $x1067)))
 (let ((?x1159 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv1 32))) (select input.dst.llvm-mem ?x21))))
 (let ((?x888 (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x21 (_ bv2 32))) ?x1159))))
 (let (($x926 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x888)))
 (let (($x1085 (and $x926 $x1068)))
 (let (($x772 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1128 (=> $x772 $x1085)))
 (let (($x887 (= $x772 (bvuge (ite (= (_ bv0 32) ?x21) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x198 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x230 (=> $x198 $x73)))
 (let (($x69 (= $x198 (= (ite (= (_ bv0 32) ?x21) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x626 (and $x69 $x230)))
 (let (($x726 (and $x626 $x887)))
 (let (($x1102 (and $x726 $x1128)))
 (let ((?x1078 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv1 32))) (select input.dst.llvm-mem ?x827))))
 (let ((?x409 (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x827 (_ bv2 32))) ?x1078))))
 (let (($x1003 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x409)))
 (let (($x1103 (and $x1003 $x1102)))
 (let (($x328 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1124 (=> $x328 $x1103)))
 (let (($x457 (= $x328 (bvuge (ite (= (_ bv0 32) ?x827) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x812 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x908 (=> $x812 $x73)))
 (let (($x334 (= $x812 (= (ite (= (_ bv0 32) ?x827) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x447 (and $x334 $x908)))
 (let (($x59 (and $x447 $x457)))
 (let (($x1095 (and $x59 $x1124)))
 (let ((?x648 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x695 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x648))))
 (let (($x787 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x695)))
 (let (($x1094 (and $x787 $x1095)))
 (let (($x188 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1098 (=> $x188 $x1094)))
 (let (($x276 (= $x188 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x241 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x784 (=> $x241 $x73)))
 (let (($x710 (= $x241 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1051 (and $x710 $x784)))
 (let (($x26 (and $x1051 $x276)))
 (let (($x1096 (and $x26 $x1098)))
 (let (($x1099 (= $x1096 true)))
 (let (($x1097 (= $x1099 true)))
 (let ((?x196 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x714 (= (_ bv0 3) ?x196)))
 (let (($x913 (= $x714 true)))
 (let (($x254 (= $x913 true)))
 (let ((?x689 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x304 (concat ?x689 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x244 (concat ?x182 (concat ?x337 ?x304))))
 (let ((?x546 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x754 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x546))))
 (let (($x659 (= input.spec-%var-l-1.2.1.2.0 ?x754)))
 (let (($x330 (and $x659 true)))
 (let (($x872 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x53 (=> $x872 $x330)))
 (let ((?x847 (ite (= (_ bv0 32) ?x244) (_ bv0 32) (_ bv1 32))))
 (let (($x692 (bvuge ?x847 (_ bv1 32))))
 (let (($x62 (= $x872 $x692)))
 (let (($x154 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x993 (=> $x154 $x73)))
 (let (($x150 (= ?x847 (_ bv0 32))))
 (let (($x998 (= $x154 $x150)))
 (let (($x874 (and $x998 $x993)))
 (let (($x110 (and $x874 $x62)))
 (let (($x991 (and $x110 $x53)))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x360)))
 (let ((?x533 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x255)))
 (let (($x382 (= input.spec-%var-l-1.2.0 ?x533)))
 (let (($x127 (and $x382 $x991)))
 (let (($x113 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x474 (=> $x113 $x127)))
 (let ((?x1218 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x1170 (bvuge ?x1218 (_ bv1 32))))
 (let (($x445 (= $x113 $x1170)))
 (let (($x350 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x603 (=> $x350 $x73)))
 (let (($x1219 (= ?x1218 (_ bv0 32))))
 (let (($x77 (= $x350 $x1219)))
 (let (($x421 (and $x77 $x603)))
 (let (($x237 (and $x421 $x445)))
 (let (($x432 (and $x237 $x474)))
 (let (($x857 (= $x432 true)))
 (let (($x442 (= $x857 true)))
 (let (($x833 (= $x442 true)))
 (let (($x275 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x754)))
 (let (($x989 (and $x275 true)))
 (let (($x940 (=> $x328 $x989)))
 (let (($x794 (= $x328 $x692)))
 (let (($x426 (= $x812 $x150)))
 (let (($x1002 (and $x426 $x908)))
 (let (($x661 (and $x1002 $x794)))
 (let (($x109 (and $x661 $x940)))
 (let (($x429 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x533)))
 (let (($x623 (and $x429 $x109)))
 (let (($x1012 (=> $x188 $x623)))
 (let (($x1171 (= $x188 $x1170)))
 (let (($x1217 (= $x241 $x1219)))
 (let (($x1220 (and $x1217 $x784)))
 (let (($x1168 (and $x1220 $x1171)))
 (let (($x775 (and $x1168 $x1012)))
 (let (($x206 (= $x775 true)))
 (let (($x898 (= $x206 true)))
 (let (($x260 (= $x898 true)))
 (let (($x1018 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x166 (= $x1018 true)))
 (let (($x763 (= $x166 true)))
 (let (($x536 (= $x763 true)))
 (let ((?x129 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x527 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv1 32))) (select input.dst.llvm-mem ?x129))))
 (let ((?x1108 (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x129 (_ bv2 32))) ?x527))))
 (let ((?x75 (concat (select input.dst.llvm-mem (bvadd ?x1108 (_ bv1 32))) (select input.dst.llvm-mem ?x1108))))
 (let ((?x1014 (concat (select input.dst.llvm-mem (bvadd ?x1108 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1108 (_ bv2 32))) ?x75))))
 (let (($x804 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1014)))
 (let (($x278 (and $x804 true)))
 (let (($x817 (=> $x328 $x278)))
 (let (($x780 (= $x328 (bvuge (ite (= (_ bv0 32) ?x1108) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x468 (= $x812 (= (ite (= (_ bv0 32) ?x1108) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x302 (and $x468 $x908)))
 (let (($x303 (and $x302 $x780)))
 (let (($x288 (and $x303 $x817)))
 (let ((?x475 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x514 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x831 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x748 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x851 (concat (select input.dst.llvm-mem ?x748) (concat ?x831 (concat ?x514 ?x475)))))
 (let (($x373 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x851)))
 (let (($x655 (and $x373 $x288)))
 (let (($x978 (=> $x188 $x655)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x781 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x283 (= $x188 (bvuge ?x781 (_ bv1 32)))))
 (let (($x1015 (= $x241 (= ?x781 (_ bv0 32)))))
 (let (($x788 (and $x1015 $x784)))
 (let (($x488 (and $x788 $x283)))
 (let (($x52 (and $x488 $x978)))
 (let (($x674 (= $x52 true)))
 (let (($x517 (= $x674 true)))
 (let (($x946 (= $x517 true)))
 (let (($x914 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x860 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x574 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x860) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x860))))
 (let (($x741 (and true $x574)))
 (let (($x650 (and $x574 $x741)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x666 (= (bvand ?x656 (_ bv4294967292 32)) ?x656)))
 (let (($x84 (and $x666 $x721)))
 (let (($x495 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x656 (bvsub ?x656 (_ bv4 32))) (bvult ?x656 (bvsub ?x656 (_ bv4 32))))))
 (let (($x764 (and (and (and (and (and $x741 $x495) $x666) $x84) $x650) $x914)))
 (let (($x616 (= true $x764)))
 (let (($x652 (not $x731)))
 (let (($x645 (=> $x652 $x616)))
 (let (($x497 (= $x645 true)))
 (let (($x564 (= $x497 true)))
 (let (($x460 (= $x564 true)))
 (let (($x521 (= $x652 true)))
 (let (($x910 (= $x521 true)))
 (let (($x215 (= $x910 true)))
 (let (($x506 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x815 (= $x506 true)))
 (let (($x324 (= $x815 true)))
 (let ((?x213 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x220 (= (_ bv0 32) ?x213)))
 (let ((?x982 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x987 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x982)))
 (let (($x917 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x698 (and $x917 $x987)))
 (let (($x114 (and $x698 $x220)))
 (let (($x711 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x452 (and $x711 $x114)))
 (let (($x450 (= $x452 true)))
 (let (($x466 (= $x450 true)))
 (let (($x336 (= $x466 true)))
 (let (($x610 (and $x336 $x324)))
 (let (($x683 (and $x610 $x215)))
 (let (($x782 (and $x683 $x460)))
 (let (($x1026 (and $x782 $x946)))
 (let (($x773 (and $x1026 $x536)))
 (let (($x162 (and $x773 $x260)))
 (let (($x71 (and $x162 $x833)))
 (let (($x216 (and $x71 $x254)))
 (let (($x407 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x19 (and $x407 $x216)))
 (let (($x693 (bvugt ?x656 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x316 (bvadd ?x656 (_ bv3 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x316)))
 (let (($x331 (=> (bvule ?x656 (bvsub (bvadd ?x656 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x693)))))))
 (let (($x427 (=> (and $x652 (bvule ?x656 (bvsub (bvadd ?x656 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x23 $x693)))))))
 (let (($x5 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x748)))
 (let (($x849 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32))) (or false (or false (and true (or $x1151 $x5)))))))
 (let (($x897 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x129 (_ bv1 32)))) (or false (or false (and true (or $x1151 $x5)))))))
 (let (($x469 (and $x897 $x427)))
 (let (($x598 (and $x469 $x19)))
 (let (($x1131 (=> $x598 $x1097)))
 (not $x1131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000004)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!52))
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 false))
      false
      false))
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000002) #x00
      #x00)))))))))))))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xddbfa308)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00ff0000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!52))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb5d02910)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x00000004)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb5d02910)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb5d02913)
  (define-fun k!52 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #x00000007) #xff
    (ite (= x!0 #xddbfa30d) #x00
    (ite (= x!0 #xddbfa308) #x01
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #xfffffff6) #xff
    (ite (= x!0 #xfffffff4) #xf8
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #x00000002) #x00
    (ite (= x!0 #xfffffff7) #xff
    (ite (= x!0 #x00000006) #xff
    (ite (= x!0 #x00000005) #xff
    (ite (= x!0 #xfffffff2) #xff
    (ite (= x!0 #xddbfa30f) #x00
    (ite (= x!0 #xfffffff8) #x01
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #xddbfa30c) #x00
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfffffff5) #xff
    (ite (= x!0 #xddbfa30a) #x00
    (ite (= x!0 #xddbfa309) #x00
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xddbfa30e) #x00
    (ite (= x!0 #x00000004) #xf0
    (ite (= x!0 #xfffffff0) #x00
    (ite (= x!0 #xfffffff1) #x00
    (ite (= x!0 #xfffffff3) #x00
    (ite (= x!0 #xddbfa30b) #x00
    (ite (= x!0 #xfffffffd) #x00
      #x00)))))))))))))))))))))))))))))))))
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 #x00000000)
              (= x!11 #xfffffff0)
              (= x!12 #x00000000)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x386))))
 (let ((?x957 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x865 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x905 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x939 (concat ?x226 (concat ?x905 (concat ?x865 ?x957)))))
 (let ((?x95 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x143 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x504))))
 (let ((?x806 (bvadd ?x605 (_ bv4 32))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x806 (_ bv1 32))) (select input.dst.llvm-mem ?x806))))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd ?x806 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x806 (_ bv2 32))) ?x555))))
 (let ((?x553 (bvadd ?x584 (_ bv4 32))))
 (let ((?x1114 (concat (select input.dst.llvm-mem (bvadd ?x553 (_ bv1 32))) (select input.dst.llvm-mem ?x553))))
 (let ((?x942 (concat (select input.dst.llvm-mem (bvadd ?x553 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x553 (_ bv2 32))) ?x1114))))
 (let ((?x1100 (bvadd ?x942 (_ bv4 32))))
 (let ((?x1204 (concat (select input.dst.llvm-mem (bvadd ?x1100 (_ bv1 32))) (select input.dst.llvm-mem ?x1100))))
 (let ((?x1207 (concat (select input.dst.llvm-mem (bvadd ?x1100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1100 (_ bv2 32))) ?x1204))))
 (let ((?x1371 (bvadd ?x1207 (_ bv4 32))))
 (let ((?x1375 (concat (select input.dst.llvm-mem (bvadd ?x1371 (_ bv1 32))) (select input.dst.llvm-mem ?x1371))))
 (let ((?x1381 (concat (select input.dst.llvm-mem (bvadd ?x1371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1371 (_ bv2 32))) ?x1375))))
 (let (($x1339 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1381 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let ((?x1300 (concat (select input.dst.llvm-mem (bvadd ?x1207 (_ bv1 32))) (select input.dst.llvm-mem ?x1207))))
 (let ((?x1304 (concat (select input.dst.llvm-mem (bvadd ?x1207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1207 (_ bv2 32))) ?x1300))))
 (let (($x1284 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x1304)))
 (let (($x1308 (and $x1284 $x1339)))
 (let (($x1197 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1306 (=> $x1197 $x1308)))
 (let (($x1198 (= $x1197 (bvuge (ite (= (_ bv0 32) ?x1207) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x946 (= false false)))
 (let (($x1071 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x1061 (=> $x1071 $x946)))
 (let (($x259 (= $x1071 (= (ite (= (_ bv0 32) ?x1207) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1052 (and $x259 $x1061)))
 (let (($x1232 (and $x1052 $x1198)))
 (let (($x1309 (and $x1232 $x1306)))
 (let ((?x1138 (concat (select input.dst.llvm-mem (bvadd ?x942 (_ bv1 32))) (select input.dst.llvm-mem ?x942))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x942 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x942 (_ bv2 32))) ?x1138))))
 (let (($x795 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x263)))
 (let (($x1312 (and $x795 $x1309)))
 (let (($x318 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1334 (=> $x318 $x1312)))
 (let (($x395 (= $x318 (bvuge (ite (= (_ bv0 32) ?x942) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x410 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x930 (=> $x410 $x946)))
 (let (($x247 (= $x410 (= (ite (= (_ bv0 32) ?x942) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1090 (and $x247 $x930)))
 (let (($x962 (and $x1090 $x395)))
 (let (($x1335 (and $x962 $x1334)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem ?x584))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv2 32))) ?x135))))
 (let (($x816 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x820)))
 (let (($x1315 (and $x816 $x1335)))
 (let (($x457 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1326 (=> $x457 $x1315)))
 (let (($x561 (= $x457 (bvuge (ite (= (_ bv0 32) ?x584) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1021 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x702 (=> $x1021 $x946)))
 (let (($x753 (= $x1021 (= (ite (= (_ bv0 32) ?x584) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x279 (and $x753 $x702)))
 (let (($x212 (and $x279 $x561)))
 (let (($x1331 (and $x212 $x1326)))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x867))))
 (let (($x975 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x520)))
 (let (($x1332 (and $x975 $x1331)))
 (let (($x1222 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1328 (=> $x1222 $x1332)))
 (let (($x597 (= $x1222 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x978 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1026 (=> $x978 $x946)))
 (let (($x1077 (= $x978 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x559 (and $x1077 $x1026)))
 (let (($x585 (and $x559 $x597)))
 (let (($x1329 (and $x585 $x1328)))
 (let (($x1327 (= $x1329 true)))
 (let (($x1330 (= $x1327 true)))
 (let ((?x41 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x486 (= (_ bv0 3) ?x41)))
 (let (($x1087 (= $x486 true)))
 (let (($x971 (= $x1087 true)))
 (let ((?x774 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x810 (concat ?x774 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x534 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1084 (concat ?x691 (concat ?x534 ?x810))))
 (let ((?x822 (bvadd ?x1084 (_ bv4 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv1 32))) (select input.dst.llvm-mem ?x822))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv2 32))) ?x104))))
 (let (($x525 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x345 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let ((?x724 (concat (select input.dst.llvm-mem (bvadd ?x1084 (_ bv1 32))) (select input.dst.llvm-mem ?x1084))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x1084 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1084 (_ bv2 32))) ?x724))))
 (let (($x351 (= input.spec-%var-l-1.2.1.2.0 ?x756)))
 (let (($x298 (and $x351 $x525)))
 (let (($x189 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x519 (=> $x189 $x298)))
 (let ((?x99 (ite (= (_ bv0 32) ?x1084) (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x99 (_ bv1 32))))
 (let (($x744 (= $x189 $x68)))
 (let (($x729 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x274 (=> $x729 $x946)))
 (let (($x771 (= ?x99 (_ bv0 32))))
 (let (($x1074 (= $x729 $x771)))
 (let (($x256 (and $x1074 $x274)))
 (let (($x1000 (and $x256 $x744)))
 (let (($x157 (and $x1000 $x519)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x106)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x25)))
 (let (($x361 (= input.spec-%var-l-1.2.0 ?x712)))
 (let (($x167 (and $x361 $x157)))
 (let (($x1158 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x54 (=> $x1158 $x167)))
 (let ((?x1041 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x1039 (bvuge ?x1041 (_ bv1 32))))
 (let (($x937 (= $x1158 $x1039)))
 (let (($x79 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x952 (=> $x79 $x946)))
 (let (($x1125 (= ?x1041 (_ bv0 32))))
 (let (($x257 (= $x79 $x1125)))
 (let (($x894 (and $x257 $x952)))
 (let (($x476 (and $x894 $x937)))
 (let (($x425 (and $x476 $x54)))
 (let (($x516 (= $x425 true)))
 (let (($x529 (= $x516 true)))
 (let (($x909 (= $x529 true)))
 (let (($x1010 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x345 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let (($x569 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x756)))
 (let (($x449 (and $x569 $x1010)))
 (let (($x393 (=> $x457 $x449)))
 (let (($x406 (= $x457 $x68)))
 (let (($x223 (= $x1021 $x771)))
 (let (($x93 (and $x223 $x702)))
 (let (($x1106 (and $x93 $x406)))
 (let (($x471 (and $x1106 $x393)))
 (let (($x46 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x712)))
 (let (($x548 (and $x46 $x471)))
 (let (($x378 (=> $x1222 $x548)))
 (let (($x1119 (= $x1222 $x1039)))
 (let (($x1032 (= $x978 $x1125)))
 (let (($x1033 (and $x1032 $x1026)))
 (let (($x12 (and $x1033 $x1119)))
 (let (($x184 (and $x12 $x378)))
 (let (($x864 (= $x184 true)))
 (let (($x243 (= $x864 true)))
 (let (($x463 (= $x243 true)))
 (let (($x1124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1102 (= $x1124 true)))
 (let (($x1095 (= $x1102 true)))
 (let (($x1096 (= $x1095 true)))
 (let ((?x777 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x777 (_ bv1 32))) (select input.dst.llvm-mem ?x777))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x777 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x777 (_ bv2 32))) ?x26))))
 (let ((?x496 (bvadd ?x317 (_ bv4 32))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem ?x496))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv2 32))) ?x377))))
 (let (($x658 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x439 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv1 32))) (select input.dst.llvm-mem ?x317))))
 (let ((?x1164 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv2 32))) ?x152))))
 (let (($x1038 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1164)))
 (let (($x1189 (and $x1038 $x658)))
 (let (($x1129 (=> $x457 $x1189)))
 (let (($x447 (= $x457 (bvuge (ite (= (_ bv0 32) ?x317) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x598 (= $x1021 (= (ite (= (_ bv0 32) ?x317) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x710 (and $x598 $x702)))
 (let (($x36 (and $x710 $x447)))
 (let (($x1134 (and $x36 $x1129)))
 (let ((?x396 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x546 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x40 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x109 (concat (select input.dst.llvm-mem ?x40) (concat ?x275 (concat ?x546 ?x396)))))
 (let (($x623 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x109)))
 (let (($x1179 (and $x623 $x1134)))
 (let (($x1143 (=> $x1222 $x1179)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x52 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x1219 (= $x1222 (bvuge ?x52 (_ bv1 32)))))
 (let (($x517 (= $x978 (= ?x52 (_ bv0 32)))))
 (let (($x1022 (and $x517 $x1026)))
 (let (($x1217 (and $x1022 $x1219)))
 (let (($x1128 (and $x1217 $x1143)))
 (let (($x1099 (= $x1128 true)))
 (let (($x1097 (= $x1099 true)))
 (let (($x1094 (= $x1097 true)))
 (let (($x549 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x187 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x482 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187))))
 (let (($x556 (and true $x482)))
 (let (($x636 (and $x482 $x556)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x642 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x84 (and $x642 $x721)))
 (let (($x388 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv4 32))) (bvult ?x143 (bvsub ?x143 (_ bv4 32))))))
 (let (($x645 (and (and (and (and (and $x556 $x388) $x642) $x84) $x636) $x549)))
 (let (($x497 (= true $x645)))
 (let (($x652 (not $x731)))
 (let (($x564 (=> $x652 $x497)))
 (let (($x460 (= $x564 true)))
 (let (($x782 (= $x460 true)))
 (let (($x664 (= $x782 true)))
 (let (($x215 (= $x652 true)))
 (let (($x683 (= $x215 true)))
 (let (($x89 (= $x683 true)))
 (let (($x324 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x610 (= $x324 true)))
 (let (($x521 (= $x610 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x452 (= (_ bv0 32) ?x114)))
 (let ((?x698 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x698)))
 (let (($x987 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x987 $x213)))
 (let (($x450 (and $x220 $x452)))
 (let (($x982 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (and $x982 $x450)))
 (let (($x336 (= $x466 true)))
 (let (($x354 (= $x336 true)))
 (let (($x506 (= $x354 true)))
 (let (($x910 (and $x506 $x521)))
 (let (($x860 (and $x910 $x89)))
 (let (($x241 (and $x860 $x664)))
 (let (($x1098 (and $x241 $x1094)))
 (let (($x1131 (and $x1098 $x1096)))
 (let (($x868 (and $x1131 $x463)))
 (let (($x924 (and $x868 $x909)))
 (let (($x738 (and $x924 $x971)))
 (let (($x711 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x919 (and $x711 $x738)))
 (let (($x168 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x143 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x407 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x224 $x168)))))))
 (let (($x145 (=> (and $x652 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x224 $x168)))))))
 (let (($x116 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x123 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x777 (_ bv1 32))) (or false (or false (and true (or $x164 $x116)))))))
 (let (($x893 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x777 (_ bv1 32)))) (or false (or false (and true (or $x164 $x116)))))))
 (let (($x316 (and $x893 $x145)))
 (let (($x828 (and $x316 $x919)))
 (let (($x1333 (=> $x828 $x1330)))
 (not $x1333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x102 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem ?x102))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x102 (_ bv2 32))) ?x386))))
 (let ((?x957 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x865 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x905 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x226 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x939 (concat ?x226 (concat ?x905 (concat ?x865 ?x957)))))
 (let ((?x95 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x143 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem ?x143))))
 (let ((?x605 (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x143 (_ bv2 32))) ?x504))))
 (let ((?x806 (bvadd ?x605 (_ bv4 32))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x806 (_ bv1 32))) (select input.dst.llvm-mem ?x806))))
 (let ((?x584 (concat (select input.dst.llvm-mem (bvadd ?x806 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x806 (_ bv2 32))) ?x555))))
 (let ((?x553 (bvadd ?x584 (_ bv4 32))))
 (let ((?x1114 (concat (select input.dst.llvm-mem (bvadd ?x553 (_ bv1 32))) (select input.dst.llvm-mem ?x553))))
 (let ((?x942 (concat (select input.dst.llvm-mem (bvadd ?x553 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x553 (_ bv2 32))) ?x1114))))
 (let ((?x1100 (bvadd ?x942 (_ bv4 32))))
 (let ((?x1204 (concat (select input.dst.llvm-mem (bvadd ?x1100 (_ bv1 32))) (select input.dst.llvm-mem ?x1100))))
 (let ((?x1207 (concat (select input.dst.llvm-mem (bvadd ?x1100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1100 (_ bv2 32))) ?x1204))))
 (let ((?x1371 (bvadd ?x1207 (_ bv4 32))))
 (let ((?x1375 (concat (select input.dst.llvm-mem (bvadd ?x1371 (_ bv1 32))) (select input.dst.llvm-mem ?x1371))))
 (let ((?x1381 (concat (select input.dst.llvm-mem (bvadd ?x1371 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1371 (_ bv2 32))) ?x1375))))
 (let (($x1339 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1381 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let ((?x1300 (concat (select input.dst.llvm-mem (bvadd ?x1207 (_ bv1 32))) (select input.dst.llvm-mem ?x1207))))
 (let ((?x1304 (concat (select input.dst.llvm-mem (bvadd ?x1207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1207 (_ bv2 32))) ?x1300))))
 (let (($x1284 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 ?x1304)))
 (let (($x1308 (and $x1284 $x1339)))
 (let (($x1197 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv1 32))))
 (let (($x1306 (=> $x1197 $x1308)))
 (let (($x1198 (= $x1197 (bvuge (ite (= (_ bv0 32) ?x1207) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x946 (= false false)))
 (let (($x1071 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 (_ bv0 32))))
 (let (($x1061 (=> $x1071 $x946)))
 (let (($x259 (= $x1071 (= (ite (= (_ bv0 32) ?x1207) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1052 (and $x259 $x1061)))
 (let (($x1232 (and $x1052 $x1198)))
 (let (($x1309 (and $x1232 $x1306)))
 (let ((?x1138 (concat (select input.dst.llvm-mem (bvadd ?x942 (_ bv1 32))) (select input.dst.llvm-mem ?x942))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x942 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x942 (_ bv2 32))) ?x1138))))
 (let (($x795 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 ?x263)))
 (let (($x1312 (and $x795 $x1309)))
 (let (($x318 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv1 32))))
 (let (($x1334 (=> $x318 $x1312)))
 (let (($x395 (= $x318 (bvuge (ite (= (_ bv0 32) ?x942) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x410 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 (_ bv0 32))))
 (let (($x930 (=> $x410 $x946)))
 (let (($x247 (= $x410 (= (ite (= (_ bv0 32) ?x942) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1090 (and $x247 $x930)))
 (let (($x962 (and $x1090 $x395)))
 (let (($x1335 (and $x962 $x1334)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem ?x584))))
 (let ((?x820 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv2 32))) ?x135))))
 (let (($x816 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x820)))
 (let (($x1315 (and $x816 $x1335)))
 (let (($x457 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1326 (=> $x457 $x1315)))
 (let (($x561 (= $x457 (bvuge (ite (= (_ bv0 32) ?x584) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1021 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x702 (=> $x1021 $x946)))
 (let (($x753 (= $x1021 (= (ite (= (_ bv0 32) ?x584) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x279 (and $x753 $x702)))
 (let (($x212 (and $x279 $x561)))
 (let (($x1331 (and $x212 $x1326)))
 (let ((?x867 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv1 32))) (select input.dst.llvm-mem ?x605))))
 (let ((?x520 (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x605 (_ bv2 32))) ?x867))))
 (let (($x975 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x520)))
 (let (($x1332 (and $x975 $x1331)))
 (let (($x1222 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1328 (=> $x1222 $x1332)))
 (let (($x597 (= $x1222 (bvuge (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x978 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1026 (=> $x978 $x946)))
 (let (($x1077 (= $x978 (= (ite (= (_ bv0 32) ?x605) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x559 (and $x1077 $x1026)))
 (let (($x585 (and $x559 $x597)))
 (let (($x1329 (and $x585 $x1328)))
 (let (($x1327 (= $x1329 true)))
 (let (($x1330 (= $x1327 true)))
 (let ((?x41 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x486 (= (_ bv0 3) ?x41)))
 (let (($x1087 (= $x486 true)))
 (let (($x971 (= $x1087 true)))
 (let ((?x774 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x810 (concat ?x774 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x534 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1084 (concat ?x691 (concat ?x534 ?x810))))
 (let ((?x822 (bvadd ?x1084 (_ bv4 32))))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv1 32))) (select input.dst.llvm-mem ?x822))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x822 (_ bv2 32))) ?x104))))
 (let (($x525 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x345 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let ((?x724 (concat (select input.dst.llvm-mem (bvadd ?x1084 (_ bv1 32))) (select input.dst.llvm-mem ?x1084))))
 (let ((?x756 (concat (select input.dst.llvm-mem (bvadd ?x1084 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1084 (_ bv2 32))) ?x724))))
 (let (($x351 (= input.spec-%var-l-1.2.1.2.0 ?x756)))
 (let (($x298 (and $x351 $x525)))
 (let (($x189 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x519 (=> $x189 $x298)))
 (let ((?x99 (ite (= (_ bv0 32) ?x1084) (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x99 (_ bv1 32))))
 (let (($x744 (= $x189 $x68)))
 (let (($x729 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x274 (=> $x729 $x946)))
 (let (($x771 (= ?x99 (_ bv0 32))))
 (let (($x1074 (= $x729 $x771)))
 (let (($x256 (and $x1074 $x274)))
 (let (($x1000 (and $x256 $x744)))
 (let (($x157 (and $x1000 $x519)))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x106)))
 (let ((?x712 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x25)))
 (let (($x361 (= input.spec-%var-l-1.2.0 ?x712)))
 (let (($x167 (and $x361 $x157)))
 (let (($x1158 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x54 (=> $x1158 $x167)))
 (let ((?x1041 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x1039 (bvuge ?x1041 (_ bv1 32))))
 (let (($x937 (= $x1158 $x1039)))
 (let (($x79 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x952 (=> $x79 $x946)))
 (let (($x1125 (= ?x1041 (_ bv0 32))))
 (let (($x257 (= $x79 $x1125)))
 (let (($x894 (and $x257 $x952)))
 (let (($x476 (and $x894 $x937)))
 (let (($x425 (and $x476 $x54)))
 (let (($x516 (= $x425 true)))
 (let (($x529 (= $x516 true)))
 (let (($x909 (= $x529 true)))
 (let (($x1010 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x345 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let (($x569 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x756)))
 (let (($x449 (and $x569 $x1010)))
 (let (($x393 (=> $x457 $x449)))
 (let (($x406 (= $x457 $x68)))
 (let (($x223 (= $x1021 $x771)))
 (let (($x93 (and $x223 $x702)))
 (let (($x1106 (and $x93 $x406)))
 (let (($x471 (and $x1106 $x393)))
 (let (($x46 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x712)))
 (let (($x548 (and $x46 $x471)))
 (let (($x378 (=> $x1222 $x548)))
 (let (($x1119 (= $x1222 $x1039)))
 (let (($x1032 (= $x978 $x1125)))
 (let (($x1033 (and $x1032 $x1026)))
 (let (($x12 (and $x1033 $x1119)))
 (let (($x184 (and $x12 $x378)))
 (let (($x864 (= $x184 true)))
 (let (($x243 (= $x864 true)))
 (let (($x463 (= $x243 true)))
 (let (($x1124 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1102 (= $x1124 true)))
 (let (($x1095 (= $x1102 true)))
 (let (($x1096 (= $x1095 true)))
 (let ((?x777 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x26 (concat (select input.dst.llvm-mem (bvadd ?x777 (_ bv1 32))) (select input.dst.llvm-mem ?x777))))
 (let ((?x317 (concat (select input.dst.llvm-mem (bvadd ?x777 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x777 (_ bv2 32))) ?x26))))
 (let ((?x496 (bvadd ?x317 (_ bv4 32))))
 (let ((?x377 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv1 32))) (select input.dst.llvm-mem ?x496))))
 (let ((?x439 (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x496 (_ bv2 32))) ?x377))))
 (let (($x658 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x439 ?x95 false ?x939 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x140)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv1 32))) (select input.dst.llvm-mem ?x317))))
 (let ((?x1164 (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x317 (_ bv2 32))) ?x152))))
 (let (($x1038 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1164)))
 (let (($x1189 (and $x1038 $x658)))
 (let (($x1129 (=> $x457 $x1189)))
 (let (($x447 (= $x457 (bvuge (ite (= (_ bv0 32) ?x317) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x598 (= $x1021 (= (ite (= (_ bv0 32) ?x317) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x710 (and $x598 $x702)))
 (let (($x36 (and $x710 $x447)))
 (let (($x1134 (and $x36 $x1129)))
 (let ((?x396 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x546 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x40 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x109 (concat (select input.dst.llvm-mem ?x40) (concat ?x275 (concat ?x546 ?x396)))))
 (let (($x623 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x109)))
 (let (($x1179 (and $x623 $x1134)))
 (let (($x1143 (=> $x1222 $x1179)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x52 (ite $x731 (_ bv0 32) (_ bv1 32))))
 (let (($x1219 (= $x1222 (bvuge ?x52 (_ bv1 32)))))
 (let (($x517 (= $x978 (= ?x52 (_ bv0 32)))))
 (let (($x1022 (and $x517 $x1026)))
 (let (($x1217 (and $x1022 $x1219)))
 (let (($x1128 (and $x1217 $x1143)))
 (let (($x1099 (= $x1128 true)))
 (let (($x1097 (= $x1099 true)))
 (let (($x1094 (= $x1097 true)))
 (let (($x549 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x187 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x482 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x187))))
 (let (($x556 (and true $x482)))
 (let (($x636 (and $x482 $x556)))
 (let (($x721 (= (bvand ?x605 (_ bv4294967288 32)) ?x605)))
 (let (($x642 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x84 (and $x642 $x721)))
 (let (($x388 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv4 32))) (bvult ?x143 (bvsub ?x143 (_ bv4 32))))))
 (let (($x645 (and (and (and (and (and $x556 $x388) $x642) $x84) $x636) $x549)))
 (let (($x497 (= true $x645)))
 (let (($x652 (not $x731)))
 (let (($x564 (=> $x652 $x497)))
 (let (($x460 (= $x564 true)))
 (let (($x782 (= $x460 true)))
 (let (($x664 (= $x782 true)))
 (let (($x215 (= $x652 true)))
 (let (($x683 (= $x215 true)))
 (let (($x89 (= $x683 true)))
 (let (($x324 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x610 (= $x324 true)))
 (let (($x521 (= $x610 true)))
 (let ((?x114 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x452 (= (_ bv0 32) ?x114)))
 (let ((?x698 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x213 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x698)))
 (let (($x987 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (and $x987 $x213)))
 (let (($x450 (and $x220 $x452)))
 (let (($x982 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x466 (and $x982 $x450)))
 (let (($x336 (= $x466 true)))
 (let (($x354 (= $x336 true)))
 (let (($x506 (= $x354 true)))
 (let (($x910 (and $x506 $x521)))
 (let (($x860 (and $x910 $x89)))
 (let (($x241 (and $x860 $x664)))
 (let (($x1098 (and $x241 $x1094)))
 (let (($x1131 (and $x1098 $x1096)))
 (let (($x868 (and $x1131 $x463)))
 (let (($x924 (and $x868 $x909)))
 (let (($x738 (and $x924 $x971)))
 (let (($x711 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x919 (and $x711 $x738)))
 (let (($x168 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x611 (bvadd ?x143 (_ bv3 32))))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x611)))
 (let (($x407 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x224 $x168)))))))
 (let (($x145 (=> (and $x652 (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x224 $x168)))))))
 (let (($x116 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x164 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x40)))
 (let (($x123 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x777 (_ bv1 32))) (or false (or false (and true (or $x164 $x116)))))))
 (let (($x893 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x777 (_ bv1 32)))) (or false (or false (and true (or $x164 $x116)))))))
 (let (($x316 (and $x893 $x145)))
 (let (($x828 (and $x316 $x919)))
 (let (($x1333 (=> $x828 $x1330)))
 (not $x1333))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10000000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!64))
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun k!64 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x0000000a) #x00
    (ite (= x!0 #x00000007) #x00
    (ite (= x!0 #x0000000b) #x00
    (ite (= x!0 #x0000000e) #x00
    (ite (= x!0 #x00000001) #x00
    (ite (= x!0 #x00000009) #x00
    (ite (= x!0 #x00000000) #x00
    (ite (= x!0 #x00000008) #x00
    (ite (= x!0 #x0000000d) #x00
    (ite (= x!0 #x00000005) #x00
    (ite (= x!0 #x0000000c) #x00
    (ite (= x!0 #x00000003) #x00
    (ite (= x!0 #x0000000f) #x00
    (ite (= x!0 #x00000004) #x00
    (ite (= x!0 #x00000006) #x00
    (ite (= x!0 #x00000002) #x00
      #x00)))))))))))))))))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000001)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000000)
              (= x!8 #x00000000)
              (= x!9 #x00000000)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000000)
              (= x!13 #x00000000))
      false
      true)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #xfe998238)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00001000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #xfffffff8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!66))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0ccf0258)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.1 () (_ BitVec 32)
    #x00000001)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000400)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #xfffffffc)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x20000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0ccf0258)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0ccf025b)
  (define-fun k!66 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xfe998238) #x00
    (ite (= x!0 #xffffffff) #x00
    (ite (= x!0 #xfffffffd) #x00
    (ite (= x!0 #xfffffff8) #x00
    (ite (= x!0 #x00000001) #xff
    (ite (= x!0 #xffffffbf) #xff
    (ite (= x!0 #xffffffe6) #xff
    (ite (= x!0 #xfffffff4) #xf8
    (ite (= x!0 #xffffffe4) #xf0
    (ite (= x!0 #xfffffffb) #x00
    (ite (= x!0 #x00000000) #xf8
    (ite (= x!0 #xffffffbe) #xff
    (ite (= x!0 #xffffffbd) #xff
    (ite (= x!0 #xffffffba) #x00
    (ite (= x!0 #x00000002) #xff
    (ite (= x!0 #xfffffffa) #x00
    (ite (= x!0 #xffffffe7) #xff
    (ite (= x!0 #xffffffbc) #xe0
    (ite (= x!0 #xffffffe2) #x00
    (ite (= x!0 #xfe99823f) #xff
    (ite (= x!0 #xfffffff6) #xff
    (ite (= x!0 #x00000003) #xff
    (ite (= x!0 #xfe99823c) #xb8
    (ite (= x!0 #xfffffff9) #x00
    (ite (= x!0 #xffffffb9) #x00
    (ite (= x!0 #xffffffb8) #x00
    (ite (= x!0 #xfffffff5) #xff
    (ite (= x!0 #xfffffff7) #xff
    (ite (= x!0 #xffffffe5) #xff
    (ite (= x!0 #xfffffffc) #x00
    (ite (= x!0 #xfe99823a) #x00
    (ite (= x!0 #xfe998239) #x00
    (ite (= x!0 #xfffffffe) #x00
    (ite (= x!0 #xfe99823e) #xff
    (ite (= x!0 #xffffffe3) #x01
    (ite (= x!0 #xffffffe0) #x00
    (ite (= x!0 #xffffffe1) #x00
    (ite (= x!0 #xfe99823b) #x00
    (ite (= x!0 #xffffffbb) #x00
    (ite (= x!0 #xfe99823d) #xff
      #x00)))))))))))))))))))))))))))))))))))))))))
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000001)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #xfffffff8)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #xfffffff8)
              (= x!13 #x00000000))
      false
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #xfffffff8)
              (= x!8 #xffffffe0)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #xfffffff8)
              (= x!13 #x00000000))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #xfffffff8)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #xfffffff8)
              (= x!13 #x00000000))
      true
      true))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x1210 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x263))))
 (let ((?x1371 ((_ extract 2 0) ?x1210)))
 (let (($x1379 (= (_ bv0 3) ?x1371)))
 (let (($x1380 (= $x1379 true)))
 (let ((?x1299 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1302 (= (_ bv0 3) ?x1299)))
 (let (($x1300 (= $x1302 true)))
 (let (($x1295 (= $x1300 true)))
 (let (($x1274 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1298 (= $x1274 true)))
 (let (($x1301 (= $x1298 true)))
 (let (($x1296 (= $x1301 true)))
 (let (($x1204 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x381 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x247) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x247))))
 (let (($x395 (and true $x381)))
 (let (($x1201 (and $x381 $x395)))
 (let (($x1213 (= (bvand ?x1210 (_ bv4294967288 32)) ?x1210)))
 (let (($x266 (= (bvand ?x299 (_ bv4294967292 32)) ?x299)))
 (let (($x1172 (and $x266 $x1213)))
 (let (($x1137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x299 (bvsub ?x299 (_ bv4 32))) (bvult ?x299 (bvsub ?x299 (_ bv4 32))))))
 (let (($x1209 (and (and (and (and (and $x395 $x1137) $x266) $x1172) $x1201) $x1204)))
 (let (($x259 (= true $x1209)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x652 (not $x731)))
 (let (($x1061 (=> $x652 $x259)))
 (let (($x1052 (= $x1061 true)))
 (let (($x1197 (= $x1052 true)))
 (let (($x1235 (= $x1197 true)))
 (let (($x942 (= $x652 true)))
 (let (($x201 (= $x942 true)))
 (let (($x526 (= $x201 true)))
 (let (($x30 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x18 (= $x30 true)))
 (let (($x1114 (= $x18 true)))
 (let ((?x816 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x757 (= (_ bv0 32) ?x816)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x579 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x820 (and $x132 $x579)))
 (let (($x410 (and $x820 $x757)))
 (let (($x796 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x553 (and $x796 $x410)))
 (let (($x916 (= $x553 true)))
 (let (($x478 (= $x916 true)))
 (let (($x306 (= $x478 true)))
 (let ((?x1032 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1033 (concat ?x1032 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1076 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x461 (concat ?x1076 (concat ?x1119 ?x1033))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x461 (_ bv1 32))) (select input.dst.llvm-mem ?x461))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x461 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x461 (_ bv2 32))) ?x425))))
 (let (($x938 (= input.spec-%var-l-1.2.1.2.0 ?x41)))
 (let (($x929 (and $x938 true)))
 (let (($x576 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x725 (=> $x576 $x929)))
 (let ((?x923 (ite (= (_ bv0 32) ?x461) (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x923 (_ bv1 32))))
 (let (($x270 (= $x576 $x68)))
 (let (($x517 (= false false)))
 (let (($x607 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x975 (=> $x607 $x517)))
 (let (($x128 (= ?x923 (_ bv0 32))))
 (let (($x520 (= $x607 $x128)))
 (let (($x953 (and $x520 $x975)))
 (let (($x1107 (and $x953 $x270)))
 (let (($x561 (and $x1107 $x725)))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x572)))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x496)))
 (let (($x160 (= input.spec-%var-l-1.2.0 ?x419)))
 (let (($x747 (and $x160 $x561)))
 (let (($x986 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x753 (=> $x986 $x747)))
 (let ((?x978 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x754 (bvuge ?x978 (_ bv1 32))))
 (let (($x597 (= $x986 $x754)))
 (let (($x828 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x394 (=> $x828 $x517)))
 (let (($x52 (= ?x978 (_ bv0 32))))
 (let (($x305 (= $x828 $x52)))
 (let (($x111 (and $x305 $x394)))
 (let (($x585 (and $x111 $x597)))
 (let (($x29 (and $x585 $x753)))
 (let (($x279 (= $x29 true)))
 (let (($x212 (= $x279 true)))
 (let (($x961 (= $x212 true)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x41)))
 (let (($x298 (and $x525 true)))
 (let (($x223 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x290 (=> $x223 $x298)))
 (let (($x99 (= $x223 $x68)))
 (let (($x1131 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1095 (=> $x1131 $x517)))
 (let (($x1102 (= $x1131 $x128)))
 (let (($x1067 (and $x1102 $x1095)))
 (let (($x771 (and $x1067 $x99)))
 (let (($x351 (and $x771 $x290)))
 (let (($x363 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x419)))
 (let (($x189 (and $x363 $x351)))
 (let (($x940 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x744 (=> $x940 $x189)))
 (let (($x275 (= $x940 $x754)))
 (let (($x241 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x946 (=> $x241 $x517)))
 (let (($x674 (= $x241 $x52)))
 (let (($x1026 (and $x674 $x946)))
 (let (($x770 (and $x1026 $x275)))
 (let (($x274 (and $x770 $x744)))
 (let (($x1000 (= $x274 true)))
 (let (($x836 (= $x1000 true)))
 (let (($x519 (= $x836 true)))
 (let (($x234 (and $x519 $x961)))
 (let (($x627 (and $x234 $x306)))
 (let (($x20 (and $x627 $x1114)))
 (let (($x621 (and $x20 $x526)))
 (let (($x1198 (and $x621 $x1235)))
 (let (($x1297 (and $x1198 $x1296)))
 (let (($x1304 (and $x1297 $x1295)))
 (let (($x982 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1284 (and $x982 $x1304)))
 (let (($x427 (bvugt ?x299 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x299 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x711 (=> (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x331 $x427)))))))
 (let (($x1075 (=> (and $x652 (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x331 $x427)))))))
 (let (($x897 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x693 (=> $x23 (or false (or false (and true (or $x849 $x897)))))))
 (let (($x748 (=> (and $x652 $x23) (or false (or false (and true (or $x849 $x897)))))))
 (let (($x611 (and $x748 $x1075)))
 (let (($x1338 (and $x611 $x1284)))
 (let (($x1376 (=> $x1338 $x1380)))
 (not $x1376))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x299 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv1 32))) (select input.dst.llvm-mem ?x299))))
 (let ((?x1210 (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x299 (_ bv2 32))) ?x263))))
 (let ((?x1371 ((_ extract 2 0) ?x1210)))
 (let (($x1379 (= (_ bv0 3) ?x1371)))
 (let (($x1380 (= $x1379 true)))
 (let ((?x1299 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1302 (= (_ bv0 3) ?x1299)))
 (let (($x1300 (= $x1302 true)))
 (let (($x1295 (= $x1300 true)))
 (let (($x1274 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1298 (= $x1274 true)))
 (let (($x1301 (= $x1298 true)))
 (let (($x1296 (= $x1301 true)))
 (let (($x1204 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x247 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x381 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x247) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x247))))
 (let (($x395 (and true $x381)))
 (let (($x1201 (and $x381 $x395)))
 (let (($x1213 (= (bvand ?x1210 (_ bv4294967288 32)) ?x1210)))
 (let (($x266 (= (bvand ?x299 (_ bv4294967292 32)) ?x299)))
 (let (($x1172 (and $x266 $x1213)))
 (let (($x1137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x299 (bvsub ?x299 (_ bv4 32))) (bvult ?x299 (bvsub ?x299 (_ bv4 32))))))
 (let (($x1209 (and (and (and (and (and $x395 $x1137) $x266) $x1172) $x1201) $x1204)))
 (let (($x259 (= true $x1209)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x652 (not $x731)))
 (let (($x1061 (=> $x652 $x259)))
 (let (($x1052 (= $x1061 true)))
 (let (($x1197 (= $x1052 true)))
 (let (($x1235 (= $x1197 true)))
 (let (($x942 (= $x652 true)))
 (let (($x201 (= $x942 true)))
 (let (($x526 (= $x201 true)))
 (let (($x30 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x18 (= $x30 true)))
 (let (($x1114 (= $x18 true)))
 (let ((?x816 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x757 (= (_ bv0 32) ?x816)))
 (let ((?x135 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x579 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x135)))
 (let (($x132 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x820 (and $x132 $x579)))
 (let (($x410 (and $x820 $x757)))
 (let (($x796 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x553 (and $x796 $x410)))
 (let (($x916 (= $x553 true)))
 (let (($x478 (= $x916 true)))
 (let (($x306 (= $x478 true)))
 (let ((?x1032 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1033 (concat ?x1032 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1076 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x461 (concat ?x1076 (concat ?x1119 ?x1033))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x461 (_ bv1 32))) (select input.dst.llvm-mem ?x461))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd ?x461 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x461 (_ bv2 32))) ?x425))))
 (let (($x938 (= input.spec-%var-l-1.2.1.2.0 ?x41)))
 (let (($x929 (and $x938 true)))
 (let (($x576 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x725 (=> $x576 $x929)))
 (let ((?x923 (ite (= (_ bv0 32) ?x461) (_ bv0 32) (_ bv1 32))))
 (let (($x68 (bvuge ?x923 (_ bv1 32))))
 (let (($x270 (= $x576 $x68)))
 (let (($x517 (= false false)))
 (let (($x607 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x975 (=> $x607 $x517)))
 (let (($x128 (= ?x923 (_ bv0 32))))
 (let (($x520 (= $x607 $x128)))
 (let (($x953 (and $x520 $x975)))
 (let (($x1107 (and $x953 $x270)))
 (let (($x561 (and $x1107 $x725)))
 (let ((?x572 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x496 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x572)))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x496)))
 (let (($x160 (= input.spec-%var-l-1.2.0 ?x419)))
 (let (($x747 (and $x160 $x561)))
 (let (($x986 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x753 (=> $x986 $x747)))
 (let ((?x978 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x754 (bvuge ?x978 (_ bv1 32))))
 (let (($x597 (= $x986 $x754)))
 (let (($x828 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x394 (=> $x828 $x517)))
 (let (($x52 (= ?x978 (_ bv0 32))))
 (let (($x305 (= $x828 $x52)))
 (let (($x111 (and $x305 $x394)))
 (let (($x585 (and $x111 $x597)))
 (let (($x29 (and $x585 $x753)))
 (let (($x279 (= $x29 true)))
 (let (($x212 (= $x279 true)))
 (let (($x961 (= $x212 true)))
 (let (($x525 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x41)))
 (let (($x298 (and $x525 true)))
 (let (($x223 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x290 (=> $x223 $x298)))
 (let (($x99 (= $x223 $x68)))
 (let (($x1131 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1095 (=> $x1131 $x517)))
 (let (($x1102 (= $x1131 $x128)))
 (let (($x1067 (and $x1102 $x1095)))
 (let (($x771 (and $x1067 $x99)))
 (let (($x351 (and $x771 $x290)))
 (let (($x363 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x419)))
 (let (($x189 (and $x363 $x351)))
 (let (($x940 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x744 (=> $x940 $x189)))
 (let (($x275 (= $x940 $x754)))
 (let (($x241 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x946 (=> $x241 $x517)))
 (let (($x674 (= $x241 $x52)))
 (let (($x1026 (and $x674 $x946)))
 (let (($x770 (and $x1026 $x275)))
 (let (($x274 (and $x770 $x744)))
 (let (($x1000 (= $x274 true)))
 (let (($x836 (= $x1000 true)))
 (let (($x519 (= $x836 true)))
 (let (($x234 (and $x519 $x961)))
 (let (($x627 (and $x234 $x306)))
 (let (($x20 (and $x627 $x1114)))
 (let (($x621 (and $x20 $x526)))
 (let (($x1198 (and $x621 $x1235)))
 (let (($x1297 (and $x1198 $x1296)))
 (let (($x1304 (and $x1297 $x1295)))
 (let (($x982 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1284 (and $x982 $x1304)))
 (let (($x427 (bvugt ?x299 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x734 (bvadd ?x299 (_ bv3 32))))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x734)))
 (let (($x711 (=> (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x331 $x427)))))))
 (let (($x1075 (=> (and $x652 (bvule ?x299 (bvsub (bvadd ?x299 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x331 $x427)))))))
 (let (($x897 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x849 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x23 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x693 (=> $x23 (or false (or false (and true (or $x849 $x897)))))))
 (let (($x748 (=> (and $x652 $x23) (or false (or false (and true (or $x849 $x897)))))))
 (let (($x611 (and $x748 $x1075)))
 (let (($x1338 (and $x611 $x1284)))
 (let (($x1376 (=> $x1338 $x1380)))
 (not $x1376))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x810 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x810))))
 (let (($x1106 (bvule ?x325 (_ bv4294967294 32))))
 (let (($x321 (= $x1106 true)))
 (let (($x106 (= $x321 true)))
 (let ((?x974 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x724 (= (_ bv0 3) ?x974)))
 (let (($x569 (= $x724 true)))
 (let (($x822 (= $x569 true)))
 (let (($x756 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x39 (= $x756 true)))
 (let (($x981 (= $x39 true)))
 (let (($x970 (= $x981 true)))
 (let (($x625 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x690 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x894 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690))))
 (let (($x1158 (and true $x894)))
 (let (($x555 (and $x894 $x1158)))
 (let (($x1086 (= (bvand ?x325 (_ bv4294967288 32)) ?x325)))
 (let (($x712 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x1084 (and $x712 $x1086)))
 (let (($x462 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x104 (and (and (and (and (and $x1158 $x462) $x712) $x1084) $x555) $x625)))
 (let (($x119 (= true $x104)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x652 (not $x731)))
 (let (($x835 (=> $x652 $x119)))
 (let (($x798 (= $x835 true)))
 (let (($x32 (= $x798 true)))
 (let (($x428 (= $x32 true)))
 (let (($x184 (= $x652 true)))
 (let (($x463 (= $x184 true)))
 (let (($x79 (= $x463 true)))
 (let (($x243 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x548 (= $x243 true)))
 (let (($x378 (= $x548 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x81)))
 (let ((?x905 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x905)))
 (let (($x1059 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x590 (and $x1059 $x95)))
 (let (($x950 (and $x590 $x226)))
 (let (($x957 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x379 (and $x957 $x950)))
 (let (($x584 (= $x379 true)))
 (let (($x393 (= $x584 true)))
 (let (($x868 (= $x393 true)))
 (let ((?x1376 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1377 (concat ?x1376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1087 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x353 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x452 (concat ?x353 (concat ?x1087 ?x1377))))
 (let ((?x447 (concat (select input.dst.llvm-mem (bvadd ?x452 (_ bv1 32))) (select input.dst.llvm-mem ?x452))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x452 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x452 (_ bv2 32))) ?x447))))
 (let (($x939 (= input.spec-%var-l-1.2.1.2.0 ?x390)))
 (let (($x936 (and $x939 true)))
 (let (($x459 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x289 (=> $x459 $x936)))
 (let ((?x336 (ite (= (_ bv0 32) ?x452) (_ bv0 32) (_ bv1 32))))
 (let (($x506 (bvuge ?x336 (_ bv1 32))))
 (let (($x863 (= $x459 $x506)))
 (let (($x1000 (= false false)))
 (let (($x455 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x416 (=> $x455 $x1000)))
 (let (($x129 (= ?x336 (_ bv0 32))))
 (let (($x36 (= $x455 $x129)))
 (let (($x840 (and $x36 $x416)))
 (let (($x716 (and $x840 $x863)))
 (let (($x102 (and $x716 $x289)))
 (let ((?x621 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x1090 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x621)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x1090)))
 (let (($x1179 (= input.spec-%var-l-1.2.0 ?x395)))
 (let (($x539 (and $x1179 $x102)))
 (let (($x1124 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x999 (=> $x1124 $x539)))
 (let ((?x189 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x585 (bvuge ?x189 (_ bv1 32))))
 (let (($x1189 (= $x1124 $x585)))
 (let (($x26 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x267 (=> $x26 $x1000)))
 (let (($x744 (= ?x189 (_ bv0 32))))
 (let (($x867 (= $x26 $x744)))
 (let (($x850 (and $x867 $x267)))
 (let (($x1094 (and $x850 $x1189)))
 (let (($x765 (and $x1094 $x999)))
 (let (($x65 (= $x765 true)))
 (let (($x793 (= $x65 true)))
 (let (($x686 (= $x793 true)))
 (let (($x702 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x390)))
 (let (($x197 (and $x702 true)))
 (let (($x521 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x457 (=> $x521 $x197)))
 (let (($x683 (= $x521 $x506)))
 (let (($x1284 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1295 (=> $x1284 $x1000)))
 (let (($x1300 (= $x1284 $x129)))
 (let (($x1338 (and $x1300 $x1295)))
 (let (($x89 (and $x1338 $x683)))
 (let (($x314 (and $x89 $x457)))
 (let (($x915 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x395)))
 (let (($x535 (and $x915 $x314)))
 (let (($x597 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x989 (=> $x597 $x535)))
 (let (($x1016 (= $x597 $x585)))
 (let (($x290 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x836 (=> $x290 $x1000)))
 (let (($x274 (= $x290 $x744)))
 (let (($x519 (and $x274 $x836)))
 (let (($x160 (and $x519 $x1016)))
 (let (($x1219 (and $x160 $x989)))
 (let (($x614 (= $x1219 true)))
 (let (($x598 (= $x614 true)))
 (let (($x648 (= $x598 true)))
 (let (($x386 (and $x648 $x686)))
 (let (($x778 (and $x386 $x868)))
 (let (($x471 (and $x778 $x378)))
 (let (($x257 (and $x471 $x79)))
 (let (($x449 (and $x257 $x428)))
 (let (($x80 (and $x449 $x970)))
 (let (($x745 (and $x80 $x822)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x928 (and $x241 $x745)))
 (let (($x145 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x23 (_ bv3 32))))
 (let (($x407 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x982 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x407 $x145)))))))
 (let (($x722 (=> (and $x652 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x407 $x145)))))))
 (let (($x893 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x224 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x168 (=> $x224 (or false (or false (and true (or $x123 $x893)))))))
 (let (($x40 (=> (and $x652 $x224) (or false (or false (and true (or $x123 $x893)))))))
 (let (($x734 (and $x40 $x722)))
 (let (($x377 (and $x734 $x928)))
 (let (($x93 (=> $x377 $x106)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x23 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x810 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem ?x23))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x23 (_ bv2 32))) ?x810))))
 (let (($x1106 (bvule ?x325 (_ bv4294967294 32))))
 (let (($x321 (= $x1106 true)))
 (let (($x106 (= $x321 true)))
 (let ((?x974 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x724 (= (_ bv0 3) ?x974)))
 (let (($x569 (= $x724 true)))
 (let (($x822 (= $x569 true)))
 (let (($x756 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x39 (= $x756 true)))
 (let (($x981 (= $x39 true)))
 (let (($x970 (= $x981 true)))
 (let (($x625 (= (bvand input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967292 32)) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x690 (bvsub input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv0 32))))
 (let (($x894 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690) (bvult input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry ?x690))))
 (let (($x1158 (and true $x894)))
 (let (($x555 (and $x894 $x1158)))
 (let (($x1086 (= (bvand ?x325 (_ bv4294967288 32)) ?x325)))
 (let (($x712 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x1084 (and $x712 $x1086)))
 (let (($x462 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv4 32))) (bvult ?x23 (bvsub ?x23 (_ bv4 32))))))
 (let (($x104 (and (and (and (and (and $x1158 $x462) $x712) $x1084) $x555) $x625)))
 (let (($x119 (= true $x104)))
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x652 (not $x731)))
 (let (($x835 (=> $x652 $x119)))
 (let (($x798 (= $x835 true)))
 (let (($x32 (= $x798 true)))
 (let (($x428 (= $x32 true)))
 (let (($x184 (= $x652 true)))
 (let (($x463 (= $x184 true)))
 (let (($x79 (= $x463 true)))
 (let (($x243 (= (_ bv0 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let (($x548 (= $x243 true)))
 (let (($x378 (= $x548 true)))
 (let ((?x81 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x226 (= (_ bv0 32) ?x81)))
 (let ((?x905 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x905)))
 (let (($x1059 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x590 (and $x1059 $x95)))
 (let (($x950 (and $x590 $x226)))
 (let (($x957 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x379 (and $x957 $x950)))
 (let (($x584 (= $x379 true)))
 (let (($x393 (= $x584 true)))
 (let (($x868 (= $x393 true)))
 (let ((?x1376 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1377 (concat ?x1376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1087 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x353 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x452 (concat ?x353 (concat ?x1087 ?x1377))))
 (let ((?x447 (concat (select input.dst.llvm-mem (bvadd ?x452 (_ bv1 32))) (select input.dst.llvm-mem ?x452))))
 (let ((?x390 (concat (select input.dst.llvm-mem (bvadd ?x452 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x452 (_ bv2 32))) ?x447))))
 (let (($x939 (= input.spec-%var-l-1.2.1.2.0 ?x390)))
 (let (($x936 (and $x939 true)))
 (let (($x459 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x289 (=> $x459 $x936)))
 (let ((?x336 (ite (= (_ bv0 32) ?x452) (_ bv0 32) (_ bv1 32))))
 (let (($x506 (bvuge ?x336 (_ bv1 32))))
 (let (($x863 (= $x459 $x506)))
 (let (($x1000 (= false false)))
 (let (($x455 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x416 (=> $x455 $x1000)))
 (let (($x129 (= ?x336 (_ bv0 32))))
 (let (($x36 (= $x455 $x129)))
 (let (($x840 (and $x36 $x416)))
 (let (($x716 (and $x840 $x863)))
 (let (($x102 (and $x716 $x289)))
 (let ((?x621 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x1090 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x621)))
 (let ((?x395 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x1090)))
 (let (($x1179 (= input.spec-%var-l-1.2.0 ?x395)))
 (let (($x539 (and $x1179 $x102)))
 (let (($x1124 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x999 (=> $x1124 $x539)))
 (let ((?x189 (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32))))
 (let (($x585 (bvuge ?x189 (_ bv1 32))))
 (let (($x1189 (= $x1124 $x585)))
 (let (($x26 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x267 (=> $x26 $x1000)))
 (let (($x744 (= ?x189 (_ bv0 32))))
 (let (($x867 (= $x26 $x744)))
 (let (($x850 (and $x867 $x267)))
 (let (($x1094 (and $x850 $x1189)))
 (let (($x765 (and $x1094 $x999)))
 (let (($x65 (= $x765 true)))
 (let (($x793 (= $x65 true)))
 (let (($x686 (= $x793 true)))
 (let (($x702 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x390)))
 (let (($x197 (and $x702 true)))
 (let (($x521 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x457 (=> $x521 $x197)))
 (let (($x683 (= $x521 $x506)))
 (let (($x1284 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1295 (=> $x1284 $x1000)))
 (let (($x1300 (= $x1284 $x129)))
 (let (($x1338 (and $x1300 $x1295)))
 (let (($x89 (and $x1338 $x683)))
 (let (($x314 (and $x89 $x457)))
 (let (($x915 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x395)))
 (let (($x535 (and $x915 $x314)))
 (let (($x597 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x989 (=> $x597 $x535)))
 (let (($x1016 (= $x597 $x585)))
 (let (($x290 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x836 (=> $x290 $x1000)))
 (let (($x274 (= $x290 $x744)))
 (let (($x519 (and $x274 $x836)))
 (let (($x160 (and $x519 $x1016)))
 (let (($x1219 (and $x160 $x989)))
 (let (($x614 (= $x1219 true)))
 (let (($x598 (= $x614 true)))
 (let (($x648 (= $x598 true)))
 (let (($x386 (and $x648 $x686)))
 (let (($x778 (and $x386 $x868)))
 (let (($x471 (and $x778 $x378)))
 (let (($x257 (and $x471 $x79)))
 (let (($x449 (and $x257 $x428)))
 (let (($x80 (and $x449 $x970)))
 (let (($x745 (and $x80 $x822)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x928 (and $x241 $x745)))
 (let (($x145 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x469 (bvadd ?x23 (_ bv3 32))))
 (let (($x407 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x469)))
 (let (($x982 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x407 $x145)))))))
 (let (($x722 (=> (and $x652 (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x407 $x145)))))))
 (let (($x893 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x224 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32)) (_ bv1 32)))))
 (let (($x168 (=> $x224 (or false (or false (and true (or $x123 $x893)))))))
 (let (($x40 (=> (and $x652 $x224) (or false (or false (and true (or $x123 $x893)))))))
 (let (($x734 (and $x40 $x722)))
 (let (($x377 (and $x734 $x928)))
 (let (($x93 (=> $x377 $x106)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x751 (= $x731 false)))
 (let (($x566 (= $x751 true)))
 (let ((?x1187 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1184 (= (_ bv0 3) ?x1187)))
 (let (($x1190 (= $x1184 true)))
 (let (($x1188 (= $x1190 true)))
 (let (($x557 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x704 (= $x557 true)))
 (let (($x332 (= $x704 true)))
 (let (($x1149 (= $x332 true)))
 (let ((?x849 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x849 (_ bv1 32))) (select input.dst.llvm-mem ?x849))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x849 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x849 (_ bv2 32))) ?x291))))
 (let ((?x1093 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x1093))))
 (let (($x1007 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x380)))
 (let (($x647 (and $x1007 true)))
 (let (($x1176 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1167 (=> $x1176 $x647)))
 (let (($x28 (= $x1176 (bvuge (ite (= (_ bv0 32) ?x137) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x614 (= false false)))
 (let (($x1220 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1015 (=> $x1220 $x614)))
 (let (($x166 (= $x1220 (= (ite (= (_ bv0 32) ?x137) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1170 (and $x166 $x1015)))
 (let (($x1068 (and $x1170 $x28)))
 (let (($x1169 (and $x1068 $x1167)))
 (let ((?x921 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x741 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x860 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x143 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x348 (concat (select input.dst.llvm-mem ?x143) (concat ?x860 (concat ?x741 ?x921)))))
 (let (($x482 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x348)))
 (let (($x1216 (and $x482 $x1169)))
 (let (($x236 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1221 (=> $x236 $x1216)))
 (let (($x563 (= $x236 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1013 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x159 (=> $x1013 $x614)))
 (let (($x84 (= $x1013 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x464 (and $x84 $x159)))
 (let (($x1077 (and $x464 $x563)))
 (let (($x1224 (and $x1077 $x1221)))
 (let (($x1223 (= $x1224 true)))
 (let (($x680 (= $x1223 true)))
 (let (($x633 (= $x680 true)))
 (let ((?x1298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1301 (= (_ bv0 32) ?x1298)))
 (let ((?x1197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1297 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1197)))
 (let (($x1302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1303 (and $x1302 $x1297)))
 (let (($x1198 (and $x1303 $x1301)))
 (let (($x1052 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1232 (and $x1052 $x1198)))
 (let (($x1235 (= $x1232 true)))
 (let (($x1274 (= $x1235 true)))
 (let (($x1296 (= $x1274 true)))
 (let ((?x929 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x747 (bvneg ?x929)))
 (let (($x29 (= ?x747 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x1097 (= $x29 true)))
 (let (($x1103 (= $x1097 true)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x406 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1021 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x587 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x517 (concat ?x587 (concat ?x1021 ?x406))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x517 (_ bv1 32))) (select input.dst.llvm-mem ?x517))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x517 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x517 (_ bv2 32))) ?x816))))
 (let (($x132 (= input.spec-%var-l-1.2.1.2.0 ?x270)))
 (let (($x961 (and $x132 true)))
 (let (($x528 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x579 (=> $x528 $x961)))
 (let (($x720 (= $x528 (bvuge (ite (= (_ bv0 32) ?x517) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x928 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x822 (=> $x928 $x614)))
 (let (($x569 (= $x928 (= (ite (= (_ bv0 32) ?x517) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x377 (and $x569 $x822)))
 (let (($x1019 (and $x377 $x720)))
 (let (($x820 (and $x1019 $x579)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x257)))
 (let ((?x1158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x476)))
 (let (($x937 (= input.spec-%var-l-1.2.0 ?x1158)))
 (let (($x986 (and $x937 $x820)))
 (let (($x1189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x975 (=> $x1189 $x986)))
 (let (($x1134 (= $x1189 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x457 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x598 (=> $x457 $x614)))
 (let (($x1219 (= $x457 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x648 (and $x1219 $x598)))
 (let (($x1179 (and $x648 $x1134)))
 (let (($x394 (and $x1179 $x975)))
 (let (($x279 (= $x394 true)))
 (let (($x796 (= $x279 true)))
 (let (($x234 (= $x796 true)))
 (let (($x259 (and $x234 $x1103)))
 (let (($x1299 (and $x259 $x1296)))
 (let (($x340 (and $x1299 $x633)))
 (let (($x769 (and $x340 $x1149)))
 (let (($x1191 (and $x769 $x1188)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1185 (and $x290 $x1191)))
 (let ((?x224 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1075 (bvugt ?x224 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x711 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x224 (_ bv3 32)))))
 (let (($x241 (=> (bvule ?x224 (bvsub (bvadd ?x224 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x711 $x1075)))))))
 (let (($x652 (not $x731)))
 (let (($x917 (=> (and $x652 (bvule ?x224 (bvsub (bvadd ?x224 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x711 $x1075)))))))
 (let (($x748 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x693 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x427 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x849 (_ bv1 32))) (or false (or false (and true (or $x693 $x748)))))))
 (let (($x391 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x849 (_ bv1 32)))) (or false (or false (and true (or $x693 $x748)))))))
 (let (($x469 (and $x391 $x917)))
 (let (($x552 (and $x469 $x1185)))
 (let (($x900 (=> $x552 $x566)))
 (not $x900)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x751 (= $x731 false)))
 (let (($x566 (= $x751 true)))
 (let ((?x1187 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1184 (= (_ bv0 3) ?x1187)))
 (let (($x1190 (= $x1184 true)))
 (let (($x1188 (= $x1190 true)))
 (let (($x557 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x704 (= $x557 true)))
 (let (($x332 (= $x704 true)))
 (let (($x1149 (= $x332 true)))
 (let ((?x849 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x291 (concat (select input.dst.llvm-mem (bvadd ?x849 (_ bv1 32))) (select input.dst.llvm-mem ?x849))))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x849 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x849 (_ bv2 32))) ?x291))))
 (let ((?x1093 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x1093))))
 (let (($x1007 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x380)))
 (let (($x647 (and $x1007 true)))
 (let (($x1176 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1167 (=> $x1176 $x647)))
 (let (($x28 (= $x1176 (bvuge (ite (= (_ bv0 32) ?x137) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x614 (= false false)))
 (let (($x1220 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1015 (=> $x1220 $x614)))
 (let (($x166 (= $x1220 (= (ite (= (_ bv0 32) ?x137) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1170 (and $x166 $x1015)))
 (let (($x1068 (and $x1170 $x28)))
 (let (($x1169 (and $x1068 $x1167)))
 (let ((?x921 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x741 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x860 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x143 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x348 (concat (select input.dst.llvm-mem ?x143) (concat ?x860 (concat ?x741 ?x921)))))
 (let (($x482 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x348)))
 (let (($x1216 (and $x482 $x1169)))
 (let (($x236 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1221 (=> $x236 $x1216)))
 (let (($x563 (= $x236 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1013 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x159 (=> $x1013 $x614)))
 (let (($x84 (= $x1013 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x464 (and $x84 $x159)))
 (let (($x1077 (and $x464 $x563)))
 (let (($x1224 (and $x1077 $x1221)))
 (let (($x1223 (= $x1224 true)))
 (let (($x680 (= $x1223 true)))
 (let (($x633 (= $x680 true)))
 (let ((?x1298 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1301 (= (_ bv0 32) ?x1298)))
 (let ((?x1197 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1297 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1197)))
 (let (($x1302 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1303 (and $x1302 $x1297)))
 (let (($x1198 (and $x1303 $x1301)))
 (let (($x1052 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1232 (and $x1052 $x1198)))
 (let (($x1235 (= $x1232 true)))
 (let (($x1274 (= $x1235 true)))
 (let (($x1296 (= $x1274 true)))
 (let ((?x929 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x747 (bvneg ?x929)))
 (let (($x29 (= ?x747 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x1097 (= $x29 true)))
 (let (($x1103 (= $x1097 true)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x406 (concat ?x93 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1021 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x587 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x517 (concat ?x587 (concat ?x1021 ?x406))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x517 (_ bv1 32))) (select input.dst.llvm-mem ?x517))))
 (let ((?x270 (concat (select input.dst.llvm-mem (bvadd ?x517 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x517 (_ bv2 32))) ?x816))))
 (let (($x132 (= input.spec-%var-l-1.2.1.2.0 ?x270)))
 (let (($x961 (and $x132 true)))
 (let (($x528 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x579 (=> $x528 $x961)))
 (let (($x720 (= $x528 (bvuge (ite (= (_ bv0 32) ?x517) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x928 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x822 (=> $x928 $x614)))
 (let (($x569 (= $x928 (= (ite (= (_ bv0 32) ?x517) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x377 (and $x569 $x822)))
 (let (($x1019 (and $x377 $x720)))
 (let (($x820 (and $x1019 $x579)))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x257)))
 (let ((?x1158 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x476)))
 (let (($x937 (= input.spec-%var-l-1.2.0 ?x1158)))
 (let (($x986 (and $x937 $x820)))
 (let (($x1189 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x975 (=> $x1189 $x986)))
 (let (($x1134 (= $x1189 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x457 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x598 (=> $x457 $x614)))
 (let (($x1219 (= $x457 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x648 (and $x1219 $x598)))
 (let (($x1179 (and $x648 $x1134)))
 (let (($x394 (and $x1179 $x975)))
 (let (($x279 (= $x394 true)))
 (let (($x796 (= $x279 true)))
 (let (($x234 (= $x796 true)))
 (let (($x259 (and $x234 $x1103)))
 (let (($x1299 (and $x259 $x1296)))
 (let (($x340 (and $x1299 $x633)))
 (let (($x769 (and $x340 $x1149)))
 (let (($x1191 (and $x769 $x1188)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1185 (and $x290 $x1191)))
 (let ((?x224 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1075 (bvugt ?x224 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x711 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x224 (_ bv3 32)))))
 (let (($x241 (=> (bvule ?x224 (bvsub (bvadd ?x224 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x711 $x1075)))))))
 (let (($x652 (not $x731)))
 (let (($x917 (=> (and $x652 (bvule ?x224 (bvsub (bvadd ?x224 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x711 $x1075)))))))
 (let (($x748 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x693 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x427 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x849 (_ bv1 32))) (or false (or false (and true (or $x693 $x748)))))))
 (let (($x391 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x849 (_ bv1 32)))) (or false (or false (and true (or $x693 $x748)))))))
 (let (($x469 (and $x391 $x917)))
 (let (($x552 (and $x469 $x1185)))
 (let (($x900 (=> $x552 $x566)))
 (not $x900)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv40960 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv40963 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1118 (= $x731 false)))
 (let (($x1173 (= $x1118 true)))
 (let ((?x235 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1017 (= (_ bv0 3) ?x235)))
 (let (($x1136 (= $x1017 true)))
 (let (($x1023 (= $x1136 true)))
 (let (($x543 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1186 (= $x543 true)))
 (let (($x233 (= $x1186 true)))
 (let (($x1127 (= $x233 true)))
 (let ((?x123 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x546 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x101))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv1 32))) (select input.dst.llvm-mem ?x546))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv2 32))) ?x90))))
 (let (($x687 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x35)))
 (let (($x385 (and $x687 false)))
 (let (($x666 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1152 (=> $x666 $x385)))
 (let (($x549 (= $x666 (bvuge (ite (= (_ bv0 32) ?x546) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x279 (= false false)))
 (let (($x755 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (=> $x755 $x279)))
 (let (($x565 (= $x755 (= (ite (= (_ bv0 32) ?x546) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1089 (and $x565 $x16)))
 (let (($x764 (and $x1089 $x549)))
 (let (($x812 (and $x764 $x1152)))
 (let ((?x1076 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1039 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x299 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x553 (concat (select input.dst.llvm-mem ?x299) (concat ?x148 (concat ?x1039 ?x1076)))))
 (let (($x916 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x553)))
 (let (($x488 (and $x916 $x812)))
 (let (($x41 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x604 (=> $x41 $x488)))
 (let (($x276 (= $x41 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x923 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x529 (=> $x923 $x279)))
 (let (($x1095 (= $x923 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1067 (and $x1095 $x529)))
 (let (($x223 (and $x1067 $x276)))
 (let (($x480 (and $x223 $x604)))
 (let (($x902 (= $x480 true)))
 (let (($x373 (= $x902 true)))
 (let (($x475 (= $x373 true)))
 (let ((?x970 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x974 (= (_ bv0 32) ?x970)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x428 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x449 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x756 (and $x449 $x428)))
 (let (($x226 (and $x756 $x974)))
 (let (($x981 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x981 $x226)))
 (let (($x548 (= $x243 true)))
 (let (($x868 (= $x548 true)))
 (let (($x778 (= $x868 true)))
 (let ((?x119 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x835 (bvneg ?x119)))
 (let (($x724 (= ?x835 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= $x724 true)))
 (let (($x80 (= $x32 true)))
 (let ((?x526 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1000 (concat ?x526 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1080 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x18 (concat ?x1080 (concat ?x597 ?x1000))))
 (let ((?x863 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x765 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x863))))
 (let (($x81 (= input.spec-%var-l-1.2.1.2.0 ?x765)))
 (let (($x289 (and $x81 false)))
 (let (($x466 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x793 (=> $x466 $x289)))
 (let (($x585 (= $x466 (bvuge (ite (= (_ bv0 32) ?x18) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x803 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x566 (=> $x803 $x279)))
 (let (($x751 (= $x803 (= (ite (= (_ bv0 32) ?x18) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x674 (and $x751 $x566)))
 (let (($x20 (and $x674 $x585)))
 (let (($x865 (and $x20 $x793)))
 (let ((?x775 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x934 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x775)))
 (let ((?x732 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x934)))
 (let (($x514 (= input.spec-%var-l-1.2.0 ?x732)))
 (let (($x1059 (and $x514 $x865)))
 (let (($x1097 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x686 (=> $x1097 $x1059)))
 (let (($x259 (= $x1097 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x579 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x796 (=> $x579 $x279)))
 (let (($x394 (= $x579 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x234 (and $x394 $x796)))
 (let (($x1061 (and $x234 $x259)))
 (let (($x590 (and $x1061 $x686)))
 (let (($x386 (= $x590 true)))
 (let (($x905 (= $x386 true)))
 (let (($x102 (= $x905 true)))
 (let (($x203 (and $x102 $x80)))
 (let (($x379 (and $x203 $x778)))
 (let (($x837 (and $x379 $x475)))
 (let (($x1121 (and $x837 $x1127)))
 (let (($x1025 (and $x1121 $x1023)))
 (let (($x457 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1135 (and $x457 $x1025)))
 (let ((?x331 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x722 (bvugt ?x331 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x982 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x331 (_ bv3 32)))))
 (let (($x290 (=> (bvule ?x331 (bvsub (bvadd ?x331 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x982 $x722)))))))
 (let (($x652 (not $x731)))
 (let (($x664 (=> (and $x652 (bvule ?x331 (bvsub (bvadd ?x331 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x982 $x722)))))))
 (let (($x40 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x299)))
 (let (($x145 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x123 (_ bv1 32))) (or false (or false (and true (or $x168 $x40)))))))
 (let (($x656 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x123 (_ bv1 32)))) (or false (or false (and true (or $x168 $x40)))))))
 (let (($x316 (and $x656 $x664)))
 (let (($x853 (and $x316 $x1135)))
 (let (($x1085 (=> $x853 $x1173)))
 (not $x1085)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1118 (= $x731 false)))
 (let (($x1173 (= $x1118 true)))
 (let ((?x235 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1017 (= (_ bv0 3) ?x235)))
 (let (($x1136 (= $x1017 true)))
 (let (($x1023 (= $x1136 true)))
 (let (($x543 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1186 (= $x543 true)))
 (let (($x233 (= $x1186 true)))
 (let (($x1127 (= $x233 true)))
 (let ((?x123 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem ?x123))))
 (let ((?x546 (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x123 (_ bv2 32))) ?x101))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv1 32))) (select input.dst.llvm-mem ?x546))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x546 (_ bv2 32))) ?x90))))
 (let (($x687 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x35)))
 (let (($x385 (and $x687 false)))
 (let (($x666 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x1152 (=> $x666 $x385)))
 (let (($x549 (= $x666 (bvuge (ite (= (_ bv0 32) ?x546) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x279 (= false false)))
 (let (($x755 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x16 (=> $x755 $x279)))
 (let (($x565 (= $x755 (= (ite (= (_ bv0 32) ?x546) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1089 (and $x565 $x16)))
 (let (($x764 (and $x1089 $x549)))
 (let (($x812 (and $x764 $x1152)))
 (let ((?x1076 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1039 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x299 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x553 (concat (select input.dst.llvm-mem ?x299) (concat ?x148 (concat ?x1039 ?x1076)))))
 (let (($x916 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x553)))
 (let (($x488 (and $x916 $x812)))
 (let (($x41 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x604 (=> $x41 $x488)))
 (let (($x276 (= $x41 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x923 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x529 (=> $x923 $x279)))
 (let (($x1095 (= $x923 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1067 (and $x1095 $x529)))
 (let (($x223 (and $x1067 $x276)))
 (let (($x480 (and $x223 $x604)))
 (let (($x902 (= $x480 true)))
 (let (($x373 (= $x902 true)))
 (let (($x475 (= $x373 true)))
 (let ((?x970 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x974 (= (_ bv0 32) ?x970)))
 (let ((?x118 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x428 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x449 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x756 (and $x449 $x428)))
 (let (($x226 (and $x756 $x974)))
 (let (($x981 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x243 (and $x981 $x226)))
 (let (($x548 (= $x243 true)))
 (let (($x868 (= $x548 true)))
 (let (($x778 (= $x868 true)))
 (let ((?x119 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x835 (bvneg ?x119)))
 (let (($x724 (= ?x835 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x32 (= $x724 true)))
 (let (($x80 (= $x32 true)))
 (let ((?x526 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1000 (concat ?x526 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x597 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1080 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x18 (concat ?x1080 (concat ?x597 ?x1000))))
 (let ((?x863 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv1 32))) (select input.dst.llvm-mem ?x18))))
 (let ((?x765 (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x18 (_ bv2 32))) ?x863))))
 (let (($x81 (= input.spec-%var-l-1.2.1.2.0 ?x765)))
 (let (($x289 (and $x81 false)))
 (let (($x466 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x793 (=> $x466 $x289)))
 (let (($x585 (= $x466 (bvuge (ite (= (_ bv0 32) ?x18) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x803 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x566 (=> $x803 $x279)))
 (let (($x751 (= $x803 (= (ite (= (_ bv0 32) ?x18) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x674 (and $x751 $x566)))
 (let (($x20 (and $x674 $x585)))
 (let (($x865 (and $x20 $x793)))
 (let ((?x775 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x934 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x775)))
 (let ((?x732 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x934)))
 (let (($x514 (= input.spec-%var-l-1.2.0 ?x732)))
 (let (($x1059 (and $x514 $x865)))
 (let (($x1097 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x686 (=> $x1097 $x1059)))
 (let (($x259 (= $x1097 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x579 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x796 (=> $x579 $x279)))
 (let (($x394 (= $x579 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x234 (and $x394 $x796)))
 (let (($x1061 (and $x234 $x259)))
 (let (($x590 (and $x1061 $x686)))
 (let (($x386 (= $x590 true)))
 (let (($x905 (= $x386 true)))
 (let (($x102 (= $x905 true)))
 (let (($x203 (and $x102 $x80)))
 (let (($x379 (and $x203 $x778)))
 (let (($x837 (and $x379 $x475)))
 (let (($x1121 (and $x837 $x1127)))
 (let (($x1025 (and $x1121 $x1023)))
 (let (($x457 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1135 (and $x457 $x1025)))
 (let ((?x331 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x722 (bvugt ?x331 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x982 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x331 (_ bv3 32)))))
 (let (($x290 (=> (bvule ?x331 (bvsub (bvadd ?x331 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x982 $x722)))))))
 (let (($x652 (not $x731)))
 (let (($x664 (=> (and $x652 (bvule ?x331 (bvsub (bvadd ?x331 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x982 $x722)))))))
 (let (($x40 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x168 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x299)))
 (let (($x145 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x123 (_ bv1 32))) (or false (or false (and true (or $x168 $x40)))))))
 (let (($x656 (=> (and $x652 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x123 (_ bv1 32)))) (or false (or false (and true (or $x168 $x40)))))))
 (let (($x316 (and $x656 $x664)))
 (let (($x853 (and $x316 $x1135)))
 (let (($x1085 (=> $x853 $x1173)))
 (not $x1085)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-0.L2%6%bbentry.0 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry #b00000000000000000000000000000000)
(= input.spec-%var-sum-0.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_18)
(function @fun_18
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8192 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8192 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv8195 32))
(define-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x893 (not $x731)))
 (let (($x1300 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1335 (or $x1300 $x893)))
 (let (($x1312 (= $x1335 true)))
 (let (($x1306 (= $x1312 true)))
 (let ((?x1309 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1331 (= (_ bv0 3) ?x1309)))
 (let (($x1332 (= $x1331 true)))
 (let (($x354 (= $x1332 true)))
 (let (($x1381 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1328 (= $x1381 true)))
 (let (($x1374 (= $x1328 true)))
 (let (($x815 (= $x1374 true)))
 (let ((?x693 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv1 32))) (select input.dst.llvm-mem ?x693))))
 (let ((?x1099 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv2 32))) ?x607))))
 (let ((?x784 (concat (select input.dst.llvm-mem (bvadd ?x1099 (_ bv1 32))) (select input.dst.llvm-mem ?x1099))))
 (let ((?x1372 (concat (select input.dst.llvm-mem (bvadd ?x1099 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1099 (_ bv2 32))) ?x784))))
 (let (($x1336 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1372)))
 (let (($x781 (and $x1336 true)))
 (let (($x68 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x188 (=> $x68 $x781)))
 (let (($x516 (= $x68 (bvuge (ite (= (_ bv0 32) ?x1099) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x386 (= false false)))
 (let (($x1125 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1098 (=> $x1125 $x386)))
 (let (($x1038 (= $x1125 (= (ite (= (_ bv0 32) ?x1099) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x54 (and $x1038 $x1098)))
 (let (($x99 (and $x54 $x516)))
 (let (($x802 (and $x99 $x188)))
 (let ((?x1090 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1304 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem ?x23) (concat ?x441 (concat ?x1304 ?x1090)))))
 (let (($x912 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x300)))
 (let (($x1333 (and $x912 $x802)))
 (let (($x850 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x788 (=> $x850 $x1333)))
 (let (($x26 (= $x850 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x987 (=> $x1300 $x386)))
 (let (($x1377 (= $x1300 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x450 (and $x1377 $x987)))
 (let (($x702 (and $x450 $x26)))
 (let (($x1226 (and $x702 $x788)))
 (let (($x642 (= $x1226 true)))
 (let (($x180 (= $x642 true)))
 (let (($x707 (= $x180 true)))
 (let ((?x1190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1185 (= (_ bv0 32) ?x1190)))
 (let ((?x769 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x769)))
 (let (($x1149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1182 (and $x1149 $x332)))
 (let (($x860 (and $x1182 $x1185)))
 (let (($x1184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x1184 $x860)))
 (let (($x1220 (= $x73 true)))
 (let (($x388 (= $x1220 true)))
 (let (($x348 (= $x388 true)))
 (let ((?x340 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x907 (bvneg ?x340)))
 (let (($x552 (= ?x907 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x704 (= $x552 true)))
 (let (($x1188 (= $x704 true)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x614 (concat ?x79 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x612 (concat ?x1189 ?x614))))
 (let ((?x1301 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x1071 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x1301))))
 (let (($x495 (= input.spec-%var-l-1.2.1.2.0 ?x1071)))
 (let (($x1296 (and $x495 true)))
 (let (($x1026 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (=> $x1026 $x1296)))
 (let (($x1094 (= $x1026 (bvuge (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1130 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x1173 (=> $x1130 $x386)))
 (let (($x1118 (= $x1130 (= (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x274 (and $x1118 $x1173)))
 (let (($x471 (and $x274 $x1094)))
 (let (($x236 (and $x471 $x84)))
 (let ((?x1218 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x738 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x1218)))
 (let ((?x396 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x738)))
 (let (($x1329 (= input.spec-%var-l-1.2.0 ?x396)))
 (let (($x563 (and $x1329 $x236)))
 (let (($x32 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x159 (=> $x32 $x563)))
 (let (($x203 (= $x32 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x793 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x905 (=> $x793 $x386)))
 (let (($x590 (= $x793 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x102 (and $x590 $x905)))
 (let (($x39 (and $x102 $x203)))
 (let (($x215 (and $x39 $x159)))
 (let (($x464 (= $x215 true)))
 (let (($x1077 (= $x464 true)))
 (let (($x1299 (= $x1077 true)))
 (let (($x1191 (and $x1299 $x1188)))
 (let (($x741 (and $x1191 $x348)))
 (let (($x910 (and $x741 $x707)))
 (let (($x1375 (and $x910 $x815)))
 (let (($x1022 (and $x1375 $x354)))
 (let (($x579 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1137 (and $x579 $x1022)))
 (let ((?x123 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x917 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x123 (_ bv3 32)))))
 (let (($x457 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x241 $x917)))))))
 (let (($x298 (=> (and $x893 (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x241 $x917)))))))
 (let (($x391 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x1075 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x693 (_ bv1 32))) (or false (or false (and true (or $x427 $x391)))))))
 (let (($x849 (=> (and $x893 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x693 (_ bv1 32)))) (or false (or false (and true (or $x427 $x391)))))))
 (let (($x611 (and $x849 $x298)))
 (let (($x1308 (and $x611 $x1137)))
 (let (($x1334 (=> $x1308 $x1306)))
 (not $x1334))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x731 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x893 (not $x731)))
 (let (($x1300 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x1335 (or $x1300 $x893)))
 (let (($x1312 (= $x1335 true)))
 (let (($x1306 (= $x1312 true)))
 (let ((?x1309 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x1331 (= (_ bv0 3) ?x1309)))
 (let (($x1332 (= $x1331 true)))
 (let (($x354 (= $x1332 true)))
 (let (($x1381 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x1328 (= $x1381 true)))
 (let (($x1374 (= $x1328 true)))
 (let (($x815 (= $x1374 true)))
 (let ((?x693 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x607 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv1 32))) (select input.dst.llvm-mem ?x693))))
 (let ((?x1099 (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x693 (_ bv2 32))) ?x607))))
 (let ((?x784 (concat (select input.dst.llvm-mem (bvadd ?x1099 (_ bv1 32))) (select input.dst.llvm-mem ?x1099))))
 (let ((?x1372 (concat (select input.dst.llvm-mem (bvadd ?x1099 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1099 (_ bv2 32))) ?x784))))
 (let (($x1336 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1372)))
 (let (($x781 (and $x1336 true)))
 (let (($x68 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x188 (=> $x68 $x781)))
 (let (($x516 (= $x68 (bvuge (ite (= (_ bv0 32) ?x1099) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x386 (= false false)))
 (let (($x1125 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1098 (=> $x1125 $x386)))
 (let (($x1038 (= $x1125 (= (ite (= (_ bv0 32) ?x1099) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x54 (and $x1038 $x1098)))
 (let (($x99 (and $x54 $x516)))
 (let (($x802 (and $x99 $x188)))
 (let ((?x1090 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x1304 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x441 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem ?x23) (concat ?x441 (concat ?x1304 ?x1090)))))
 (let (($x912 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x300)))
 (let (($x1333 (and $x912 $x802)))
 (let (($x850 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x788 (=> $x850 $x1333)))
 (let (($x26 (= $x850 (bvuge (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x987 (=> $x1300 $x386)))
 (let (($x1377 (= $x1300 (= (ite $x731 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x450 (and $x1377 $x987)))
 (let (($x702 (and $x450 $x26)))
 (let (($x1226 (and $x702 $x788)))
 (let (($x642 (= $x1226 true)))
 (let (($x180 (= $x642 true)))
 (let (($x707 (= $x180 true)))
 (let ((?x1190 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1185 (= (_ bv0 32) ?x1190)))
 (let ((?x769 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x769)))
 (let (($x1149 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1182 (and $x1149 $x332)))
 (let (($x860 (and $x1182 $x1185)))
 (let (($x1184 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (and $x1184 $x860)))
 (let (($x1220 (= $x73 true)))
 (let (($x388 (= $x1220 true)))
 (let (($x348 (= $x388 true)))
 (let ((?x340 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x907 (bvneg ?x340)))
 (let (($x552 (= ?x907 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x704 (= $x552 true)))
 (let (($x1188 (= $x704 true)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x614 (concat ?x79 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1189 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x612 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x393 (concat ?x612 (concat ?x1189 ?x614))))
 (let ((?x1301 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv1 32))) (select input.dst.llvm-mem ?x393))))
 (let ((?x1071 (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x393 (_ bv2 32))) ?x1301))))
 (let (($x495 (= input.spec-%var-l-1.2.1.2.0 ?x1071)))
 (let (($x1296 (and $x495 true)))
 (let (($x1026 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x84 (=> $x1026 $x1296)))
 (let (($x1094 (= $x1026 (bvuge (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1130 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x1173 (=> $x1130 $x386)))
 (let (($x1118 (= $x1130 (= (ite (= (_ bv0 32) ?x393) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x274 (and $x1118 $x1173)))
 (let (($x471 (and $x274 $x1094)))
 (let (($x236 (and $x471 $x84)))
 (let ((?x1218 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x738 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x1218)))
 (let ((?x396 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x738)))
 (let (($x1329 (= input.spec-%var-l-1.2.0 ?x396)))
 (let (($x563 (and $x1329 $x236)))
 (let (($x32 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x159 (=> $x32 $x563)))
 (let (($x203 (= $x32 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x793 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x905 (=> $x793 $x386)))
 (let (($x590 (= $x793 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x102 (and $x590 $x905)))
 (let (($x39 (and $x102 $x203)))
 (let (($x215 (and $x39 $x159)))
 (let (($x464 (= $x215 true)))
 (let (($x1077 (= $x464 true)))
 (let (($x1299 (= $x1077 true)))
 (let (($x1191 (and $x1299 $x1188)))
 (let (($x741 (and $x1191 $x348)))
 (let (($x910 (and $x741 $x707)))
 (let (($x1375 (and $x910 $x815)))
 (let (($x1022 (and $x1375 $x354)))
 (let (($x579 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1137 (and $x579 $x1022)))
 (let ((?x123 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x917 (bvugt ?x123 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x123 (_ bv3 32)))))
 (let (($x457 (=> (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x241 $x917)))))))
 (let (($x298 (=> (and $x893 (bvule ?x123 (bvsub (bvadd ?x123 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x241 $x917)))))))
 (let (($x391 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x427 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x1075 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x693 (_ bv1 32))) (or false (or false (and true (or $x427 $x391)))))))
 (let (($x849 (=> (and $x893 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x693 (_ bv1 32)))) (or false (or false (and true (or $x427 $x391)))))))
 (let (($x611 (and $x849 $x298)))
 (let (($x1308 (and $x611 $x1137)))
 (let (($x1334 (=> $x1308 $x1306)))
 (not $x1334))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x740 (= input.spec-%var-sum-0.L2%6%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x496 (= $x740 true)))
 (let (($x1195 (= $x496 true)))
 (let ((?x846 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x48 (bvneg ?x846)))
 (let (($x645 (= ?x48 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x504 (= $x645 true)))
 (let (($x251 (= $x504 true)))
 (let ((?x873 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x679 (= (_ bv0 32) ?x873)))
 (let ((?x635 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x890 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x635)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1194 (and $x268 $x890)))
 (let (($x147 (and $x1194 $x679)))
 (let (($x580 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1183 (and $x580 $x147)))
 (let (($x1157 (= $x1183 true)))
 (let (($x790 (= $x1157 true)))
 (let (($x700 (= $x790 true)))
 (let ((?x696 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x814 (= (_ bv0 3) ?x696)))
 (let (($x315 (= $x814 true)))
 (let (($x1028 (= $x315 true)))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x819 (concat ?x362 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1007 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1223 (concat ?x380 (concat ?x1007 ?x819))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x1223 (_ bv1 32))) (select input.dst.llvm-mem ?x1223))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x1223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1223 (_ bv2 32))) ?x326))))
 (let (($x1327 (= input.spec-%var-l-1.2.1.2.0 ?x309)))
 (let (($x721 (and $x1327 true)))
 (let (($x1338 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1084 (=> $x1338 $x721)))
 (let (($x952 (= $x1338 (bvuge (ite (= (_ bv0 32) ?x1223) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x864 (= false false)))
 (let (($x965 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x694 (=> $x965 $x864)))
 (let (($x1225 (= $x965 (= (ite (= (_ bv0 32) ?x1223) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x708 (and $x1225 $x694)))
 (let (($x1295 (and $x708 $x952)))
 (let (($x625 (and $x1295 $x1084)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x636 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x132)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x636)))
 (let (($x1052 (= input.spec-%var-l-1.2.0 ?x125)))
 (let (($x1172 (and $x1052 $x625)))
 (let (($x419 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x914 (=> $x419 $x1172)))
 (let (($x782 (= $x419 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x148 (=> $x1121 $x864)))
 (let (($x1135 (= $x1121 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x927 (and $x1135 $x148)))
 (let (($x324 (and $x927 $x782)))
 (let (($x1330 (and $x324 $x914)))
 (let (($x534 (= $x1330 true)))
 (let (($x263 (= $x534 true)))
 (let (($x555 (= $x263 true)))
 (let (($x835 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x798 (= $x835 true)))
 (let (($x724 (= $x798 true)))
 (let (($x428 (= $x724 true)))
 (let ((?x188 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x1226 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x1381 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x1226))))
 (let ((?x986 (concat (select input.dst.llvm-mem (bvadd ?x1381 (_ bv1 32))) (select input.dst.llvm-mem ?x1381))))
 (let ((?x1074 (concat (select input.dst.llvm-mem (bvadd ?x1381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1381 (_ bv2 32))) ?x986))))
 (let (($x1151 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1074)))
 (let (($x18 (and $x1151 true)))
 (let (($x279 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x674 (=> $x279 $x18)))
 (let (($x556 (= $x279 (bvuge (ite (= (_ bv0 32) ?x1381) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1336 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1326 (=> $x1336 $x864)))
 (let (($x784 (= $x1336 (= (ite (= (_ bv0 32) ?x1381) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x781 (and $x784 $x1326)))
 (let (($x1012 (and $x781 $x556)))
 (let (($x559 (and $x1012 $x674)))
 (let ((?x348 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x447 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x450 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x1051 (= input.spec-%var-l-0.L2%6%bbentry.2.0 (concat ?x450 (concat ?x452 (concat ?x447 ?x348))))))
 (let (($x716 (and $x1051 $x559)))
 (let (($x471 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x161 (=> $x471 $x716)))
 (let (($x711 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x614 (ite $x711 (_ bv0 32) (_ bv1 32))))
 (let (($x795 (= $x471 (bvuge ?x614 (_ bv1 32)))))
 (let (($x584 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x425 (=> $x584 $x864)))
 (let (($x393 (= $x584 (= ?x614 (_ bv0 32)))))
 (let (($x525 (and $x393 $x425)))
 (let (($x1013 (and $x525 $x795)))
 (let (($x585 (and $x1013 $x161)))
 (let (($x566 (= $x585 true)))
 (let (($x564 (= $x566 true)))
 (let (($x1000 (= $x564 true)))
 (let (($x168 (= $x711 true)))
 (let (($x40 (= $x168 true)))
 (let (($x23 (= $x40 true)))
 (let (($x462 (and $x23 $x1000)))
 (let (($x157 (and $x462 $x428)))
 (let (($x503 (and $x157 $x555)))
 (let (($x1339 (and $x503 $x1028)))
 (let (($x266 (and $x1339 $x700)))
 (let (($x78 (and $x266 $x251)))
 (let (($x971 (and $x584 $x78)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x616 (and $x693 $x971)))
 (let (($x699 (=> $x616 $x1195)))
 (not $x699)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x740 (= input.spec-%var-sum-0.L2%6%bbentry input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x496 (= $x740 true)))
 (let (($x1195 (= $x496 true)))
 (let ((?x846 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x48 (bvneg ?x846)))
 (let (($x645 (= ?x48 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x504 (= $x645 true)))
 (let (($x251 (= $x504 true)))
 (let ((?x873 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x679 (= (_ bv0 32) ?x873)))
 (let ((?x635 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x890 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x635)))
 (let (($x268 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1194 (and $x268 $x890)))
 (let (($x147 (and $x1194 $x679)))
 (let (($x580 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1183 (and $x580 $x147)))
 (let (($x1157 (= $x1183 true)))
 (let (($x790 (= $x1157 true)))
 (let (($x700 (= $x790 true)))
 (let ((?x696 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x814 (= (_ bv0 3) ?x696)))
 (let (($x315 (= $x814 true)))
 (let (($x1028 (= $x315 true)))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x819 (concat ?x362 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1007 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1223 (concat ?x380 (concat ?x1007 ?x819))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x1223 (_ bv1 32))) (select input.dst.llvm-mem ?x1223))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd ?x1223 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1223 (_ bv2 32))) ?x326))))
 (let (($x1327 (= input.spec-%var-l-1.2.1.2.0 ?x309)))
 (let (($x721 (and $x1327 true)))
 (let (($x1338 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1084 (=> $x1338 $x721)))
 (let (($x952 (= $x1338 (bvuge (ite (= (_ bv0 32) ?x1223) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x864 (= false false)))
 (let (($x965 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x694 (=> $x965 $x864)))
 (let (($x1225 (= $x965 (= (ite (= (_ bv0 32) ?x1223) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x708 (and $x1225 $x694)))
 (let (($x1295 (and $x708 $x952)))
 (let (($x625 (and $x1295 $x1084)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x636 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x132)))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x636)))
 (let (($x1052 (= input.spec-%var-l-1.2.0 ?x125)))
 (let (($x1172 (and $x1052 $x625)))
 (let (($x419 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x914 (=> $x419 $x1172)))
 (let (($x782 (= $x419 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1121 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x148 (=> $x1121 $x864)))
 (let (($x1135 (= $x1121 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x927 (and $x1135 $x148)))
 (let (($x324 (and $x927 $x782)))
 (let (($x1330 (and $x324 $x914)))
 (let (($x534 (= $x1330 true)))
 (let (($x263 (= $x534 true)))
 (let (($x555 (= $x263 true)))
 (let (($x835 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x798 (= $x835 true)))
 (let (($x724 (= $x798 true)))
 (let (($x428 (= $x724 true)))
 (let ((?x188 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x1226 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv1 32))) (select input.dst.llvm-mem ?x188))))
 (let ((?x1381 (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x188 (_ bv2 32))) ?x1226))))
 (let ((?x986 (concat (select input.dst.llvm-mem (bvadd ?x1381 (_ bv1 32))) (select input.dst.llvm-mem ?x1381))))
 (let ((?x1074 (concat (select input.dst.llvm-mem (bvadd ?x1381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1381 (_ bv2 32))) ?x986))))
 (let (($x1151 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x1074)))
 (let (($x18 (and $x1151 true)))
 (let (($x279 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x674 (=> $x279 $x18)))
 (let (($x556 (= $x279 (bvuge (ite (= (_ bv0 32) ?x1381) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1336 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x1326 (=> $x1336 $x864)))
 (let (($x784 (= $x1336 (= (ite (= (_ bv0 32) ?x1381) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x781 (and $x784 $x1326)))
 (let (($x1012 (and $x781 $x556)))
 (let (($x559 (and $x1012 $x674)))
 (let ((?x348 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x447 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x452 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x450 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32)))))
 (let (($x1051 (= input.spec-%var-l-0.L2%6%bbentry.2.0 (concat ?x450 (concat ?x452 (concat ?x447 ?x348))))))
 (let (($x716 (and $x1051 $x559)))
 (let (($x471 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x161 (=> $x471 $x716)))
 (let (($x711 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x614 (ite $x711 (_ bv0 32) (_ bv1 32))))
 (let (($x795 (= $x471 (bvuge ?x614 (_ bv1 32)))))
 (let (($x584 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x425 (=> $x584 $x864)))
 (let (($x393 (= $x584 (= ?x614 (_ bv0 32)))))
 (let (($x525 (and $x393 $x425)))
 (let (($x1013 (and $x525 $x795)))
 (let (($x585 (and $x1013 $x161)))
 (let (($x566 (= $x585 true)))
 (let (($x564 (= $x566 true)))
 (let (($x1000 (= $x564 true)))
 (let (($x168 (= $x711 true)))
 (let (($x40 (= $x168 true)))
 (let (($x23 (= $x40 true)))
 (let (($x462 (and $x23 $x1000)))
 (let (($x157 (and $x462 $x428)))
 (let (($x503 (and $x157 $x555)))
 (let (($x1339 (and $x503 $x1028)))
 (let (($x266 (and $x1339 $x700)))
 (let (($x78 (and $x266 $x251)))
 (let (($x971 (and $x584 $x78)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x616 (and $x693 $x971)))
 (let (($x699 (=> $x616 $x1195)))
 (not $x699)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x693 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x299 (not $x693)))
 (let (($x410 (or $x693 $x299)))
 (let (($x57 (= $x410 true)))
 (let (($x1204 (= $x57 true)))
 (let ((?x1120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x7 (= (_ bv0 3) ?x1120)))
 (let (($x639 (= $x7 true)))
 (let (($x1177 (= $x639 true)))
 (let (($x273 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x478 (= $x273 true)))
 (let (($x1126 (= $x478 true)))
 (let (($x1210 (= $x1126 true)))
 (let ((?x584 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x1041 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem ?x584))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv2 32))) ?x1041))))
 (let ((?x671 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x671))))
 (let (($x981 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x492)))
 (let (($x449 (and $x981 true)))
 (let (($x1125 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x291 (=> $x1125 $x449)))
 (let (($x1099 (= $x1125 (bvuge (ite (= (_ bv0 32) ?x73) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x953 (= false false)))
 (let (($x1062 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x68 (=> $x1062 $x953)))
 (let (($x399 (= $x1062 (= (ite (= (_ bv0 32) ?x73) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1222 (and $x399 $x68)))
 (let (($x1138 (and $x1222 $x1099)))
 (let (($x259 (and $x1138 $x291)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x425 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x1091 (concat (select input.dst.llvm-mem ?x425) (concat ?x203 (concat ?x213 ?x12)))))
 (let (($x574 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x1091)))
 (let (($x775 (and $x574 $x259)))
 (let (($x1032 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1171 (=> $x1032 $x775)))
 (let (($x390 (= $x1032 (bvuge (ite $x693 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x323 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x460 (=> $x323 $x953)))
 (let (($x1207 (= $x323 (= (ite $x693 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1100 (and $x1207 $x460)))
 (let (($x267 (and $x1100 $x390)))
 (let (($x137 (and $x267 $x1171)))
 (let (($x238 (= $x137 true)))
 (let (($x15 (= $x238 true)))
 (let (($x95 (= $x15 true)))
 (let ((?x725 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x938 (= (_ bv0 32) ?x725)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x940 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x822 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x822 $x940)))
 (let (($x561 (and $x111 $x938)))
 (let (($x729 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x377 (and $x729 $x561)))
 (let (($x1019 (= $x377 true)))
 (let (($x720 (= $x1019 true)))
 (let (($x93 (= $x720 true)))
 (let ((?x517 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x406 (bvneg ?x517)))
 (let (($x114 (= ?x406 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x951 (= $x114 true)))
 (let (($x439 (= $x951 true)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x611 (concat ?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x664 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x982 (concat ?x123 (concat ?x664 ?x611))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv1 32))) (select input.dst.llvm-mem ?x982))))
 (let ((?x1297 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv2 32))) ?x476))))
 (let (($x967 (= input.spec-%var-l-1.2.1.2.0 ?x1297)))
 (let (($x678 (and $x967 true)))
 (let (($x923 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1021 (=> $x923 $x678)))
 (let (($x666 (= $x923 (bvuge (ite (= (_ bv0 32) ?x982) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x764 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x702 (=> $x764 $x953)))
 (let (($x26 (= $x764 (= (ite (= (_ bv0 32) ?x982) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x35 (and $x26 $x702)))
 (let (($x837 (and $x35 $x666)))
 (let (($x1224 (and $x837 $x1021)))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x315)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x97)))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x207 (and $x268 $x1224)))
 (let (($x1093 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x321 (=> $x1093 $x207)))
 (let (($x380 (= $x1093 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x747 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x1107 (=> $x747 $x953)))
 (let (($x29 (= $x747 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x753 (and $x29 $x1107)))
 (let (($x1167 (and $x753 $x380)))
 (let (($x1123 (and $x1167 $x321)))
 (let (($x655 (= $x1123 true)))
 (let (($x937 (= $x655 true)))
 (let (($x275 (= $x937 true)))
 (let (($x894 (and $x275 $x439)))
 (let (($x109 (and $x894 $x93)))
 (let (($x1174 (and $x109 $x95)))
 (let (($x1209 (and $x1174 $x1210)))
 (let (($x1205 (and $x1209 $x1177)))
 (let (($x656 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1213 (and $x656 $x1205)))
 (let ((?x79 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x447 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x79 (_ bv3 32)))))
 (let (($x1372 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x741 $x447)))))))
 (let (($x987 (=> (and $x299 (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x741 $x447)))))))
 (let (($x471 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x525 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x425)))
 (let (($x469 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x584 (_ bv1 32))) (or false (or false (and true (or $x525 $x471)))))))
 (let (($x23 (=> (and $x299 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x584 (_ bv1 32)))) (or false (or false (and true (or $x525 $x471)))))))
 (let (($x450 (and $x23 $x987)))
 (let (($x1206 (and $x450 $x1213)))
 (let (($x1114 (=> $x1206 $x1204)))
 (not $x1114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-0.L2%6%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-sum-0.L2%6%bbentry () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x693 (= (_ bv0 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x299 (not $x693)))
 (let (($x410 (or $x693 $x299)))
 (let (($x57 (= $x410 true)))
 (let (($x1204 (= $x57 true)))
 (let ((?x1120 ((_ extract 2 0) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x7 (= (_ bv0 3) ?x1120)))
 (let (($x639 (= $x7 true)))
 (let (($x1177 (= $x639 true)))
 (let (($x273 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4294967294 32))))
 (let (($x478 (= $x273 true)))
 (let (($x1126 (= $x478 true)))
 (let (($x1210 (= $x1126 true)))
 (let ((?x584 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv4 32))))
 (let ((?x1041 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv1 32))) (select input.dst.llvm-mem ?x584))))
 (let ((?x73 (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x584 (_ bv2 32))) ?x1041))))
 (let ((?x671 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv1 32))) (select input.dst.llvm-mem ?x73))))
 (let ((?x492 (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x73 (_ bv2 32))) ?x671))))
 (let (($x981 (= input.spec-%var-l-0.L2%6%bbentry.2.1.2.0 ?x492)))
 (let (($x449 (and $x981 true)))
 (let (($x1125 (bvuge input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv1 32))))
 (let (($x291 (=> $x1125 $x449)))
 (let (($x1099 (= $x1125 (bvuge (ite (= (_ bv0 32) ?x73) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x953 (= false false)))
 (let (($x1062 (= input.spec-%var-l-0.L2%6%bbentry.2.1.0 (_ bv0 32))))
 (let (($x68 (=> $x1062 $x953)))
 (let (($x399 (= $x1062 (= (ite (= (_ bv0 32) ?x73) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1222 (and $x399 $x68)))
 (let (($x1138 (and $x1222 $x1099)))
 (let (($x259 (and $x1138 $x291)))
 (let ((?x12 (select input.dst.llvm-mem input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv1 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv2 32)))))
 (let ((?x425 (bvadd input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (_ bv3 32))))
 (let ((?x1091 (concat (select input.dst.llvm-mem ?x425) (concat ?x203 (concat ?x213 ?x12)))))
 (let (($x574 (= input.spec-%var-l-0.L2%6%bbentry.2.0 ?x1091)))
 (let (($x775 (and $x574 $x259)))
 (let (($x1032 (bvuge input.spec-%var-l-0.L2%6%bbentry.0 (_ bv1 32))))
 (let (($x1171 (=> $x1032 $x775)))
 (let (($x390 (= $x1032 (bvuge (ite $x693 (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x323 (= input.spec-%var-l-0.L2%6%bbentry.0 (_ bv0 32))))
 (let (($x460 (=> $x323 $x953)))
 (let (($x1207 (= $x323 (= (ite $x693 (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1100 (and $x1207 $x460)))
 (let (($x267 (and $x1100 $x390)))
 (let (($x137 (and $x267 $x1171)))
 (let (($x238 (= $x137 true)))
 (let (($x15 (= $x238 true)))
 (let (($x95 (= $x15 true)))
 (let ((?x725 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x938 (= (_ bv0 32) ?x725)))
 (let ((?x212 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x940 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x822 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x111 (and $x822 $x940)))
 (let (($x561 (and $x111 $x938)))
 (let (($x729 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x377 (and $x729 $x561)))
 (let (($x1019 (= $x377 true)))
 (let (($x720 (= $x1019 true)))
 (let (($x93 (= $x720 true)))
 (let ((?x517 (bvmul (_ bv4294967295 32) input.spec-%var-sum-0.L2%6%bbentry)))
 (let ((?x406 (bvneg ?x517)))
 (let (($x114 (= ?x406 input.dst.llvm-%sum.0.Lwhile.cond%1%bbentry)))
 (let (($x951 (= $x114 true)))
 (let (($x439 (= $x951 true)))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x611 (concat ?x298 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x664 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x982 (concat ?x123 (concat ?x664 ?x611))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv1 32))) (select input.dst.llvm-mem ?x982))))
 (let ((?x1297 (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x982 (_ bv2 32))) ?x476))))
 (let (($x967 (= input.spec-%var-l-1.2.1.2.0 ?x1297)))
 (let (($x678 (and $x967 true)))
 (let (($x923 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1021 (=> $x923 $x678)))
 (let (($x666 (= $x923 (bvuge (ite (= (_ bv0 32) ?x982) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x764 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x702 (=> $x764 $x953)))
 (let (($x26 (= $x764 (= (ite (= (_ bv0 32) ?x982) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x35 (and $x26 $x702)))
 (let (($x837 (and $x35 $x666)))
 (let (($x1224 (and $x837 $x1021)))
 (let ((?x315 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x315)))
 (let ((?x45 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x97)))
 (let (($x268 (= input.spec-%var-l-1.2.0 ?x45)))
 (let (($x207 (and $x268 $x1224)))
 (let (($x1093 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x321 (=> $x1093 $x207)))
 (let (($x380 (= $x1093 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x747 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x1107 (=> $x747 $x953)))
 (let (($x29 (= $x747 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x753 (and $x29 $x1107)))
 (let (($x1167 (and $x753 $x380)))
 (let (($x1123 (and $x1167 $x321)))
 (let (($x655 (= $x1123 true)))
 (let (($x937 (= $x655 true)))
 (let (($x275 (= $x937 true)))
 (let (($x894 (and $x275 $x439)))
 (let (($x109 (and $x894 $x93)))
 (let (($x1174 (and $x109 $x95)))
 (let (($x1209 (and $x1174 $x1210)))
 (let (($x1205 (and $x1209 $x1177)))
 (let (($x656 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1213 (and $x656 $x1205)))
 (let ((?x79 (bvadd (_ bv4 32) input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry)))
 (let (($x447 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x741 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x79 (_ bv3 32)))))
 (let (($x1372 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x741 $x447)))))))
 (let (($x987 (=> (and $x299 (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32)))) (or false (or false (and true (or $x741 $x447)))))))
 (let (($x471 (bvugt input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x525 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x425)))
 (let (($x469 (=> (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x584 (_ bv1 32))) (or false (or false (and true (or $x525 $x471)))))))
 (let (($x23 (=> (and $x299 (bvule input.dst.llvm-%l.addr.0.Lwhile.cond%1%bbentry (bvsub ?x584 (_ bv1 32)))) (or false (or false (and true (or $x525 $x471)))))))
 (let (($x450 (and $x23 $x987)))
 (let (($x1206 (and $x450 $x1213)))
 (let (($x1114 (=> $x1206 $x1204)))
 (not $x1114))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x633 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1295 (= (_ bv0 32) ?x633)))
 (let ((?x1052 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x415 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1052)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x965 (and $x125 $x415)))
 (let (($x325 (and $x965 $x1295)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (and $x132 $x325)))
 (let (($x911 (= $x407 true)))
 (let (($x1235 (= $x911 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1010 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x694 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x708 (concat ?x694 (concat ?x691 (concat ?x1010 ?x104)))))
 (let (($x1371 (= ?x708 input.dst.llvm-%l)))
 (let (($x952 (= $x1371 true)))
 (let (($x1194 (= $x952 true)))
 (let (($x680 (= input.dst.llvm-%l ?x708)))
 (let (($x1216 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x132) $x325)))
 (let (($x1223 (and $x1216 $x680)))
 (let ((?x291 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x259 (concat ?x291 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x15 (concat ?x1171 ?x259))))
 (let ((?x566 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x566))))
 (let (($x835 (= input.spec-%var-l-1.2.1.2.0 ?x419)))
 (let (($x564 (and $x835 true)))
 (let (($x1106 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x980 (=> $x1106 $x564)))
 (let (($x188 (= $x1106 (bvuge (ite (= (_ bv0 32) ?x95) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x611 (= false false)))
 (let (($x671 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x867 (=> $x671 $x611)))
 (let (($x482 (= $x671 (= (ite (= (_ bv0 32) ?x95) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x482 $x867)))
 (let (($x910 (and $x118 $x188)))
 (let (($x148 (and $x910 $x980)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x93)))
 (let ((?x1207 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x323)))
 (let (($x460 (= input.spec-%var-l-1.2.0 ?x1207)))
 (let (($x1127 (and $x460 $x148)))
 (let (($x923 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x428 (=> $x923 $x1127)))
 (let (($x666 (= $x923 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x734 (=> $x290 $x611)))
 (let (($x1179 (= $x290 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x982 (and $x1179 $x734)))
 (let (($x837 (and $x982 $x666)))
 (let (($x233 (and $x837 $x428)))
 (let (($x819 (and $x233 $x1223)))
 (let (($x1068 (= $x819 true)))
 (let (($x1225 (= $x1068 true)))
 (let (($x1338 (= $x1225 true)))
 (let (($x873 (and $x1338 $x1194)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x627 (and $x693 $x873)))
 (let (($x457 (=> $x627 $x1235)))
 (not $x457)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x633 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1295 (= (_ bv0 32) ?x633)))
 (let ((?x1052 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x415 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1052)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x965 (and $x125 $x415)))
 (let (($x325 (and $x965 $x1295)))
 (let (($x132 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (and $x132 $x325)))
 (let (($x911 (= $x407 true)))
 (let (($x1235 (= $x911 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1010 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x691 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x694 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x708 (concat ?x694 (concat ?x691 (concat ?x1010 ?x104)))))
 (let (($x1371 (= ?x708 input.dst.llvm-%l)))
 (let (($x952 (= $x1371 true)))
 (let (($x1194 (= $x952 true)))
 (let (($x680 (= input.dst.llvm-%l ?x708)))
 (let (($x1216 (and (and (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l) $x132) $x325)))
 (let (($x1223 (and $x1216 $x680)))
 (let ((?x291 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x259 (concat ?x291 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1171 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x95 (concat ?x15 (concat ?x1171 ?x259))))
 (let ((?x566 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv1 32))) (select input.dst.llvm-mem ?x95))))
 (let ((?x419 (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x95 (_ bv2 32))) ?x566))))
 (let (($x835 (= input.spec-%var-l-1.2.1.2.0 ?x419)))
 (let (($x564 (and $x835 true)))
 (let (($x1106 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x980 (=> $x1106 $x564)))
 (let (($x188 (= $x1106 (bvuge (ite (= (_ bv0 32) ?x95) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x611 (= false false)))
 (let (($x671 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x867 (=> $x671 $x611)))
 (let (($x482 (= $x671 (= (ite (= (_ bv0 32) ?x95) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x118 (and $x482 $x867)))
 (let (($x910 (and $x118 $x188)))
 (let (($x148 (and $x910 $x980)))
 (let ((?x93 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x93)))
 (let ((?x1207 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x323)))
 (let (($x460 (= input.spec-%var-l-1.2.0 ?x1207)))
 (let (($x1127 (and $x460 $x148)))
 (let (($x923 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x428 (=> $x923 $x1127)))
 (let (($x666 (= $x923 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x290 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x734 (=> $x290 $x611)))
 (let (($x1179 (= $x290 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x982 (and $x1179 $x734)))
 (let (($x837 (and $x982 $x666)))
 (let (($x233 (and $x837 $x428)))
 (let (($x819 (and $x233 $x1223)))
 (let (($x1068 (= $x819 true)))
 (let (($x1225 (= $x1068 true)))
 (let (($x1338 (= $x1225 true)))
 (let (($x873 (and $x1338 $x1194)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x627 (and $x693 $x873)))
 (let (($x457 (=> $x627 $x1235)))
 (not $x457)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1195 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x1195 (_ bv1 32))) (select input.dst.llvm-mem ?x1195))))
 (let ((?x846 (concat (select input.dst.llvm-mem (bvadd ?x1195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1195 (_ bv2 32))) ?x187))))
 (let ((?x914 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x534 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x1172 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x616 (concat ?x251 (concat ?x1172 (concat ?x534 ?x914)))))
 (let ((?x625 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x1119 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x625 false ?x616 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x846)))
 (let (($x687 (= $x1119 true)))
 (let (($x475 (= $x687 true)))
 (let ((?x635 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x928 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x1115 (concat ?x928 (concat ?x1180 (concat ?x539 ?x635)))))
 (let (($x812 (= ?x1115 input.dst.llvm-%l)))
 (let (($x171 (= $x812 true)))
 (let (($x604 (= $x171 true)))
 (let (($x283 (= input.dst.llvm-%l ?x1115)))
 (let ((?x897 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1097 (= (_ bv0 32) ?x897)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x247 $x1173)))
 (let (($x1381 (and $x101 $x1097)))
 (let (($x1134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x915 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x777 (and (and (and $x915 $x1134) $x1381) $x283)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x321 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x528 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x655 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x937 (concat ?x655 (concat ?x528 ?x321))))
 (let ((?x555 (bvadd ?x937 (_ bv4 32))))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x555 (_ bv1 32))) (select input.dst.llvm-mem ?x555))))
 (let ((?x971 (concat (select input.dst.llvm-mem (bvadd ?x555 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x555 (_ bv2 32))) ?x504))))
 (let (($x645 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x971 ?x625 false ?x616 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x846)))
 (let ((?x751 (concat (select input.dst.llvm-mem (bvadd ?x937 (_ bv1 32))) (select input.dst.llvm-mem ?x937))))
 (let ((?x1210 (concat (select input.dst.llvm-mem (bvadd ?x937 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x937 (_ bv2 32))) ?x751))))
 (let (($x1136 (= input.spec-%var-l-1.2.1.2.0 ?x1210)))
 (let (($x362 (and $x1136 $x645)))
 (let (($x399 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x784 (=> $x399 $x362)))
 (let (($x1149 (= $x399 (bvuge (ite (= (_ bv0 32) ?x937) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1121 (= false false)))
 (let (($x722 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x241 (=> $x722 $x1121)))
 (let (($x1302 (= $x722 (= (ite (= (_ bv0 32) ?x937) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x917 (and $x1302 $x241)))
 (let (($x712 (and $x917 $x1149)))
 (let (($x1326 (and $x712 $x784)))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x525)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x452)))
 (let (($x1013 (= input.spec-%var-l-1.2.0 ?x197)))
 (let (($x765 (and $x1013 $x1326)))
 (let (($x1052 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x279 (=> $x1052 $x765)))
 (let (($x965 (= $x1052 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x980 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x119 (=> $x980 $x1121)))
 (let (($x233 (= $x980 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1000 (and $x233 $x119)))
 (let (($x633 (and $x1000 $x965)))
 (let (($x416 (and $x633 $x279)))
 (let (($x1192 (and $x416 $x777)))
 (let (($x1122 (= $x1192 true)))
 (let (($x816 (= $x1122 true)))
 (let (($x480 (= $x816 true)))
 (let (($x373 (and $x480 $x604)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1152 (and $x693 $x373)))
 (let (($x488 (=> $x1152 $x475)))
 (not $x488))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1195 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x1195 (_ bv1 32))) (select input.dst.llvm-mem ?x1195))))
 (let ((?x846 (concat (select input.dst.llvm-mem (bvadd ?x1195 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1195 (_ bv2 32))) ?x187))))
 (let ((?x914 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x534 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x1172 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x616 (concat ?x251 (concat ?x1172 (concat ?x534 ?x914)))))
 (let ((?x625 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let (($x1119 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 input.dst.llvm-%l ?x625 false ?x616 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x846)))
 (let (($x687 (= $x1119 true)))
 (let (($x475 (= $x687 true)))
 (let ((?x635 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x539 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x928 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x1115 (concat ?x928 (concat ?x1180 (concat ?x539 ?x635)))))
 (let (($x812 (= ?x1115 input.dst.llvm-%l)))
 (let (($x171 (= $x812 true)))
 (let (($x604 (= $x171 true)))
 (let (($x283 (= input.dst.llvm-%l ?x1115)))
 (let ((?x897 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1097 (= (_ bv0 32) ?x897)))
 (let ((?x141 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x1173 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x141)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x247 $x1173)))
 (let (($x1381 (and $x101 $x1097)))
 (let (($x1134 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x915 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x777 (and (and (and $x915 $x1134) $x1381) $x283)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x321 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x528 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x655 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x937 (concat ?x655 (concat ?x528 ?x321))))
 (let ((?x555 (bvadd ?x937 (_ bv4 32))))
 (let ((?x504 (concat (select input.dst.llvm-mem (bvadd ?x555 (_ bv1 32))) (select input.dst.llvm-mem ?x555))))
 (let ((?x971 (concat (select input.dst.llvm-mem (bvadd ?x555 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x555 (_ bv2 32))) ?x504))))
 (let (($x645 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x971 ?x625 false ?x616 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x846)))
 (let ((?x751 (concat (select input.dst.llvm-mem (bvadd ?x937 (_ bv1 32))) (select input.dst.llvm-mem ?x937))))
 (let ((?x1210 (concat (select input.dst.llvm-mem (bvadd ?x937 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x937 (_ bv2 32))) ?x751))))
 (let (($x1136 (= input.spec-%var-l-1.2.1.2.0 ?x1210)))
 (let (($x362 (and $x1136 $x645)))
 (let (($x399 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x784 (=> $x399 $x362)))
 (let (($x1149 (= $x399 (bvuge (ite (= (_ bv0 32) ?x937) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1121 (= false false)))
 (let (($x722 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x241 (=> $x722 $x1121)))
 (let (($x1302 (= $x722 (= (ite (= (_ bv0 32) ?x937) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x917 (and $x1302 $x241)))
 (let (($x712 (and $x917 $x1149)))
 (let (($x1326 (and $x712 $x784)))
 (let ((?x525 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x525)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x452)))
 (let (($x1013 (= input.spec-%var-l-1.2.0 ?x197)))
 (let (($x765 (and $x1013 $x1326)))
 (let (($x1052 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x279 (=> $x1052 $x765)))
 (let (($x965 (= $x1052 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x980 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x119 (=> $x980 $x1121)))
 (let (($x233 (= $x980 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1000 (and $x233 $x119)))
 (let (($x633 (and $x1000 $x965)))
 (let (($x416 (and $x633 $x279)))
 (let (($x1192 (and $x416 $x777)))
 (let (($x1122 (= $x1192 true)))
 (let (($x816 (= $x1122 true)))
 (let (($x480 (= $x816 true)))
 (let (($x373 (and $x480 $x604)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1152 (and $x693 $x373)))
 (let (($x488 (=> $x1152 $x475)))
 (not $x488))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b10000000000000000000000000000000)
(= input.dst.llvm-%l #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_37)
(= input.dst.llvm-mem @fun_34)
(function @fun_37
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_37 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b10000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_34
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6844 (_ BitVec 32)) (BOUND_VARIABLE_6845 (_ BitVec 32)) (BOUND_VARIABLE_6846 (_ BitVec 32)) (BOUND_VARIABLE_6847 Bool) (BOUND_VARIABLE_6848 (_ BitVec 32)) (BOUND_VARIABLE_6849 (_ BitVec 32)) (BOUND_VARIABLE_6850 (_ BitVec 32)) (BOUND_VARIABLE_6851 (_ BitVec 32)) (BOUND_VARIABLE_6852 (_ BitVec 32)) (BOUND_VARIABLE_6853 (_ BitVec 32)) (BOUND_VARIABLE_6854 Bool) (BOUND_VARIABLE_6855 (_ BitVec 32)) (BOUND_VARIABLE_6856 (_ BitVec 32)) (BOUND_VARIABLE_6857 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x00000003)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00000000)
              (= x!12 #x00000003)
              (= x!13 #x00000000))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1333 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x300 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x1213 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x212))))
 (let ((?x439 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x725 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x951 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x1205 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x951 (concat ?x725 (concat ?x267 ?x439))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1213 ?x1333 false)))
 (let (($x971 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x648 (=> $x971 $x1205)))
 (let (($x1327 (= $x971 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x496 (= false false)))
 (let (($x731 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (=> $x731 $x496)))
 (let (($x555 (= $x731 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x699 (and $x555 $x78)))
 (let (($x625 (and $x699 $x1327)))
 (let (($x39 (and $x625 $x648)))
 (let (($x1328 (= $x39 true)))
 (let (($x1021 (= $x1328 true)))
 (let ((?x1336 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x1373 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x1373 (concat ?x99 (concat ?x324 ?x1336)))))
 (let (($x975 (= ?x73 input.dst.llvm-%l)))
 (let (($x650 (= $x975 true)))
 (let (($x788 (= $x650 true)))
 (let (($x1018 (= input.dst.llvm-%l ?x73)))
 (let ((?x850 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x450 (= (_ bv0 32) ?x850)))
 (let ((?x315 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x315)))
 (let (($x1339 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1208 (and $x1339 $x305)))
 (let (($x656 (and $x1208 $x450)))
 (let (($x580 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x605 (and (and (and $x348 $x580) $x656) $x1018)))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x460 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x671 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x291 (concat ?x449 (concat ?x671 ?x190))))
 (let ((?x747 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x1028 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x747))))
 (let (($x168 (= input.spec-%var-l-1.2.1.2.0 ?x1028)))
 (let (($x748 (and $x168 true)))
 (let (($x614 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x391 (=> $x614 $x748)))
 (let (($x482 (= $x614 (bvuge (ite (= (_ bv0 32) ?x291) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x720 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x864 (=> $x720 $x496)))
 (let (($x1033 (= $x720 (= (ite (= (_ bv0 32) ?x291) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x15 (and $x1033 $x864)))
 (let (($x1106 (and $x15 $x482)))
 (let (($x164 (and $x1106 $x391)))
 (let ((?x1381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x928 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x1381)))
 (let ((?x890 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x928)))
 (let (($x539 (= input.spec-%var-l-1.2.0 ?x890)))
 (let (($x457 (and $x539 $x164)))
 (let (($x425 (=> $x971 $x457)))
 (let (($x558 (and $x625 $x425)))
 (let (($x1091 (and $x558 $x605)))
 (let (($x234 (= $x1091 true)))
 (let (($x203 (= $x234 true)))
 (let (($x306 (= $x203 true)))
 (let (($x546 (and $x306 $x788)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x213 (and $x693 $x546)))
 (let (($x565 (=> $x213 $x1021)))
 (not $x565)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x1333 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x300 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv1 32))) (select input.dst.llvm-mem ?x300))))
 (let ((?x1213 (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x300 (_ bv2 32))) ?x212))))
 (let ((?x439 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x267 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x725 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x951 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let (($x1205 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 input.dst.llvm-%l (concat ?x951 (concat ?x725 (concat ?x267 ?x439))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1213 ?x1333 false)))
 (let (($x971 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x648 (=> $x971 $x1205)))
 (let (($x1327 (= $x971 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x496 (= false false)))
 (let (($x731 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x78 (=> $x731 $x496)))
 (let (($x555 (= $x731 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x699 (and $x555 $x78)))
 (let (($x625 (and $x699 $x1327)))
 (let (($x39 (and $x625 $x648)))
 (let (($x1328 (= $x39 true)))
 (let (($x1021 (= $x1328 true)))
 (let ((?x1336 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x1373 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x1373 (concat ?x99 (concat ?x324 ?x1336)))))
 (let (($x975 (= ?x73 input.dst.llvm-%l)))
 (let (($x650 (= $x975 true)))
 (let (($x788 (= $x650 true)))
 (let (($x1018 (= input.dst.llvm-%l ?x73)))
 (let ((?x850 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x450 (= (_ bv0 32) ?x850)))
 (let ((?x315 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x315)))
 (let (($x1339 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1208 (and $x1339 $x305)))
 (let (($x656 (and $x1208 $x450)))
 (let (($x580 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x348 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x605 (and (and (and $x348 $x580) $x656) $x1018)))
 (let ((?x460 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x460 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x671 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x449 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x291 (concat ?x449 (concat ?x671 ?x190))))
 (let ((?x747 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv1 32))) (select input.dst.llvm-mem ?x291))))
 (let ((?x1028 (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x291 (_ bv2 32))) ?x747))))
 (let (($x168 (= input.spec-%var-l-1.2.1.2.0 ?x1028)))
 (let (($x748 (and $x168 true)))
 (let (($x614 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x391 (=> $x614 $x748)))
 (let (($x482 (= $x614 (bvuge (ite (= (_ bv0 32) ?x291) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x720 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x864 (=> $x720 $x496)))
 (let (($x1033 (= $x720 (= (ite (= (_ bv0 32) ?x291) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x15 (and $x1033 $x864)))
 (let (($x1106 (and $x15 $x482)))
 (let (($x164 (and $x1106 $x391)))
 (let ((?x1381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x928 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x1381)))
 (let ((?x890 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x928)))
 (let (($x539 (= input.spec-%var-l-1.2.0 ?x890)))
 (let (($x457 (and $x539 $x164)))
 (let (($x425 (=> $x971 $x457)))
 (let (($x558 (and $x625 $x425)))
 (let (($x1091 (and $x558 $x605)))
 (let (($x234 (= $x1091 true)))
 (let (($x203 (= $x234 true)))
 (let (($x306 (= $x203 true)))
 (let (($x546 (and $x306 $x788)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x213 (and $x693 $x546)))
 (let (($x565 (=> $x213 $x1021)))
 (not $x565)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_54)
(= input.dst.llvm-mem @fun_51)
(function @fun_54
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_54 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_51
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_51 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_6421 (_ BitVec 32)) (BOUND_VARIABLE_6422 (_ BitVec 32)) (BOUND_VARIABLE_6423 (_ BitVec 32)) (BOUND_VARIABLE_6424 (_ BitVec 32)) (BOUND_VARIABLE_6425 (_ BitVec 32)) (BOUND_VARIABLE_6426 (_ BitVec 32)) (BOUND_VARIABLE_6427 Bool) (BOUND_VARIABLE_6428 (_ BitVec 32)) (BOUND_VARIABLE_6429 (_ BitVec 32)) (BOUND_VARIABLE_6430 (_ BitVec 32)) (BOUND_VARIABLE_6431 (_ BitVec 32)) (BOUND_VARIABLE_6432 (_ BitVec 32)) (BOUND_VARIABLE_6433 (_ BitVec 32)) (BOUND_VARIABLE_6434 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv9 32) (_ bv128 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv32768 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv524288 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xfffffffd)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x22075ebf)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x78)
                                #x00000001
                                #xf8)
                         #xfffffffe
                         #xf8)
                  #x00000006
                  #xff)))
(let ((a!2 (store (store (store (store a!1 #xfffffffd #xf8) #x00000004 #xf8)
                         #x00000007
                         #x15)
                  #x00000000
                  #xf8)))
(let ((a!3 (store (store (store (store a!2 #x00000004 #xf8) #x15fffffc #xf8)
                         #x15ffffff
                         #xf8)
                  #x15fffffd
                  #xf8)))
  (store (store (store a!3 #x00000002 #xf8) #x00000003 #xf8) #x00000005 #xff)))))
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x78787878)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x15fffff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xfffffffd)
              (= x!8 #x15fffff8)
              (= x!9 #xf878f8f8)
              (= x!10 #xfffffffd)
              (= x!11 #xf8f8f8f8)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x745 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x745))))
 (let ((?x1225 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x507 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x873 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x1297 (concat ?x873 (concat ?x507 (concat ?x104 ?x1225)))))
 (let ((?x708 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x1151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1126 (concat ?x1151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x712 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x724 (concat ?x478 (concat ?x712 ?x1126))))
 (let (($x386 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x724 ?x708 false ?x1297 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x678)))
 (let ((?x707 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x851 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x707)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x851)))
 (let (($x863 (= input.spec-%var-l-1.2.0 ?x212)))
 (let (($x556 (and $x863 $x386)))
 (let (($x315 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x81 (=> $x315 $x556)))
 (let (($x1208 (= $x315 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x326 (= false false)))
 (let (($x391 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x299 (=> $x391 $x326)))
 (let (($x558 (= $x391 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x348 (and $x558 $x299)))
 (let (($x850 (and $x348 $x1208)))
 (let (($x1074 (and $x850 $x81)))
 (let (($x674 (= $x1074 true)))
 (let (($x371 (= $x674 true)))
 (let ((?x764 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x849 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x466 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x476 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x1158 (concat ?x476 (concat ?x466 (concat ?x849 ?x764)))))
 (let (($x1226 (= ?x1158 input.dst.llvm-%l)))
 (let (($x1120 (= $x1226 true)))
 (let (($x57 (= $x1120 true)))
 (let (($x1284 (= input.dst.llvm-%l ?x1158)))
 (let ((?x462 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1107 (= (_ bv0 32) ?x462)))
 (let ((?x798 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x867 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x798)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x927 (and $x95 $x867)))
 (let (($x953 (and $x927 $x1107)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x639 (and (and (and $x118 $x137) $x953) $x1284)))
 (let ((?x782 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x724 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x724 (_ bv4 32))))))
 (let ((?x647 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x724 (_ bv4 32)) (_ bv2 32))) ?x782)))
 (let ((?x1194 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x724 (_ bv4 32)) (_ bv3 32))) ?x647)))
 (let (($x1135 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1194 ?x708 false ?x1297 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x678)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x724 (_ bv1 32))) (select input.dst.llvm-mem ?x724))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x724 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x724 (_ bv2 32))) ?x145))))
 (let (($x290 (= input.spec-%var-l-1.2.1.2.0 ?x816)))
 (let (($x802 (and $x290 $x1135)))
 (let (($x740 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x753 (=> $x740 $x802)))
 (let (($x679 (= $x740 (bvuge (ite (= (_ bv0 32) ?x724) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x35 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x535 (=> $x35 $x326)))
 (let (($x722 (= $x35 (= (ite (= (_ bv0 32) ?x724) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x106 (and $x722 $x535)))
 (let (($x504 (and $x106 $x679)))
 (let (($x380 (and $x504 $x753)))
 (let (($x1093 (and $x863 $x380)))
 (let (($x1167 (=> $x315 $x1093)))
 (let (($x157 (and $x850 $x1167)))
 (let (($x1177 (and $x157 $x639)))
 (let (($x1206 (= $x1177 true)))
 (let (($x7 (= $x1206 true)))
 (let (($x1114 (= $x7 true)))
 (let (($x1209 (and $x1114 $x57)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1214 (and $x693 $x1209)))
 (let (($x1059 (=> $x1214 $x371)))
 (not $x1059)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x207 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x745 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x678 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x745))))
 (let ((?x1225 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x104 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x507 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x873 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x1297 (concat ?x873 (concat ?x507 (concat ?x104 ?x1225)))))
 (let ((?x708 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x1151 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1126 (concat ?x1151 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x712 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x478 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x724 (concat ?x478 (concat ?x712 ?x1126))))
 (let (($x386 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x724 ?x708 false ?x1297 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x678)))
 (let ((?x707 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x851 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x707)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x851)))
 (let (($x863 (= input.spec-%var-l-1.2.0 ?x212)))
 (let (($x556 (and $x863 $x386)))
 (let (($x315 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x81 (=> $x315 $x556)))
 (let (($x1208 (= $x315 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x326 (= false false)))
 (let (($x391 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x299 (=> $x391 $x326)))
 (let (($x558 (= $x391 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x348 (and $x558 $x299)))
 (let (($x850 (and $x348 $x1208)))
 (let (($x1074 (and $x850 $x81)))
 (let (($x674 (= $x1074 true)))
 (let (($x371 (= $x674 true)))
 (let ((?x764 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x849 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x466 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x476 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x1158 (concat ?x476 (concat ?x466 (concat ?x849 ?x764)))))
 (let (($x1226 (= ?x1158 input.dst.llvm-%l)))
 (let (($x1120 (= $x1226 true)))
 (let (($x57 (= $x1120 true)))
 (let (($x1284 (= input.dst.llvm-%l ?x1158)))
 (let ((?x462 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1107 (= (_ bv0 32) ?x462)))
 (let ((?x798 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x867 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x798)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x927 (and $x95 $x867)))
 (let (($x953 (and $x927 $x1107)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x118 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x639 (and (and (and $x118 $x137) $x953) $x1284)))
 (let ((?x782 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x724 (_ bv4 32)) (_ bv1 32))) (select input.dst.llvm-mem (bvadd ?x724 (_ bv4 32))))))
 (let ((?x647 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x724 (_ bv4 32)) (_ bv2 32))) ?x782)))
 (let ((?x1194 (concat (select input.dst.llvm-mem (bvadd (bvadd ?x724 (_ bv4 32)) (_ bv3 32))) ?x647)))
 (let (($x1135 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x1194 ?x708 false ?x1297 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x678)))
 (let ((?x145 (concat (select input.dst.llvm-mem (bvadd ?x724 (_ bv1 32))) (select input.dst.llvm-mem ?x724))))
 (let ((?x816 (concat (select input.dst.llvm-mem (bvadd ?x724 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x724 (_ bv2 32))) ?x145))))
 (let (($x290 (= input.spec-%var-l-1.2.1.2.0 ?x816)))
 (let (($x802 (and $x290 $x1135)))
 (let (($x740 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x753 (=> $x740 $x802)))
 (let (($x679 (= $x740 (bvuge (ite (= (_ bv0 32) ?x724) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x35 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x535 (=> $x35 $x326)))
 (let (($x722 (= $x35 (= (ite (= (_ bv0 32) ?x724) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x106 (and $x722 $x535)))
 (let (($x504 (and $x106 $x679)))
 (let (($x380 (and $x504 $x753)))
 (let (($x1093 (and $x863 $x380)))
 (let (($x1167 (=> $x315 $x1093)))
 (let (($x157 (and $x850 $x1167)))
 (let (($x1177 (and $x157 $x639)))
 (let (($x1206 (= $x1177 true)))
 (let (($x7 (= $x1206 true)))
 (let (($x1114 (= $x7 true)))
 (let (($x1209 (and $x1114 $x57)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x1214 (and $x693 $x1209)))
 (let (($x1059 (=> $x1214 $x371)))
 (not $x1059)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10100000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10100000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.2.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f @fun_62)
(= input.dst.llvm-mem @fun_59)
(function @fun_62
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool
   (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool))
 (=
  (@fun_62 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000001 false #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000)
  false)
 (default true))
(function @fun_59
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_59 #b10100000000000000000000000000011) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((BOUND_VARIABLE_6513 (_ BitVec 32)) (BOUND_VARIABLE_6514 (_ BitVec 32)) (BOUND_VARIABLE_6515 (_ BitVec 32)) (BOUND_VARIABLE_6516 Bool) (BOUND_VARIABLE_6517 (_ BitVec 32)) (BOUND_VARIABLE_6518 (_ BitVec 32)) (BOUND_VARIABLE_6519 (_ BitVec 32)) (BOUND_VARIABLE_6520 (_ BitVec 32)) (BOUND_VARIABLE_6521 (_ BitVec 32)) (BOUND_VARIABLE_6522 (_ BitVec 32)) (BOUND_VARIABLE_6523 Bool) (BOUND_VARIABLE_6524 (_ BitVec 32)) (BOUND_VARIABLE_6525 (_ BitVec 32)) (BOUND_VARIABLE_6526 (_ BitVec 32))) Bool false)
(define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv10 32) (_ bv16 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv1048576 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv1048576 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #xa9687d78)
  (define-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32)
    #x80000001)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00)
                     #x00000006
                     #x80)
              #x80000003
              #x80)
       #x80000003
       #x80))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 Bool)
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 (_ BitVec 32))
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 Bool)
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 (_ BitVec 32))) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x80000001)
              (= x!8 #x00800000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00800000)
              (= x!12 #x80000001)
              (= x!13 #x00000000))
      true
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 false)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 #x00000000)
              (= x!7 #x80000001)
              (= x!8 #x00000000)
              (= x!9 #x00000001)
              (= x!10 false)
              (= x!11 #x00800000)
              (= x!12 #x80000001)
              (= x!13 #x00000000))
      false
      false)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x777 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x846 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x846 (_ bv1 32))) (select input.dst.llvm-mem ?x846))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x846 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x846 (_ bv2 32))) ?x362))))
 (let ((?x1172 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x263 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x1131 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x1157 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x1207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1000 (concat ?x1207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1171 (concat ?x720 (concat ?x539 ?x1000))))
 (let (($x691 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1171 (concat ?x1157 (concat ?x1131 (concat ?x263 ?x1172))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x298 ?x777 false)))
 (let (($x981 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1134 (=> $x981 $x691)))
 (let (($x291 (= $x981 (bvuge (ite (= (_ bv0 32) ?x1171) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x786 (= false false)))
 (let (($x427 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x625 (=> $x427 $x786)))
 (let (($x1180 (= $x427 (= (ite (= (_ bv0 32) ?x1171) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x233 (and $x1180 $x625)))
 (let (($x190 (and $x233 $x291)))
 (let (($x416 (and $x190 $x1134)))
 (let ((?x953 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x953)))
 (let ((?x1221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x476)))
 (let (($x849 (= input.spec-%var-l-1.2.0 ?x1221)))
 (let (($x65 (and $x849 $x416)))
 (let (($x1194 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x1123 (=> $x1194 $x65)))
 (let (($x627 (= $x1194 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x835 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x911 (=> $x835 $x786)))
 (let (($x1068 (= $x835 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x132 (and $x1068 $x911)))
 (let (($x708 (and $x132 $x627)))
 (let (($x148 (and $x708 $x1123)))
 (let (($x1210 (= $x148 true)))
 (let (($x399 (= $x1210 true)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1099 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x734 (concat ?x325 (concat ?x1127 (concat ?x1099 ?x270)))))
 (let (($x93 (= ?x734 input.dst.llvm-%l)))
 (let (($x1019 (= $x93 true)))
 (let (($x915 (= $x1019 true)))
 (let (($x388 (= input.dst.llvm-%l ?x734)))
 (let ((?x1100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x428 (= (_ bv0 32) ?x1100)))
 (let ((?x1330 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x635 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1330)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x525 (and $x172 $x635)))
 (let (($x1052 (and $x525 $x428)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x805 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x1216 (and (and (and $x805 $x119) $x1052) $x388)))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x1171 (_ bv1 32))) (select input.dst.llvm-mem ?x1171))))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd ?x1171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1171 (_ bv2 32))) ?x729))))
 (let (($x516 (= input.spec-%var-l-1.2.1.2.0 ?x452)))
 (let (($x725 (and $x516 true)))
 (let (($x940 (=> $x981 $x725)))
 (let (($x267 (and $x190 $x940)))
 (let (($x1032 (and $x849 $x267)))
 (let (($x982 (=> $x1194 $x1032)))
 (let (($x1051 (and $x708 $x982)))
 (let (($x151 (and $x1051 $x1216)))
 (let (($x561 (= $x151 true)))
 (let (($x363 (= $x561 true)))
 (let (($x440 (= $x363 true)))
 (let (($x1303 (and $x440 $x915)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x711 (and $x693 $x1303)))
 (let (($x795 (=> $x711 $x399)))
 (not $x795))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool) Bool)
(declare-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x777 (ite (= (_ bv0 32) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x846 (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv4 32))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x846 (_ bv1 32))) (select input.dst.llvm-mem ?x846))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x846 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x846 (_ bv2 32))) ?x362))))
 (let ((?x1172 (select input.dst.llvm-mem smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0)))
 (let ((?x263 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv1 32)))))
 (let ((?x1131 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv2 32)))))
 (let ((?x1157 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 (_ bv3 32)))))
 (let ((?x1207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1000 (concat ?x1207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x720 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x1171 (concat ?x720 (concat ?x539 ?x1000))))
 (let (($x691 (axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 input.spec-%var-l-1.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 false smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x1171 (concat ?x1157 (concat ?x1131 (concat ?x263 ?x1172))) smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 ?x298 ?x777 false)))
 (let (($x981 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1134 (=> $x981 $x691)))
 (let (($x291 (= $x981 (bvuge (ite (= (_ bv0 32) ?x1171) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x786 (= false false)))
 (let (($x427 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x625 (=> $x427 $x786)))
 (let (($x1180 (= $x427 (= (ite (= (_ bv0 32) ?x1171) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x233 (and $x1180 $x625)))
 (let (($x190 (and $x233 $x291)))
 (let (($x416 (and $x190 $x1134)))
 (let ((?x953 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x476 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x953)))
 (let ((?x1221 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x476)))
 (let (($x849 (= input.spec-%var-l-1.2.0 ?x1221)))
 (let (($x65 (and $x849 $x416)))
 (let (($x1194 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x1123 (=> $x1194 $x65)))
 (let (($x627 (= $x1194 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x835 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x911 (=> $x835 $x786)))
 (let (($x1068 (= $x835 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x132 (and $x1068 $x911)))
 (let (($x708 (and $x132 $x627)))
 (let (($x148 (and $x708 $x1123)))
 (let (($x1210 (= $x148 true)))
 (let (($x399 (= $x1210 true)))
 (let ((?x270 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1099 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x734 (concat ?x325 (concat ?x1127 (concat ?x1099 ?x270)))))
 (let (($x93 (= ?x734 input.dst.llvm-%l)))
 (let (($x1019 (= $x93 true)))
 (let (($x915 (= $x1019 true)))
 (let (($x388 (= input.dst.llvm-%l ?x734)))
 (let ((?x1100 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x428 (= (_ bv0 32) ?x1100)))
 (let ((?x1330 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x635 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1330)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x525 (and $x172 $x635)))
 (let (($x1052 (and $x525 $x428)))
 (let (($x119 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x805 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x1216 (and (and (and $x805 $x119) $x1052) $x388)))
 (let ((?x729 (concat (select input.dst.llvm-mem (bvadd ?x1171 (_ bv1 32))) (select input.dst.llvm-mem ?x1171))))
 (let ((?x452 (concat (select input.dst.llvm-mem (bvadd ?x1171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x1171 (_ bv2 32))) ?x729))))
 (let (($x516 (= input.spec-%var-l-1.2.1.2.0 ?x452)))
 (let (($x725 (and $x516 true)))
 (let (($x940 (=> $x981 $x725)))
 (let (($x267 (and $x190 $x940)))
 (let (($x1032 (and $x849 $x267)))
 (let (($x982 (=> $x1194 $x1032)))
 (let (($x1051 (and $x708 $x982)))
 (let (($x151 (and $x1051 $x1216)))
 (let (($x561 (= $x151 true)))
 (let (($x363 (= $x561 true)))
 (let (($x440 (= $x363 true)))
 (let (($x1303 (and $x440 $x915)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x711 (and $x693 $x1303)))
 (let (($x795 (=> $x711 $x399)))
 (not $x795))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 #b11000000000000000000000000000000)
(= input.dst.llvm-%l #b10000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 #b00000000000000000000000000000000)
(= smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.2.1.0 #b10000000000000000000000000000000)
(= input.spec-%var-l-1.2.0 #b00000000000000000000000000000000)
(= input.spec-%var-l-1.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
(= input.spec-%var-l-1.2.1.2.0 #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%6%bbentry #b00000000000000000000000000000000)
(= axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 @fun_46)
(= input.dst.llvm-mem @fun_43)
(function @fun_46
 (type
  (FunType14 (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
   (_ BitVec 32) (_ BitVec 32) Bool Bool))
 (=
  (@fun_46 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000000
   #b00000000000000000000000000000000 #b00000000000000000000000000000000 false #b11000000000000000000000000000000 #b10000000000000000000000000000000
   #b00000000000000000000000000000000 #b11000000000000000000000000000000 #b00000000000000000000000000000000 #b00000000000000000000000000000001 false)
  false)
 (default true))
(function @fun_43
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (= (@fun_43 #b00000000000000000000000000000011) #b10000000)
 (= (@fun_43 #b10000000000000000000000000000111) #b10000000)
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((BOUND_VARIABLE_6552 (_ BitVec 32)) (BOUND_VARIABLE_6553 (_ BitVec 32)) (BOUND_VARIABLE_6554 (_ BitVec 32)) (BOUND_VARIABLE_6555 (_ BitVec 32)) (BOUND_VARIABLE_6556 (_ BitVec 32)) (BOUND_VARIABLE_6557 (_ BitVec 32)) (BOUND_VARIABLE_6558 Bool) (BOUND_VARIABLE_6559 (_ BitVec 32)) (BOUND_VARIABLE_6560 (_ BitVec 32)) (BOUND_VARIABLE_6561 (_ BitVec 32)) (BOUND_VARIABLE_6562 (_ BitVec 32)) (BOUND_VARIABLE_6563 (_ BitVec 32)) (BOUND_VARIABLE_6564 (_ BitVec 32)) (BOUND_VARIABLE_6565 Bool)) Bool false)
(define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)) (_ bv3 32) (_ bv1 8)) (_ bv16777221 32) (_ bv16 8)))
(define-fun input.dst.llvm-%l () (_ BitVec 32) (_ bv16777216 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32) (_ bv0 32))
(define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32) (_ bv67108864 32))
(define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%var-l-1.0 () (_ BitVec 32) (_ bv536870912 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3 32))
(define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-c87016e1e560205e17bdcbca8cf1faa7-0 () (_ BitVec 32)
    #xfffffffe)
  (define-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32)
    #x00000010)
  (define-fun input.spec-%var-l-1.0 () (_ BitVec 32)
    #x4f635575)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.2.1 () (_ BitVec 32)
    #x00000000)
  (define-fun smt-tree-norm-var-246ae16f29abdc253e83fd44358f23b-0.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (let ((a!1 (store (store (store ((as const (Array (_ BitVec 32) (_ BitVec 8)))
                                  #x00)
                                #x00000004
                                #x08)
                         #x00000003
                         #x62)
                  #x6200000d
                  #x08)))
(let ((a!2 (store (store (store (store a!1 #x00000003 #x62) #xffffffff #x08)
                         #xfffffffe
                         #x08)
                  #x00000005
                  #x08)))
  (store (store (store (store a!2 #x6200000e #x08) #x00000000 #x08)
                #x00000000
                #x08)
         #x6200000c
         #x08))))
  (define-fun input.spec-%var-l-1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%l () (_ BitVec 32)
    #x62000008)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun axpred-spec-indeq149.246ae16f29abdc253e83fd44358f23b.c87016e1e560205e17bdcbca8cf1faa7 ((x!0
    (_ BitVec 32))
   (x!1 (_ BitVec 32))
   (x!2 (_ BitVec 32))
   (x!3 (_ BitVec 32))
   (x!4 (_ BitVec 32))
   (x!5 (_ BitVec 32))
   (x!6 Bool)
   (x!7 (_ BitVec 32))
   (x!8 (_ BitVec 32))
   (x!9 (_ BitVec 32))
   (x!10 (_ BitVec 32))
   (x!11 (_ BitVec 32))
   (x!12 (_ BitVec 32))
   (x!13 Bool)) Bool
    (ite (and (= x!0 #x00000000)
              (= x!1 #x00000000)
              (= x!2 #x00000000)
              (= x!3 #x00000000)
              (= x!4 #x00000000)
              (= x!5 #x00000000)
              (= x!6 false)
              (= x!7 #xfffffffe)
              (= x!8 #x00080808)
              (= x!9 #x00080808)
              (= x!10 #xfffffffe)
              (= x!11 #x08086200)
              (= x!12 #x00000001)
              (= x!13 false))
      false
      false))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x687 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x529))))
 (let ((?x574 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x747 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x1085 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x1187 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x306 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x175 (concat ?x16 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x504 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x141 (concat ?x504 (concat ?x123 ?x175))))
 (let ((?x975 (bvadd ?x141 (_ bv4 32))))
 (let ((?x1339 (concat (select input.dst.llvm-mem (bvadd ?x975 (_ bv1 32))) (select input.dst.llvm-mem ?x975))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x975 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x975 (_ bv2 32))) ?x1339))))
 (let (($x247 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x97 ?x306 false (concat ?x1187 (concat ?x1085 (concat ?x747 ?x574))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x687)))
 (let ((?x674 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x1076 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x674))))
 (let (($x556 (= input.spec-%var-l-1.2.1.2.0 ?x1076)))
 (let (($x1373 (and $x556 $x247)))
 (let (($x125 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1018 (=> $x125 $x1373)))
 (let (($x916 (= $x125 (bvuge (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1075 (= false false)))
 (let (($x35 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x528 (=> $x35 $x1075)))
 (let (($x863 (= $x35 (= (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1149 (and $x863 $x528)))
 (let (($x636 (and $x1149 $x916)))
 (let (($x1333 (and $x636 $x1018)))
 (let ((?x534 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x534)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x187)))
 (let (($x1084 (= input.spec-%var-l-1.2.0 ?x362)))
 (let (($x1205 (and $x1084 $x1333)))
 (let (($x1330 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x655 (=> $x1330 $x1205)))
 (let (($x525 (= $x1330 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x940 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x439 (=> $x940 $x1075)))
 (let (($x1051 (= $x940 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x805 (and $x1051 $x439)))
 (let (($x1100 (and $x805 $x525)))
 (let (($x566 (and $x1100 $x655)))
 (let (($x1119 (= $x566 true)))
 (let (($x480 (= $x1119 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x937 (concat ?x275 (concat ?x1118 (concat ?x79 ?x26)))))
 (let (($x521 (= ?x937 input.dst.llvm-%l)))
 (let (($x819 (= $x521 true)))
 (let (($x694 (= $x819 true)))
 (let (($x321 (= input.dst.llvm-%l ?x937)))
 (let ((?x1179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x633 (= (_ bv0 32) ?x1179)))
 (let ((?x1012 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x549 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1012)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1013 (and $x238 $x549)))
 (let (($x741 (and $x1013 $x633)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x469 (and (and (and $x180 $x43) $x741) $x321)))
 (let (($x1086 (and $x566 $x469)))
 (let (($x848 (= $x1086 true)))
 (let (($x268 (= $x848 true)))
 (let (($x1223 (= $x268 true)))
 (let (($x503 (and $x1223 $x694)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x373 (and $x693 $x503)))
 (let (($x1122 (=> $x373 $x480)))
 (not $x1122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_AUFBV)
(declare-fun axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) Bool (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 () (_ BitVec 32))
(declare-fun smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.1 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x234 (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv4 32))))
 (let ((?x529 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv1 32))) (select input.dst.llvm-mem ?x234))))
 (let ((?x687 (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x234 (_ bv2 32))) ?x529))))
 (let ((?x574 (select input.dst.llvm-mem smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0)))
 (let ((?x747 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv1 32)))))
 (let ((?x1085 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv2 32)))))
 (let ((?x1187 (select input.dst.llvm-mem (bvadd smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 (_ bv3 32)))))
 (let ((?x306 (ite (= (_ bv0 32) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0) (_ bv0 32) (_ bv1 32))))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x175 (concat ?x16 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x504 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x141 (concat ?x504 (concat ?x123 ?x175))))
 (let ((?x975 (bvadd ?x141 (_ bv4 32))))
 (let ((?x1339 (concat (select input.dst.llvm-mem (bvadd ?x975 (_ bv1 32))) (select input.dst.llvm-mem ?x975))))
 (let ((?x97 (concat (select input.dst.llvm-mem (bvadd ?x975 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x975 (_ bv2 32))) ?x1339))))
 (let (($x247 (axpred-spec-indeq144.91eae1b25334b9487b75f1d5888c4110.d651bd54c9782ee376c46d656fc483f smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 input.spec-%var-l-1.2.1.2.1 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.0 false smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0 smt-tree-norm-var-91eae1b25334b9487b75f1d5888c4110-0.2.1 smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x97 ?x306 false (concat ?x1187 (concat ?x1085 (concat ?x747 ?x574))) smt-tree-norm-var-d651bd54c9782ee376c46d656fc483f-0 ?x687)))
 (let ((?x674 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv1 32))) (select input.dst.llvm-mem ?x141))))
 (let ((?x1076 (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x141 (_ bv2 32))) ?x674))))
 (let (($x556 (= input.spec-%var-l-1.2.1.2.0 ?x1076)))
 (let (($x1373 (and $x556 $x247)))
 (let (($x125 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1018 (=> $x125 $x1373)))
 (let (($x916 (= $x125 (bvuge (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1075 (= false false)))
 (let (($x35 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x528 (=> $x35 $x1075)))
 (let (($x863 (= $x35 (= (ite (= (_ bv0 32) ?x141) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1149 (and $x863 $x528)))
 (let (($x636 (and $x1149 $x916)))
 (let (($x1333 (and $x636 $x1018)))
 (let ((?x534 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x534)))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x187)))
 (let (($x1084 (= input.spec-%var-l-1.2.0 ?x362)))
 (let (($x1205 (and $x1084 $x1333)))
 (let (($x1330 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x655 (=> $x1330 $x1205)))
 (let (($x525 (= $x1330 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x940 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x439 (=> $x940 $x1075)))
 (let (($x1051 (= $x940 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x805 (and $x1051 $x439)))
 (let (($x1100 (and $x805 $x525)))
 (let (($x566 (and $x1100 $x655)))
 (let (($x1119 (= $x566 true)))
 (let (($x480 (= $x1119 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x1118 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x937 (concat ?x275 (concat ?x1118 (concat ?x79 ?x26)))))
 (let (($x521 (= ?x937 input.dst.llvm-%l)))
 (let (($x819 (= $x521 true)))
 (let (($x694 (= $x819 true)))
 (let (($x321 (= input.dst.llvm-%l ?x937)))
 (let ((?x1179 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x633 (= (_ bv0 32) ?x1179)))
 (let ((?x1012 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x549 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1012)))
 (let (($x238 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1013 (and $x238 $x549)))
 (let (($x741 (and $x1013 $x633)))
 (let (($x43 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x469 (and (and (and $x180 $x43) $x741) $x321)))
 (let (($x1086 (and $x566 $x469)))
 (let (($x848 (= $x1086 true)))
 (let (($x268 (= $x848 true)))
 (let (($x1223 (= $x268 true)))
 (let (($x503 (and $x1223 $x694)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x373 (and $x693 $x503)))
 (let (($x1122 (=> $x373 $x480)))
 (not $x1122))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x642 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x731 (= (_ bv0 3) ?x642)))
 (let (($x1284 (= $x731 true)))
 (let ((?x748 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x507 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x971 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x496 (concat ?x971 (concat ?x78 (concat ?x507 ?x748)))))
 (let (($x1174 (= ?x496 input.dst.llvm-%l)))
 (let (($x1213 (= $x1174 true)))
 (let (($x1381 (= $x1213 true)))
 (let (($x309 (= input.dst.llvm-%l ?x496)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1210 (= (_ bv0 32) ?x148)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x795 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x391 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1201 (and $x391 $x795)))
 (let (($x1123 (and $x1201 $x1210)))
 (let (($x764 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1195 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x656 (and (and (and $x1195 $x764) $x1123) $x309)))
 (let ((?x1221 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x427 (concat ?x1221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1097 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x614 (concat ?x1097 (concat ?x539 ?x427))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv1 32))) (select input.dst.llvm-mem ?x614))))
 (let ((?x980 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv2 32))) ?x425))))
 (let (($x1157 (= input.spec-%var-l-1.2.1.2.0 ?x980)))
 (let (($x48 (and $x1157 true)))
 (let (($x729 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1326 (=> $x729 $x48)))
 (let (($x1327 (= $x729 (bvuge (ite (= (_ bv0 32) ?x614) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x168 (= false false)))
 (let (($x775 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x1107 (=> $x775 $x168)))
 (let (($x163 (= $x775 (= (ite (= (_ bv0 32) ?x614) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x348 (and $x163 $x1107)))
 (let (($x1338 (and $x348 $x1327)))
 (let (($x1295 (and $x1338 $x1326)))
 (let ((?x741 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x741)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x275)))
 (let (($x79 (= input.spec-%var-l-1.2.0 ?x406)))
 (let (($x1172 (and $x79 $x1295)))
 (let (($x97 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x721 (=> $x97 $x1172)))
 (let (($x546 (= $x97 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x585 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x815 (=> $x585 $x168)))
 (let (($x975 (= $x585 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x45 (and $x975 $x815)))
 (let (($x306 (and $x45 $x546)))
 (let (($x40 (and $x306 $x721)))
 (let (($x860 (and $x40 $x656)))
 (let (($x188 (= $x860 true)))
 (let (($x137 (= $x188 true)))
 (let (($x157 (= $x137 true)))
 (let (($x450 (and $x157 $x1381)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x897 (and $x693 $x450)))
 (let (($x385 (=> $x897 $x1284)))
 (not $x385)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let ((?x642 ((_ extract 2 0) input.dst.llvm-%l)))
 (let (($x731 (= (_ bv0 3) ?x642)))
 (let (($x1284 (= $x731 true)))
 (let ((?x748 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x507 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x971 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x496 (concat ?x971 (concat ?x78 (concat ?x507 ?x748)))))
 (let (($x1174 (= ?x496 input.dst.llvm-%l)))
 (let (($x1213 (= $x1174 true)))
 (let (($x1381 (= $x1213 true)))
 (let (($x309 (= input.dst.llvm-%l ?x496)))
 (let ((?x148 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x1210 (= (_ bv0 32) ?x148)))
 (let ((?x68 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x795 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x68)))
 (let (($x391 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x1201 (and $x391 $x795)))
 (let (($x1123 (and $x1201 $x1210)))
 (let (($x764 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x1195 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x656 (and (and (and $x1195 $x764) $x1123) $x309)))
 (let ((?x1221 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x427 (concat ?x1221 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x539 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1097 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x614 (concat ?x1097 (concat ?x539 ?x427))))
 (let ((?x425 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv1 32))) (select input.dst.llvm-mem ?x614))))
 (let ((?x980 (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x614 (_ bv2 32))) ?x425))))
 (let (($x1157 (= input.spec-%var-l-1.2.1.2.0 ?x980)))
 (let (($x48 (and $x1157 true)))
 (let (($x729 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x1326 (=> $x729 $x48)))
 (let (($x1327 (= $x729 (bvuge (ite (= (_ bv0 32) ?x614) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x168 (= false false)))
 (let (($x775 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x1107 (=> $x775 $x168)))
 (let (($x163 (= $x775 (= (ite (= (_ bv0 32) ?x614) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x348 (and $x163 $x1107)))
 (let (($x1338 (and $x348 $x1327)))
 (let (($x1295 (and $x1338 $x1326)))
 (let ((?x741 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x275 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x741)))
 (let ((?x406 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x275)))
 (let (($x79 (= input.spec-%var-l-1.2.0 ?x406)))
 (let (($x1172 (and $x79 $x1295)))
 (let (($x97 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x721 (=> $x97 $x1172)))
 (let (($x546 (= $x97 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x585 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x815 (=> $x585 $x168)))
 (let (($x975 (= $x585 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x45 (and $x975 $x815)))
 (let (($x306 (and $x45 $x546)))
 (let (($x40 (and $x306 $x721)))
 (let (($x860 (and $x40 $x656)))
 (let (($x188 (= $x860 true)))
 (let (($x137 (= $x188 true)))
 (let (($x157 (= $x137 true)))
 (let (($x450 (and $x157 $x1381)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x897 (and $x693 $x450)))
 (let (($x385 (=> $x897 $x1284)))
 (not $x385)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x645 (= $x172 true)))
 (let (($x1303 (= $x645 true)))
 (let ((?x492 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x942 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x1127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x734 (concat ?x1127 (concat ?x942 (concat ?x1180 ?x492)))))
 (let (($x915 (= ?x734 input.dst.llvm-%l)))
 (let (($x765 (= $x915 true)))
 (let (($x561 (= $x765 true)))
 (let (($x1099 (= input.dst.llvm-%l ?x734)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x625 (= (_ bv0 32) ?x23)))
 (let ((?x1000 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x671 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1000)))
 (let (($x648 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x460 (and $x648 $x671)))
 (let (($x233 (and $x460 $x625)))
 (let (($x1328 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x781 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x1019 (and (and (and $x781 $x1328) $x233) $x1099)))
 (let ((?x1028 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1085 (concat ?x1028 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1333 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1373 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x529 (concat ?x1373 (concat ?x1333 ?x1085))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv1 32))) (select input.dst.llvm-mem ?x529))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv2 32))) ?x555))))
 (let (($x111 (= input.spec-%var-l-1.2.1.2.0 ?x190)))
 (let (($x305 (and $x111 true)))
 (let (($x558 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x151 (=> $x558 $x305)))
 (let (($x1169 (= $x558 (bvuge (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1131 (= false false)))
 (let (($x580 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x1076 (=> $x580 $x1131)))
 (let (($x331 (= $x580 (= (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x73 (and $x331 $x1076)))
 (let (($x298 (and $x73 $x1169)))
 (let (($x851 (and $x298 $x151)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x197)))
 (let ((?x700 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x187)))
 (let (($x784 (= input.spec-%var-l-1.2.0 ?x700)))
 (let (($x388 (and $x784 $x851)))
 (let (($x68 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x1216 (=> $x68 $x388)))
 (let (($x1201 (= $x68 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1326 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x790 (=> $x1326 $x1131)))
 (let (($x40 (= $x1326 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1195 (and $x40 $x790)))
 (let (($x148 (and $x1195 $x1201)))
 (let (($x777 (and $x148 $x1216)))
 (let (($x1121 (and $x777 $x1019)))
 (let (($x270 (= $x1121 true)))
 (let (($x325 (= $x270 true)))
 (let (($x1115 (= $x325 true)))
 (let (($x323 (and $x1115 $x561)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x251 (and $x693 $x323)))
 (let (($x440 (=> $x251 $x1303)))
 (not $x440)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%l () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.1.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.2.0 () (_ BitVec 32))
(declare-fun input.spec-%var-l-1.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%6%bbentry () (_ BitVec 32))
(assert
 (let (($x172 (bvule input.dst.llvm-%l (_ bv4294967294 32))))
 (let (($x645 (= $x172 true)))
 (let (($x1303 (= $x645 true)))
 (let ((?x492 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x1180 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x942 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x1127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x734 (concat ?x1127 (concat ?x942 (concat ?x1180 ?x492)))))
 (let (($x915 (= ?x734 input.dst.llvm-%l)))
 (let (($x765 (= $x915 true)))
 (let (($x561 (= $x765 true)))
 (let (($x1099 (= input.dst.llvm-%l ?x734)))
 (let ((?x23 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x625 (= (_ bv0 32) ?x23)))
 (let ((?x1000 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x671 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x1000)))
 (let (($x648 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x460 (and $x648 $x671)))
 (let (($x233 (and $x460 $x625)))
 (let (($x1328 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x781 (= (bvand input.dst.llvm-%l (_ bv4294967288 32)) input.dst.llvm-%l)))
 (let (($x1019 (and (and (and $x781 $x1328) $x233) $x1099)))
 (let ((?x1028 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv1 32)))))
 (let ((?x1085 (concat ?x1028 (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv4 32))))))
 (let ((?x1333 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv2 32)))))
 (let ((?x1373 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%l (_ bv4 32)) (_ bv3 32)))))
 (let ((?x529 (concat ?x1373 (concat ?x1333 ?x1085))))
 (let ((?x555 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv1 32))) (select input.dst.llvm-mem ?x529))))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x529 (_ bv2 32))) ?x555))))
 (let (($x111 (= input.spec-%var-l-1.2.1.2.0 ?x190)))
 (let (($x305 (and $x111 true)))
 (let (($x558 (bvuge input.spec-%var-l-1.2.1.0 (_ bv1 32))))
 (let (($x151 (=> $x558 $x305)))
 (let (($x1169 (= $x558 (bvuge (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1131 (= false false)))
 (let (($x580 (= input.spec-%var-l-1.2.1.0 (_ bv0 32))))
 (let (($x1076 (=> $x580 $x1131)))
 (let (($x331 (= $x580 (= (ite (= (_ bv0 32) ?x529) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x73 (and $x331 $x1076)))
 (let (($x298 (and $x73 $x1169)))
 (let (($x851 (and $x298 $x151)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%l))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv2 32))) ?x197)))
 (let ((?x700 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%l (_ bv3 32))) ?x187)))
 (let (($x784 (= input.spec-%var-l-1.2.0 ?x700)))
 (let (($x388 (and $x784 $x851)))
 (let (($x68 (bvuge input.spec-%var-l-1.0 (_ bv1 32))))
 (let (($x1216 (=> $x68 $x388)))
 (let (($x1201 (= $x68 (bvuge (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv1 32)))))
 (let (($x1326 (= input.spec-%var-l-1.0 (_ bv0 32))))
 (let (($x790 (=> $x1326 $x1131)))
 (let (($x40 (= $x1326 (= (ite (= (_ bv0 32) input.dst.llvm-%l) (_ bv0 32) (_ bv1 32)) (_ bv0 32)))))
 (let (($x1195 (and $x40 $x790)))
 (let (($x148 (and $x1195 $x1201)))
 (let (($x777 (and $x148 $x1216)))
 (let (($x1121 (and $x777 $x1019)))
 (let (($x270 (= $x1121 true)))
 (let (($x325 (= $x270 true)))
 (let (($x1115 (= $x325 true)))
 (let (($x323 (and $x1115 $x561)))
 (let (($x693 (= (_ bv0 32) input.spec-%tmpvar-5.L2%6%bbentry)))
 (let (($x251 (and $x693 $x323)))
 (let (($x440 (=> $x251 $x1303)))
 (not $x440)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2310274/query
